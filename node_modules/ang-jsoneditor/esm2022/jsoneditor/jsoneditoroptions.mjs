/* eslint-disable @typescript-eslint/ban-types */
export class JsonEditorOptions {
    ace;
    ajv;
    /**
     *   {function} onChange  Callback method, triggered
    on change of contents.
    Does not pass the contents itself.
    See also `onChangeJSON` and
    `onChangeText`.
     */
    onChange;
    /**
     *   // {function} onChangeJSON  Callback method, triggered
  //     in modes on change of contents,
  //     passing the changed contents
  //     as JSON.
  //     Only applicable for modes
  //     'tree', 'view', and 'form'.
     */
    onChangeJSON;
    onNodeName;
    onCreateMenu;
    onColorPicker;
    /**
    // {function} onChangeText  Callback method, triggered
    //     in modes on change of contents,
    //     passing the changed contents
    //     as stringified JSON.
     */
    onChangeText;
    /**
     *   {function} onSelectionChange Callback method,
    triggered on node selection change
    Only applicable for modes
    'tree', 'view', and 'form'
     */
    onSelectionChange;
    /**
     *     {function} onTextSelectionChange Callback method,
    triggered on text selection change
    Only applicable for modes
     */
    onTextSelectionChange;
    /**
     *   // {function} onEvent Callback method, triggered
      // when an event occurs in
      // a JSON field or value.
      // Only applicable for
      // modes 'form', 'tree' and
      // 'view'
     */
    onEvent;
    /**
     * // *   {function} onFocus  Callback method, triggered
  //  when the editor comes into focus,
  //  passing an object {type, target},
  //  Applicable for all modes
     */
    onFocus;
    // *   {function} onBlur   Callback method, triggered
    //  when the editor goes out of focus,
    //  passing an object {type, target},
    //  Applicable for all modes
    onBlur;
    /**
     *  // *   {function} onClassName Callback method, triggered
  // when a Node DOM is rendered. Function returns
  // a css class name to be set on a node.
  // Only applicable for
  // modes 'form', 'tree' and
  // 'view'
     */
    onClassName;
    onEditable;
    /**
     *   {function} onError   Callback method, triggered
    when an error occurs
     */
    onError;
    onModeChange;
    onValidate;
    onValidationError;
    enableSort;
    enableTransform;
    escapeUnicode;
    expandAll;
    sortObjectKeys;
    history;
    mode;
    modes;
    name;
    schema;
    search;
    indentation;
    templates;
    theme;
    language;
    languages;
    /**
     * Adds main menu bar - Contains format, sort, transform, search etc. functionality. True
     * by default. Applicable in all types of mode.
     */
    mainMenuBar;
    /**
     * Adds navigation bar to the menu - the navigation bar visualize the current position on
     * the tree structure as well as allows breadcrumbs navigation.
     * True by default.
     * Only applicable when mode is 'tree', 'form' or 'view'.
     */
    navigationBar;
    /**
     * Adds status bar to the bottom of the editor - the status bar shows the cursor position
     * and a count of the selected characters.
     * True by default.
     * Only applicable when mode is 'code' or 'text'.
     */
    statusBar;
    constructor() {
        this.enableSort = true;
        this.enableTransform = true;
        this.escapeUnicode = false;
        this.expandAll = false;
        this.sortObjectKeys = false;
        this.history = true;
        this.mode = 'tree';
        this.search = true;
        this.indentation = 2;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbmVkaXRvcm9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanNvbmVkaXRvci9qc29uZWRpdG9yb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpREFBaUQ7QUFlakQsTUFBTSxPQUFPLGlCQUFpQjtJQUNyQixHQUFHLENBQU07SUFDVCxHQUFHLENBQVM7SUFHbkI7Ozs7OztPQU1HO0lBQ0ksUUFBUSxDQUFhO0lBRTVCOzs7Ozs7O09BT0c7SUFDSSxZQUFZLENBQWE7SUFHekIsVUFBVSxDQUFhO0lBQ3ZCLFlBQVksQ0FBa0Q7SUFDOUQsYUFBYSxDQUFhO0lBRWpDOzs7OztPQUtHO0lBQ0ksWUFBWSxDQUE0QjtJQUcvQzs7Ozs7T0FLRztJQUNJLGlCQUFpQixDQUFhO0lBRXJDOzs7O09BSUc7SUFDSSxxQkFBcUIsQ0FBYTtJQUd6Qzs7Ozs7OztPQU9HO0lBQ0ksT0FBTyxDQUFhO0lBRTNCOzs7OztPQUtHO0lBQ0ksT0FBTyxDQUFhO0lBRTNCLHFEQUFxRDtJQUNyRCxzQ0FBc0M7SUFDdEMscUNBQXFDO0lBQ3JDLDRCQUE0QjtJQUNyQixNQUFNLENBQWE7SUFFMUI7Ozs7Ozs7T0FPRztJQUNJLFdBQVcsQ0FBcUM7SUFFaEQsVUFBVSxDQUFrRjtJQUVuRzs7O09BR0c7SUFDSSxPQUFPLENBQXVCO0lBQzlCLFlBQVksQ0FBNkQ7SUFDekUsVUFBVSxDQUE2QjtJQUN2QyxpQkFBaUIsQ0FBNkI7SUFFOUMsVUFBVSxDQUFVO0lBQ3BCLGVBQWUsQ0FBVTtJQUN6QixhQUFhLENBQVU7SUFDdkIsU0FBUyxDQUFVO0lBQ25CLGNBQWMsQ0FBVTtJQUN4QixPQUFPLENBQVU7SUFDakIsSUFBSSxDQUFpQjtJQUNyQixLQUFLLENBQW1CO0lBQ3hCLElBQUksQ0FBUztJQUNiLE1BQU0sQ0FBUztJQUNmLE1BQU0sQ0FBVTtJQUNoQixXQUFXLENBQVM7SUFDcEIsU0FBUyxDQUFTO0lBQ2xCLEtBQUssQ0FBUztJQUNkLFFBQVEsQ0FBUztJQUNqQixTQUFTLENBQVM7SUFFekI7OztPQUdHO0lBQ0ksV0FBVyxDQUFVO0lBRTVCOzs7OztPQUtHO0lBQ0ksYUFBYSxDQUFVO0lBRTlCOzs7OztPQUtHO0lBQ0ksU0FBUyxDQUFVO0lBRTFCO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlcyAqL1xuXG5leHBvcnQgdHlwZSBKc29uRWRpdG9yTW9kZSA9ICd0cmVlJyB8ICd2aWV3JyB8ICdmb3JtJyB8ICdjb2RlJyB8ICd0ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBKc29uRWRpdG9yVHJlZU5vZGUge1xuICBmaWVsZDogU3RyaW5nLFxuICB2YWx1ZTogU3RyaW5nLFxuICBwYXRoOiBTdHJpbmdbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFcnJvciB7XG4gIHBhdGg6IChzdHJpbmcgfCBudW1iZXIpW107XG4gIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEpzb25FZGl0b3JPcHRpb25zIHtcbiAgcHVibGljIGFjZTogYW55O1xuICBwdWJsaWMgYWp2OiBPYmplY3Q7XG5cblxuICAvKipcbiAgICogICB7ZnVuY3Rpb259IG9uQ2hhbmdlICBDYWxsYmFjayBtZXRob2QsIHRyaWdnZXJlZFxuICBvbiBjaGFuZ2Ugb2YgY29udGVudHMuXG4gIERvZXMgbm90IHBhc3MgdGhlIGNvbnRlbnRzIGl0c2VsZi5cbiAgU2VlIGFsc28gYG9uQ2hhbmdlSlNPTmAgYW5kXG4gIGBvbkNoYW5nZVRleHRgLlxuICAgKi9cbiAgcHVibGljIG9uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiAgIC8vIHtmdW5jdGlvbn0gb25DaGFuZ2VKU09OICBDYWxsYmFjayBtZXRob2QsIHRyaWdnZXJlZFxuLy8gICAgIGluIG1vZGVzIG9uIGNoYW5nZSBvZiBjb250ZW50cyxcbi8vICAgICBwYXNzaW5nIHRoZSBjaGFuZ2VkIGNvbnRlbnRzXG4vLyAgICAgYXMgSlNPTi5cbi8vICAgICBPbmx5IGFwcGxpY2FibGUgZm9yIG1vZGVzXG4vLyAgICAgJ3RyZWUnLCAndmlldycsIGFuZCAnZm9ybScuXG4gICAqL1xuICBwdWJsaWMgb25DaGFuZ2VKU09OOiAoKSA9PiB2b2lkO1xuXG5cbiAgcHVibGljIG9uTm9kZU5hbWU6ICgpID0+IHZvaWQ7XG4gIHB1YmxpYyBvbkNyZWF0ZU1lbnU6IChpdGVtczogQXJyYXk8YW55Piwgbm9kZTogb2JqZWN0KSA9PiBBcnJheTxhbnk+O1xuICBwdWJsaWMgb25Db2xvclBpY2tlcjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgLy8ge2Z1bmN0aW9ufSBvbkNoYW5nZVRleHQgIENhbGxiYWNrIG1ldGhvZCwgdHJpZ2dlcmVkXG4gIC8vICAgICBpbiBtb2RlcyBvbiBjaGFuZ2Ugb2YgY29udGVudHMsXG4gIC8vICAgICBwYXNzaW5nIHRoZSBjaGFuZ2VkIGNvbnRlbnRzXG4gIC8vICAgICBhcyBzdHJpbmdpZmllZCBKU09OLlxuICAgKi9cbiAgcHVibGljIG9uQ2hhbmdlVGV4dDogKGpzb25zdHI6IHN0cmluZykgPT4gdm9pZDtcblxuXG4gIC8qKlxuICAgKiAgIHtmdW5jdGlvbn0gb25TZWxlY3Rpb25DaGFuZ2UgQ2FsbGJhY2sgbWV0aG9kLFxuICB0cmlnZ2VyZWQgb24gbm9kZSBzZWxlY3Rpb24gY2hhbmdlXG4gIE9ubHkgYXBwbGljYWJsZSBmb3IgbW9kZXNcbiAgJ3RyZWUnLCAndmlldycsIGFuZCAnZm9ybSdcbiAgICovXG4gIHB1YmxpYyBvblNlbGVjdGlvbkNoYW5nZTogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogICAgIHtmdW5jdGlvbn0gb25UZXh0U2VsZWN0aW9uQ2hhbmdlIENhbGxiYWNrIG1ldGhvZCxcbiAgdHJpZ2dlcmVkIG9uIHRleHQgc2VsZWN0aW9uIGNoYW5nZVxuICBPbmx5IGFwcGxpY2FibGUgZm9yIG1vZGVzXG4gICAqL1xuICBwdWJsaWMgb25UZXh0U2VsZWN0aW9uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG5cbiAgLyoqXG4gICAqICAgLy8ge2Z1bmN0aW9ufSBvbkV2ZW50IENhbGxiYWNrIG1ldGhvZCwgdHJpZ2dlcmVkXG4gICAgLy8gd2hlbiBhbiBldmVudCBvY2N1cnMgaW5cbiAgICAvLyBhIEpTT04gZmllbGQgb3IgdmFsdWUuXG4gICAgLy8gT25seSBhcHBsaWNhYmxlIGZvclxuICAgIC8vIG1vZGVzICdmb3JtJywgJ3RyZWUnIGFuZFxuICAgIC8vICd2aWV3J1xuICAgKi9cbiAgcHVibGljIG9uRXZlbnQ6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIC8vICogICB7ZnVuY3Rpb259IG9uRm9jdXMgIENhbGxiYWNrIG1ldGhvZCwgdHJpZ2dlcmVkXG4vLyAgd2hlbiB0aGUgZWRpdG9yIGNvbWVzIGludG8gZm9jdXMsXG4vLyAgcGFzc2luZyBhbiBvYmplY3Qge3R5cGUsIHRhcmdldH0sXG4vLyAgQXBwbGljYWJsZSBmb3IgYWxsIG1vZGVzXG4gICAqL1xuICBwdWJsaWMgb25Gb2N1czogKCkgPT4gdm9pZDtcblxuICAvLyAqICAge2Z1bmN0aW9ufSBvbkJsdXIgICBDYWxsYmFjayBtZXRob2QsIHRyaWdnZXJlZFxuICAvLyAgd2hlbiB0aGUgZWRpdG9yIGdvZXMgb3V0IG9mIGZvY3VzLFxuICAvLyAgcGFzc2luZyBhbiBvYmplY3Qge3R5cGUsIHRhcmdldH0sXG4gIC8vICBBcHBsaWNhYmxlIGZvciBhbGwgbW9kZXNcbiAgcHVibGljIG9uQmx1cjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogIC8vICogICB7ZnVuY3Rpb259IG9uQ2xhc3NOYW1lIENhbGxiYWNrIG1ldGhvZCwgdHJpZ2dlcmVkXG4vLyB3aGVuIGEgTm9kZSBET00gaXMgcmVuZGVyZWQuIEZ1bmN0aW9uIHJldHVybnNcbi8vIGEgY3NzIGNsYXNzIG5hbWUgdG8gYmUgc2V0IG9uIGEgbm9kZS5cbi8vIE9ubHkgYXBwbGljYWJsZSBmb3Jcbi8vIG1vZGVzICdmb3JtJywgJ3RyZWUnIGFuZFxuLy8gJ3ZpZXcnXG4gICAqL1xuICBwdWJsaWMgb25DbGFzc05hbWU6IChub2RlOiBKc29uRWRpdG9yVHJlZU5vZGUpID0+IHZvaWQ7XG5cbiAgcHVibGljIG9uRWRpdGFibGU6IChub2RlOiBKc29uRWRpdG9yVHJlZU5vZGUgfCB7fSkgPT4gYm9vbGVhbiB8IHsgZmllbGQ6IGJvb2xlYW4sIHZhbHVlOiBib29sZWFuIH07XG5cbiAgLyoqXG4gICAqICAge2Z1bmN0aW9ufSBvbkVycm9yICAgQ2FsbGJhY2sgbWV0aG9kLCB0cmlnZ2VyZWRcbiAgd2hlbiBhbiBlcnJvciBvY2N1cnNcbiAgICovXG4gIHB1YmxpYyBvbkVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZDtcbiAgcHVibGljIG9uTW9kZUNoYW5nZTogKG5ld01vZGU6IEpzb25FZGl0b3JNb2RlLCBvbGRNb2RlOiBKc29uRWRpdG9yTW9kZSkgPT4gdm9pZDtcbiAgcHVibGljIG9uVmFsaWRhdGU6IChqc29uOiBPYmplY3QpID0+IElFcnJvcltdO1xuICBwdWJsaWMgb25WYWxpZGF0aW9uRXJyb3I6IChlcnJvcnM6IG9iamVjdFtdKSA9PiB2b2lkO1xuXG4gIHB1YmxpYyBlbmFibGVTb3J0OiBib29sZWFuO1xuICBwdWJsaWMgZW5hYmxlVHJhbnNmb3JtOiBib29sZWFuO1xuICBwdWJsaWMgZXNjYXBlVW5pY29kZTogYm9vbGVhbjtcbiAgcHVibGljIGV4cGFuZEFsbDogYm9vbGVhbjtcbiAgcHVibGljIHNvcnRPYmplY3RLZXlzOiBib29sZWFuO1xuICBwdWJsaWMgaGlzdG9yeTogYm9vbGVhbjtcbiAgcHVibGljIG1vZGU6IEpzb25FZGl0b3JNb2RlO1xuICBwdWJsaWMgbW9kZXM6IEpzb25FZGl0b3JNb2RlW107XG4gIHB1YmxpYyBuYW1lOiBTdHJpbmc7XG4gIHB1YmxpYyBzY2hlbWE6IE9iamVjdDtcbiAgcHVibGljIHNlYXJjaDogYm9vbGVhbjtcbiAgcHVibGljIGluZGVudGF0aW9uOiBOdW1iZXI7XG4gIHB1YmxpYyB0ZW1wbGF0ZXM6IE9iamVjdDtcbiAgcHVibGljIHRoZW1lOiBOdW1iZXI7XG4gIHB1YmxpYyBsYW5ndWFnZTogU3RyaW5nO1xuICBwdWJsaWMgbGFuZ3VhZ2VzOiBPYmplY3Q7XG5cbiAgLyoqXG4gICAqIEFkZHMgbWFpbiBtZW51IGJhciAtIENvbnRhaW5zIGZvcm1hdCwgc29ydCwgdHJhbnNmb3JtLCBzZWFyY2ggZXRjLiBmdW5jdGlvbmFsaXR5LiBUcnVlXG4gICAqIGJ5IGRlZmF1bHQuIEFwcGxpY2FibGUgaW4gYWxsIHR5cGVzIG9mIG1vZGUuXG4gICAqL1xuICBwdWJsaWMgbWFpbk1lbnVCYXI6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFkZHMgbmF2aWdhdGlvbiBiYXIgdG8gdGhlIG1lbnUgLSB0aGUgbmF2aWdhdGlvbiBiYXIgdmlzdWFsaXplIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uXG4gICAqIHRoZSB0cmVlIHN0cnVjdHVyZSBhcyB3ZWxsIGFzIGFsbG93cyBicmVhZGNydW1icyBuYXZpZ2F0aW9uLlxuICAgKiBUcnVlIGJ5IGRlZmF1bHQuXG4gICAqIE9ubHkgYXBwbGljYWJsZSB3aGVuIG1vZGUgaXMgJ3RyZWUnLCAnZm9ybScgb3IgJ3ZpZXcnLlxuICAgKi9cbiAgcHVibGljIG5hdmlnYXRpb25CYXI6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFkZHMgc3RhdHVzIGJhciB0byB0aGUgYm90dG9tIG9mIHRoZSBlZGl0b3IgLSB0aGUgc3RhdHVzIGJhciBzaG93cyB0aGUgY3Vyc29yIHBvc2l0aW9uXG4gICAqIGFuZCBhIGNvdW50IG9mIHRoZSBzZWxlY3RlZCBjaGFyYWN0ZXJzLlxuICAgKiBUcnVlIGJ5IGRlZmF1bHQuXG4gICAqIE9ubHkgYXBwbGljYWJsZSB3aGVuIG1vZGUgaXMgJ2NvZGUnIG9yICd0ZXh0Jy5cbiAgICovXG4gIHB1YmxpYyBzdGF0dXNCYXI6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lbmFibGVTb3J0ID0gdHJ1ZTtcbiAgICB0aGlzLmVuYWJsZVRyYW5zZm9ybSA9IHRydWU7XG4gICAgdGhpcy5lc2NhcGVVbmljb2RlID0gZmFsc2U7XG4gICAgdGhpcy5leHBhbmRBbGwgPSBmYWxzZTtcbiAgICB0aGlzLnNvcnRPYmplY3RLZXlzID0gZmFsc2U7XG4gICAgdGhpcy5oaXN0b3J5ID0gdHJ1ZTtcbiAgICB0aGlzLm1vZGUgPSAndHJlZSc7XG4gICAgdGhpcy5zZWFyY2ggPSB0cnVlO1xuICAgIHRoaXMuaW5kZW50YXRpb24gPSAyO1xuICB9XG59XG4iXX0=