#!/usr/bin/env node 
'use strict';

const commander = require('commander');
const index = require('./index.cjs');
const pump = require('pump');
require('pino-abstract-transport');
require('node:util');
require('got');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const pump__default = /*#__PURE__*/_interopDefaultCompat(pump);

const name = "pino-loki";
const version = "2.1.3";
const type = "commonjs";
const description = "A transport for pino that sends messages to Loki";
const keywords = [
	"pino",
	"pino-transport",
	"loki",
	"logging"
];
const homepage = "https://github.com/Julien-R44/pino-loki#readme";
const bugs = {
	url: "https://github.com/Julien-R44/pino-loki/issues"
};
const packageManager = "pnpm@8.5.1";
const license = "MIT";
const author = "Julien Ripouteau <julien@ripouteau.com>";
const repository = {
	type: "git",
	url: "git+https://github.com/Julien-R44/pino-loki.git"
};
const bin = {
	"pino-loki": "dist/cli.cjs"
};
const funding = "https://github.com/sponsors/Julien-R44";
const main$1 = "./dist/index.cjs";
const module$1 = "./dist/index.mjs";
const types = "./dist/index.d.ts";
const exports$1 = {
	".": {
		require: "./dist/index.cjs",
		"import": "./dist/index.mjs",
		types: "./dist/index.d.ts"
	}
};
const typesVersions = {
	"*": {
		"*": [
			"./dist/*",
			"./dist/index.d.ts"
		]
	}
};
const files = [
	"dist"
];
const scripts = {
	build: "rimraf dist && unbuild",
	dev: "unbuild --stub",
	lint: "eslint . --ext=.ts",
	format: "prettier --write .",
	prepublishOnly: "pnpm build",
	release: "bumpp --commit --push --tag && pnpm publish",
	stub: "unbuild --stub",
	"quick:test": "node -r ts-node/register bin/test.ts",
	test: "c8 node -r ts-node/register bin/test.ts",
	typecheck: "tsc --noEmit"
};
const devDependencies = {
	"@japa/assert": "^1.4.1",
	"@japa/runner": "^2.5.1",
	"@japa/spec-reporter": "^1.3.3",
	"@julr/prettier-config": "1.0.0-beta.2",
	"@types/node": "^20.2.1",
	"@types/pump": "^1.1.1",
	bumpp: "^9.1.0",
	c8: "^7.13.0",
	dotenv: "^16.0.3",
	eslint: "^8.41.0",
	"eslint-config-prettier": "^8.8.0",
	"eslint-plugin-adonis": "^2.1.1",
	"eslint-plugin-prettier": "^4.2.1",
	nock: "^13.3.1",
	pino: "^8.14.1",
	"pino-pretty": "^10.0.0",
	pnpm: "^8.5.1",
	prettier: "^2.8.8",
	rimraf: "^5.0.1",
	"ts-node": "^10.9.1",
	typescript: "^5.0.4",
	unbuild: "^1.2.1"
};
const eslintConfig = {
	"extends": [
		"plugin:adonis/typescriptPackage",
		"prettier"
	],
	plugins: [
		"prettier"
	],
	rules: {
		"prettier/prettier": [
			"error",
			{
				endOfLine: "auto"
			}
		]
	}
};
const eslintIgnore = [
	"build",
	"dist"
];
const prettier = "@julr/prettier-config";
const dependencies = {
	commander: "^10.0.1",
	got: "^11.8.6",
	"pino-abstract-transport": "^1.0.0",
	pump: "^3.0.0"
};
const pkg = {
	name: name,
	version: version,
	type: type,
	description: description,
	keywords: keywords,
	homepage: homepage,
	bugs: bugs,
	packageManager: packageManager,
	license: license,
	author: author,
	repository: repository,
	bin: bin,
	funding: funding,
	main: main$1,
	module: module$1,
	types: types,
	exports: exports$1,
	typesVersions: typesVersions,
	files: files,
	scripts: scripts,
	devDependencies: devDependencies,
	eslintConfig: eslintConfig,
	eslintIgnore: eslintIgnore,
	prettier: prettier,
	dependencies: dependencies
};

const parseArgs = () => {
  commander.program.version(pkg.version).option("-u, --user <user>", "Loki username").option("-p, --password <password>", "Loki password").option("--hostname <hostname>", "URL for Loki").option("-b, --batch", "Should logs be sent in batch mode").option("-i, --interval <interval>", "The interval at which batched logs are sent in seconds").option("-t, --timeout <timeout>", "Timeout for request to Loki").option("-s, --silenceErrors", "If false, errors will be displayed in the console").option("-r, --replaceTimestamp", "Replace pino logs timestamps with Date.now()").option("-l, --labels <label>", "Additional labels to be added to all Loki logs").option(
    "-pl, --propsLabels <labels>",
    "Fields in log line to convert to Loki labels (comma separated values)"
  ).option("--no-stdout", "Disable output to stdout");
  commander.program.parse(process.argv);
  return commander.program.opts();
};
const createPinoLokiConfigFromArgs = () => {
  const opts = parseArgs();
  const config = {
    host: opts.hostname,
    timeout: opts.timeout,
    silenceErrors: opts.silenceErrors,
    batching: opts.batch,
    interval: opts.interval,
    replaceTimestamp: opts.replaceTimestamp,
    labels: opts.labels ? JSON.parse(opts.labels) : void 0,
    propsToLabels: opts.propsLabels ? opts.propsLabels.split(",") : []
  };
  if (opts.user && opts.password) {
    config.basicAuth = { username: opts.user, password: opts.password };
  }
  return config;
};
function main() {
  const config = createPinoLokiConfigFromArgs();
  const pinoLoki = index(config);
  pump__default(process.stdin, pinoLoki);
}
main();

exports.createPinoLokiConfigFromArgs = createPinoLokiConfigFromArgs;
exports.parseArgs = parseArgs;
