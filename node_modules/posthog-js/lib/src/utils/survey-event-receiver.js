var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { SURVEYS_ACTIVATED } from '../constants';
var SurveyEventReceiver = /** @class */ (function () {
    function SurveyEventReceiver(persistence) {
        this.persistence = persistence;
        this.eventRegistry = new Map();
    }
    SurveyEventReceiver.prototype.register = function (surveys) {
        var _this = this;
        surveys.forEach(function (survey) {
            var _a, _b, _c, _d, _e;
            if (((_a = survey.conditions) === null || _a === void 0 ? void 0 : _a.events) &&
                ((_c = (_b = survey.conditions) === null || _b === void 0 ? void 0 : _b.events) === null || _c === void 0 ? void 0 : _c.values) &&
                ((_d = survey.conditions) === null || _d === void 0 ? void 0 : _d.events.values.length) > 0) {
                _this.eventRegistry.set(survey.id, (_e = survey.conditions) === null || _e === void 0 ? void 0 : _e.events.values.map(function (e) { return e.name; }));
            }
        });
    };
    SurveyEventReceiver.prototype.on = function (event) {
        var _a;
        var activatedSurveys = [];
        this.eventRegistry.forEach(function (events, surveyID) {
            if (events.includes(event)) {
                activatedSurveys.push(surveyID);
            }
        });
        var existingActivatedSurveys = (_a = this.persistence) === null || _a === void 0 ? void 0 : _a.props[SURVEYS_ACTIVATED];
        var existingSurveys = existingActivatedSurveys ? existingActivatedSurveys : [];
        var updatedSurveys = existingSurveys.concat(activatedSurveys);
        this._saveSurveysToStorage(updatedSurveys);
    };
    SurveyEventReceiver.prototype.getSurveys = function () {
        var _a;
        var existingActivatedSurveys = (_a = this.persistence) === null || _a === void 0 ? void 0 : _a.props[SURVEYS_ACTIVATED];
        return existingActivatedSurveys ? existingActivatedSurveys : [];
    };
    SurveyEventReceiver.prototype.getEventRegistry = function () {
        return this.eventRegistry;
    };
    SurveyEventReceiver.prototype._saveSurveysToStorage = function (surveys) {
        var _a;
        var _b;
        // we use a new Set here to remove duplicates.
        (_b = this.persistence) === null || _b === void 0 ? void 0 : _b.register((_a = {},
            _a[SURVEYS_ACTIVATED] = __spreadArray([], __read(new Set(surveys)), false),
            _a));
    };
    return SurveyEventReceiver;
}());
export { SurveyEventReceiver };
//# sourceMappingURL=survey-event-receiver.js.map