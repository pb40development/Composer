{"version":3,"file":"survey-event-receiver.js","sourceRoot":"","sources":["../../../src/utils/survey-event-receiver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAA;AAEhD;IAII,6BAAY,WAAgC;QACxC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAoB,CAAA;IACpD,CAAC;IAED,sCAAQ,GAAR,UAAS,OAAiB;QAA1B,iBAaC;QAZG,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;;YACnB,IACI,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,MAAM;iBACzB,MAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,MAAM,0CAAE,MAAM,CAAA;gBACjC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,MAAM,CAAC,MAAM,CAAC,MAAM,IAAG,CAAC,EAC7C;gBACE,KAAI,CAAC,aAAa,CAAC,GAAG,CAClB,MAAM,CAAC,EAAE,EACT,MAAA,MAAM,CAAC,UAAU,0CAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CACtD,CAAA;aACJ;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED,gCAAE,GAAF,UAAG,KAAa;;QACZ,IAAM,gBAAgB,GAAa,EAAE,CAAA;QAErC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,QAAQ;YACxC,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACxB,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;aAClC;QACL,CAAC,CAAC,CAAA;QAEF,IAAM,wBAAwB,GAAG,MAAA,IAAI,CAAC,WAAW,0CAAE,KAAK,CAAC,iBAAiB,CAAC,CAAA;QAC3E,IAAM,eAAe,GAAa,wBAAwB,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAA;QAC1F,IAAM,cAAc,GAAG,eAAe,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;QAC/D,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAA;IAC9C,CAAC;IAED,wCAAU,GAAV;;QACI,IAAM,wBAAwB,GAAG,MAAA,IAAI,CAAC,WAAW,0CAAE,KAAK,CAAC,iBAAiB,CAAC,CAAA;QAC3E,OAAO,wBAAwB,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAA;IACnE,CAAC;IAED,8CAAgB,GAAhB;QACI,OAAO,IAAI,CAAC,aAAa,CAAA;IAC7B,CAAC;IAEO,mDAAqB,GAA7B,UAA8B,OAAiB;;;QAC3C,8CAA8C;QAC9C,MAAA,IAAI,CAAC,WAAW,0CAAE,QAAQ;YACtB,GAAC,iBAAiB,6BAAO,IAAI,GAAG,CAAC,OAAO,CAAC,SAAC;gBAC5C,CAAA;IACN,CAAC;IACL,0BAAC;AAAD,CAAC,AAtDD,IAsDC","sourcesContent":["import { Survey } from '../posthog-surveys-types'\nimport { PostHogPersistence } from '../posthog-persistence'\nimport { SURVEYS_ACTIVATED } from '../constants'\n\nexport class SurveyEventReceiver {\n    private readonly eventRegistry: Map<string, string[]>\n    private readonly persistence?: PostHogPersistence\n\n    constructor(persistence?: PostHogPersistence) {\n        this.persistence = persistence\n        this.eventRegistry = new Map<string, string[]>()\n    }\n\n    register(surveys: Survey[]): void {\n        surveys.forEach((survey) => {\n            if (\n                survey.conditions?.events &&\n                survey.conditions?.events?.values &&\n                survey.conditions?.events.values.length > 0\n            ) {\n                this.eventRegistry.set(\n                    survey.id,\n                    survey.conditions?.events.values.map((e) => e.name)\n                )\n            }\n        })\n    }\n\n    on(event: string): void {\n        const activatedSurveys: string[] = []\n\n        this.eventRegistry.forEach((events, surveyID) => {\n            if (events.includes(event)) {\n                activatedSurveys.push(surveyID)\n            }\n        })\n\n        const existingActivatedSurveys = this.persistence?.props[SURVEYS_ACTIVATED]\n        const existingSurveys: string[] = existingActivatedSurveys ? existingActivatedSurveys : []\n        const updatedSurveys = existingSurveys.concat(activatedSurveys)\n        this._saveSurveysToStorage(updatedSurveys)\n    }\n\n    getSurveys(): string[] {\n        const existingActivatedSurveys = this.persistence?.props[SURVEYS_ACTIVATED]\n        return existingActivatedSurveys ? existingActivatedSurveys : []\n    }\n\n    getEventRegistry(): Map<string, string[]> {\n        return this.eventRegistry\n    }\n\n    private _saveSurveysToStorage(surveys: string[]): void {\n        // we use a new Set here to remove duplicates.\n        this.persistence?.register({\n            [SURVEYS_ACTIVATED]: [...new Set(surveys)],\n        })\n    }\n}\n"]}