// DOM element manipulation functions...
//
function setValue(el, value) {
    if (isInputOrTextAreaElement(el)) {
        el.value = value;
    }
    else {
        el.textContent = value;
    }
}
export function getValue(el) {
    return isInputOrTextAreaElement(el) ? el.value : el.textContent;
}
export function insertValue(el, start, end, insertHTML, text, iframe, noRecursion) {
    if (noRecursion === void 0) { noRecursion = false; }
    if (isTextElement(el)) {
        var val = getValue(el);
        setValue(el, val.substring(0, start) + text + val.substring(end, val.length));
        setCaretPosition(el, start + text.length, iframe);
    }
    else if (!noRecursion) {
        var selObj = getWindowSelection(iframe);
        //console.log(selObj);
        if (selObj && selObj.rangeCount > 0) {
            // var selRange = selObj.getRangeAt(0);
            // var position = selRange.startOffset;
            // var anchorNode = selObj.anchorNode;
            // if (text.endsWith(' ')) {
            //   text = text.substring(0, text.length-1) + '\xA0';
            // }
            // insertValue(<HTMLInputElement>anchorNode, position - (end - start), position, text, iframe, true);
            if (insertHTML) {
                insertElement(selObj, start, end, text, iframe);
            }
            else {
                var selRange = selObj.getRangeAt(0);
                var position = selRange.startOffset;
                var anchorNode = selObj.anchorNode;
                // if (text.endsWith(' ')) {
                //   text = text.substring(0, text.length-1) + '\xA0';
                // }
                insertValue(anchorNode, position - (end - start), position, insertHTML, text, iframe, true);
            }
        }
    }
}
function makeAngularElements(el) {
    if (!(el instanceof HTMLElement)) {
        return;
    }
    el.setAttribute("_ngcontent-c0", '');
    for (var i in el.children) {
        makeAngularElements(el.children[i]);
    }
}
function insertElement(selObj, start, end, text, iframe) {
    //console.log(start, end);
    if (!(text instanceof HTMLElement)) {
        var e = getDocument(iframe).createElement("span");
        e.innerHTML = text;
        text = e;
    }
    //make the element an angular element
    makeAngularElements(text);
    var anchorNode = selObj.anchorNode;
    //var anchorNode = selObj.anchorNode.previousSibling;
    //debugger;
    //console.log(selObj);
    //console.log(anchorNode);
    //console.log(anchorNode.nodeValue);
    //Get the text that preceeded and followed what was typed as part of the autocomplete
    var beforeString = '';
    var afterString = '';
    var isEnterKey = false;
    if (anchorNode.hasChildNodes() && anchorNode.firstChild.parentElement.innerHTML == '<br>') {
        isEnterKey = true;
        var contentHTML = anchorNode.parentElement.innerHTML;
        //var qtyLineBreaks = contentHTML.substring(0, ) .split('')
        var contentToReplace = anchorNode.parentElement.innerText.substring(start, end);
        contentToReplace = contentToReplace.replace('\n', '');
        if (contentToReplace.indexOf('@') == -1) {
            contentToReplace = '@' + contentToReplace;
        }
        if (text.innerHTML.indexOf('@') == -1) {
            text.innerHTML = '&#64;' + text.innerHTML;
        }
        contentHTML = contentHTML.replace(contentToReplace, text.innerHTML);
        anchorNode.parentElement.innerHTML = contentHTML;
    }
    else {
        if (anchorNode.nodeValue) {
            //console.log(anchorNode);
            beforeString = anchorNode.nodeValue.substr(0, start);
            afterString = anchorNode.nodeValue.substring(end);
        }
        else if (anchorNode.textContent) {
            beforeString = anchorNode.textContent.substr(0, start);
            afterString = anchorNode.textContent.substring(end);
        }
        else {
            beforeString = '';
            afterString = text.innerText.substring(end);
        }
        //console.log("beforeString:",beforeString);
        //console.log("afterString:",afterString);
        //removing previous typed search string
        var positionChar = beforeString.lastIndexOf('@');
        //console.log(" positionChar:", positionChar);
        if (positionChar < 0) {
            beforeString = beforeString + '@';
            var positionChar = beforeString.lastIndexOf('@');
            //console.log(" beforeString 2:", beforeString);
        }
        beforeString = beforeString.substring(0, positionChar + 1);
        //console.log("beforeString final:",beforeString);
        //Remove the text
        if (isEnterKey) {
            //console.log(anchorNode.parentElement.innerHTML);
            anchorNode.parentElement.innerText = anchorNode.parentElement.innerText.replace('@jos', '');
            anchorNode.removeChild(anchorNode.firstChild); // .previousSibling.nodeValue = "";
            //anchorNode.previousSibling.textContent = "";
        }
        else {
            anchorNode.nodeValue = "";
            anchorNode.textContent = "";
        }
        //Create spans for the preceeding text & following text
        var beforeEl = getDocument(iframe).createElement("span");
        beforeEl.innerText = beforeString;
        var afterEl = getDocument(iframe).createElement("span");
        afterEl.innerText = afterString;
        //Insert the spans + the mention element
        //debugger;
        anchorNode.parentNode.insertBefore(afterEl, anchorNode.nextSibling);
        anchorNode.parentNode.insertBefore(text, anchorNode.nextSibling);
        anchorNode.parentNode.insertBefore(beforeEl, anchorNode.nextSibling);
        //Create a range located ater the mention
        var range = getDocument(iframe).createRange();
        range.selectNode(afterEl);
        range.setStart(afterEl, 0);
        range.setEnd(afterEl, 0);
        //Move the cursor to that spot
        range.collapse(false);
        selObj.removeAllRanges();
        selObj.addRange(range);
    }
    //var htmlNode = beforeEl.innerHTML +  text.innerHTML + afterEl.innerHTML;
    //anchorNode.parentElement.innerHTML =  htmlNode;
    //anchorNode.parentNode.insertBefore(text, anchorNode.nextSibling);
    //anchorNode.parentNode.insertBefore() .insertBefore(beforeEl, anchorNode.nextSibling);
    //return;
}
export function isInputOrTextAreaElement(el) {
    return el != null && (el.nodeName == 'INPUT' || el.nodeName == 'TEXTAREA');
}
;
export function isTextElement(el) {
    return el != null && (el.nodeName == 'INPUT' || el.nodeName == 'TEXTAREA' || el.nodeName == '#text');
}
;
export function setCaretPosition(el, pos, iframe) {
    if (iframe === void 0) { iframe = null; }
    //console.log("setCaretPosition", pos, el, iframe==null);
    if (isInputOrTextAreaElement(el) && el.selectionStart) {
        //el.focus();
        el.setSelectionRange(pos, pos);
    }
    else {
        var range = getDocument(iframe).createRange();
        range.setStart(el, pos);
        range.collapse(true);
        var sel = getWindowSelection(iframe);
        sel.removeAllRanges();
        sel.addRange(range);
    }
}
export function getCaretPosition(el, iframe) {
    if (iframe === void 0) { iframe = null; }
    //console.log("getCaretPosition", el);
    if (isInputOrTextAreaElement(el)) {
        var val = el.value;
        return val.slice(0, el.selectionStart).length;
    }
    else {
        var selObj = getWindowSelection(iframe); //window.getSelection();
        if (selObj.rangeCount > 0) {
            var selRange = selObj.getRangeAt(0);
            var preCaretRange = selRange.cloneRange();
            preCaretRange.selectNodeContents(el);
            preCaretRange.setEnd(selRange.endContainer, selRange.endOffset);
            var position = preCaretRange.toString().length;
            return position;
        }
    }
}
// Based on ment.io functions...
//
function getDocument(iframe) {
    if (!iframe) {
        return document;
    }
    else {
        return iframe.contentWindow.document;
    }
}
function getWindowSelection(iframe) {
    if (!iframe) {
        //console.log(window.getSelection());
        return window.getSelection();
    }
    else {
        return iframe.contentWindow.getSelection();
    }
}
export function getContentEditableCaretCoords(ctx) {
    var markerTextChar = '\ufeff';
    var markerId = 'sel_' + new Date().getTime() + '_' + Math.random().toString().substr(2);
    var doc = getDocument(ctx ? ctx.iframe : null);
    var sel = getWindowSelection(ctx ? ctx.iframe : null);
    var prevRange = sel.getRangeAt(0);
    // create new range and set postion using prevRange
    var range = doc.createRange();
    range.setStart(sel.anchorNode, prevRange.startOffset);
    range.setEnd(sel.anchorNode, prevRange.startOffset);
    range.collapse(false);
    // Create the marker element containing a single invisible character
    // using DOM methods and insert it at the position in the range
    var markerEl = doc.createElement('span');
    markerEl.id = markerId;
    markerEl.appendChild(doc.createTextNode(markerTextChar));
    range.insertNode(markerEl);
    sel.removeAllRanges();
    sel.addRange(prevRange);
    var coordinates = {
        left: 0,
        top: markerEl.offsetHeight
    };
    localToRelativeCoordinates(ctx, markerEl, coordinates);
    markerEl.parentNode.removeChild(markerEl);
    return coordinates;
}
function localToRelativeCoordinates(ctx, element, coordinates) {
    var obj = element;
    var iframe = ctx ? ctx.iframe : null;
    while (obj) {
        if (ctx.parent != null && ctx.parent == obj) {
            break;
        }
        coordinates.left += obj.offsetLeft + obj.clientLeft;
        coordinates.top += obj.offsetTop + obj.clientTop;
        obj = obj.offsetParent;
        if (!obj && iframe) {
            obj = iframe;
            iframe = null;
        }
    }
    obj = element;
    iframe = ctx ? ctx.iframe : null;
    while (obj !== getDocument(null).body && obj != null) {
        if (ctx.parent != null && ctx.parent == obj) {
            break;
        }
        if (obj.scrollTop && obj.scrollTop > 0) {
            coordinates.top -= obj.scrollTop;
        }
        if (obj.scrollLeft && obj.scrollLeft > 0) {
            coordinates.left -= obj.scrollLeft;
        }
        obj = obj.parentNode;
        if (!obj && iframe) {
            obj = iframe;
            iframe = null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,