/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../..";
export declare namespace Chapters {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Chapters {
    protected readonly _options: Chapters.Options;
    constructor(_options?: Chapters.Options);
    /**
     * Returns a list of your chapters for a project together and its metadata.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.chapters.getAll("project_id")
     */
    getAll(projectId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.GetChaptersResponse>;
    /**
     * Returns information about a specific chapter.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.chapters.get("project_id", "chapter_id")
     */
    get(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.ChapterResponse>;
    /**
     * Delete a chapter by its chapter_id.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.chapters.delete("project_id", "chapter_id")
     */
    delete(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<unknown>;
    /**
     * Starts conversion of a specific chapter.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.chapters.convert("project_id", "chapter_id")
     */
    convert(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<unknown>;
    /**
     * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.chapters.getAllSnapshots("project_id", "chapter_id")
     */
    getAllSnapshots(projectId: string, chapterId: string, requestOptions?: Chapters.RequestOptions): Promise<ElevenLabs.ChapterSnapshotsResponse>;
    /**
     * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.chapters.streamSnapshot("project_id", "chapter_id", "chapter_snapshot_id")
     */
    streamSnapshot(projectId: string, chapterId: string, chapterSnapshotId: string, requestOptions?: Chapters.RequestOptions): Promise<void>;
}
