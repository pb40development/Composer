/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../..";
import * as fs from "fs";
export declare namespace Voices {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Voices {
    protected readonly _options: Voices.Options;
    constructor(_options?: Voices.Options);
    /**
     * Gets a list of all available voices for a user.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.voices.getAll()
     */
    getAll(requestOptions?: Voices.RequestOptions): Promise<ElevenLabs.GetVoicesResponse>;
    /**
     * Gets the default settings for voices. "similarity_boost" corresponds to"Clarity + Similarity Enhancement" in the web app and "stability" corresponds to "Stability" slider in the web app.
     *
     * @example
     *     await elevenLabs.voices.getDefaultSettings()
     */
    getDefaultSettings(requestOptions?: Voices.RequestOptions): Promise<ElevenLabs.VoiceSettings>;
    /**
     * Returns the settings for a specific voice. "similarity_boost" corresponds to"Clarity + Similarity Enhancement" in the web app and "stability" corresponds to "Stability" slider in the web app.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.voices.getSettings("voice_id")
     */
    getSettings(voiceId: string, requestOptions?: Voices.RequestOptions): Promise<ElevenLabs.VoiceSettings>;
    /**
     * Returns metadata about a specific voice.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.voices.get("voice_id")
     */
    get(voiceId: string, request?: ElevenLabs.VoicesGetRequest, requestOptions?: Voices.RequestOptions): Promise<ElevenLabs.Voice>;
    /**
     * Deletes a voice by its ID.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.voices.delete("voice_id")
     */
    delete(voiceId: string, requestOptions?: Voices.RequestOptions): Promise<unknown>;
    /**
     * Edit your settings for a specific voice. "similarity_boost" corresponds to"Clarity + Similarity Enhancement" in the web app and "stability" corresponds to "Stability" slider in the web app.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.voices.editSettings("voice_id", {})
     */
    editSettings(voiceId: string, request: ElevenLabs.VoiceSettings, requestOptions?: Voices.RequestOptions): Promise<unknown>;
    /**
     * Add a new voice to your collection of voices in VoiceLab.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    add(files: File | fs.ReadStream, request: ElevenLabs.BodyAddVoiceV1VoicesAddPost, requestOptions?: Voices.RequestOptions): Promise<ElevenLabs.AddVoiceResponseModel>;
    /**
     * Edit a voice created by you.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    edit(files: File | fs.ReadStream | undefined, voiceId: string, request: ElevenLabs.BodyEditVoiceV1VoicesVoiceIdEditPost, requestOptions?: Voices.RequestOptions): Promise<unknown>;
    /**
     * Add a sharing voice to your collection of voices in VoiceLab.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.voices.addSharingVoice("public_user_id", "voice_id", {
     *         new_name: "new_name"
     *     })
     */
    addSharingVoice(publicUserId: string, voiceId: string, request: ElevenLabs.AddSharingVoiceRequest, requestOptions?: Voices.RequestOptions): Promise<ElevenLabs.AddVoiceResponseModel>;
    /**
     * Gets a list of shared voices.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.voices.getVoices()
     */
    getVoices(request?: ElevenLabs.VoicesGetVoicesRequest, requestOptions?: Voices.RequestOptions): Promise<ElevenLabs.GetLibraryVoicesResponse>;
}
