import { AxiosResponse } from 'axios';

interface Stats {
    sent: number;
    opens_count: number;
    unique_opens_count: number;
    open_rate: {
        float: number;
        string: string;
    };
    clicks_count: number;
    unique_clicks_count: number;
    click_rate: {
        float: number;
        string: string;
    };
    unsubscribes_count: number;
    unsubscribe_rate: {
        float: number;
        string: string;
    };
    spam_count: number;
    spam_rate: {
        float: number;
        string: string;
    };
    hard_bounces_count: number;
    hard_bounce_rate: {
        float: number;
        string: string;
    };
    soft_bounces_count: number;
    soft_bounce_rate: {
        float: number;
        string: string;
    };
}
interface Links {
    first: string;
    last: string;
    prev: string;
    next: string;
}
interface Meta$1 {
    current_page: number;
    from: number;
    last_page: number;
    links: Array<MetaLinks>;
    path: string;
    per_page: number;
    to: number;
    total: number;
}
interface MetaLinks {
    url: string;
    label: string;
    active: boolean;
}

interface SubscriberInterface {
    get: (params: GetParams$3) => Promise<AxiosResponse<ListSubscribersResponse>>;
    createOrUpdate: (params: CreateOrUpdateParams) => Promise<AxiosResponse<SingleSubscriberResponse, CreateOrUpdateParams>>;
    find: (subscriber_id: string) => Promise<AxiosResponse<SingleSubscriberResponse>>;
    getCount: () => Promise<AxiosResponse<SubscribersCountResponse>>;
    delete: (subscriber_id: string) => Promise<AxiosResponse<null>>;
    forget: (subscriber_id: string) => Promise<AxiosResponse<SubscriberForgetResponse>>;
}
interface GetParams$3 {
    filter?: {
        status: "active" | "unsubscribed" | "unconfirmed" | "bounced" | "junk";
    };
    /**
     * @default 25
     */
    limit?: number;
    /**
     * @default 1
     */
    page?: number;
    cursor?: string;
}
interface CreateOrUpdateParams {
    email: string;
    fields?: object;
    groups?: Array<string>;
    status?: "active" | "unsubscribed" | "unconfirmed" | "bounced" | "junk";
    subscribed_at?: string;
    ip_address?: string;
    opted_in_at?: string;
    optin_ip?: string;
    unsubscribed_at?: string;
}
interface SubscriberObject$2 {
    id: string;
    email: string;
    status: string;
    source: string;
    sent: number;
    opens_count: number;
    clicks_count: number;
    open_rate: number;
    click_rate: number;
    ip_address: string;
    subscribed_at: string;
    unsubscribed_at: string;
    created_at: string;
    updated_at: string;
    fields: {
        city: string;
        company: string;
        country: string;
        last_name: string;
        name: string;
        phone: string;
        state: string;
        z_i_p: string;
    };
    groups: Array<string>;
    opted_in_at: string;
    optin_ip: string;
}
interface ListSubscribersResponse {
    data: Array<SubscriberObject$2>;
    links: Links;
    meta: {
        path: string;
        per_page: number;
        next_cursor: string;
        prev_cursor: string;
    };
}
interface SingleSubscriberResponse {
    data: SubscriberObject$2;
}
interface SubscribersCountResponse {
    total: number;
}
interface SubscriberForgetResponse {
    message: string;
    data: SubscriberObject$2;
}

interface CampaignsInterface {
    get: (params: GetCampaignsParams) => Promise<AxiosResponse<ListCampaignsResponse>>;
    find: (campaign_id: string) => Promise<AxiosResponse<SingleCampaignResponse>>;
    create: (params: CreateUpdateParams$1) => Promise<AxiosResponse<SingleCampaignResponse, CreateUpdateParams$1>>;
    update: (campaign_id: string, params: CreateUpdateParams$1) => Promise<AxiosResponse<SingleCampaignResponse, CreateUpdateParams$1>>;
    schedule: (campaign_id: string, params: ScheduleParams) => Promise<AxiosResponse<SingleCampaignResponse, ScheduleParams>>;
    cancel: (campaign_id: string) => Promise<AxiosResponse<SingleCampaignResponse>>;
    delete: (campaign_id: string) => Promise<AxiosResponse<null>>;
}
interface GetCampaignsParams {
    filter?: {
        /**
         * @default "ready"
         */
        status?: "sent" | "draft" | "ready";
        /**
         * @default return all types
         */
        type?: "regular" | "ab" | "resend" | "rss";
    };
    /**
     * @default 25
     */
    limit?: number;
    /**
     * @default 1
     */
    page?: number;
}
interface ListCampaignsResponse {
    data: Array<CampaignObject>;
    links: Links;
    meta: CampaignsMeta;
}
interface SingleCampaignResponse {
    data: CampaignObject;
}
interface CreateUpdateParams$1 {
    name: string;
    language_id?: number;
    type: "regular" | "ab" | "resend";
    emails: Array<{
        subject: string;
        from_name: string;
        from: string;
        content?: string;
    }>;
    groups?: Array<string>;
    segments?: Array<string>;
    ab_settings?: {
        test_type?: "subject" | "sender";
        select_winner_by?: "o" | "c";
        after_time_amount?: number;
        after_time_unit?: "h" | "d";
        test_split?: number;
        b_value?: {
            subject?: string;
            from_name?: string;
            from?: string;
        };
    };
    resend_settings?: {
        test_type?: "subject";
        select_winner_by?: "o" | "c";
        b_value?: {
            subject?: string;
        };
    };
}
interface ScheduleParams {
    delivery?: "instant" | "scheduled" | "timezone_based";
    schedule?: {
        date?: string;
        hours?: string;
        minutes?: string;
        timezone_id?: number;
    };
    resend?: {
        delivery?: "day" | "scheduled";
        date?: string;
        hours?: string;
        minutes?: string;
        timezone_id?: number;
    };
}
interface CampaignObject {
    id: string;
    account_id: string;
    name: string;
    type: string;
    status: string;
    missing_data: Array<string>;
    settings: {
        track_opens: string;
        use_google_analytics: string;
        ecommerce_tracking: string;
    };
    filter: [
        [
            {
                operator: string;
                args: [string, Array<string>];
            }
        ]
    ];
    filter_for_humans: [Array<string>];
    delivery_schedule: string;
    language_id: string;
    created_at: string;
    updated_at: string;
    scheduled_for: string;
    queued_at: string;
    started_at: string;
    finished_at: string;
    stopped_at: string;
    default_email_id: string;
    emails: Array<Email>;
    used_in_automations: boolean;
    type_for_humans: string;
    stats: CampaignStats;
    is_stopped: boolean;
    has_winner: boolean;
    winner_version_for_human: string;
    winner_sending_time_for_humans: string;
    winner_selected_manually_at: string;
    uses_ecommerce: boolean;
    uses_survey: boolean;
    can_be_scheduled: boolean;
    warnings: Array<string>;
    initial_created_at: string;
    is_currently_sending_out: boolean;
}
interface CampaignStats extends Stats {
    forwards_count: number;
    click_to_open_rate: {
        float: number;
        string: string;
    };
}
interface Email {
    id: string;
    account_id: string;
    emailable_id: string;
    emailable_type: string;
    type: string;
    from: string;
    from_name: string;
    name: string;
    subject: string;
    plain_text: string;
    screenshot_url: string;
    preview_url: string;
    created_at: string;
    updated_at: string;
    is_designed: boolean;
    language_id: string;
    is_winner: boolean;
    stats: EmailStats;
    send_after: string;
    track_opens: boolean;
}
interface EmailStats extends Stats {
    forwards_count: number;
}
interface CampaignsMeta extends Meta$1 {
    aggregations: {
        total: number;
        draft: number;
        ready: number;
        sent: number;
    };
}

interface FormsInterface {
    get: (type: FormTypes, params: GetFormsParams) => Promise<AxiosResponse<ListFormsResponse>>;
    update: (form_id: string, params: UpdateParams$3) => Promise<AxiosResponse<SingleFormResponse, UpdateParams$3>>;
    delete: (form_id: string) => Promise<AxiosResponse<null>>;
}
type FormTypes = "popup" | "embedded" | "promotion";
interface GetFormsParams {
    limit?: number;
    page?: number;
    filter?: {
        name?: string;
    };
    sort?: "created_at" | "-created_at" | "name" | "-name" | "conversions_count" | "-conversions_count" | "opens_count" | "-opens_count" | "visitors" | "-visitors" | "conversion_rate" | "-conversion_rate" | "last_registration_at" | "-last_registration_at";
}
interface ListFormsResponse {
    data: Array<FormObject>;
    links: Links;
    meta: FormsMeta;
}
interface SingleFormResponse {
    data: FormObject;
}
interface UpdateParams$3 {
    name: string;
}
interface FormObject {
    id: string;
    type: string;
    slug: string;
    name: string;
    created_at: string;
    conversions_count: number;
    opens_count: number;
    conversion_rate: {
        float: number;
        string: string;
    };
    settings: Array<string>;
    last_registration_at: string;
    active: boolean;
    is_broken: boolean;
    has_content: boolean;
    can: {
        update: boolean;
    };
    used_in_automations: boolean;
    warnings: Array<string>;
    double_optin: string;
    screenshot_url: string;
}
interface FormsMeta extends Meta$1 {
    aggregations: {
        popup: number;
        embedded: number;
        promotion: number;
    };
}

interface GroupsInterface {
    get: (params: GetParams$2) => Promise<AxiosResponse<ListAllGroupsResponse>>;
    create: (params: CreateUpdateParams) => Promise<AxiosResponse<SingleGroupResponse, CreateUpdateParams>>;
    update: (group_id: string, params: CreateUpdateParams) => Promise<AxiosResponse<SingleGroupResponse, CreateUpdateParams>>;
    delete: (group_id: string) => Promise<AxiosResponse<null>>;
    getSubscribers: (group_id: string, params: SubscriberParams) => Promise<AxiosResponse<ListAllSubscribersResponse>>;
    assignSubscriber: (subscriber_id: string, group_id: string) => Promise<AxiosResponse<SingleGroupResponse>>;
    unAssignSubscriber: (subscriber_id: string, group_id: string) => Promise<AxiosResponse<null>>;
}
interface GetParams$2 {
    limit?: number;
    page?: number;
    filter?: {
        name?: "sent" | "draft" | "ready";
    };
    sort: "name" | "total" | "open_rate" | "click_rate" | "created_at" | "-name" | "-total" | "-open_rate" | "-click_rate" | "-created_at";
}
interface ListAllGroupsResponse {
    data: Array<GroupObject>;
    links: Links;
    meta: Meta$1;
}
interface ListAllSubscribersResponse {
    data: Array<SubscriberObject$1>;
    links: Links;
    meta: Meta$1;
}
interface SingleGroupResponse {
    data: GroupObject;
}
interface CreateUpdateParams {
    name: string;
}
interface SubscriberParams {
    filter?: {
        /**
         * @default "active"
         */
        status: "active" | "unsubscribed" | "unconfirmed" | "bounced" | "junk";
    };
    limit: number;
    page: number;
}
interface GroupObject {
    id: string;
    name: string;
    active_count: number;
    sent_count: number;
    opens_count: number;
    open_rate: {
        float: number;
        string: string;
    };
    clicks_count: number;
    click_rate: {
        float: number;
        string: string;
    };
    unsubscribed_count: number;
    unconfirmed_count: number;
    bounced_count: number;
    junk_count: number;
    created_at: string;
}
interface SubscriberObject$1 {
    id: string;
    email: string;
    status: string;
    source: string;
    sent: number;
    opens_count: number;
    clicks_count: number;
    open_rate: number;
    click_rate: number;
    ip_address: string;
    subscribed_at: string;
    unsubscribed_at: string;
    created_at: string;
    updated_at: string;
    fields: {
        city: string;
        company: string;
        country: string;
        last_name: string;
        name: string;
        phone: string;
        state: string;
        z_i_p: string;
    };
    groups: Array<string>;
    opted_in_at: string;
    optin_ip: string;
}

interface SegmentsInterface {
    get: (params: GetParams$1) => Promise<AxiosResponse<ListAllResponse$4>>;
    getSubscribers: (segment_id: string, params: GetSubscribersParams) => Promise<AxiosResponse<ListAllSubscribers>>;
    update: (segment_id: string, params: UpdateParams$2) => Promise<AxiosResponse<SingleSegmentResponse, UpdateParams$2>>;
    delete: (segment_id: string) => Promise<AxiosResponse<null>>;
}
interface GetParams$1 {
    limit?: number;
    page?: number;
}
interface GetSubscribersParams {
    filter?: {
        status: "active" | "unsubscribed" | "unconfirmed" | "bounced" | "junk";
    };
    limit?: number;
    after?: number;
}
interface ListAllResponse$4 {
    data: Array<SegmentObject>;
    links: Links;
    meta: Meta$1;
}
interface ListAllSubscribers {
    data: Array<SubscriberObject>;
    meta: {
        total: number;
        count: number;
        last: number;
    };
}
interface SingleSegmentResponse {
    data: SegmentObject;
}
interface UpdateParams$2 {
    name: string;
}
interface SegmentObject {
    id: string;
    name: string;
    total: number;
    open_rate: {
        float: number;
        string: string;
    };
    click_rate: {
        float: number;
        string: string;
    };
    created_at: string;
}
interface SubscriberObject {
    id: string;
    email: string;
    status: string;
    source: string;
    sent: number;
    opens_count: number;
    clicks_count: number;
    open_rate: number;
    click_rate: number;
    ip_address: string;
    subscribed_at: string;
    unsubscribed_at: string;
    created_at: string;
    updated_at: string;
    fields: {
        city: string;
        company: string;
        country: string;
        last_name: string;
        name: string;
        phone: string;
        state: string;
        z_i_p: string;
    };
    groups: Array<string>;
    opted_in_at: string;
    optin_ip: string;
}

interface FieldsInterface {
    get: (params: GetParams) => Promise<AxiosResponse<ListAllResponse$3>>;
    create: (params: CreateParams$1) => Promise<AxiosResponse<SingleFieldResponse, CreateParams$1>>;
    update: (field_id: string, params: UpdateParams$1) => Promise<AxiosResponse<SingleFieldResponse, UpdateParams$1>>;
    delete: (field_id: string) => Promise<AxiosResponse<null>>;
}
type FilterTypes = "text" | "number" | "date";
interface GetParams {
    limit?: number;
    page?: number;
    filter?: {
        keyword?: string;
        type?: FilterTypes;
    };
    sort?: "name" | "-name" | "type" | "-type";
}
interface ListAllResponse$3 {
    data: Array<FieldObject>;
    links: Links;
    meta: Meta$1;
}
interface SingleFieldResponse {
    data: FieldObject;
}
interface CreateParams$1 {
    name: string;
    type: string;
}
interface UpdateParams$1 {
    name: string;
}
interface FieldObject {
    id: string;
    name: string;
    key: string;
    type: string;
}

interface AutomationsInterface {
    get: (params: GetAutomationsParams) => Promise<AxiosResponse<ListAutomationsResponse>>;
    find: (automation_id: string) => Promise<AxiosResponse<SingleAutomationResponse>>;
    getAutomationSubscribers: (automation_id: string, params: AutomationSubsParams) => Promise<AxiosResponse<AutomationSubsResponse>>;
}
interface GetAutomationsParams {
    filter?: {
        enabled?: boolean;
        name?: string;
        group?: string;
    };
    /**
     * @default 10
     */
    limit?: number;
    /**
     * @default 1
     */
    page?: number;
}
interface AutomationSubsParams {
    filter: {
        status: "completed" | "active" | "canceled" | "failed";
        date_from?: Date;
        date_to?: Date;
        scheduled_from?: Date;
        scheduled_to?: Date;
        keyword?: string;
    };
    /**
     * @default 10
     */
    limit?: number;
    /**
     * @default 1
     */
    page?: number;
}
interface ListAutomationsResponse {
    data: Array<AutomationObject>;
    links: Links;
    meta: ListAutomationsResponseMeta;
}
interface AutomationSubsResponse {
    data: Array<AutomationSubObject>;
    links: Links;
    meta: Meta$1;
}
interface SingleAutomationResponse {
    data: AutomationObject;
}
interface AutomationSubObject {
    id: string;
    status: string;
    date: string;
    reason: string;
    reason_description: string;
    subscriber: {
        id: string;
        email: string;
    };
    stepRuns: Array<{
        id: string;
        step_id: string;
        description: string;
        scheduled_for: string;
    }>;
    currentStep: {
        id: string;
        type: string;
        parent_id: string;
        name: string;
        subject: string;
        from: string;
        from_name: string;
        email_id: string;
        email: Email;
    };
    language_id: number;
    complete: boolean;
    created_at: string;
    updated_at: string;
    track_opens: boolean;
    google_analytics: string;
    tracking_was_disabled: boolean;
    description: string;
}
interface AutomationObject {
    id: string;
    name: string;
    enabled: boolean;
    trigger_data: {
        track_ecommerce: boolean;
        repeatable: boolean;
        valid: boolean;
    };
    steps: Array<AutomationStep | AutomationEmailStep>;
    triggers: Array<AutomationTriggers>;
    complete: boolean;
    broken: boolean;
    warnings: Array<string>;
    emails_count?: number;
    first_email_screenshot_url?: string;
    stats: AutomationStats;
    created_at: string;
    has_banned_content: boolean;
    qualified_subscribers_count: number;
}
interface AutomationStats extends Stats {
    completed_subscribers_count: number;
    subscribers_in_queue_count: number;
    bounce_rate: {
        float: number;
        string: string;
    };
    click_to_open_rate: {
        float: number;
        string: string;
    };
}
interface AutomationStep {
    id: string;
    type: string;
    parent_id: string;
    unit: string;
    complete: boolean;
    created_at: string;
    updated_at: string;
    value: string;
    description: string;
}
interface AutomationEmailStep {
    id: string;
    type: string;
    parent_id: string;
    name: string;
    subject: string;
    from: string;
    from_name: string;
    email_id: string;
    email: Email;
    language_id: number;
    complete: boolean;
    created_at: string;
    updated_at: string;
    track_opens: boolean;
    google_analytics: string;
    tracking_was_disabled: boolean;
    description: string;
}
interface AutomationTriggers {
    id: string;
    type: string;
    group_ids: Array<string>;
    groups: Array<{
        id: string;
        name: string;
        url: string;
    }>;
    exclude_group_ids: Array<string>;
    excluded_groups: Array<string>;
    broken: boolean;
}
interface ListAutomationsResponseMeta extends Meta$1 {
    total_unfiltered: number;
}

interface TimezonesInterface {
    get: () => Promise<AxiosResponse<ListAllResponse$2>>;
}
interface ListAllResponse$2 {
    data: Array<TimezoneObject>;
}
interface TimezoneObject {
    id: string;
    name: string;
    name_for_humans: string;
    offset_name: string;
    offset: number;
}

interface LanguagesInterface {
    get: () => Promise<AxiosResponse<ListAllResponse$1>>;
}
interface ListAllResponse$1 {
    data: Array<LanguageObject>;
}
interface LanguageObject {
    id: string;
    shortcode: string;
    iso639: string;
    name: string;
    direction: string;
}

interface BatchesInterface {
    send: (params: BatchParams) => Promise<AxiosResponse<BatchResponses>>;
}
interface BatchParams {
    requests: Array<BatchRequestObject>;
}
interface BatchRequestObject {
    method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
    path: string;
    body: object;
}
interface BatchResponses {
    total: number;
    successful: number;
    failed: number;
    responses: Array<BatchResponseObject>;
}
interface BatchResponseObject {
    code: number;
    body: {
        data: Array<object>;
    };
}

interface WebhooksInterface {
    get: () => Promise<AxiosResponse<ListAllResponse>>;
    find: (webhook_id: string) => Promise<AxiosResponse<SingleWebhookResponse>>;
    create: (params: CreateParams) => Promise<AxiosResponse<SingleWebhookResponse, CreateParams>>;
    update: (webhook_id: string, params: UpdateParams) => Promise<AxiosResponse<SingleWebhookResponse, UpdateParams>>;
    delete: (webhook_id: string) => Promise<AxiosResponse<null>>;
}
interface ListAllResponse {
    data: Array<WebhookObject>;
    links: Links;
    meta: Meta$1;
}
interface SingleWebhookResponse {
    data: WebhookObject;
}
interface CreateParams {
    name?: string;
    events: Array<string>;
    url: string;
}
interface UpdateParams {
    name?: string;
    events?: Array<string>;
    url?: string;
    enabled?: boolean;
}
interface WebhookObject {
    id: string;
    name: string;
    url: string;
    events: Array<string>;
    enabled: true;
    secret: string;
    created_at: string;
    updated_at: string;
}

interface StatsInterface {
    getSentCampaigns: (params: GetCampaignsParams) => Promise<AxiosResponse<ListCampaignsResponse>>;
    getSentCampaignStats: (campaign_id: string) => Promise<CampaignStats | AxiosResponse>;
    getSentCampaignSubscribers: (campaign_id: string, requestBody: CampaignSubscribersActivityParams) => Promise<AxiosResponse<CampaignSubscribersActivityResponse>>;
    getFormsByType: (type: FormTypes, params: GetFormsParams) => Promise<AxiosResponse<ListFormsResponse>>;
    getFormsCountByType: (type: FormTypes) => Promise<number | AxiosResponse>;
    getFormSubscribers: (form_id: string, params: FormsSubscribersParams) => Promise<AxiosResponse<ListSubscribersResponse>>;
    getAutomations: (params: GetAutomationsParams) => Promise<AxiosResponse<ListAutomationsResponse>>;
    getAutomationStats: (automation_id: string) => Promise<AutomationStats | AxiosResponse>;
    getAutomationSubscribers: (automation_id: string, params: AutomationSubsParams) => Promise<AxiosResponse<AutomationSubsResponse>>;
}
interface CampaignSubscribersActivityParams {
    filter?: {
        type?: "opened" | "unopened" | "clicked" | "unsubscribed" | "forwarded" | "hardbounced" | "softbounced" | "junk";
        search?: string;
    };
    /**
     * @default "ready"
     */
    limit?: 10 | 25 | 50 | 100;
    /**
     * @default "id"
     */
    sort?: "id" | "updated_at" | "clicks_count" | "opens_count";
    page?: number;
}
interface FormsSubscribersParams {
    /**
     * @default active
     */
    filter?: {
        status?: "active" | "unsubscribed" | "unconfirmed" | "bounced" | "junk";
    };
    /**
     * @default 25
     */
    limit?: number;
    /**
     * @default 1
     */
    page?: number;
}
interface CampaignSubscribersActivityResponse {
    data: Array<ActivityObject>;
    links: Links;
    meta: Meta;
}
interface ActivityObject {
    id: string;
    opens_count: number;
    clicks_count: number;
    subscriber: SubscriberObject$2;
}
interface Meta {
    current_page: number;
    from: number;
    last_page: number;
    links: Array<object>;
    path: string;
    per_page: number;
    to: number;
    total: number;
    counts: {
        all: number;
        opened: number;
        unopened: number;
        clicked: number;
        unsubscribed: number;
        forwarded: number;
        hardbounced: number;
        softbounced: number;
        junk: number;
    };
}

declare class MailerLite {
    private config;
    subscribers: SubscriberInterface;
    campaigns: CampaignsInterface;
    forms: FormsInterface;
    groups: GroupsInterface;
    segments: SegmentsInterface;
    fields: FieldsInterface;
    automations: AutomationsInterface;
    timezones: TimezonesInterface;
    languages: LanguagesInterface;
    batches: BatchesInterface;
    webhooks: WebhooksInterface;
    stats: StatsInterface;
    constructor(params: {
        api_key: string;
        base_path?: string;
    });
}

export { MailerLite as default };
