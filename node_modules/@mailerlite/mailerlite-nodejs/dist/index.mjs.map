{"version":3,"sources":["../src/utils/helpers.ts","../src/utils/fetch.ts","../src/modules/subscribers/subscribers.module.ts","../src/modules/campaigns/campaigns.module.ts","../src/modules/forms/forms.module.ts","../src/modules/groups/groups.module.ts","../src/modules/segments/segments.module.ts","../src/modules/fields/fields.module.ts","../src/modules/automations/automations.module.ts","../src/modules/timezones/timezones.module.ts","../src/modules/languages/languages.module.ts","../src/modules/batches/batches.module.ts","../src/modules/webhooks/webhooks.module.ts","../src/modules/stats/stats.module.ts","../src/index.ts"],"sourcesContent":["import axios, {AxiosError} from \"axios\";\n\nexport function handleCatchedError(error: AxiosError | any) {\n    if (axios.isAxiosError(error))  {\n        // Access to config, request, and response\n        throw (error.response && error.response.data);\n    } else {\n        // Just a stock error\n        throw error;\n    }\n}\n\nexport function getRandomInt() {\n    const min = Math.ceil(100000);\n    const max = Math.floor(999999);\n    return Math.floor(Math.random() * (max - min + 1) + min); // The maximum is inclusive and the minimum is inclusive\n}\n\nexport function validateId (id: string): void {\n    if (!id) {\n        throw new Error(\"ID must be provided\");\n    }\n\n    if (typeof id === 'number') { // Shouldn't use toString() because Number.MAX_SAFE_INTEGER < ID\n        throw new Error(\"ID must be of type string\");\n    }\n}\n","import axios from \"axios\";\nimport { Config }  from './types.js'\n\ninterface Options {\n    headers?: object;\n    method: string;\n    body?: null | object;\n    params?: object;\n}\n\nexport default function request(endpoint: string = \"\", options: Options, config: Config) {\n\n    const {headers = {}, method, body = null, params = {}} = options\n\n    let queryString = serializeQuery(params)\n    queryString = queryString ? `?${queryString}` : ''\n\n    return axios({\n        method: method,\n        url: config.basePath + endpoint + queryString,\n        headers: {\n            ...headers,\n            \"Authorization\": `Bearer ${config.api_key}`,\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"Content-type\": \"application/json\",\n            \"accept-encoding\": \"null\" // needed for axios\n        },\n        data: body && JSON.stringify(body)\n    })\n}\n\nfunction serializeQuery(params: object, prefix?: string): string {\n\n    const queryParamsArray: string[] = Object.keys(params).map((key) => {\n        const value = params[key as keyof typeof params];\n\n        if (params.constructor === Array)\n            key = `${prefix}[]`;\n        else if (params.constructor === Object)\n            key = (prefix ? `${prefix}[${key}]` : key);\n\n        if (typeof value === 'object')\n            return serializeQuery(value, key);\n        else\n            return `${key}=${encodeURIComponent(value)}`;\n    });\n\n    return queryParamsArray.flat(10).join('&');\n}\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport type { GetParams, CreateOrUpdateParams, SubscriberInterface, ListSubscribersResponse, SingleSubscriberResponse, SubscribersCountResponse, SubscriberForgetResponse } from './subscribers.types.js';\n\nexport default class Subscriber implements SubscriberInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List Subscribers\n     *\n     * @see https://developers.mailerlite.com/docs/subscribers.html#list-all-subscribers\n     *\n     * @params {Object} - List Subscribers params\n     */\n    public get(params: GetParams): Promise<AxiosResponse<ListSubscribersResponse>> {\n        return request(`/api/subscribers`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Create or update a subscriber\n     *\n     * @see https://developers.mailerlite.com/docs/subscribers.html#create-update-subscriber\n     *\n     * @requestBody {Object} - Subscriber data for create or update\n     */\n    public createOrUpdate(requestBody: CreateOrUpdateParams): Promise<AxiosResponse<SingleSubscriberResponse, CreateOrUpdateParams>> {\n        return request(`/api/subscribers`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Fetch a subscriber by ID\n     *\n     * @see https://developers.mailerlite.com/docs/subscribers.html#fetch-a-subscriber\n     *\n     * @subscriber_id {String} - Subscriber ID\n     */\n    public find(subscriber_id: string): Promise<AxiosResponse<SingleSubscriberResponse>> {\n\n        validateId(subscriber_id);\n\n        return request(`/api/subscribers/${subscriber_id}`, {\n            method: \"GET\"\n        }, this.config);\n    }\n\n    /**\n     * @description Fetch total subscribers count\n     *\n     * @see https://developers.mailerlite.com/docs/subscribers.html#fetch-total-subscribers-count\n     */\n    public getCount(): Promise<AxiosResponse<SubscribersCountResponse>> {\n        const params = {\n            limit: 0\n        }\n\n        return request(`/api/subscribers`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Delete a subscriber\n     *\n     * @see https://developers.mailerlite.com/docs/subscribers.html#delete-a-subscriber\n     *\n     * @subscriber_id {String} - Subscriber ID\n     */\n    public delete(subscriber_id: string): Promise<AxiosResponse<null>> {\n        validateId(subscriber_id);\n\n        return request(`/api/subscribers/${subscriber_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n\n    /**\n     * @description Forget a subscriber\n     *\n     * @see https://developers.mailerlite.com/docs/subscribers.html#forget-a-subscriber\n     *\n     * @subscriber_id {String} - Subscriber ID\n     */\n    public forget(subscriber_id: string): Promise<AxiosResponse<SubscriberForgetResponse>> {\n        validateId(subscriber_id);\n        return request(`/api/subscribers/${subscriber_id}/forget`, {\n            method: \"POST\"\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport type { CampaignsInterface, GetCampaignsParams, ListCampaignsResponse, SingleCampaignResponse, CreateUpdateParams, ScheduleParams } from './campaigns.types.js';\n\nexport default class Campaign implements CampaignsInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List campaigns\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#campaign-list\n     *\n     * @params {Object} - List campaigns params\n     */\n    public get(params: GetCampaignsParams): Promise<AxiosResponse<ListCampaignsResponse>> {\n        return request(`/api/campaigns`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Fetch a campaign by ID\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#get-a-campaign\n     *\n     * @campaign_id {String} - Campaign ID\n     */\n    public find(campaign_id: string): Promise<AxiosResponse<SingleCampaignResponse>> {\n\n        validateId(campaign_id);\n\n        return request(`/api/campaigns/${campaign_id}`, {\n            method: \"GET\"\n        }, this.config);\n    }\n\n    /**\n     * @description Create a campaign\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#create-a-campaign\n     *\n     * @requestBody {Object} - Campaign data for create\n     */\n    public create(requestBody: CreateUpdateParams): Promise<AxiosResponse<SingleCampaignResponse, CreateUpdateParams>> {\n        return request(`/api/campaigns`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Update a campaign\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#update-campaign\n     *\n     * @campaign_id {String} - Campaign ID\n     * @requestBody {Object} - Campaign data for update\n     */\n    public update(campaign_id: string, requestBody: CreateUpdateParams): Promise<AxiosResponse<SingleCampaignResponse, CreateUpdateParams>> {\n\n        validateId(campaign_id);\n\n        return request(`/api/campaigns/${campaign_id}`, {\n            method: \"PUT\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Schedule a campaign\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#schedule-a-campaign\n     *\n     * @campaign_id {String} - Campaign ID\n     * @requestBody {Object} - Campaign data for schedule\n     */\n    public schedule(campaign_id: string, requestBody: ScheduleParams): Promise<AxiosResponse<SingleCampaignResponse, ScheduleParams>> {\n\n        validateId(campaign_id);\n\n        return request(`/api/campaigns/${campaign_id}/schedule`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Cancel a ready campaign\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#cancel-a-ready-campaign\n     *\n     * @campaign_id {String} - Campaign ID\n     */\n    public cancel(campaign_id: string): Promise<AxiosResponse<SingleCampaignResponse>> {\n\n        validateId(campaign_id);\n\n        return request(`/api/campaigns/${campaign_id}/cancel`, {\n            method: \"POST\"\n        }, this.config);\n    }\n\n    /**\n     * @description Delete a campaign\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#delete-a-campaign\n     *\n     * @campaign_id {String} - Campaign ID\n     */\n    public delete(campaign_id: string): Promise<AxiosResponse<null>> {\n\n        validateId(campaign_id);\n\n        return request(`/api/campaigns/${campaign_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport type { FormsInterface, GetFormsParams, ListFormsResponse, SingleFormResponse, UpdateParams, FormTypes } from './forms.types.js';\n\nexport default class Form implements FormsInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List all forms\n     *\n     * @see https://developers.mailerlite.com/docs/forms.html#list-all-forms\n     *\n     * @type {String} - Form type\n     * @params {Object} - List forms params\n     */\n    public get(type: FormTypes, params: GetFormsParams): Promise<AxiosResponse<ListFormsResponse>> {\n        return request(`/api/forms/${type}`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Update a form\n     *\n     * @see https://developers.mailerlite.com/docs/forms.html#update-a-form\n     *\n     * @form_id {String} - Form ID\n     * @requestBody {Object} - Form data for update\n     */\n    public update(form_id: string, requestBody: UpdateParams): Promise<AxiosResponse<SingleFormResponse, UpdateParams>> {\n\n        validateId(form_id);\n\n        return request(`/api/forms/${form_id}`, {\n            method: \"PUT\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Delete a form\n     *\n     * @see https://developers.mailerlite.com/docs/forms.html#delete-a-form\n     *\n     * @form_id {String} - Form ID\n     */\n    public delete(form_id: string): Promise<AxiosResponse<null>> {\n\n        validateId(form_id);\n\n        return request(`/api/forms/${form_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport type { GroupsInterface, GetParams, ListAllGroupsResponse, SingleGroupResponse, CreateUpdateParams, ListAllSubscribersResponse, SubscriberParams } from './groups.types.js';\n\nexport default class Group implements GroupsInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List all groups\n     *\n     * @see https://developers.mailerlite.com/docs/groups.html#list-all-groups\n     *\n     * @params {Object} - List groups params\n     */\n    public get(params: GetParams): Promise<AxiosResponse<ListAllGroupsResponse>> {\n        return request(`/api/groups`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Create a group\n     *\n     * @see https://developers.mailerlite.com/docs/groups.html#create-a-group\n     *\n     * @requestBody {Object} - Campaign data for create\n     */\n    public create(requestBody: CreateUpdateParams): Promise<AxiosResponse<SingleGroupResponse, CreateUpdateParams>> {\n        return request(`/api/groups`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Update a group\n     *\n     * @see https://developers.mailerlite.com/docs/groups.html#update-a-group\n     *\n     * @group_id {String} - Group ID\n     * @requestBody {Object} - Group data for update\n     */\n    public update(group_id: string, requestBody: CreateUpdateParams): Promise<AxiosResponse<SingleGroupResponse, CreateUpdateParams>> {\n\n        validateId(group_id);\n\n        return request(`/api/groups/${group_id}`, {\n            method: \"PUT\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Delete a group\n     *\n     * @see https://developers.mailerlite.com/docs/groups.html#delete-group\n     *\n     * @group_id {String} - Group ID\n     */\n    public delete(group_id: string): Promise<AxiosResponse<null>> {\n\n        validateId(group_id);\n\n        return request(`/api/groups/${group_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n\n    /**\n     * @description Get subscribers belonging to a group\n     *\n     * @see https://developers.mailerlite.com/docs/groups.html#get-subscribers-belonging-to-a-group\n     *\n     * @group_id {String} - Group ID\n     * @params {Object} - List subscribers params\n     */\n    public getSubscribers(group_id: string, params: SubscriberParams): Promise<AxiosResponse<ListAllSubscribersResponse>> {\n\n        validateId(group_id);\n\n        return request(`/api/groups/${group_id}/subscribers`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Assign subscriber to a group\n     *\n     * @see https://developers.mailerlite.com/docs/groups.html#assign-subscriber-to-a-group\n     *\n     * @subscriber_id {String} - Subscriber ID\n     * @group_id {String} - Group ID\n     */\n    public assignSubscriber(subscriber_id: string, group_id: string): Promise<AxiosResponse<SingleGroupResponse>> {\n\n        validateId(subscriber_id);\n        validateId(group_id);\n\n        return request(`/api/subscribers/${subscriber_id}/groups/${group_id}`, {\n            method: \"POST\"\n        }, this.config);\n    }\n\n    /**\n     * @description Unassign subscriber from a group\n     *\n     * @see https://developers.mailerlite.com/docs/groups.html#unassign-subscriber-from-a-group\n     *\n     * @subscriber_id {String} - Subscriber ID\n     * @group_id {String} - Group ID\n     */\n    public unAssignSubscriber(subscriber_id: string, group_id: string): Promise<AxiosResponse<null>> {\n\n        validateId(subscriber_id);\n        validateId(group_id);\n\n        return request(`/api/subscribers/${subscriber_id}/groups/${group_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport { SegmentsInterface, GetParams, ListAllResponse, GetSubscribersParams, ListAllSubscribers, UpdateParams, SingleSegmentResponse} from \"./segments.types.js\";\n\nexport default class Segment implements SegmentsInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List all segments\n     *\n     * @see https://developers.mailerlite.com/docs/segments.html#list-all-segments\n     *\n     * @params {Object} - List segment params\n     */\n    public get(params: GetParams): Promise<AxiosResponse<ListAllResponse>> {\n        return request(`/api/segments`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Get subscribers belonging to a segment\n     *\n     * @see https://developers.mailerlite.com/docs/segments.html#get-subscribers-belonging-to-a-segment\n     *\n     * @segment_id {String} - Segment ID\n     * @params {Object} - Segment params\n     */\n    public getSubscribers(segment_id: string, params: GetSubscribersParams): Promise<AxiosResponse<ListAllSubscribers>> {\n\n        validateId(segment_id);\n\n        return request(`/api/segments/${segment_id}/subscribers`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Update segment\n     *\n     * @see https://developers.mailerlite.com/docs/segments.html#update-segment\n     *\n     * @segment_id {String} - Segment ID\n     * @requestBody {Object} - Segment data for update\n     */\n    public update(segment_id: string, requestBody: UpdateParams): Promise<AxiosResponse<SingleSegmentResponse, UpdateParams>> {\n\n        validateId(segment_id);\n\n        return request(`/api/segments/${segment_id}`, {\n            method: \"PUT\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Delete segment\n     *\n     * @see https://developers.mailerlite.com/docs/segments.html#delete-segment\n     *\n     * @segment_id {String} - Form ID\n     */\n    public delete(segment_id: string): Promise<AxiosResponse<null>> {\n\n        validateId(segment_id);\n\n        return request(`/api/segments/${segment_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport type { FieldsInterface, GetParams, ListAllResponse, SingleFieldResponse, CreateParams, UpdateParams } from './fields.types.js';\n\nexport default class Field implements FieldsInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List all fields\n     *\n     * @see https://developers.mailerlite.com/docs/fields.html#list-all-fields\n     *\n     * @params {Object} - List fields params\n     */\n    public get(params: GetParams): Promise<AxiosResponse<ListAllResponse>> {\n        return request(`/api/fields`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Create a field\n     *\n     * @see https://developers.mailerlite.com/docs/fields.html#create-a-field\n     *\n     * @requestBody {Object} - Field data for create\n     */\n    public create(requestBody: CreateParams): Promise<AxiosResponse<SingleFieldResponse, CreateParams>> {\n        return request(`/api/fields`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Update a field\n     *\n     * @see https://developers.mailerlite.com/docs/fields.html#update-a-field\n     *\n     * @field_id {String} - Field ID\n     * @requestBody {Object} - Field data for update\n     */\n    public update(field_id: string, requestBody: UpdateParams): Promise<AxiosResponse<SingleFieldResponse, UpdateParams>> {\n\n        validateId(field_id);\n\n        return request(`/api/fields/${field_id}`, {\n            method: \"PUT\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Delete a field\n     *\n     * @see https://developers.mailerlite.com/docs/fields.html#delete-a-field\n     *\n     * @field_id {String} - Field ID\n     */\n    public delete(field_id: string): Promise<AxiosResponse<null>> {\n\n        validateId(field_id);\n\n        return request(`/api/fields/${field_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\n\nimport {\n    AutomationsInterface, AutomationSubsParams, AutomationSubsResponse,\n    GetAutomationsParams,\n    ListAutomationsResponse,\n    SingleAutomationResponse\n} from \"./automations.types.js\";\n\nexport default class Automation implements AutomationsInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List all automations\n     *\n     * @see https://developers.mailerlite.com/docs/automations.html#list-all-automations\n     *\n     * @params {Object} - List automations params\n     */\n    public get(params: GetAutomationsParams): Promise<AxiosResponse<ListAutomationsResponse>> {\n        return request('/api/automations', {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Get an automation\n     *\n     * @see https://developers.mailerlite.com/docs/automations.html#get-an-automation\n     *\n     * @automation_id {String} - Automation ID\n     */\n    public find(automation_id: string): Promise<AxiosResponse<SingleAutomationResponse>> {\n\n        validateId(automation_id);\n\n        return request(`/api/automations/${automation_id}`, {\n            method: \"GET\"\n        }, this.config);\n    }\n\n    /**\n     * @description Get the subscriber activity for an automation\n     *\n     * @see https://developers.mailerlite.com/docs/automations.html#get-the-subscriber-activity-for-an-automation\n     *\n     * @automation_id {String} - Automation ID\n     * @params {Object} - List automation subscribers params\n     */\n    public getAutomationSubscribers(automation_id: string, params: AutomationSubsParams): Promise<AxiosResponse<AutomationSubsResponse>> {\n\n        validateId(automation_id);\n\n        return request(`/api/automations/${automation_id}/activity`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n};\n","import request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport { ListAllResponse, TimezonesInterface } from \"./timezones.types.js\";\n\nexport default class Timezone implements TimezonesInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List all timezones\n     *\n     * @see https://developers.mailerlite.com/docs/timezones.html#response\n     *\n     */\n    public get(): Promise<AxiosResponse<ListAllResponse>> {\n        return request(`/api/timezones`, {\n            method: \"GET\"\n        }, this.config);\n    }\n};\n","import request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport { ListAllResponse, LanguagesInterface } from \"./languages.types.js\";\n\nexport default class Language implements LanguagesInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description Campaign languages\n     *\n     * @see https://developers.mailerlite.com/docs/campaign-languages.html\n     *\n     */\n    public get(): Promise<AxiosResponse<ListAllResponse>> {\n        return request(`/api/campaigns/languages`, {\n            method: \"GET\"\n        }, this.config);\n    }\n};\n","import request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport { BatchResponses, BatchesInterface, BatchParams } from \"./batches.types.js\";\n\nexport default class Batch implements BatchesInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description Make multiple request to api in a single call\n     *\n     * @see https://developers.mailerlite.com/docs/batching.html\n     *\n     */\n    public send(requestBody: BatchParams): Promise<AxiosResponse<BatchResponses>> {\n        return request(`/api/batch`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport {\n    WebhooksInterface,\n    ListAllResponse,\n    SingleWebhookResponse,\n    CreateParams,\n    UpdateParams\n} from \"./webhooks.types.js\";\n\nexport default class Webhook implements WebhooksInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description List all webhooks\n     *\n     * @see https://developers.mailerlite.com/docs/webhooks.html#list-all-webhooks\n     *\n     */\n    public get(): Promise<AxiosResponse<ListAllResponse>> {\n        return request(`/api/webhooks`, {\n            method: \"GET\"\n        }, this.config);\n    }\n\n    /**\n     * @description Get a webhook\n     *\n     * @see https://developers.mailerlite.com/docs/webhooks.html#get-a-webhook\n     *\n     * @webhook_id {String} - Webhook ID\n     */\n    public find(webhook_id: string): Promise<AxiosResponse<SingleWebhookResponse>> {\n\n        validateId(webhook_id);\n\n        return request(`/api/webhooks/${webhook_id}`, {\n            method: \"GET\"\n        }, this.config);\n    }\n\n    /**\n     * @description Create a webhook\n     *\n     * @see https://developers.mailerlite.com/docs/webhooks.html#create-a-webhook\n     *\n     * @requestBody {Object} - Webhook data for create\n     */\n    public create(requestBody: CreateParams): Promise<AxiosResponse<SingleWebhookResponse, CreateParams>> {\n        return request(`/api/webhooks`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Update a webhook\n     *\n     * @see https://developers.mailerlite.com/docs/webhooks.html#update-a-webhook\n     *\n     * @requestBody {Object} - Webhook data for update\n     */\n    public update(webhook_id: string, requestBody: UpdateParams): Promise<AxiosResponse<SingleWebhookResponse, UpdateParams>> {\n        return request(`/api/webhooks/${webhook_id}`, {\n            method: \"PUT\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Delete a webhook\n     *\n     * @see https://developers.mailerlite.com/docs/webhooks.html#delete-a-webhook\n     *\n     * @webhook_id {String} - Webhook ID\n     */\n    public delete(webhook_id: string): Promise<AxiosResponse<null>> {\n\n        validateId(webhook_id);\n\n        return request(`/api/webhooks/${webhook_id}`, {\n            method: \"DELETE\"\n        }, this.config);\n    }\n};\n","import { validateId } from '../../utils/helpers.js';\nimport request from '../../utils/fetch.js'\n\nimport type { Config }  from '../../utils/types.js'\nimport { AxiosResponse } from \"axios\";\nimport { StatsInterface, CampaignSubscribersActivityParams, CampaignSubscribersActivityResponse } from './stats.types.js';\nimport { GetCampaignsParams, ListCampaignsResponse, CampaignStats } from '../campaigns/campaigns.types.js'\nimport { FormTypes, GetFormsParams, ListFormsResponse } from \"../forms/forms.types.js\";\nimport { FormsSubscribersParams } from \"./stats.types.js\";\nimport { ListSubscribersResponse } from \"../subscribers/subscribers.types.js\";\nimport { AutomationStats, AutomationSubsParams, AutomationSubsResponse, GetAutomationsParams, ListAutomationsResponse } from \"../automations/automations.types.js\";\n\nexport default class Statistics implements StatsInterface {\n    private config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    /**\n     * @description Get a list of sent campaigns\n     *\n     * @params {Object} - 'limit' & 'page' params\n     */\n    public getSentCampaigns(params: GetCampaignsParams): Promise<AxiosResponse<ListCampaignsResponse>> {\n        params.filter = {\n            status: \"sent\"\n        }\n\n        return request(`/api/campaigns`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Get stats for a sent campaign\n     *\n     * @campaign_id {String} - Campaign ID\n     */\n    public async getSentCampaignStats(campaign_id: string): Promise<CampaignStats | AxiosResponse> {\n\n        validateId(campaign_id);\n\n        const response = await request(`/api/campaigns/${campaign_id}`, {\n            method: \"GET\"\n        }, this.config);\n\n        if (response.data && response.data.data && response.data.data.stats) {\n            return response.data.data.stats;\n        } else if (response.data && response.data.data && response.data.data.status !== 'sent') {\n            throw new Error(\"No stats available. See if ID of a sent campaign was provided.\");\n        } else {\n            throw new Error(\"No stats available. See if correct ID was provided.\");\n        }\n    }\n\n    /**\n     * @description Get subscribers of sent campaign\n     *\n     * @see https://developers.mailerlite.com/docs/campaigns.html#get-subscribers-activity-of-a-sent-campaign\n     *\n     * @campaign_id {String} - Campaign ID\n     * @requestBody {Object} - Subscriber data for create or update\n     */\n    public async getSentCampaignSubscribers(campaign_id: string, requestBody: CampaignSubscribersActivityParams): Promise<AxiosResponse<CampaignSubscribersActivityResponse, CampaignSubscribersActivityParams>> {\n\n        validateId(campaign_id);\n\n        return request(`/api/campaigns/${campaign_id}/reports/subscriber-activity`, {\n            method: \"POST\",\n            body: requestBody\n        }, this.config);\n    }\n\n    /**\n     * @description Get a list of forms by type\n     *\n     * @see https://developers.mailerlite.com/docs/forms.html#list-all-forms\n     *\n     * @type {String} - Form type\n     * @params {Object} - List forms params\n     */\n    public getFormsByType(type: FormTypes, params: GetFormsParams): Promise<AxiosResponse<ListFormsResponse>> {\n        return request(`/api/forms/${type}`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Get a stats (count) of a form by type\n     *\n     * @form_id {String} - Form ID\n     */\n    public async getFormsCountByType(type: FormTypes): Promise<number | AxiosResponse> {\n        const response = await request(`/api/forms/${type}`, {\n            method: \"GET\"\n        }, this.config);\n\n        if (response.data && response.data && response.data.meta && response.data.meta.aggregations) {\n            return response.data.meta.aggregations[type];\n        } else {\n            throw new Error(\"No stats available.\");\n        }\n    }\n\n    /**\n     * @description Get subscribers of a form\n     *\n     * @form_id {String} - Form ID\n     * @params {Object} - List forms subscribers params\n     */\n    public getFormSubscribers(form_id: string, params: FormsSubscribersParams): Promise<AxiosResponse<ListSubscribersResponse>> {\n        return request(`/api/forms/${form_id}/subscribers`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description List all automations\n     *\n     * @see https://developers.mailerlite.com/docs/automations.html#list-all-automations\n     *\n     * @params {Object} - List automations params\n     */\n    public getAutomations(params: GetAutomationsParams): Promise<AxiosResponse<ListAutomationsResponse>> {\n        return request('/api/automations', {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n\n    /**\n     * @description Get stats for a specific automation\n     *\n     * @automation_id {String} - Automation ID\n     */\n    public async getAutomationStats(automation_id: string): Promise<AutomationStats | AxiosResponse> {\n\n        validateId(automation_id);\n\n        const response = await request(`/api/automations/${automation_id}`, {\n            method: \"GET\"\n        }, this.config);\n\n        if (response.data && response.data.data && response.data.data.stats) {\n            return response.data.data.stats;\n        } else {\n            throw new Error(\"No stats available.\");\n        }\n    }\n\n    /**\n     * @description Get the subscriber activity for an automation\n     *\n     * @see https://developers.mailerlite.com/docs/automations.html#get-the-subscriber-activity-for-an-automation\n     *\n     * @automation_id {String} - Automation ID\n     * @params {Object} - List automation subscribers params\n     */\n    public getAutomationSubscribers(automation_id: string, params: AutomationSubsParams): Promise<AxiosResponse<AutomationSubsResponse>> {\n\n        validateId(automation_id);\n\n        return request(`/api/automations/${automation_id}/activity`, {\n            method: \"GET\",\n            params: params\n        }, this.config);\n    }\n};\n","import { Config }  from './utils/types.js'\n\nimport Subscriber from './modules/subscribers/subscribers.module.js';\nimport { SubscriberInterface } from \"./modules/subscribers/subscribers.types.js\";\n\nimport Campaign from './modules/campaigns/campaigns.module.js';\nimport { CampaignsInterface } from \"./modules/campaigns/campaigns.types.js\";\n\nimport Form from './modules/forms/forms.module.js';\nimport { FormsInterface } from \"./modules/forms/forms.types.js\";\n\nimport Group from './modules/groups/groups.module.js';\nimport { GroupsInterface } from \"./modules/groups/groups.types.js\";\n\nimport Segment from './modules/segments/segments.module.js';\nimport { SegmentsInterface } from \"./modules/segments/segments.types.js\";\n\nimport Field from './modules/fields/fields.module.js';\nimport { FieldsInterface } from \"./modules/fields/fields.types.js\";\n\nimport Automation from './modules/automations/automations.module.js';\nimport { AutomationsInterface } from \"./modules/automations/automations.types.js\";\n\nimport Timezone from './modules/timezones/timezones.module.js';\nimport { TimezonesInterface } from \"./modules/timezones/timezones.types.js\";\n\nimport Language from './modules/languages/languages.module.js';\nimport { LanguagesInterface } from \"./modules/languages/languages.types.js\";\n\nimport Batch from './modules/batches/batches.module.js';\nimport { BatchesInterface } from \"./modules/batches/batches.types.js\";\n\nimport Webhook from './modules/webhooks/webhooks.module.js';\nimport { WebhooksInterface } from \"./modules/webhooks/webhooks.types.js\";\n\nimport Statistics from './modules/stats/stats.module.js';\nimport { StatsInterface } from \"./modules/stats/stats.types.js\";\n\nexport default class MailerLite {\n\n    private config: Config;\n    public subscribers: SubscriberInterface;\n    public campaigns: CampaignsInterface;\n    public forms: FormsInterface;\n    public groups: GroupsInterface;\n    public segments: SegmentsInterface;\n    public fields: FieldsInterface;\n    public automations: AutomationsInterface;\n    public timezones: TimezonesInterface;\n    public languages: LanguagesInterface;\n    public batches: BatchesInterface;\n    public webhooks: WebhooksInterface;\n    public stats: StatsInterface;\n\n    constructor(params: { api_key: string; base_path?: string; }) {\n        this.config = {\n            api_key: params.api_key,\n            basePath: params.base_path || \"https://connect.mailerlite.com\"\n        };\n\n        this.subscribers = new Subscriber(this.config);\n        this.campaigns = new Campaign(this.config);\n        this.forms = new Form(this.config);\n        this.groups = new Group(this.config);\n        this.segments = new Segment(this.config);\n        this.fields = new Field(this.config);\n        this.automations = new Automation(this.config);\n        this.timezones = new Timezone(this.config);\n        this.languages = new Language(this.config);\n        this.batches = new Batch(this.config);\n        this.webhooks = new Webhook(this.config);\n        this.stats = new Statistics(this.config);\n    }\n};\n"],"mappings":"AAAA,OAAOA,MAAyB,QAkBzB,SAASC,EAAYC,EAAkB,CAC1C,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,qBAAqB,EAGzC,GAAI,OAAOA,GAAO,SACd,MAAM,IAAI,MAAM,2BAA2B,CAEnD,CC1BA,OAAOC,MAAW,QAUH,SAARC,EAAyBC,EAAmB,GAAIC,EAAkBC,EAAgB,CAErF,GAAM,CAAC,QAAAC,EAAU,CAAC,EAAG,OAAAC,EAAQ,KAAAC,EAAO,KAAM,OAAAC,EAAS,CAAC,CAAC,EAAIL,EAErDM,EAAcC,EAAeF,CAAM,EACvC,OAAAC,EAAcA,EAAc,IAAIA,IAAgB,GAEzCT,EAAM,CACT,OAAQM,EACR,IAAKF,EAAO,SAAWF,EAAWO,EAClC,QAAS,CACL,GAAGJ,EACH,cAAiB,UAAUD,EAAO,UAClC,mBAAoB,iBACpB,eAAgB,mBAChB,kBAAmB,MACvB,EACA,KAAMG,GAAQ,KAAK,UAAUA,CAAI,CACrC,CAAC,CACL,CAEA,SAASG,EAAeF,EAAgBG,EAAyB,CAgB7D,OAdmC,OAAO,KAAKH,CAAM,EAAE,IAAKI,GAAQ,CAChE,IAAMC,EAAQL,EAAOI,GAOrB,OALIJ,EAAO,cAAgB,MACvBI,EAAM,GAAGD,MACJH,EAAO,cAAgB,SAC5BI,EAAOD,EAAS,GAAGA,KAAUC,KAASA,GAEtC,OAAOC,GAAU,SACVH,EAAeG,EAAOD,CAAG,EAEzB,GAAGA,KAAO,mBAAmBC,CAAK,GACjD,CAAC,EAEuB,KAAK,EAAE,EAAE,KAAK,GAAG,CAC7C,CCzCA,IAAqBC,EAArB,KAA+D,CACnD,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CASO,IAAIC,EAAoE,CAC3E,OAAOC,EAAQ,mBAAoB,CAC/B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CASO,eAAeE,EAA2G,CAC7H,OAAOD,EAAQ,mBAAoB,CAC/B,OAAQ,OACR,KAAMC,CACV,EAAG,KAAK,MAAM,CAClB,CASO,KAAKC,EAAyE,CAEjF,OAAAC,EAAWD,CAAa,EAEjBF,EAAQ,oBAAoBE,IAAiB,CAChD,OAAQ,KACZ,EAAG,KAAK,MAAM,CAClB,CAOO,UAA6D,CAKhE,OAAOF,EAAQ,mBAAoB,CAC/B,OAAQ,MACR,OANW,CACX,MAAO,CACX,CAKA,EAAG,KAAK,MAAM,CAClB,CASO,OAAOE,EAAqD,CAC/D,OAAAC,EAAWD,CAAa,EAEjBF,EAAQ,oBAAoBE,IAAiB,CAChD,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CASO,OAAOA,EAAyE,CACnF,OAAAC,EAAWD,CAAa,EACjBF,EAAQ,oBAAoBE,WAAwB,CACvD,OAAQ,MACZ,EAAG,KAAK,MAAM,CAClB,CACJ,EC/FA,IAAqBE,EAArB,KAA4D,CAChD,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CASO,IAAIC,EAA2E,CAClF,OAAOC,EAAQ,iBAAkB,CAC7B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CASO,KAAKE,EAAqE,CAE7E,OAAAC,EAAWD,CAAW,EAEfD,EAAQ,kBAAkBC,IAAe,CAC5C,OAAQ,KACZ,EAAG,KAAK,MAAM,CAClB,CASO,OAAOE,EAAqG,CAC/G,OAAOH,EAAQ,iBAAkB,CAC7B,OAAQ,OACR,KAAMG,CACV,EAAG,KAAK,MAAM,CAClB,CAUO,OAAOF,EAAqBE,EAAqG,CAEpI,OAAAD,EAAWD,CAAW,EAEfD,EAAQ,kBAAkBC,IAAe,CAC5C,OAAQ,MACR,KAAME,CACV,EAAG,KAAK,MAAM,CAClB,CAUO,SAASF,EAAqBE,EAA6F,CAE9H,OAAAD,EAAWD,CAAW,EAEfD,EAAQ,kBAAkBC,aAAwB,CACrD,OAAQ,OACR,KAAME,CACV,EAAG,KAAK,MAAM,CAClB,CASO,OAAOF,EAAqE,CAE/E,OAAAC,EAAWD,CAAW,EAEfD,EAAQ,kBAAkBC,WAAsB,CACnD,OAAQ,MACZ,EAAG,KAAK,MAAM,CAClB,CASO,OAAOA,EAAmD,CAE7D,OAAAC,EAAWD,CAAW,EAEfD,EAAQ,kBAAkBC,IAAe,CAC5C,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CACJ,ECtHA,IAAqBG,EAArB,KAAoD,CACxC,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CAUO,IAAIC,EAAiBC,EAAmE,CAC3F,OAAOC,EAAQ,cAAcF,IAAQ,CACjC,OAAQ,MACR,OAAQC,CACZ,EAAG,KAAK,MAAM,CAClB,CAUO,OAAOE,EAAiBC,EAAqF,CAEhH,OAAAC,EAAWF,CAAO,EAEXD,EAAQ,cAAcC,IAAW,CACpC,OAAQ,MACR,KAAMC,CACV,EAAG,KAAK,MAAM,CAClB,CASO,OAAOD,EAA+C,CAEzD,OAAAE,EAAWF,CAAO,EAEXD,EAAQ,cAAcC,IAAW,CACpC,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CACJ,ECvDA,IAAqBG,EAArB,KAAsD,CAC1C,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CASO,IAAIC,EAAkE,CACzE,OAAOC,EAAQ,cAAe,CAC1B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CASO,OAAOE,EAAkG,CAC5G,OAAOD,EAAQ,cAAe,CAC1B,OAAQ,OACR,KAAMC,CACV,EAAG,KAAK,MAAM,CAClB,CAUO,OAAOC,EAAkBD,EAAkG,CAE9H,OAAAE,EAAWD,CAAQ,EAEZF,EAAQ,eAAeE,IAAY,CACtC,OAAQ,MACR,KAAMD,CACV,EAAG,KAAK,MAAM,CAClB,CASO,OAAOC,EAAgD,CAE1D,OAAAC,EAAWD,CAAQ,EAEZF,EAAQ,eAAeE,IAAY,CACtC,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CAUO,eAAeA,EAAkBH,EAA8E,CAElH,OAAAI,EAAWD,CAAQ,EAEZF,EAAQ,eAAeE,gBAAwB,CAClD,OAAQ,MACR,OAAQH,CACZ,EAAG,KAAK,MAAM,CAClB,CAUO,iBAAiBK,EAAuBF,EAA+D,CAE1G,OAAAC,EAAWC,CAAa,EACxBD,EAAWD,CAAQ,EAEZF,EAAQ,oBAAoBI,YAAwBF,IAAY,CACnE,OAAQ,MACZ,EAAG,KAAK,MAAM,CAClB,CAUO,mBAAmBE,EAAuBF,EAAgD,CAE7F,OAAAC,EAAWC,CAAa,EACxBD,EAAWD,CAAQ,EAEZF,EAAQ,oBAAoBI,YAAwBF,IAAY,CACnE,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CACJ,EC1HA,IAAqBG,EAArB,KAA0D,CAC9C,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CASO,IAAIC,EAA4D,CACnE,OAAOC,EAAQ,gBAAiB,CAC5B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CAUO,eAAeE,EAAoBF,EAA0E,CAEhH,OAAAG,EAAWD,CAAU,EAEdD,EAAQ,iBAAiBC,gBAA0B,CACtD,OAAQ,MACR,OAAQF,CACZ,EAAG,KAAK,MAAM,CAClB,CAUO,OAAOE,EAAoBE,EAAwF,CAEtH,OAAAD,EAAWD,CAAU,EAEdD,EAAQ,iBAAiBC,IAAc,CAC1C,OAAQ,MACR,KAAME,CACV,EAAG,KAAK,MAAM,CAClB,CASO,OAAOF,EAAkD,CAE5D,OAAAC,EAAWD,CAAU,EAEdD,EAAQ,iBAAiBC,IAAc,CAC1C,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CACJ,ECxEA,IAAqBG,EAArB,KAAsD,CAC1C,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CASO,IAAIC,EAA4D,CACnE,OAAOC,EAAQ,cAAe,CAC1B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CASO,OAAOE,EAAsF,CAChG,OAAOD,EAAQ,cAAe,CAC1B,OAAQ,OACR,KAAMC,CACV,EAAG,KAAK,MAAM,CAClB,CAUO,OAAOC,EAAkBD,EAAsF,CAElH,OAAAE,EAAWD,CAAQ,EAEZF,EAAQ,eAAeE,IAAY,CACtC,OAAQ,MACR,KAAMD,CACV,EAAG,KAAK,MAAM,CAClB,CASO,OAAOC,EAAgD,CAE1D,OAAAC,EAAWD,CAAQ,EAEZF,EAAQ,eAAeE,IAAY,CACtC,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CACJ,EC9DA,IAAqBE,EAArB,KAAgE,CACpD,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CASO,IAAIC,EAA+E,CACtF,OAAOC,EAAQ,mBAAoB,CAC/B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CASO,KAAKE,EAAyE,CAEjF,OAAAC,EAAWD,CAAa,EAEjBD,EAAQ,oBAAoBC,IAAiB,CAChD,OAAQ,KACZ,EAAG,KAAK,MAAM,CAClB,CAUO,yBAAyBA,EAAuBF,EAA8E,CAEjI,OAAAG,EAAWD,CAAa,EAEjBD,EAAQ,oBAAoBC,aAA0B,CACzD,OAAQ,MACR,OAAQF,CACZ,EAAG,KAAK,MAAM,CAClB,CACJ,EC7DA,IAAqBI,EAArB,KAA4D,CAChD,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CAQO,KAA+C,CAClD,OAAOC,EAAQ,iBAAkB,CAC7B,OAAQ,KACZ,EAAG,KAAK,MAAM,CAClB,CACJ,EClBA,IAAqBC,EAArB,KAA4D,CAChD,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CAQO,KAA+C,CAClD,OAAOC,EAAQ,2BAA4B,CACvC,OAAQ,KACZ,EAAG,KAAK,MAAM,CAClB,CACJ,EClBA,IAAqBC,EAArB,KAAuD,CAC3C,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CAQO,KAAKC,EAAkE,CAC1E,OAAOC,EAAQ,aAAc,CACzB,OAAQ,OACR,KAAMD,CACV,EAAG,KAAK,MAAM,CAClB,CACJ,ECZA,IAAqBE,EAArB,KAA0D,CAC9C,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CAQO,KAA+C,CAClD,OAAOC,EAAQ,gBAAiB,CAC5B,OAAQ,KACZ,EAAG,KAAK,MAAM,CAClB,CASO,KAAKC,EAAmE,CAE3E,OAAAC,EAAWD,CAAU,EAEdD,EAAQ,iBAAiBC,IAAc,CAC1C,OAAQ,KACZ,EAAG,KAAK,MAAM,CAClB,CASO,OAAOE,EAAwF,CAClG,OAAOH,EAAQ,gBAAiB,CAC5B,OAAQ,OACR,KAAMG,CACV,EAAG,KAAK,MAAM,CAClB,CASO,OAAOF,EAAoBE,EAAwF,CACtH,OAAOH,EAAQ,iBAAiBC,IAAc,CAC1C,OAAQ,MACR,KAAME,CACV,EAAG,KAAK,MAAM,CAClB,CASO,OAAOF,EAAkD,CAE5D,OAAAC,EAAWD,CAAU,EAEdD,EAAQ,iBAAiBC,IAAc,CAC1C,OAAQ,QACZ,EAAG,KAAK,MAAM,CAClB,CACJ,EC/EA,IAAqBG,EAArB,KAA0D,CAC9C,OAER,YAAYC,EAAgB,CACxB,KAAK,OAASA,CAClB,CAOO,iBAAiBC,EAA2E,CAC/F,OAAAA,EAAO,OAAS,CACZ,OAAQ,MACZ,EAEOC,EAAQ,iBAAkB,CAC7B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CAOA,MAAa,qBAAqBE,EAA6D,CAE3FC,EAAWD,CAAW,EAEtB,IAAME,EAAW,MAAMH,EAAQ,kBAAkBC,IAAe,CAC5D,OAAQ,KACZ,EAAG,KAAK,MAAM,EAEd,GAAIE,EAAS,MAAQA,EAAS,KAAK,MAAQA,EAAS,KAAK,KAAK,MAC1D,OAAOA,EAAS,KAAK,KAAK,MACvB,MAAIA,EAAS,MAAQA,EAAS,KAAK,MAAQA,EAAS,KAAK,KAAK,SAAW,OACtE,IAAI,MAAM,gEAAgE,EAE1E,IAAI,MAAM,qDAAqD,CAE7E,CAUA,MAAa,2BAA2BF,EAAqBG,EAAgJ,CAEzM,OAAAF,EAAWD,CAAW,EAEfD,EAAQ,kBAAkBC,gCAA2C,CACxE,OAAQ,OACR,KAAMG,CACV,EAAG,KAAK,MAAM,CAClB,CAUO,eAAeC,EAAiBN,EAAmE,CACtG,OAAOC,EAAQ,cAAcK,IAAQ,CACjC,OAAQ,MACR,OAAQN,CACZ,EAAG,KAAK,MAAM,CAClB,CAOA,MAAa,oBAAoBM,EAAkD,CAC/E,IAAMF,EAAW,MAAMH,EAAQ,cAAcK,IAAQ,CACjD,OAAQ,KACZ,EAAG,KAAK,MAAM,EAEd,GAAIF,EAAS,MAAQA,EAAS,MAAQA,EAAS,KAAK,MAAQA,EAAS,KAAK,KAAK,aAC3E,OAAOA,EAAS,KAAK,KAAK,aAAaE,GAEvC,MAAM,IAAI,MAAM,qBAAqB,CAE7C,CAQO,mBAAmBC,EAAiBP,EAAiF,CACxH,OAAOC,EAAQ,cAAcM,gBAAuB,CAChD,OAAQ,MACR,OAAQP,CACZ,EAAG,KAAK,MAAM,CAClB,CASO,eAAeA,EAA+E,CACjG,OAAOC,EAAQ,mBAAoB,CAC/B,OAAQ,MACR,OAAQD,CACZ,EAAG,KAAK,MAAM,CAClB,CAOA,MAAa,mBAAmBQ,EAAiE,CAE7FL,EAAWK,CAAa,EAExB,IAAMJ,EAAW,MAAMH,EAAQ,oBAAoBO,IAAiB,CAChE,OAAQ,KACZ,EAAG,KAAK,MAAM,EAEd,GAAIJ,EAAS,MAAQA,EAAS,KAAK,MAAQA,EAAS,KAAK,KAAK,MAC1D,OAAOA,EAAS,KAAK,KAAK,MAE1B,MAAM,IAAI,MAAM,qBAAqB,CAE7C,CAUO,yBAAyBI,EAAuBR,EAA8E,CAEjI,OAAAG,EAAWK,CAAa,EAEjBP,EAAQ,oBAAoBO,aAA0B,CACzD,OAAQ,MACR,OAAQR,CACZ,EAAG,KAAK,MAAM,CAClB,CACJ,ECrIA,IAAqBS,EAArB,KAAgC,CAEpB,OACD,YACA,UACA,MACA,OACA,SACA,OACA,YACA,UACA,UACA,QACA,SACA,MAEP,YAAYC,EAAkD,CAC1D,KAAK,OAAS,CACV,QAASA,EAAO,QAChB,SAAUA,EAAO,WAAa,gCAClC,EAEA,KAAK,YAAc,IAAIC,EAAW,KAAK,MAAM,EAC7C,KAAK,UAAY,IAAIC,EAAS,KAAK,MAAM,EACzC,KAAK,MAAQ,IAAIC,EAAK,KAAK,MAAM,EACjC,KAAK,OAAS,IAAIC,EAAM,KAAK,MAAM,EACnC,KAAK,SAAW,IAAIC,EAAQ,KAAK,MAAM,EACvC,KAAK,OAAS,IAAIC,EAAM,KAAK,MAAM,EACnC,KAAK,YAAc,IAAIC,EAAW,KAAK,MAAM,EAC7C,KAAK,UAAY,IAAIC,EAAS,KAAK,MAAM,EACzC,KAAK,UAAY,IAAIC,EAAS,KAAK,MAAM,EACzC,KAAK,QAAU,IAAIC,EAAM,KAAK,MAAM,EACpC,KAAK,SAAW,IAAIC,EAAQ,KAAK,MAAM,EACvC,KAAK,MAAQ,IAAIC,EAAW,KAAK,MAAM,CAC3C,CACJ","names":["axios","validateId","id","axios","request","endpoint","options","config","headers","method","body","params","queryString","serializeQuery","prefix","key","value","Subscriber","config","params","request","requestBody","subscriber_id","validateId","Campaign","config","params","request","campaign_id","validateId","requestBody","Form","config","type","params","request","form_id","requestBody","validateId","Group","config","params","request","requestBody","group_id","validateId","subscriber_id","Segment","config","params","request","segment_id","validateId","requestBody","Field","config","params","request","requestBody","field_id","validateId","Automation","config","params","request","automation_id","validateId","Timezone","config","request","Language","config","request","Batch","config","requestBody","request","Webhook","config","request","webhook_id","validateId","requestBody","Statistics","config","params","request","campaign_id","validateId","response","requestBody","type","form_id","automation_id","MailerLite","params","Subscriber","Campaign","Form","Group","Segment","Field","Automation","Timezone","Language","Batch","Webhook","Statistics"]}