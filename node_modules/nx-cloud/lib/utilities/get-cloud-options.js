"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCloudOptions = void 0;
const fs_1 = require("fs");
const stripJsonComments = require("strip-json-comments");
const { workspaceRoot } = require('./nx-imports-light');
function getCloudOptions(taskRunnerConfiguration) {
    var _a, _b, _c, _d, _e, _f, _g;
    const nxJson = JSON.parse(stripJsonComments((0, fs_1.readFileSync)(`${workspaceRoot}/nx.json`).toString()));
    const result = {};
    const defaultCacheableOperations = [];
    for (const key in nxJson.targetDefaults) {
        if (nxJson.targetDefaults[key].cache) {
            defaultCacheableOperations.push(key);
        }
    }
    if (nxJson.nxCloudAccessToken) {
        (_a = result.accessToken) !== null && _a !== void 0 ? _a : (result.accessToken = nxJson.nxCloudAccessToken);
    }
    if (nxJson.nxCloudUrl) {
        (_b = result.url) !== null && _b !== void 0 ? _b : (result.url = nxJson.nxCloudUrl);
    }
    if (nxJson.nxCloudEncryptionKey) {
        result.encryptionKey = nxJson.nxCloudEncryptionKey;
    }
    if (nxJson.parallel) {
        (_c = result.parallel) !== null && _c !== void 0 ? _c : (result.parallel = nxJson.parallel);
    }
    if (nxJson.cacheDirectory) {
        (_d = result.cacheDirectory) !== null && _d !== void 0 ? _d : (result.cacheDirectory = nxJson.cacheDirectory);
    }
    if (defaultCacheableOperations.length) {
        (_e = result.cacheableOperations) !== null && _e !== void 0 ? _e : (result.cacheableOperations = defaultCacheableOperations);
    }
    return {
        nxJson,
        nxCloudOptions: Object.assign(Object.assign({}, result), (_g = (_f = nxJson.tasksRunnerOptions) === null || _f === void 0 ? void 0 : _f[taskRunnerConfiguration]) === null || _g === void 0 ? void 0 : _g.options),
    };
}
exports.getCloudOptions = getCloudOptions;
//# sourceMappingURL=get-cloud-options.js.map