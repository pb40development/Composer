import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, InjectionToken, Optional, PLATFORM_ID, } from '@angular/core';
// eslint-disable-next-line import/named
import { marked, Renderer } from 'marked';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { ClipboardButtonComponent } from './clipboard-button.component';
import { CLIPBOARD_OPTIONS } from './clipboard-options';
import { MARKED_EXTENSIONS } from './marked-extensions';
import { MARKED_OPTIONS } from './marked-options';
import { MarkedRenderer } from './marked-renderer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/platform-browser";
/* eslint-disable max-len */
export const errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';
export const errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';
export const errorMermaidNotLoaded = '[ngx-markdown] When using the `mermaid` attribute you *have to* include Mermaid files to `angular.json` or use imports. See README for more information';
export const errorClipboardNotLoaded = '[ngx-markdown] When using the `clipboard` attribute you *have to* include Clipboard files to `angular.json` or use imports. See README for more information';
export const errorClipboardViewContainerRequired = '[ngx-markdown] When using the `clipboard` attribute you *have to* provide the `viewContainerRef` parameter to `MarkdownService.render()` function';
export const errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';
/* eslint-enable max-len */
export const SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');
export class ExtendedRenderer extends Renderer {
    constructor() {
        super(...arguments);
        this.ɵNgxMarkdownRendererExtendedForExtensions = false;
        this.ɵNgxMarkdownRendererExtendedForMermaid = false;
    }
}
export class MarkdownService {
    get options() { return this._options; }
    set options(value) {
        this._options = { ...this.DEFAULT_MARKED_OPTIONS, ...value };
    }
    get renderer() { return this.options.renderer; }
    set renderer(value) {
        this.options.renderer = value;
    }
    constructor(clipboardOptions, extensions, options, platform, securityContext, http, sanitizer) {
        this.clipboardOptions = clipboardOptions;
        this.extensions = extensions;
        this.platform = platform;
        this.securityContext = securityContext;
        this.http = http;
        this.sanitizer = sanitizer;
        this.DEFAULT_MARKED_OPTIONS = {
            renderer: new MarkedRenderer(),
        };
        this.DEFAULT_KATEX_OPTIONS = {
            delimiters: [
                { left: '$$', right: '$$', display: true },
                { left: '$', right: '$', display: false },
                { left: '\\(', right: '\\)', display: false },
                { left: '\\begin{equation}', right: '\\end{equation}', display: true },
                { left: '\\begin{align}', right: '\\end{align}', display: true },
                { left: '\\begin{alignat}', right: '\\end{alignat}', display: true },
                { left: '\\begin{gather}', right: '\\end{gather}', display: true },
                { left: '\\begin{CD}', right: '\\end{CD}', display: true },
                { left: '\\[', right: '\\]', display: true },
            ],
        };
        this.DEFAULT_MERMAID_OPTIONS = {
            startOnLoad: false,
        };
        this.DEFAULT_CLIPBOARD_OPTIONS = {
            buttonComponent: undefined,
        };
        this.DEFAULT_PARSE_OPTIONS = {
            decodeHtml: false,
            inline: false,
            emoji: false,
            mermaid: false,
            markedOptions: this.DEFAULT_MARKED_OPTIONS,
            disableSanitizer: false,
        };
        this.DEFAULT_RENDER_OPTIONS = {
            clipboard: false,
            clipboardOptions: undefined,
            katex: false,
            katexOptions: undefined,
            mermaid: false,
            mermaidOptions: undefined,
        };
        this._reload$ = new Subject();
        this.reload$ = this._reload$.asObservable();
        this.options = options;
    }
    parse(markdown, parseOptions = this.DEFAULT_PARSE_OPTIONS) {
        const { decodeHtml, inline, emoji, mermaid, disableSanitizer, } = parseOptions;
        const markedOptions = {
            ...this.options,
            ...parseOptions.markedOptions,
        };
        const renderer = markedOptions.renderer || this.renderer || new Renderer();
        if (this.extensions) {
            this.renderer = this.extendsRendererForExtensions(renderer);
        }
        if (mermaid) {
            this.renderer = this.extendsRendererForMermaid(renderer);
        }
        const trimmed = this.trimIndentation(markdown);
        const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;
        const emojified = emoji ? this.parseEmoji(decoded) : decoded;
        const marked = this.parseMarked(emojified, markedOptions, inline);
        const sanitized = disableSanitizer ? marked : this.sanitizer.sanitize(this.securityContext, marked);
        return sanitized || '';
    }
    render(element, options = this.DEFAULT_RENDER_OPTIONS, viewContainerRef) {
        const { clipboard, clipboardOptions, katex, katexOptions, mermaid, mermaidOptions, } = options;
        if (clipboard) {
            this.renderClipboard(element, viewContainerRef, {
                ...this.DEFAULT_CLIPBOARD_OPTIONS,
                ...this.clipboardOptions,
                ...clipboardOptions,
            });
        }
        if (katex) {
            this.renderKatex(element, {
                ...this.DEFAULT_KATEX_OPTIONS,
                ...katexOptions,
            });
        }
        if (mermaid) {
            this.renderMermaid(element, {
                ...this.DEFAULT_MERMAID_OPTIONS,
                ...mermaidOptions,
            });
        }
        this.highlight(element);
    }
    reload() {
        this._reload$.next();
    }
    getSource(src) {
        if (!this.http) {
            throw new Error(errorSrcWithoutHttpClient);
        }
        return this.http
            .get(src, { responseType: 'text' })
            .pipe(map(markdown => this.handleExtension(src, markdown)));
    }
    highlight(element) {
        if (!isPlatformBrowser(this.platform)) {
            return;
        }
        if (typeof Prism === 'undefined' || typeof Prism.highlightAllUnder === 'undefined') {
            return;
        }
        if (!element) {
            element = document;
        }
        const noLanguageElements = element.querySelectorAll('pre code:not([class*="language-"])');
        Array.prototype.forEach.call(noLanguageElements, (x) => x.classList.add('language-none'));
        Prism.highlightAllUnder(element);
    }
    decodeHtml(html) {
        if (!isPlatformBrowser(this.platform)) {
            return html;
        }
        const textarea = document.createElement('textarea');
        textarea.innerHTML = html;
        return textarea.value;
    }
    extendsRendererForExtensions(renderer) {
        const extendedRenderer = renderer;
        if (extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions === true) {
            return renderer;
        }
        if (this.extensions?.length > 0) {
            marked.use(...this.extensions);
        }
        extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions = true;
        return renderer;
    }
    extendsRendererForMermaid(renderer) {
        const extendedRenderer = renderer;
        if (extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid === true) {
            return renderer;
        }
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const defaultCode = renderer.code;
        renderer.code = function (code, language, isEscaped) {
            return language === 'mermaid'
                ? `<div class="mermaid">${code}</div>`
                : defaultCode.call(this, code, language, isEscaped);
        };
        extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid = true;
        return renderer;
    }
    handleExtension(src, markdown) {
        const urlProtocolIndex = src.lastIndexOf('://');
        const urlWithoutProtocol = urlProtocolIndex > -1
            ? src.substring(urlProtocolIndex + 4)
            : src;
        const lastSlashIndex = urlWithoutProtocol.lastIndexOf('/');
        const lastUrlSegment = lastSlashIndex > -1
            ? urlWithoutProtocol.substring(lastSlashIndex + 1).split('?')[0]
            : '';
        const lastDotIndex = lastUrlSegment.lastIndexOf('.');
        const extension = lastDotIndex > -1
            ? lastUrlSegment.substring(lastDotIndex + 1)
            : '';
        return !!extension && extension !== 'md'
            ? '```' + extension + '\n' + markdown + '\n```'
            : markdown;
    }
    parseMarked(html, markedOptions, inline = false) {
        // remove renderer from markedOptions because if renderer
        // is passed to parse method, it will ignore all extensions
        if (markedOptions.renderer) {
            marked.use({ renderer: markedOptions.renderer });
            delete markedOptions.renderer;
        }
        return inline
            ? marked.parseInline(html, markedOptions)
            : marked.parse(html, markedOptions);
    }
    parseEmoji(html) {
        if (!isPlatformBrowser(this.platform)) {
            return html;
        }
        if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {
            throw new Error(errorJoyPixelsNotLoaded);
        }
        return joypixels.shortnameToUnicode(html);
    }
    renderKatex(element, options) {
        if (!isPlatformBrowser(this.platform)) {
            return;
        }
        if (typeof katex === 'undefined' || typeof renderMathInElement === 'undefined') {
            throw new Error(errorKatexNotLoaded);
        }
        renderMathInElement(element, options);
    }
    renderClipboard(element, viewContainerRef, options) {
        if (!isPlatformBrowser(this.platform)) {
            return;
        }
        if (typeof ClipboardJS === 'undefined') {
            throw new Error(errorClipboardNotLoaded);
        }
        if (!viewContainerRef) {
            throw new Error(errorClipboardViewContainerRequired);
        }
        const { buttonComponent, buttonTemplate, } = options;
        // target every <pre> elements
        const preElements = element.querySelectorAll('pre');
        for (let i = 0; i < preElements.length; i++) {
            const preElement = preElements.item(i);
            // create <pre> wrapper element
            const preWrapperElement = document.createElement('div');
            preWrapperElement.style.position = 'relative';
            preElement.parentNode.insertBefore(preWrapperElement, preElement);
            preWrapperElement.appendChild(preElement);
            // create toolbar element
            const toolbarWrapperElement = document.createElement('div');
            toolbarWrapperElement.style.position = 'absolute';
            toolbarWrapperElement.style.top = '.5em';
            toolbarWrapperElement.style.right = '.5em';
            toolbarWrapperElement.style.opacity = '0';
            toolbarWrapperElement.style.transition = 'opacity 250ms ease-out';
            preWrapperElement.insertAdjacentElement('beforeend', toolbarWrapperElement);
            // register listener to show/hide toolbar
            preElement.onmouseover = () => toolbarWrapperElement.style.opacity = '1';
            preElement.onmouseout = () => toolbarWrapperElement.style.opacity = '0';
            // declare embeddedViewRef holding variable
            let embeddedViewRef;
            // use provided component via input property
            // or provided via ClipboardOptions provider
            if (buttonComponent) {
                const componentRef = viewContainerRef.createComponent(buttonComponent);
                embeddedViewRef = componentRef.hostView;
            }
            // use provided template via input property
            else if (buttonTemplate) {
                embeddedViewRef = viewContainerRef.createEmbeddedView(buttonTemplate);
            }
            // use default component
            else {
                const componentRef = viewContainerRef.createComponent(ClipboardButtonComponent);
                embeddedViewRef = componentRef.hostView;
            }
            // declare clipboard instance variable
            let clipboardInstance;
            // attach clipboard.js to root node
            embeddedViewRef.rootNodes.forEach((node) => {
                node.onmouseover = () => toolbarWrapperElement.style.opacity = '1';
                toolbarWrapperElement.appendChild(node);
                clipboardInstance = new ClipboardJS(node, { text: () => preElement.innerText });
            });
            // destroy clipboard instance when view is destroyed
            embeddedViewRef.onDestroy(() => clipboardInstance.destroy());
        }
    }
    renderMermaid(element, options = this.DEFAULT_MERMAID_OPTIONS) {
        if (!isPlatformBrowser(this.platform)) {
            return;
        }
        if (typeof mermaid === 'undefined' || typeof mermaid.initialize === 'undefined') {
            throw new Error(errorMermaidNotLoaded);
        }
        const mermaidElements = element.querySelectorAll('.mermaid');
        if (mermaidElements.length === 0) {
            return;
        }
        mermaid.initialize(options);
        mermaid.run({ nodes: mermaidElements });
    }
    trimIndentation(markdown) {
        if (!markdown) {
            return '';
        }
        let indentStart;
        return markdown
            .split('\n')
            .map(line => {
            let lineIdentStart = indentStart;
            if (line.length > 0) {
                lineIdentStart = isNaN(lineIdentStart)
                    ? line.search(/\S|$/)
                    : Math.min(line.search(/\S|$/), lineIdentStart);
            }
            if (isNaN(indentStart)) {
                indentStart = lineIdentStart;
            }
            return lineIdentStart
                ? line.substring(lineIdentStart)
                : line;
        }).join('\n');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: MarkdownService, deps: [{ token: CLIPBOARD_OPTIONS, optional: true }, { token: MARKED_EXTENSIONS, optional: true }, { token: MARKED_OPTIONS, optional: true }, { token: PLATFORM_ID }, { token: SECURITY_CONTEXT }, { token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: MarkdownService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: MarkdownService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CLIPBOARD_OPTIONS]
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MARKED_EXTENSIONS]
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MARKED_OPTIONS]
                }, {
                    type: Optional
                }] }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.SecurityContext, decorators: [{
                    type: Inject,
                    args: [SECURITY_CONTEXT]
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DomSanitizer }] });
//# sourceMappingURL=data:application/json;base64,