import copy from 'fast-copy';
import { toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
/**
 * @private
 */
export default function createAppActionCallApi(makeRequest) {
  return {
    createWithResponse: function createWithResponse() {
      const payload = {
        parameters: {
          recipient: 'Alice <alice@my-company.com>',
          message_body: 'Hello from Bob!'
        }
      };
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'createWithResponse',
        params: {
          spaceId: 'space-id',
          environmentId: 'environment-id',
          appDefinitionId: 'app-definiton-id',
          appActionId: 'app-action-id'
        },
        payload: payload
      }).then(data => wrapAppActionCallResponse(makeRequest, data));
    },
    getCallDetails: function getCallDetails() {
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'getCallDetails',
        params: {
          spaceId: 'space-id',
          environmentId: 'environment-id',
          callId: 'call-id',
          appActionId: 'app-action-id'
        }
      }).then(data => wrapAppActionCallResponse(makeRequest, data));
    }
  };
}

/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw AppActionCall data
 * @return Wrapped AppActionCall data
 */
export function wrapAppActionCall(makeRequest, data) {
  const signedRequest = toPlainObject(copy(data));
  const signedRequestWithMethods = enhanceWithMethods(signedRequest, createAppActionCallApi(makeRequest));
  return signedRequestWithMethods;
}

/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw AppActionCall data
 * @return Wrapped AppActionCall data
 */
export function wrapAppActionCallResponse(makeRequest, data) {
  const appActionCallResponse = toPlainObject(copy(data));
  const appActionCallResponseWithMethods = enhanceWithMethods(appActionCallResponse, createAppActionCallApi(makeRequest));
  return appActionCallResponseWithMethods;
}