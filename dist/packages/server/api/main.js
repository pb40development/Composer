/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((module) => {

module.exports = require("tslib");

/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(3), exports);
tslib_1.__exportStar(__webpack_require__(5), exports);
tslib_1.__exportStar(__webpack_require__(7), exports);
tslib_1.__exportStar(__webpack_require__(104), exports);
tslib_1.__exportStar(__webpack_require__(110), exports);
tslib_1.__exportStar(__webpack_require__(117), exports);
tslib_1.__exportStar(__webpack_require__(118), exports);
tslib_1.__exportStar(__webpack_require__(120), exports);
tslib_1.__exportStar(__webpack_require__(123), exports);
tslib_1.__exportStar(__webpack_require__(124), exports);
tslib_1.__exportStar(__webpack_require__(126), exports);
tslib_1.__exportStar(__webpack_require__(127), exports);
tslib_1.__exportStar(__webpack_require__(106), exports);
tslib_1.__exportStar(__webpack_require__(109), exports);
tslib_1.__exportStar(__webpack_require__(131), exports);
tslib_1.__exportStar(__webpack_require__(114), exports);
tslib_1.__exportStar(__webpack_require__(132), exports);


/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.memoryLock = void 0;
const tslib_1 = __webpack_require__(1);
const async_mutex_1 = __webpack_require__(4);
const memoryLocks = new Map();
class MutexLockWrapper {
    constructor(key) {
        if (key) {
            this.lock = (0, async_mutex_1.withTimeout)(new async_mutex_1.Mutex(), key);
        }
        else {
            this.lock = new async_mutex_1.Mutex();
        }
    }
    acquire() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.lock.acquire();
        });
    }
    release() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.lock.release();
        });
    }
}
exports.memoryLock = {
    acquire: (key, timeout) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        let lock = memoryLocks.get(key);
        if (!lock) {
            lock = new MutexLockWrapper(timeout);
            memoryLocks.set(key, lock);
        }
        yield lock.acquire();
        return lock;
    }),
    isTimeoutError: (e) => {
        return e === async_mutex_1.E_TIMEOUT;
    },
};


/***/ }),
/* 4 */
/***/ ((module) => {

module.exports = require("async-mutex");

/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashUtils = void 0;
const tslib_1 = __webpack_require__(1);
const crypto = tslib_1.__importStar(__webpack_require__(6));
function hashObject(object) {
    const algorithm = 'sha256';
    const hash = crypto.createHash(algorithm);
    hash.update(JSON.stringify(object));
    return hash.digest('hex');
}
exports.hashUtils = {
    hashObject,
};


/***/ }),
/* 6 */
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JobData = exports.WebhookJobData = exports.OneTimeJobData = exports.ScheduledJobData = exports.DelayedJobData = exports.RepeatingJobData = exports.RenewWebhookJobData = exports.RepeatableJobType = exports.LATEST_JOB_DATA_SCHEMA_VERSION = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
exports.LATEST_JOB_DATA_SCHEMA_VERSION = 4;
var RepeatableJobType;
(function (RepeatableJobType) {
    RepeatableJobType["RENEW_WEBHOOK"] = "RENEW_WEBHOOK";
    RepeatableJobType["EXECUTE_TRIGGER"] = "EXECUTE_TRIGGER";
    RepeatableJobType["DELAYED_FLOW"] = "DELAYED_FLOW";
})(RepeatableJobType || (exports.RepeatableJobType = RepeatableJobType = {}));
// Never change without increasing LATEST_JOB_DATA_SCHEMA_VERSION, and adding a migration
exports.RenewWebhookJobData = typebox_1.Type.Object({
    schemaVersion: typebox_1.Type.Number(),
    projectId: typebox_1.Type.String(),
    flowVersionId: typebox_1.Type.String(),
    flowId: typebox_1.Type.String(),
    jobType: typebox_1.Type.Literal(RepeatableJobType.RENEW_WEBHOOK),
});
// Never change without increasing LATEST_JOB_DATA_SCHEMA_VERSION, and adding a migration
exports.RepeatingJobData = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    environment: typebox_1.Type.Enum(shared_1.RunEnvironment),
    schemaVersion: typebox_1.Type.Number(),
    flowVersionId: typebox_1.Type.String(),
    flowId: typebox_1.Type.String(),
    triggerType: typebox_1.Type.Enum(shared_1.TriggerType),
    jobType: typebox_1.Type.Literal(RepeatableJobType.EXECUTE_TRIGGER),
});
// Never change without increasing LATEST_JOB_DATA_SCHEMA_VERSION, and adding a migration
exports.DelayedJobData = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    environment: typebox_1.Type.Enum(shared_1.RunEnvironment),
    schemaVersion: typebox_1.Type.Number(),
    flowVersionId: typebox_1.Type.String(),
    runId: typebox_1.Type.String(),
    httpRequestId: typebox_1.Type.Optional(typebox_1.Type.String()),
    synchronousHandlerId: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    progressUpdateType: typebox_1.Type.Enum(shared_1.ProgressUpdateType),
    jobType: typebox_1.Type.Literal(RepeatableJobType.DELAYED_FLOW),
});
exports.ScheduledJobData = typebox_1.Type.Union([exports.RepeatingJobData, exports.DelayedJobData, exports.RenewWebhookJobData]);
exports.OneTimeJobData = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    environment: typebox_1.Type.Enum(shared_1.RunEnvironment),
    flowVersionId: typebox_1.Type.String(),
    runId: typebox_1.Type.String(),
    synchronousHandlerId: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    httpRequestId: typebox_1.Type.Optional(typebox_1.Type.String()),
    payload: typebox_1.Type.Any(),
    executionType: typebox_1.Type.Enum(shared_1.ExecutionType),
    retryPayload: typebox_1.Type.Optional(typebox_1.Type.Any()),
    progressUpdateType: typebox_1.Type.Enum(shared_1.ProgressUpdateType),
});
exports.WebhookJobData = typebox_1.Type.Object({
    schemaVersion: typebox_1.Type.Number(),
    requestId: typebox_1.Type.String(),
    synchronousHandlerId: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    payload: typebox_1.Type.Any(),
    flowId: typebox_1.Type.String(),
    simulate: typebox_1.Type.Boolean(),
});
exports.JobData = typebox_1.Type.Union([exports.ScheduledJobData, exports.OneTimeJobData, exports.WebhookJobData]);


/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RetryFlowRequestBody = exports.STORE_KEY_MAX_LENGTH = exports.WebhookPauseMetadata = exports.PauseMetadata = exports.DelayPauseMetadata = exports.FlowRunResponse = exports.FlowRunStatus = exports.PauseType = exports.StopResponse = exports.FlowError = exports.GenerateCodeResponse = exports.GenerateCodeRequest = exports.isFlowStateTerminal = exports.FileResponseInterface = exports.secureApId = exports.ApId = exports.apId = exports.Cursor = exports.SeekPage = exports.FlowRetryPayload = exports.FlowRetryStrategy = exports.RunEnvironment = exports.FlowRunId = exports.FlowRun = exports.FlowId = exports.Flow = exports.FlowVersionMetadata = exports.FlowVersionId = exports.FlowVersionState = exports.FlowVersion = exports.AUTHENTICATION_PROPERTY_NAME = exports.TriggerType = exports.PieceTrigger = exports.PieceTriggerSettings = exports.EmptyTrigger = exports.Trigger = exports.TestFlowRunRequestBody = exports.StoreEntryId = exports.StoreEntry = exports.WorkerPrincipal = exports.Principal = exports.SignInRequest = exports.SignUpRequest = exports.ExecuteCodeRequest = exports.StepOutputStatus = void 0;
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(9), exports);
tslib_1.__exportStar(__webpack_require__(21), exports);
tslib_1.__exportStar(__webpack_require__(25), exports);
tslib_1.__exportStar(__webpack_require__(26), exports);
tslib_1.__exportStar(__webpack_require__(28), exports);
tslib_1.__exportStar(__webpack_require__(19), exports);
tslib_1.__exportStar(__webpack_require__(36), exports);
tslib_1.__exportStar(__webpack_require__(37), exports);
tslib_1.__exportStar(__webpack_require__(13), exports);
tslib_1.__exportStar(__webpack_require__(42), exports);
tslib_1.__exportStar(__webpack_require__(43), exports);
tslib_1.__exportStar(__webpack_require__(44), exports);
tslib_1.__exportStar(__webpack_require__(45), exports);
tslib_1.__exportStar(__webpack_require__(52), exports);
tslib_1.__exportStar(__webpack_require__(43), exports);
var step_output_1 = __webpack_require__(44);
Object.defineProperty(exports, "StepOutputStatus", ({ enumerable: true, get: function () { return step_output_1.StepOutputStatus; } }));
tslib_1.__exportStar(__webpack_require__(11), exports);
tslib_1.__exportStar(__webpack_require__(54), exports);
tslib_1.__exportStar(__webpack_require__(56), exports);
tslib_1.__exportStar(__webpack_require__(59), exports);
var code_request_1 = __webpack_require__(60);
Object.defineProperty(exports, "ExecuteCodeRequest", ({ enumerable: true, get: function () { return code_request_1.ExecuteCodeRequest; } }));
tslib_1.__exportStar(__webpack_require__(61), exports);
var sign_up_request_1 = __webpack_require__(62);
Object.defineProperty(exports, "SignUpRequest", ({ enumerable: true, get: function () { return sign_up_request_1.SignUpRequest; } }));
var sign_in_request_1 = __webpack_require__(63);
Object.defineProperty(exports, "SignInRequest", ({ enumerable: true, get: function () { return sign_in_request_1.SignInRequest; } }));
tslib_1.__exportStar(__webpack_require__(64), exports);
var principal_1 = __webpack_require__(65);
Object.defineProperty(exports, "Principal", ({ enumerable: true, get: function () { return principal_1.Principal; } }));
Object.defineProperty(exports, "WorkerPrincipal", ({ enumerable: true, get: function () { return principal_1.WorkerPrincipal; } }));
tslib_1.__exportStar(__webpack_require__(9), exports);
var store_entry_1 = __webpack_require__(55);
Object.defineProperty(exports, "StoreEntry", ({ enumerable: true, get: function () { return store_entry_1.StoreEntry; } }));
Object.defineProperty(exports, "StoreEntryId", ({ enumerable: true, get: function () { return store_entry_1.StoreEntryId; } }));
tslib_1.__exportStar(__webpack_require__(48), exports);
var test_flow_run_request_1 = __webpack_require__(66);
Object.defineProperty(exports, "TestFlowRunRequestBody", ({ enumerable: true, get: function () { return test_flow_run_request_1.TestFlowRunRequestBody; } }));
var trigger_1 = __webpack_require__(51);
Object.defineProperty(exports, "Trigger", ({ enumerable: true, get: function () { return trigger_1.Trigger; } }));
Object.defineProperty(exports, "EmptyTrigger", ({ enumerable: true, get: function () { return trigger_1.EmptyTrigger; } }));
Object.defineProperty(exports, "PieceTriggerSettings", ({ enumerable: true, get: function () { return trigger_1.PieceTriggerSettings; } }));
Object.defineProperty(exports, "PieceTrigger", ({ enumerable: true, get: function () { return trigger_1.PieceTrigger; } }));
Object.defineProperty(exports, "TriggerType", ({ enumerable: true, get: function () { return trigger_1.TriggerType; } }));
Object.defineProperty(exports, "AUTHENTICATION_PROPERTY_NAME", ({ enumerable: true, get: function () { return trigger_1.AUTHENTICATION_PROPERTY_NAME; } }));
var flow_version_1 = __webpack_require__(47);
Object.defineProperty(exports, "FlowVersion", ({ enumerable: true, get: function () { return flow_version_1.FlowVersion; } }));
Object.defineProperty(exports, "FlowVersionState", ({ enumerable: true, get: function () { return flow_version_1.FlowVersionState; } }));
Object.defineProperty(exports, "FlowVersionId", ({ enumerable: true, get: function () { return flow_version_1.FlowVersionId; } }));
Object.defineProperty(exports, "FlowVersionMetadata", ({ enumerable: true, get: function () { return flow_version_1.FlowVersionMetadata; } }));
var flow_1 = __webpack_require__(46);
Object.defineProperty(exports, "Flow", ({ enumerable: true, get: function () { return flow_1.Flow; } }));
Object.defineProperty(exports, "FlowId", ({ enumerable: true, get: function () { return flow_1.FlowId; } }));
tslib_1.__exportStar(__webpack_require__(68), exports);
tslib_1.__exportStar(__webpack_require__(72), exports);
var flow_run_1 = __webpack_require__(67);
Object.defineProperty(exports, "FlowRun", ({ enumerable: true, get: function () { return flow_run_1.FlowRun; } }));
Object.defineProperty(exports, "FlowRunId", ({ enumerable: true, get: function () { return flow_run_1.FlowRunId; } }));
Object.defineProperty(exports, "RunEnvironment", ({ enumerable: true, get: function () { return flow_run_1.RunEnvironment; } }));
Object.defineProperty(exports, "FlowRetryStrategy", ({ enumerable: true, get: function () { return flow_run_1.FlowRetryStrategy; } }));
Object.defineProperty(exports, "FlowRetryPayload", ({ enumerable: true, get: function () { return flow_run_1.FlowRetryPayload; } }));
tslib_1.__exportStar(__webpack_require__(75), exports);
var seek_page_1 = __webpack_require__(76);
Object.defineProperty(exports, "SeekPage", ({ enumerable: true, get: function () { return seek_page_1.SeekPage; } }));
Object.defineProperty(exports, "Cursor", ({ enumerable: true, get: function () { return seek_page_1.Cursor; } }));
var id_generator_1 = __webpack_require__(23);
Object.defineProperty(exports, "apId", ({ enumerable: true, get: function () { return id_generator_1.apId; } }));
Object.defineProperty(exports, "ApId", ({ enumerable: true, get: function () { return id_generator_1.ApId; } }));
Object.defineProperty(exports, "secureApId", ({ enumerable: true, get: function () { return id_generator_1.secureApId; } }));
tslib_1.__exportStar(__webpack_require__(77), exports);
tslib_1.__exportStar(__webpack_require__(78), exports);
tslib_1.__exportStar(__webpack_require__(20), exports);
tslib_1.__exportStar(__webpack_require__(22), exports);
tslib_1.__exportStar(__webpack_require__(79), exports);
tslib_1.__exportStar(__webpack_require__(80), exports);
tslib_1.__exportStar(__webpack_require__(81), exports);
tslib_1.__exportStar(__webpack_require__(82), exports);
tslib_1.__exportStar(__webpack_require__(86), exports);
tslib_1.__exportStar(__webpack_require__(87), exports);
var forms_1 = __webpack_require__(90);
Object.defineProperty(exports, "FileResponseInterface", ({ enumerable: true, get: function () { return forms_1.FileResponseInterface; } }));
tslib_1.__exportStar(__webpack_require__(91), exports);
var flow_execution_1 = __webpack_require__(41);
Object.defineProperty(exports, "isFlowStateTerminal", ({ enumerable: true, get: function () { return flow_execution_1.isFlowStateTerminal; } }));
tslib_1.__exportStar(__webpack_require__(96), exports);
tslib_1.__exportStar(__webpack_require__(97), exports);
var copilot_1 = __webpack_require__(98);
Object.defineProperty(exports, "GenerateCodeRequest", ({ enumerable: true, get: function () { return copilot_1.GenerateCodeRequest; } }));
Object.defineProperty(exports, "GenerateCodeResponse", ({ enumerable: true, get: function () { return copilot_1.GenerateCodeResponse; } }));
var flow_execution_2 = __webpack_require__(41);
Object.defineProperty(exports, "FlowError", ({ enumerable: true, get: function () { return flow_execution_2.FlowError; } }));
var flow_execution_3 = __webpack_require__(41);
Object.defineProperty(exports, "StopResponse", ({ enumerable: true, get: function () { return flow_execution_3.StopResponse; } }));
var flow_execution_4 = __webpack_require__(41);
Object.defineProperty(exports, "PauseType", ({ enumerable: true, get: function () { return flow_execution_4.PauseType; } }));
Object.defineProperty(exports, "FlowRunStatus", ({ enumerable: true, get: function () { return flow_execution_4.FlowRunStatus; } }));
Object.defineProperty(exports, "FlowRunResponse", ({ enumerable: true, get: function () { return flow_execution_4.FlowRunResponse; } }));
var flow_execution_5 = __webpack_require__(41);
Object.defineProperty(exports, "DelayPauseMetadata", ({ enumerable: true, get: function () { return flow_execution_5.DelayPauseMetadata; } }));
Object.defineProperty(exports, "PauseMetadata", ({ enumerable: true, get: function () { return flow_execution_5.PauseMetadata; } }));
Object.defineProperty(exports, "WebhookPauseMetadata", ({ enumerable: true, get: function () { return flow_execution_5.WebhookPauseMetadata; } }));
tslib_1.__exportStar(__webpack_require__(93), exports);
var store_entry_2 = __webpack_require__(55);
Object.defineProperty(exports, "STORE_KEY_MAX_LENGTH", ({ enumerable: true, get: function () { return store_entry_2.STORE_KEY_MAX_LENGTH; } }));
var test_flow_run_request_2 = __webpack_require__(66);
Object.defineProperty(exports, "RetryFlowRequestBody", ({ enumerable: true, get: function () { return test_flow_run_request_2.RetryFlowRequestBody; } }));
tslib_1.__exportStar(__webpack_require__(81), exports);
tslib_1.__exportStar(__webpack_require__(99), exports);
tslib_1.__exportStar(__webpack_require__(100), exports);
tslib_1.__exportStar(__webpack_require__(101), exports);
tslib_1.__exportStar(__webpack_require__(102), exports);
// Look at https://github.com/sinclairzx81/typebox/issues/350
const system_1 = __webpack_require__(103);
tslib_1.__exportStar(__webpack_require__(41), exports);
system_1.TypeSystem.ExactOptionalPropertyTypes = false;


/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SingleActionSchema = exports.Action = exports.BranchActionSchema = exports.BranchActionSettings = exports.BranchCondition = exports.BranchActionSettingsWithValidation = exports.textConditions = exports.singleValueConditions = exports.BranchOperator = exports.LoopOnItemsActionSchema = exports.LoopOnItemsActionSettings = exports.LoopOnItemsActionSettingsWithValidation = exports.PieceActionSchema = exports.PieceActionSettings = exports.CodeActionSchema = exports.CodeActionSettings = exports.SourceCode = exports.ActionErrorHandlingOptions = exports.ActionType = void 0;
const typebox_1 = __webpack_require__(10);
const pieces_1 = __webpack_require__(11);
const sample_data_1 = __webpack_require__(20);
var ActionType;
(function (ActionType) {
    ActionType["CODE"] = "CODE";
    ActionType["PIECE"] = "PIECE";
    ActionType["LOOP_ON_ITEMS"] = "LOOP_ON_ITEMS";
    ActionType["BRANCH"] = "BRANCH";
})(ActionType || (exports.ActionType = ActionType = {}));
const commonActionProps = {
    name: typebox_1.Type.String({}),
    valid: typebox_1.Type.Boolean({}),
    displayName: typebox_1.Type.String({}),
};
exports.ActionErrorHandlingOptions = typebox_1.Type.Optional(typebox_1.Type.Object({
    continueOnFailure: typebox_1.Type.Optional(typebox_1.Type.Object({
        value: typebox_1.Type.Boolean(),
    })),
    retryOnFailure: typebox_1.Type.Optional(typebox_1.Type.Object({
        value: typebox_1.Type.Boolean(),
    })),
}));
exports.SourceCode = typebox_1.Type.Object({
    packageJson: typebox_1.Type.String({}),
    code: typebox_1.Type.String({}),
});
exports.CodeActionSettings = typebox_1.Type.Object({
    sourceCode: exports.SourceCode,
    input: typebox_1.Type.Record(typebox_1.Type.String({}), typebox_1.Type.Any()),
    inputUiInfo: typebox_1.Type.Optional(sample_data_1.SampleDataSettingsObject),
    errorHandlingOptions: exports.ActionErrorHandlingOptions,
});
exports.CodeActionSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, commonActionProps), { type: typebox_1.Type.Literal(ActionType.CODE), settings: exports.CodeActionSettings }));
// Piece Action
exports.PieceActionSettings = typebox_1.Type.Object({
    packageType: typebox_1.Type.Enum(pieces_1.PackageType),
    pieceType: typebox_1.Type.Enum(pieces_1.PieceType),
    pieceName: typebox_1.Type.String({}),
    pieceVersion: pieces_1.VersionType,
    actionName: typebox_1.Type.Optional(typebox_1.Type.String({})),
    input: typebox_1.Type.Record(typebox_1.Type.String({}), typebox_1.Type.Any()),
    inputUiInfo: sample_data_1.SampleDataSettingsObject,
    errorHandlingOptions: exports.ActionErrorHandlingOptions,
});
exports.PieceActionSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, commonActionProps), { type: typebox_1.Type.Literal(ActionType.PIECE), settings: exports.PieceActionSettings }));
// Loop Items
exports.LoopOnItemsActionSettingsWithValidation = typebox_1.Type.Object({
    items: typebox_1.Type.String({ minLength: 1 }),
    inputUiInfo: sample_data_1.SampleDataSettingsObject,
});
exports.LoopOnItemsActionSettings = typebox_1.Type.Object({
    items: typebox_1.Type.String(),
    inputUiInfo: sample_data_1.SampleDataSettingsObject,
});
exports.LoopOnItemsActionSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, commonActionProps), { type: typebox_1.Type.Literal(ActionType.LOOP_ON_ITEMS), settings: exports.LoopOnItemsActionSettings }));
var BranchOperator;
(function (BranchOperator) {
    BranchOperator["TEXT_CONTAINS"] = "TEXT_CONTAINS";
    BranchOperator["TEXT_DOES_NOT_CONTAIN"] = "TEXT_DOES_NOT_CONTAIN";
    BranchOperator["TEXT_EXACTLY_MATCHES"] = "TEXT_EXACTLY_MATCHES";
    BranchOperator["TEXT_DOES_NOT_EXACTLY_MATCH"] = "TEXT_DOES_NOT_EXACTLY_MATCH";
    BranchOperator["TEXT_STARTS_WITH"] = "TEXT_START_WITH";
    BranchOperator["TEXT_DOES_NOT_START_WITH"] = "TEXT_DOES_NOT_START_WITH";
    BranchOperator["TEXT_ENDS_WITH"] = "TEXT_ENDS_WITH";
    BranchOperator["TEXT_DOES_NOT_END_WITH"] = "TEXT_DOES_NOT_END_WITH";
    BranchOperator["NUMBER_IS_GREATER_THAN"] = "NUMBER_IS_GREATER_THAN";
    BranchOperator["NUMBER_IS_LESS_THAN"] = "NUMBER_IS_LESS_THAN";
    BranchOperator["NUMBER_IS_EQUAL_TO"] = "NUMBER_IS_EQUAL_TO";
    BranchOperator["BOOLEAN_IS_TRUE"] = "BOOLEAN_IS_TRUE";
    BranchOperator["BOOLEAN_IS_FALSE"] = "BOOLEAN_IS_FALSE";
    BranchOperator["EXISTS"] = "EXISTS";
    BranchOperator["DOES_NOT_EXIST"] = "DOES_NOT_EXIST";
})(BranchOperator || (exports.BranchOperator = BranchOperator = {}));
exports.singleValueConditions = [
    BranchOperator.EXISTS,
    BranchOperator.DOES_NOT_EXIST,
    BranchOperator.BOOLEAN_IS_TRUE,
    BranchOperator.BOOLEAN_IS_FALSE,
];
exports.textConditions = [
    BranchOperator.TEXT_CONTAINS,
    BranchOperator.TEXT_DOES_NOT_CONTAIN,
    BranchOperator.TEXT_EXACTLY_MATCHES,
    BranchOperator.TEXT_DOES_NOT_EXACTLY_MATCH,
    BranchOperator.TEXT_STARTS_WITH,
    BranchOperator.TEXT_DOES_NOT_START_WITH,
    BranchOperator.TEXT_ENDS_WITH,
    BranchOperator.TEXT_DOES_NOT_END_WITH,
];
const BranchConditionValid = (addMinLength) => typebox_1.Type.Union([
    typebox_1.Type.Object({
        firstValue: addMinLength ? typebox_1.Type.String({ minLength: 1 }) : typebox_1.Type.String(),
        secondValue: addMinLength ? typebox_1.Type.String({ minLength: 1 }) : typebox_1.Type.String(),
        caseSensitive: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
        operator: typebox_1.Type.Optional(typebox_1.Type.Union([
            typebox_1.Type.Literal(BranchOperator.TEXT_CONTAINS),
            typebox_1.Type.Literal(BranchOperator.TEXT_DOES_NOT_CONTAIN),
            typebox_1.Type.Literal(BranchOperator.TEXT_EXACTLY_MATCHES),
            typebox_1.Type.Literal(BranchOperator.TEXT_DOES_NOT_EXACTLY_MATCH),
            typebox_1.Type.Literal(BranchOperator.TEXT_STARTS_WITH),
            typebox_1.Type.Literal(BranchOperator.TEXT_DOES_NOT_START_WITH),
            typebox_1.Type.Literal(BranchOperator.TEXT_ENDS_WITH),
            typebox_1.Type.Literal(BranchOperator.TEXT_DOES_NOT_END_WITH),
        ])),
    }),
    typebox_1.Type.Object({
        firstValue: addMinLength ? typebox_1.Type.String({ minLength: 1 }) : typebox_1.Type.String(),
        secondValue: addMinLength ? typebox_1.Type.String({ minLength: 1 }) : typebox_1.Type.String(),
        operator: typebox_1.Type.Optional(typebox_1.Type.Union([
            typebox_1.Type.Literal(BranchOperator.NUMBER_IS_GREATER_THAN),
            typebox_1.Type.Literal(BranchOperator.NUMBER_IS_LESS_THAN),
            typebox_1.Type.Literal(BranchOperator.NUMBER_IS_EQUAL_TO),
        ])),
    }),
    typebox_1.Type.Object({
        firstValue: addMinLength ? typebox_1.Type.String({ minLength: 1 }) : typebox_1.Type.String(),
        operator: typebox_1.Type.Optional(typebox_1.Type.Union([
            typebox_1.Type.Literal(BranchOperator.EXISTS),
            typebox_1.Type.Literal(BranchOperator.DOES_NOT_EXIST),
            typebox_1.Type.Literal(BranchOperator.BOOLEAN_IS_TRUE),
            typebox_1.Type.Literal(BranchOperator.BOOLEAN_IS_FALSE),
        ])),
    }),
]);
exports.BranchActionSettingsWithValidation = typebox_1.Type.Object({
    conditions: typebox_1.Type.Array(typebox_1.Type.Array(BranchConditionValid(true))),
    inputUiInfo: sample_data_1.SampleDataSettingsObject,
});
exports.BranchCondition = BranchConditionValid(false);
exports.BranchActionSettings = typebox_1.Type.Object({
    conditions: typebox_1.Type.Array(typebox_1.Type.Array(BranchConditionValid(false))),
    inputUiInfo: sample_data_1.SampleDataSettingsObject,
});
exports.BranchActionSchema = typebox_1.Type.Object(Object.assign(Object.assign({}, commonActionProps), { type: typebox_1.Type.Literal(ActionType.BRANCH), settings: exports.BranchActionSettings }));
// Union of all actions
exports.Action = typebox_1.Type.Recursive(action => typebox_1.Type.Union([
    typebox_1.Type.Intersect([exports.CodeActionSchema, typebox_1.Type.Object({
            nextAction: typebox_1.Type.Optional(action),
        })]),
    typebox_1.Type.Intersect([exports.PieceActionSchema, typebox_1.Type.Object({
            nextAction: typebox_1.Type.Optional(action),
        })]),
    typebox_1.Type.Intersect([exports.LoopOnItemsActionSchema, typebox_1.Type.Object({
            nextAction: typebox_1.Type.Optional(action),
            firstLoopAction: typebox_1.Type.Optional(action),
        })]),
    typebox_1.Type.Intersect([exports.BranchActionSchema, typebox_1.Type.Object({
            nextAction: typebox_1.Type.Optional(action),
            onSuccessAction: typebox_1.Type.Optional(action),
            onFailureAction: typebox_1.Type.Optional(action),
        })]),
]));
exports.SingleActionSchema = typebox_1.Type.Union([
    exports.CodeActionSchema,
    exports.PieceActionSchema,
    exports.LoopOnItemsActionSchema,
    exports.BranchActionSchema,
]);


/***/ }),
/* 10 */
/***/ ((module) => {

module.exports = require("@sinclair/typebox");

/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceSyncMode = void 0;
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(12), exports);
tslib_1.__exportStar(__webpack_require__(14), exports);
tslib_1.__exportStar(__webpack_require__(15), exports);
var PieceSyncMode;
(function (PieceSyncMode) {
    PieceSyncMode["OFFICIAL_AUTO"] = "OFFICIAL_AUTO";
    PieceSyncMode["NONE"] = "NONE";
})(PieceSyncMode || (exports.PieceSyncMode = PieceSyncMode = {}));


/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPieceRequestBody = exports.PieceScope = exports.PieceOptionRequest = exports.ListVersionsResponse = exports.GetPieceRequestQuery = exports.ListVersionRequestQuery = exports.ListPiecesRequestQuery = exports.GetPieceRequestParams = exports.GetPieceRequestWithScopeParams = exports.PieceOrderBy = exports.PieceSortBy = exports.SuggestionType = exports.VersionType = exports.ExactVersionType = exports.VERSION_PATTERN = exports.EXACT_VERSION_PATTERN = void 0;
const typebox_1 = __webpack_require__(10);
const flag_1 = __webpack_require__(13);
const piece_1 = __webpack_require__(14);
exports.EXACT_VERSION_PATTERN = /^[0-9]+\.[0-9]+\.[0-9]+$/;
exports.VERSION_PATTERN = /^([~^])?[0-9]+\.[0-9]+\.[0-9]+$/;
exports.ExactVersionType = typebox_1.Type.RegEx(exports.EXACT_VERSION_PATTERN);
exports.VersionType = typebox_1.Type.RegEx(exports.VERSION_PATTERN);
var SuggestionType;
(function (SuggestionType) {
    SuggestionType["ACTION"] = "ACTION";
    SuggestionType["TRIGGER"] = "TRIGGER";
    SuggestionType["ACTION_AND_TRIGGER"] = "ACTION_AND_TRIGGER";
})(SuggestionType || (exports.SuggestionType = SuggestionType = {}));
var PieceSortBy;
(function (PieceSortBy) {
    PieceSortBy["NAME"] = "NAME";
    PieceSortBy["UPDATED"] = "UPDATED";
    PieceSortBy["CREATED"] = "CREATED";
    PieceSortBy["POPULARITY"] = "POPULARITY";
})(PieceSortBy || (exports.PieceSortBy = PieceSortBy = {}));
var PieceOrderBy;
(function (PieceOrderBy) {
    PieceOrderBy["ASC"] = "ASC";
    PieceOrderBy["DESC"] = "DESC";
})(PieceOrderBy || (exports.PieceOrderBy = PieceOrderBy = {}));
exports.GetPieceRequestWithScopeParams = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    scope: typebox_1.Type.String(),
});
exports.GetPieceRequestParams = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
});
exports.ListPiecesRequestQuery = typebox_1.Type.Object({
    release: typebox_1.Type.Optional(exports.ExactVersionType),
    includeTags: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    includeHidden: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    edition: typebox_1.Type.Optional(typebox_1.Type.Enum(flag_1.ApEdition)),
    searchQuery: typebox_1.Type.Optional(typebox_1.Type.String()),
    sortBy: typebox_1.Type.Optional(typebox_1.Type.Enum(PieceSortBy)),
    orderBy: typebox_1.Type.Optional(typebox_1.Type.Enum(PieceOrderBy)),
    categories: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Enum(piece_1.PieceCategory))),
    suggestionType: typebox_1.Type.Optional(typebox_1.Type.Enum(SuggestionType)),
});
exports.ListVersionRequestQuery = typebox_1.Type.Object({
    release: exports.ExactVersionType,
    name: typebox_1.Type.String(),
    edition: typebox_1.Type.Optional(typebox_1.Type.Enum(flag_1.ApEdition)),
});
exports.GetPieceRequestQuery = typebox_1.Type.Object({
    version: typebox_1.Type.Optional(exports.VersionType),
});
exports.ListVersionsResponse = typebox_1.Type.Record(exports.ExactVersionType, typebox_1.Type.Object({}));
exports.PieceOptionRequest = typebox_1.Type.Object({
    packageType: typebox_1.Type.Enum(piece_1.PackageType),
    pieceType: typebox_1.Type.Enum(piece_1.PieceType),
    pieceName: typebox_1.Type.String({}),
    pieceVersion: exports.VersionType,
    stepName: typebox_1.Type.String({}),
    propertyName: typebox_1.Type.String({}),
    flowId: typebox_1.Type.String(),
    flowVersionId: typebox_1.Type.String(),
    input: typebox_1.Type.Any({}),
    searchValue: typebox_1.Type.Optional(typebox_1.Type.String()),
});
var PieceScope;
(function (PieceScope) {
    PieceScope["PROJECT"] = "PROJECT";
    PieceScope["PLATFORM"] = "PLATFORM";
})(PieceScope || (exports.PieceScope = PieceScope = {}));
exports.AddPieceRequestBody = typebox_1.Type.Union([
    typebox_1.Type.Object({
        packageType: typebox_1.Type.Literal(piece_1.PackageType.ARCHIVE),
        scope: typebox_1.Type.Enum(PieceScope),
        pieceName: typebox_1.Type.String(),
        pieceVersion: exports.ExactVersionType,
        pieceArchive: typebox_1.Type.Unknown(),
    }, {
        title: 'Private Piece',
    }),
    typebox_1.Type.Object({
        packageType: typebox_1.Type.Literal(piece_1.PackageType.REGISTRY),
        scope: typebox_1.Type.Enum(PieceScope),
        pieceName: typebox_1.Type.String(),
        pieceVersion: exports.ExactVersionType,
    }, {
        title: 'NPM Piece',
    }),
]);


/***/ }),
/* 13 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApFlagId = exports.ApEdition = exports.ApEnvironment = void 0;
var ApEnvironment;
(function (ApEnvironment) {
    ApEnvironment["PRODUCTION"] = "prod";
    ApEnvironment["DEVELOPMENT"] = "dev";
    ApEnvironment["TESTING"] = "test";
})(ApEnvironment || (exports.ApEnvironment = ApEnvironment = {}));
var ApEdition;
(function (ApEdition) {
    ApEdition["COMMUNITY"] = "ce";
    ApEdition["ENTERPRISE"] = "ee";
    ApEdition["CLOUD"] = "cloud";
})(ApEdition || (exports.ApEdition = ApEdition = {}));
var ApFlagId;
(function (ApFlagId) {
    ApFlagId["BILLING_ENABLED"] = "BILLING_ENABLED";
    ApFlagId["CLOUD_AUTH_ENABLED"] = "CLOUD_AUTH_ENABLED";
    ApFlagId["COPILOT_ENABLED"] = "COPILOT_ENABLED";
    ApFlagId["PROJECT_LIMITS_ENABLED"] = "PROJECT_LIMITS_ENABLED";
    ApFlagId["CURRENT_VERSION"] = "CURRENT_VERSION";
    ApFlagId["EDITION"] = "EDITION";
    ApFlagId["IS_CLOUD_PLATFORM"] = "IS_CLOUD_PLATFORM";
    ApFlagId["EMAIL_AUTH_ENABLED"] = "EMAIL_AUTH_ENABLED";
    ApFlagId["ENVIRONMENT"] = "ENVIRONMENT";
    ApFlagId["FRONTEND_URL"] = "FRONTEND_URL";
    ApFlagId["LATEST_VERSION"] = "LATEST_VERSION";
    ApFlagId["OWN_AUTH2_ENABLED"] = "OWN_AUTH2_ENABLED";
    ApFlagId["PRIVACY_POLICY_URL"] = "PRIVACY_POLICY_URL";
    ApFlagId["PIECES_SYNC_MODE"] = "PIECES_SYNC_MODE";
    ApFlagId["PRIVATE_PIECES_ENABLED"] = "PRIVATE_PIECES_ENABLED";
    ApFlagId["FLOW_RUN_TIME_SECONDS"] = "FLOW_RUN_TIME_SECONDS";
    ApFlagId["SHOW_BILLING"] = "SHOW_BILLING";
    ApFlagId["INSTALL_PROJECT_PIECES_ENABLED"] = "INSTALL_PROJECT_PIECES_ENABLED";
    ApFlagId["MANAGE_PROJECT_PIECES_ENABLED"] = "MANAGE_PROJECT_PIECES_ENABLED";
    ApFlagId["SHOW_COMMUNITY"] = "SHOW_COMMUNITY";
    ApFlagId["SHOW_COPILOT"] = "SHOW_COPILOT";
    ApFlagId["SHOW_DOCS"] = "SHOW_DOCS";
    ApFlagId["SHOW_PLATFORM_DEMO"] = "SHOW_PLATFORM_DEMO";
    ApFlagId["SHOW_SIGN_UP_LINK"] = "SHOW_SIGN_UP_LINK";
    ApFlagId["SHOW_REWARDS"] = "SHOW_REWARDS";
    ApFlagId["SUPPORTED_APP_WEBHOOKS"] = "SUPPORTED_APP_WEBHOOKS";
    ApFlagId["TELEMETRY_ENABLED"] = "TELEMETRY_ENABLED";
    ApFlagId["TEMPLATES_PROJECT_ID"] = "TEMPLATES_PROJECT_ID";
    ApFlagId["TERMS_OF_SERVICE_URL"] = "TERMS_OF_SERVICE_URL";
    ApFlagId["THEME"] = "THEME";
    ApFlagId["THIRD_PARTY_AUTH_PROVIDER_REDIRECT_URL"] = "THIRD_PARTY_AUTH_PROVIDER_REDIRECT_URL";
    ApFlagId["THIRD_PARTY_AUTH_PROVIDERS_TO_SHOW_MAP"] = "THIRD_PARTY_AUTH_PROVIDERS_TO_SHOW_MAP";
    ApFlagId["SAML_AUTH_ACS_URL"] = "SAML_AUTH_ACS_URL";
    ApFlagId["USER_CREATED"] = "USER_CREATED";
    ApFlagId["WEBHOOK_URL_PREFIX"] = "WEBHOOK_URL_PREFIX";
})(ApFlagId || (exports.ApFlagId = ApFlagId = {}));


/***/ }),
/* 14 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceCategory = exports.PublicPiecePackage = exports.PrivatePiecePackage = exports.PieceType = exports.PackageType = void 0;
const typebox_1 = __webpack_require__(10);
var PackageType;
(function (PackageType) {
    PackageType["ARCHIVE"] = "ARCHIVE";
    PackageType["REGISTRY"] = "REGISTRY";
})(PackageType || (exports.PackageType = PackageType = {}));
var PieceType;
(function (PieceType) {
    PieceType["CUSTOM"] = "CUSTOM";
    PieceType["OFFICIAL"] = "OFFICIAL";
})(PieceType || (exports.PieceType = PieceType = {}));
exports.PrivatePiecePackage = typebox_1.Type.Object({
    packageType: typebox_1.Type.Literal(PackageType.ARCHIVE),
    pieceType: typebox_1.Type.Enum(PieceType),
    pieceName: typebox_1.Type.String(),
    pieceVersion: typebox_1.Type.String(),
    archiveId: typebox_1.Type.String(),
    archive: typebox_1.Type.Unknown(),
});
exports.PublicPiecePackage = typebox_1.Type.Object({
    packageType: typebox_1.Type.Literal(PackageType.REGISTRY),
    pieceType: typebox_1.Type.Enum(PieceType),
    pieceName: typebox_1.Type.String(),
    pieceVersion: typebox_1.Type.String(),
});
var PieceCategory;
(function (PieceCategory) {
    PieceCategory["ARTIFICIAL_INTELLIGENCE"] = "ARTIFICIAL_INTELLIGENCE";
    PieceCategory["COMMUNICATION"] = "COMMUNICATION";
    PieceCategory["COMMERCE"] = "COMMERCE";
    PieceCategory["CORE"] = "CORE";
    PieceCategory["BUSINESS_INTELLIGENCE"] = "BUSINESS_INTELLIGENCE";
    PieceCategory["ACCOUNTING"] = "ACCOUNTING";
    PieceCategory["PRODUCTIVITY"] = "PRODUCTIVITY";
    PieceCategory["CONTENT_AND_FILES"] = "CONTENT_AND_FILES";
    PieceCategory["DEVELOPER_TOOLS"] = "DEVELOPER_TOOLS";
    PieceCategory["CUSTOMER_SUPPORT"] = "CUSTOMER_SUPPORT";
    PieceCategory["FORMS_AND_SURVEYS"] = "FORMS_AND_SURVEYS";
    PieceCategory["HUMAN_RESOURCES"] = "HUMAN_RESOURCES";
    PieceCategory["PAYMENT_PROCESSING"] = "PAYMENT_PROCESSING";
    PieceCategory["MARKETING"] = "MARKETING";
    PieceCategory["SALES_AND_CRM"] = "SALES_AND_CRM";
    PieceCategory["PREMIUM"] = "PREMIUM";
})(PieceCategory || (exports.PieceCategory = PieceCategory = {}));


/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPieceMajorAndMinorVersion = exports.extractPieceFromModule = exports.getPackageArchivePathForPiece = exports.getPackageSpecForPiece = exports.getPackageAliasForPiece = void 0;
const tslib_1 = __webpack_require__(1);
const major_1 = tslib_1.__importDefault(__webpack_require__(16));
const minor_1 = tslib_1.__importDefault(__webpack_require__(17));
const min_version_1 = tslib_1.__importDefault(__webpack_require__(18));
const activepieces_error_1 = __webpack_require__(19);
const piece_1 = __webpack_require__(14);
const getPackageAliasForPiece = (params) => {
    const { pieceName, pieceVersion } = params;
    return `${pieceName}-${pieceVersion}`;
};
exports.getPackageAliasForPiece = getPackageAliasForPiece;
const getPackageSpecForPiece = (packageArchivePath, params) => {
    const { packageType, pieceName, pieceVersion } = params;
    switch (packageType) {
        case piece_1.PackageType.REGISTRY: {
            return `npm:${pieceName}@${pieceVersion}`;
        }
        case piece_1.PackageType.ARCHIVE: {
            const archivePath = (0, exports.getPackageArchivePathForPiece)({
                archiveId: params.archiveId,
                archivePath: packageArchivePath,
            });
            return `file:${archivePath}`;
        }
    }
};
exports.getPackageSpecForPiece = getPackageSpecForPiece;
const getPackageArchivePathForPiece = (params) => {
    return `${params.archivePath}/${params.archiveId}.tgz`;
};
exports.getPackageArchivePathForPiece = getPackageArchivePathForPiece;
const extractPieceFromModule = (params) => {
    const { module, pieceName, pieceVersion } = params;
    const exports = Object.values(module);
    for (const e of exports) {
        if (e !== null && e !== undefined && e.constructor.name === 'Piece') {
            return e;
        }
    }
    throw new activepieces_error_1.ActivepiecesError({
        code: activepieces_error_1.ErrorCode.PIECE_NOT_FOUND,
        params: {
            pieceName,
            pieceVersion,
            message: 'Failed to extract piece from module.',
        },
    });
};
exports.extractPieceFromModule = extractPieceFromModule;
const getPieceMajorAndMinorVersion = (pieceVersion) => {
    const minimumSemver = (0, min_version_1.default)(pieceVersion);
    return minimumSemver
        ? `${(0, major_1.default)(minimumSemver)}.${(0, minor_1.default)(minimumSemver)}`
        : `${(0, major_1.default)(pieceVersion)}.${(0, minor_1.default)(pieceVersion)}`;
};
exports.getPieceMajorAndMinorVersion = getPieceMajorAndMinorVersion;


/***/ }),
/* 16 */
/***/ ((module) => {

module.exports = require("semver/functions/major");

/***/ }),
/* 17 */
/***/ ((module) => {

module.exports = require("semver/functions/minor");

/***/ }),
/* 18 */
/***/ ((module) => {

module.exports = require("semver/ranges/min-version");

/***/ }),
/* 19 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorCode = exports.ActivepiecesError = void 0;
class ActivepiecesError extends Error {
    constructor(error, message) {
        super(error.code + (message ? `: ${message}` : ''));
        this.error = error;
    }
}
exports.ActivepiecesError = ActivepiecesError;
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["AUTHENTICATION"] = "AUTHENTICATION";
    ErrorCode["AUTHORIZATION"] = "AUTHORIZATION";
    ErrorCode["CONFIG_NOT_FOUND"] = "CONFIG_NOT_FOUND";
    ErrorCode["DOMAIN_NOT_ALLOWED"] = "DOMAIN_NOT_ALLOWED";
    ErrorCode["EMAIL_IS_NOT_VERIFIED"] = "EMAIL_IS_NOT_VERIFIED";
    ErrorCode["ENGINE_OPERATION_FAILURE"] = "ENGINE_OPERATION_FAILURE";
    ErrorCode["ENTITY_NOT_FOUND"] = "ENTITY_NOT_FOUND";
    ErrorCode["EXECUTION_TIMEOUT"] = "EXECUTION_TIMEOUT";
    ErrorCode["EMAIL_AUTH_DISABLED"] = "EMAIL_AUTH_DISABLED";
    ErrorCode["EXISTING_USER"] = "EXISTING_USER";
    ErrorCode["EXISTING_ALERT_CHANNEL"] = "EXISTING_ALERT_CHANNEL";
    ErrorCode["FLOW_FORM_NOT_FOUND"] = "FLOW_FORM_NOT_FOUND";
    ErrorCode["FILE_NOT_FOUND"] = "FILE_NOT_FOUND";
    ErrorCode["FLOW_INSTANCE_NOT_FOUND"] = "INSTANCE_NOT_FOUND";
    ErrorCode["FLOW_NOT_FOUND"] = "FLOW_NOT_FOUND";
    ErrorCode["FLOW_OPERATION_INVALID"] = "FLOW_OPERATION_INVALID";
    ErrorCode["FLOW_IN_USE"] = "FLOW_IN_USE";
    ErrorCode["FLOW_RUN_NOT_FOUND"] = "FLOW_RUN_NOT_FOUND";
    ErrorCode["INVALID_API_KEY"] = "INVALID_API_KEY";
    ErrorCode["INVALID_APP_CONNECTION"] = "INVALID_APP_CONNECTION";
    ErrorCode["INVALID_BEARER_TOKEN"] = "INVALID_BEARER_TOKEN";
    ErrorCode["INVALID_CLAIM"] = "INVALID_CLAIM";
    ErrorCode["INVALID_CLOUD_CLAIM"] = "INVALID_CLOUD_CLAIM";
    ErrorCode["INVALID_CREDENTIALS"] = "INVALID_CREDENTIALS";
    ErrorCode["INVALID_OR_EXPIRED_JWT_TOKEN"] = "INVALID_OR_EXPIRED_JWT_TOKEN";
    ErrorCode["INVALID_OTP"] = "INVALID_OTP";
    ErrorCode["INVALID_SAML_RESPONSE"] = "INVALID_SAML_RESPONSE";
    ErrorCode["INVITATION_ONLY_SIGN_UP"] = "INVITATION_ONLY_SIGN_UP";
    ErrorCode["JOB_REMOVAL_FAILURE"] = "JOB_REMOVAL_FAILURE";
    ErrorCode["OPEN_AI_FAILED"] = "OPEN_AI_FAILED";
    ErrorCode["PAUSE_METADATA_MISSING"] = "PAUSE_METADATA_MISSING";
    ErrorCode["PERMISSION_DENIED"] = "PERMISSION_DENIED";
    ErrorCode["PIECE_NOT_FOUND"] = "PIECE_NOT_FOUND";
    ErrorCode["PIECE_TRIGGER_NOT_FOUND"] = "PIECE_TRIGGER_NOT_FOUND";
    ErrorCode["QUOTA_EXCEEDED"] = "QUOTA_EXCEEDED";
    ErrorCode["FEATURE_DISABLED"] = "FEATURE_DISABLED";
    ErrorCode["SIGN_UP_DISABLED"] = "SIGN_UP_DISABLED";
    ErrorCode["STEP_NOT_FOUND"] = "STEP_NOT_FOUND";
    ErrorCode["SYSTEM_PROP_INVALID"] = "SYSTEM_PROP_INVALID";
    ErrorCode["SYSTEM_PROP_NOT_DEFINED"] = "SYSTEM_PROP_NOT_DEFINED";
    ErrorCode["TEST_TRIGGER_FAILED"] = "TEST_TRIGGER_FAILED";
    ErrorCode["TRIGGER_DISABLE"] = "TRIGGER_DISABLE";
    ErrorCode["TRIGGER_ENABLE"] = "TRIGGER_ENABLE";
    ErrorCode["TRIGGER_FAILED"] = "TRIGGER_FAILED";
    ErrorCode["USER_IS_INACTIVE"] = "USER_IS_INACTIVE";
    ErrorCode["VALIDATION"] = "VALIDATION";
    ErrorCode["ACTIVATION_KEY_NOT_FOUND"] = "ACTIVATION_KEY_NOT_FOUND";
    ErrorCode["ACTIVATION_KEY_ALREADY_ACTIVATED"] = "ACTIVATION_KEY_ALREADY_ACTIVATED";
    ErrorCode["EMAIL_ALREADY_HAS_ACTIVATION_KEY"] = "EMAIL_ALREADY_HAS_ACTIVATION_KEY";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));


/***/ }),
/* 20 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_SAMPLE_DATA_SETTINGS = exports.SampleDataSettingsObject = void 0;
const typebox_1 = __webpack_require__(10);
exports.SampleDataSettingsObject = typebox_1.Type.Object({
    currentSelectedData: typebox_1.Type.Optional(typebox_1.Type.Unknown()),
    customizedInputs: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown())),
    lastTestDate: typebox_1.Type.Optional(typebox_1.Type.String()),
}, {
    additionalProperties: true,
});
exports.DEFAULT_SAMPLE_DATA_SETTINGS = {
    currentSelectedData: undefined,
    customizedInputs: undefined,
    lastTestDate: undefined,
};


/***/ }),
/* 21 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidateConnectionNameRequestBody = exports.ValidateConnectionNameResponse = exports.connectionNameRegex = exports.AppConnectionWithoutSensitiveData = exports.AppConnectionType = exports.AppConnectionStatus = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const id_generator_1 = __webpack_require__(23);
var AppConnectionStatus;
(function (AppConnectionStatus) {
    AppConnectionStatus["ACTIVE"] = "ACTIVE";
    AppConnectionStatus["ERROR"] = "ERROR";
})(AppConnectionStatus || (exports.AppConnectionStatus = AppConnectionStatus = {}));
var AppConnectionType;
(function (AppConnectionType) {
    AppConnectionType["OAUTH2"] = "OAUTH2";
    AppConnectionType["PLATFORM_OAUTH2"] = "PLATFORM_OAUTH2";
    AppConnectionType["CLOUD_OAUTH2"] = "CLOUD_OAUTH2";
    AppConnectionType["SECRET_TEXT"] = "SECRET_TEXT";
    AppConnectionType["BASIC_AUTH"] = "BASIC_AUTH";
    AppConnectionType["CUSTOM_AUTH"] = "CUSTOM_AUTH";
})(AppConnectionType || (exports.AppConnectionType = AppConnectionType = {}));
exports.AppConnectionWithoutSensitiveData = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { name: typebox_1.Type.String(), type: typebox_1.Type.Enum(AppConnectionType), pieceName: typebox_1.Type.String(), projectId: id_generator_1.ApId, status: typebox_1.Type.Enum(AppConnectionStatus) }), {
    description: 'App connection is a connection to an external app.',
});
exports.connectionNameRegex = '[A-Za-z0-9_\\-@\\+\\.]*';
exports.ValidateConnectionNameResponse = typebox_1.Type.Object({
    isValid: typebox_1.Type.Boolean(),
    error: typebox_1.Type.Optional(typebox_1.Type.String()),
}, {
    description: 'Response for validating connection name',
});
exports.ValidateConnectionNameRequestBody = typebox_1.Type.Object({
    connectionName: typebox_1.Type.String(),
}, {
    description: 'Request for validating connection name',
});


/***/ }),
/* 22 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Nullable = exports.BaseModelSchema = void 0;
const typebox_1 = __webpack_require__(10);
exports.BaseModelSchema = {
    id: typebox_1.Type.String(),
    created: typebox_1.Type.String(),
    updated: typebox_1.Type.String(),
};
// Used to generate valid nullable in OpenAPI Schema
const Nullable = (schema) => typebox_1.Type.Optional(typebox_1.Type.Unsafe(Object.assign(Object.assign({}, schema), { nullable: true })));
exports.Nullable = Nullable;


/***/ }),
/* 23 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.secureApId = exports.apId = exports.ApId = void 0;
const typebox_1 = __webpack_require__(10);
const nanoid_1 = __webpack_require__(24);
const ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
const ID_LENGTH = 21;
exports.ApId = typebox_1.Type.String({
    pattern: `^[0-9a-zA-Z]{${ID_LENGTH}}$`,
});
exports.apId = (0, nanoid_1.customAlphabet)(ALPHABET, ID_LENGTH);
const secureApId = (length) => (0, nanoid_1.customAlphabet)(ALPHABET, length)();
exports.secureApId = secureApId;


/***/ }),
/* 24 */
/***/ ((module) => {

module.exports = require("nanoid");

/***/ }),
/* 25 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListAppConnectionsRequestQuery = void 0;
const typebox_1 = __webpack_require__(10);
exports.ListAppConnectionsRequestQuery = typebox_1.Type.Object({
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
    projectId: typebox_1.Type.String(),
    pieceName: typebox_1.Type.Optional(typebox_1.Type.String({})),
    name: typebox_1.Type.Optional(typebox_1.Type.String({})),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number({})),
});


/***/ }),
/* 26 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpsertAppConnectionRequestBody = exports.UpsertBasicAuthRequest = exports.UpsertOAuth2Request = exports.UpsertSecretTextRequest = exports.UpsertCloudOAuth2Request = exports.UpsertPlatformOAuth2Request = exports.UpsertCustomAuthRequest = exports.OAuth2GrantType = void 0;
const typebox_1 = __webpack_require__(10);
const app_connection_1 = __webpack_require__(21);
const oauth2_authorization_method_1 = __webpack_require__(27);
const commonAuthProps = {
    name: typebox_1.Type.String({}),
    pieceName: typebox_1.Type.String({}),
    projectId: typebox_1.Type.String({}),
};
var OAuth2GrantType;
(function (OAuth2GrantType) {
    OAuth2GrantType["AUTHORIZATION_CODE"] = "authorization_code";
    OAuth2GrantType["CLIENT_CREDENTIALS"] = "client_credentials";
})(OAuth2GrantType || (exports.OAuth2GrantType = OAuth2GrantType = {}));
exports.UpsertCustomAuthRequest = typebox_1.Type.Object(Object.assign(Object.assign({}, commonAuthProps), { type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.CUSTOM_AUTH), value: typebox_1.Type.Object({
        type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.CUSTOM_AUTH),
        props: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown()),
    }) }), {
    title: 'Custom Auth',
    description: 'Custom Auth',
});
exports.UpsertPlatformOAuth2Request = typebox_1.Type.Object(Object.assign(Object.assign({}, commonAuthProps), { type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.PLATFORM_OAUTH2), value: typebox_1.Type.Object({
        client_id: typebox_1.Type.String(),
        authorization_method: typebox_1.Type.Optional(typebox_1.Type.Enum(oauth2_authorization_method_1.OAuth2AuthorizationMethod)),
        code: typebox_1.Type.String(),
        code_challenge: typebox_1.Type.Optional(typebox_1.Type.String()),
        props: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String())),
        scope: typebox_1.Type.String(),
        type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.PLATFORM_OAUTH2),
        redirect_url: typebox_1.Type.String({}),
    }) }), {
    title: 'Platform OAuth2',
    description: 'Platform OAuth2',
});
exports.UpsertCloudOAuth2Request = typebox_1.Type.Object(Object.assign(Object.assign({}, commonAuthProps), { type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.CLOUD_OAUTH2), value: typebox_1.Type.Object({
        client_id: typebox_1.Type.String(),
        authorization_method: typebox_1.Type.Optional(typebox_1.Type.Enum(oauth2_authorization_method_1.OAuth2AuthorizationMethod)),
        code: typebox_1.Type.String(),
        code_challenge: typebox_1.Type.Optional(typebox_1.Type.String()),
        props: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String())),
        scope: typebox_1.Type.String(),
        type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.CLOUD_OAUTH2),
    }) }), {
    title: 'Cloud OAuth2',
    description: 'Cloud OAuth2',
});
exports.UpsertSecretTextRequest = typebox_1.Type.Object(Object.assign(Object.assign({}, commonAuthProps), { type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.SECRET_TEXT), value: typebox_1.Type.Object({
        type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.SECRET_TEXT),
        secret_text: typebox_1.Type.String({}),
    }) }), {
    title: 'Secret Text',
    description: 'Secret Text',
});
exports.UpsertOAuth2Request = typebox_1.Type.Object(Object.assign(Object.assign({}, commonAuthProps), { type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.OAUTH2), value: typebox_1.Type.Object({
        client_id: typebox_1.Type.String({}),
        client_secret: typebox_1.Type.String({}),
        grant_type: typebox_1.Type.Optional(typebox_1.Type.Enum(OAuth2GrantType)),
        props: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Any())),
        scope: typebox_1.Type.String(),
        code: typebox_1.Type.String(),
        authorization_method: typebox_1.Type.Optional(typebox_1.Type.Enum(oauth2_authorization_method_1.OAuth2AuthorizationMethod)),
        code_challenge: typebox_1.Type.Optional(typebox_1.Type.String()),
        redirect_url: typebox_1.Type.String({}),
        type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.OAUTH2),
    }) }), {
    title: 'OAuth2',
    description: 'OAuth2',
});
exports.UpsertBasicAuthRequest = typebox_1.Type.Object(Object.assign(Object.assign({}, commonAuthProps), { type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.BASIC_AUTH), value: typebox_1.Type.Object({
        username: typebox_1.Type.String({}),
        password: typebox_1.Type.String({}),
        type: typebox_1.Type.Literal(app_connection_1.AppConnectionType.BASIC_AUTH),
    }) }), {
    title: 'Basic Auth',
    description: 'Basic Auth',
});
exports.UpsertAppConnectionRequestBody = typebox_1.Type.Union([
    exports.UpsertSecretTextRequest,
    exports.UpsertOAuth2Request,
    exports.UpsertCloudOAuth2Request,
    exports.UpsertPlatformOAuth2Request,
    exports.UpsertBasicAuthRequest,
    exports.UpsertCustomAuthRequest,
]);


/***/ }),
/* 27 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OAuth2AuthorizationMethod = void 0;
// Todo remove it's duplicated in frameworkr as well, make sure it's not exported in shared package.
var OAuth2AuthorizationMethod;
(function (OAuth2AuthorizationMethod) {
    OAuth2AuthorizationMethod["HEADER"] = "HEADER";
    OAuth2AuthorizationMethod["BODY"] = "BODY";
})(OAuth2AuthorizationMethod || (exports.OAuth2AuthorizationMethod = OAuth2AuthorizationMethod = {}));


/***/ }),
/* 28 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(29), exports);
tslib_1.__exportStar(__webpack_require__(22), exports);
tslib_1.__exportStar(__webpack_require__(33), exports);
tslib_1.__exportStar(__webpack_require__(34), exports);


/***/ }),
/* 29 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(30), exports);
tslib_1.__exportStar(__webpack_require__(31), exports);
tslib_1.__exportStar(__webpack_require__(32), exports);


/***/ }),
/* 30 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isObject = exports.applyFunctionToValues = exports.applyFunctionToValuesSync = exports.deleteProps = exports.spreadIfDefined = exports.deleteProperties = void 0;
const tslib_1 = __webpack_require__(1);
const utils_1 = __webpack_require__(31);
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
function deleteProperties(obj, props) {
    const copy = Object.assign({}, obj);
    for (const prop of props) {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete copy[prop];
    }
    return copy;
}
exports.deleteProperties = deleteProperties;
const spreadIfDefined = (key, value) => {
    if ((0, utils_1.isNil)(value)) {
        return {};
    }
    return {
        [key]: value,
    };
};
exports.spreadIfDefined = spreadIfDefined;
function deleteProps(obj, prop) {
    const newObj = Object.assign({}, obj);
    for (const p of prop) {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete newObj[p];
    }
    return newObj;
}
exports.deleteProps = deleteProps;
function applyFunctionToValuesSync(obj, apply) {
    if ((0, utils_1.isNil)(obj)) {
        return obj;
    }
    else if ((0, utils_1.isString)(obj)) {
        return apply(obj);
    }
    else if (Array.isArray(obj)) {
        for (let i = 0; i < obj.length; ++i) {
            obj[i] = applyFunctionToValuesSync(obj[i], apply);
        }
    }
    else if ((0, exports.isObject)(obj)) {
        const entries = Object.entries(obj);
        for (const entry of entries) {
            const [key, value] = entry;
            obj[key] = applyFunctionToValuesSync(value, apply);
        }
    }
    return apply(obj);
}
exports.applyFunctionToValuesSync = applyFunctionToValuesSync;
function applyFunctionToValues(obj, apply) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if ((0, utils_1.isNil)(obj)) {
            return obj;
        }
        else if ((0, utils_1.isString)(obj)) {
            return yield apply(obj);
        }
        else if (Array.isArray(obj)) {
            for (let i = 0; i < obj.length; ++i) {
                obj[i] = yield applyFunctionToValues(obj[i], apply);
            }
        }
        else if ((0, exports.isObject)(obj)) {
            const entries = Object.entries(obj);
            for (const entry of entries) {
                const [key, value] = entry;
                obj[key] = yield applyFunctionToValues(value, apply);
            }
        }
        return yield apply(obj);
    });
}
exports.applyFunctionToValues = applyFunctionToValues;
const isObject = (obj) => {
    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);
};
exports.isObject = isObject;


/***/ }),
/* 31 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pickBy = exports.camelCase = exports.startCase = exports.isEmpty = exports.kebabCase = exports.isNil = exports.isString = void 0;
function isString(str) {
    return str != null && typeof str === 'string';
}
exports.isString = isString;
function isNil(value) {
    return value === null || value === undefined;
}
exports.isNil = isNil;
function kebabCase(str) {
    return str
        .replace(/([a-z])([A-Z])/g, '$1-$2') // Handle camelCase by adding hyphen between lowercase and uppercase letters
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/_/g, '-') // Replace underscores with hyphens
        .toLowerCase() // Convert to lowercase
        .replace(/^-+|-+$/g, ''); // Remove leading and trailing hyphens
}
exports.kebabCase = kebabCase;
function isEmpty(value) {
    if (value == null) {
        return true;
    }
    if (typeof value === 'string' || Array.isArray(value)) {
        return value.length === 0;
    }
    if (typeof value === 'object') {
        return Object.keys(value).length === 0;
    }
    return false;
}
exports.isEmpty = isEmpty;
function startCase(str) {
    return str
        .replace(/([a-z])([A-Z])/g, '$1 $2')
        .replace(/[_-]+/g, ' ')
        .replace(/\s+/g, ' ')
        .replace(/^[a-z]/, match => match.toUpperCase())
        .replace(/\b[a-z]/g, match => match.toUpperCase());
}
exports.startCase = startCase;
function camelCase(str) {
    return str
        .replace(/([-_][a-z])/g, group => group.toUpperCase()
        .replace('-', '')
        .replace('_', ''));
}
exports.camelCase = camelCase;
function pickBy(object, predicate) {
    return Object.keys(object).reduce((result, key) => {
        if (predicate(object[key], key)) {
            result[key] = object[key];
        }
        return result;
    }, {});
}
exports.pickBy = pickBy;


/***/ }),
/* 32 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isNotUndefined = exports.assertNotEqual = exports.assertNotNullOrUndefined = exports.assertEqual = void 0;
function assertEqual(actual, expected, fieldName1, fieldName2) {
    if (actual !== expected) {
        throw new Error(`${fieldName1} and ${fieldName2} should be equal`);
    }
}
exports.assertEqual = assertEqual;
function assertNotNullOrUndefined(value, fieldName) {
    if (value === null || value === undefined) {
        throw new Error(`${fieldName} is null or undefined`);
    }
}
exports.assertNotNullOrUndefined = assertNotNullOrUndefined;
function assertNotEqual(value1, value2, fieldName1, fieldName2) {
    if (value1 === value2) {
        throw new Error(`${fieldName1} and ${fieldName2} should not be equal`);
    }
}
exports.assertNotEqual = assertNotEqual;
const isNotUndefined = (value) => {
    return value !== undefined;
};
exports.isNotUndefined = isNotUndefined;


/***/ }),
/* 33 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalesEnum = void 0;
var LocalesEnum;
(function (LocalesEnum) {
    LocalesEnum["DUTCH"] = "nl";
    LocalesEnum["ENGLISH"] = "en";
    LocalesEnum["GERMAN"] = "de";
    LocalesEnum["ITALIAN"] = "it";
    LocalesEnum["FRENCH"] = "fr";
    LocalesEnum["BULGARIAN"] = "bg";
    LocalesEnum["UKRAINIAN"] = "uk";
    LocalesEnum["HUNGARIAN"] = "hu";
    LocalesEnum["SPANISH"] = "es";
    LocalesEnum["JAPANESE"] = "ja";
    LocalesEnum["INDONESIAN"] = "id";
    LocalesEnum["VIETNAMESE"] = "vi";
    LocalesEnum["CHINESE_SIMPLIFIED"] = "zh";
    LocalesEnum["PORTUGUESE"] = "pt";
})(LocalesEnum || (exports.LocalesEnum = LocalesEnum = {}));


/***/ }),
/* 34 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(35), exports);


/***/ }),
/* 35 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Permission = void 0;
var Permission;
(function (Permission) {
    Permission["READ_APP_CONNECTION"] = "READ_APP_CONNECTION";
    Permission["WRITE_APP_CONNECTION"] = "WRITE_APP_CONNECTION";
    Permission["READ_FLOW"] = "READ_FLOW";
    Permission["WRITE_FLOW"] = "WRITE_FLOW";
    Permission["UPDATE_FLOW_STATUS"] = "UPDATE_FLOW_STATUS";
    Permission["WRITE_RPOJECT"] = "WRITE_RPOJECT";
    Permission["WRITE_INVITATION"] = "WRITE_INVITATION";
    Permission["READ_INVITATION"] = "READ_INVITATION";
    Permission["READ_PROJECT_MEMBER"] = "READ_PROJECT_MEMBER";
    Permission["WRITE_PROJECT_MEMBER"] = "WRITE_PROJECT_MEMBER";
    Permission["WRITE_GIT_REPO"] = "WRITE_GIT_REPO";
    Permission["READ_GIT_REPO"] = "READ_GIT_REPO";
    Permission["RETRY_RUN"] = "RETRY_RUN";
    Permission["READ_ISSUES"] = "READ_ISSUES";
    Permission["WRITE_ISSUES"] = "WRITE_ISSUES";
})(Permission || (exports.Permission = Permission = {}));


/***/ }),
/* 36 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TelemetryEventName = void 0;
var TelemetryEventName;
(function (TelemetryEventName) {
    TelemetryEventName["SIGNED_UP"] = "signed.up";
    TelemetryEventName["QUOTA_ALERT"] = "quota.alert";
    TelemetryEventName["REQUEST_TRIAL_CLICKED"] = "request.trial.clicked";
    TelemetryEventName["REQUEST_TRIAL_SUBMITTED"] = "request.trial.submitted";
    TelemetryEventName["KEY_ACTIVIATED"] = "key.activated";
    TelemetryEventName["FLOW_ISSUE_CLICKED"] = "flow.issue.clicked";
    TelemetryEventName["FLOW_ISSUE_RESOLVED"] = "flow.issue.resolved";
    TelemetryEventName["UPGRADE_CLICKED"] = "upgrade.clicked";
    TelemetryEventName["USER_INVITED"] = "user.invited";
    TelemetryEventName["OPENED_PRICING_FROM_DASHBOARD"] = "pricing.viewed";
    TelemetryEventName["UPGRADE_POPUP"] = "upgrade.popup";
    TelemetryEventName["CREATED_FLOW"] = "flow.created";
    TelemetryEventName["DEMO_IMPORTED"] = "demo.imported";
    TelemetryEventName["FLOW_RUN_CREATED"] = "run.created";
    TelemetryEventName["FLOW_PUBLISHED"] = "flow.published";
    /**used with templates dialog + import flow component + flows imported by uri query param*/
    TelemetryEventName["FLOW_IMPORTED"] = "flow.imported";
    /**used only with import flow dialog*/
    TelemetryEventName["FLOW_IMPORTED_USING_FILE"] = "flow.imported.using.file";
    TelemetryEventName["PIECES_SEARCH"] = "pieces.search";
    TelemetryEventName["REFERRAL"] = "referral";
    TelemetryEventName["REFERRAL_LINK_COPIED"] = "referral.link.copied";
    TelemetryEventName["FLOW_SHARED"] = "flow.shared";
    TelemetryEventName["TEMPLATE_SEARCH"] = "template.search";
    TelemetryEventName["COPILOT_GENERATED_CODE"] = "copilot.code.generated";
    TelemetryEventName["FORMS_VIEWED"] = "forms.viewed";
    TelemetryEventName["FORMS_SUBMITTED"] = "forms.submitted";
    TelemetryEventName["REWARDS_OPENED"] = "rewards.opened";
    TelemetryEventName["REWARDS_INSTRUCTION_CLICKED"] = "rewards.instructions.clicked";
})(TelemetryEventName || (exports.TelemetryEventName = TelemetryEventName = {}));


/***/ }),
/* 37 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(38), exports);
tslib_1.__exportStar(__webpack_require__(39), exports);
tslib_1.__exportStar(__webpack_require__(40), exports);


/***/ }),
/* 38 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeSandboxType = void 0;
var CodeSandboxType;
(function (CodeSandboxType) {
    CodeSandboxType["NO_OP"] = "NO_OP";
    CodeSandboxType["V8_ISOLATE"] = "V8_ISOLATE";
})(CodeSandboxType || (exports.CodeSandboxType = CodeSandboxType = {}));


/***/ }),
/* 39 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EngineResponseStatus = exports.EngineHttpResponse = exports.ProgressUpdateType = exports.TriggerHookType = exports.EngineOperationType = void 0;
const typebox_1 = __webpack_require__(10);
var EngineOperationType;
(function (EngineOperationType) {
    EngineOperationType["EXTRACT_PIECE_METADATA"] = "EXTRACT_PIECE_METADATA";
    EngineOperationType["EXECUTE_STEP"] = "EXECUTE_STEP";
    EngineOperationType["EXECUTE_FLOW"] = "EXECUTE_FLOW";
    EngineOperationType["EXECUTE_PROPERTY"] = "EXECUTE_PROPERTY";
    EngineOperationType["EXECUTE_TRIGGER_HOOK"] = "EXECUTE_TRIGGER_HOOK";
    EngineOperationType["EXECUTE_VALIDATE_AUTH"] = "EXECUTE_VALIDATE_AUTH";
})(EngineOperationType || (exports.EngineOperationType = EngineOperationType = {}));
var TriggerHookType;
(function (TriggerHookType) {
    TriggerHookType["ON_ENABLE"] = "ON_ENABLE";
    TriggerHookType["ON_DISABLE"] = "ON_DISABLE";
    TriggerHookType["HANDSHAKE"] = "HANDSHAKE";
    TriggerHookType["RENEW"] = "RENEW";
    TriggerHookType["RUN"] = "RUN";
    TriggerHookType["TEST"] = "TEST";
})(TriggerHookType || (exports.TriggerHookType = TriggerHookType = {}));
var ProgressUpdateType;
(function (ProgressUpdateType) {
    ProgressUpdateType["WEBHOOK_RESPONSE"] = "WEBHOOK_RESPONSE";
    ProgressUpdateType["TEST_FLOW"] = "TEST_FLOW";
    ProgressUpdateType["NONE"] = "NONE";
})(ProgressUpdateType || (exports.ProgressUpdateType = ProgressUpdateType = {}));
exports.EngineHttpResponse = typebox_1.Type.Object({
    status: typebox_1.Type.Number(),
    body: typebox_1.Type.Unknown(),
    headers: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String()),
});
var EngineResponseStatus;
(function (EngineResponseStatus) {
    EngineResponseStatus["OK"] = "OK";
    EngineResponseStatus["ERROR"] = "ERROR";
    EngineResponseStatus["TIMEOUT"] = "TIMEOUT";
})(EngineResponseStatus || (exports.EngineResponseStatus = EngineResponseStatus = {}));


/***/ }),
/* 40 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetFlowVersionForWorkerRequest = exports.GetFlowVersionForWorkerRequestType = exports.RemoveStableJobEngineRequest = exports.UpdateRunProgressRequest = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
const flow_execution_1 = __webpack_require__(41);
const engine_operation_1 = __webpack_require__(39);
exports.UpdateRunProgressRequest = typebox_1.Type.Object({
    runDetails: flow_execution_1.FlowRunResponse,
    runId: typebox_1.Type.String(),
    progressUpdateType: typebox_1.Type.Enum(engine_operation_1.ProgressUpdateType),
    workerHandlerId: (0, common_1.Nullable)(typebox_1.Type.String()),
    httpRequestId: (0, common_1.Nullable)(typebox_1.Type.String()),
});
exports.RemoveStableJobEngineRequest = typebox_1.Type.Object({
    flowId: typebox_1.Type.Optional(typebox_1.Type.String()),
    flowVersionId: typebox_1.Type.String(),
});
var GetFlowVersionForWorkerRequestType;
(function (GetFlowVersionForWorkerRequestType) {
    GetFlowVersionForWorkerRequestType["LATEST"] = "LATEST";
    GetFlowVersionForWorkerRequestType["LOCKED"] = "LOCKED";
    GetFlowVersionForWorkerRequestType["EXACT"] = "EXACT";
})(GetFlowVersionForWorkerRequestType || (exports.GetFlowVersionForWorkerRequestType = GetFlowVersionForWorkerRequestType = {}));
exports.GetFlowVersionForWorkerRequest = typebox_1.Type.Union([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(GetFlowVersionForWorkerRequestType.LATEST),
        flowId: typebox_1.Type.String(),
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(GetFlowVersionForWorkerRequestType.LOCKED),
        flowId: typebox_1.Type.String(),
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(GetFlowVersionForWorkerRequestType.EXACT),
        versionId: typebox_1.Type.String(),
    }),
]);


/***/ }),
/* 41 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isFailedState = exports.isFlowStateTerminal = exports.FlowRunResponse = exports.FlowError = exports.StopResponse = exports.PauseMetadata = exports.WebhookPauseMetadata = exports.DelayPauseMetadata = exports.PauseType = exports.FlowRunStatus = void 0;
const typebox_1 = __webpack_require__(10);
const engine_1 = __webpack_require__(37);
var FlowRunStatus;
(function (FlowRunStatus) {
    FlowRunStatus["FAILED"] = "FAILED";
    FlowRunStatus["QUOTA_EXCEEDED"] = "QUOTA_EXCEEDED";
    FlowRunStatus["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    FlowRunStatus["PAUSED"] = "PAUSED";
    FlowRunStatus["RUNNING"] = "RUNNING";
    FlowRunStatus["STOPPED"] = "STOPPED";
    FlowRunStatus["SUCCEEDED"] = "SUCCEEDED";
    FlowRunStatus["TIMEOUT"] = "TIMEOUT";
})(FlowRunStatus || (exports.FlowRunStatus = FlowRunStatus = {}));
var PauseType;
(function (PauseType) {
    PauseType["DELAY"] = "DELAY";
    PauseType["WEBHOOK"] = "WEBHOOK";
})(PauseType || (exports.PauseType = PauseType = {}));
exports.DelayPauseMetadata = typebox_1.Type.Object({
    type: typebox_1.Type.Literal(PauseType.DELAY),
    resumeDateTime: typebox_1.Type.String(),
    handlerId: typebox_1.Type.Optional(typebox_1.Type.String({})),
    progressUpdateType: typebox_1.Type.Optional(typebox_1.Type.Enum(engine_1.ProgressUpdateType)),
});
exports.WebhookPauseMetadata = typebox_1.Type.Object({
    type: typebox_1.Type.Literal(PauseType.WEBHOOK),
    requestId: typebox_1.Type.String(),
    response: typebox_1.Type.Unknown(),
    handlerId: typebox_1.Type.Optional(typebox_1.Type.String({})),
    progressUpdateType: typebox_1.Type.Optional(typebox_1.Type.Enum(engine_1.ProgressUpdateType)),
});
exports.PauseMetadata = typebox_1.Type.Union([exports.DelayPauseMetadata, exports.WebhookPauseMetadata]);
exports.StopResponse = typebox_1.Type.Object({
    status: typebox_1.Type.Optional(typebox_1.Type.Number()),
    body: typebox_1.Type.Optional(typebox_1.Type.Unknown()),
    headers: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String())),
});
exports.FlowError = typebox_1.Type.Object({
    stepName: typebox_1.Type.String(),
    message: typebox_1.Type.String(),
});
const BaseExecutionResponse = {
    steps: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown()),
    duration: typebox_1.Type.Number(),
    tasks: typebox_1.Type.Number(),
    tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    error: typebox_1.Type.Optional(exports.FlowError),
    stopResponse: typebox_1.Type.Optional(exports.StopResponse),
};
exports.FlowRunResponse = typebox_1.Type.Union([
    typebox_1.Type.Object(Object.assign(Object.assign({}, BaseExecutionResponse), { status: typebox_1.Type.Literal(FlowRunStatus.PAUSED), pauseMetadata: typebox_1.Type.Optional(exports.PauseMetadata) })),
    typebox_1.Type.Object(Object.assign(Object.assign({}, BaseExecutionResponse), { status: typebox_1.Type.Union([typebox_1.Type.Literal(FlowRunStatus.FAILED),
            typebox_1.Type.Literal(FlowRunStatus.SUCCEEDED),
            typebox_1.Type.Literal(FlowRunStatus.RUNNING),
            typebox_1.Type.Literal(FlowRunStatus.QUOTA_EXCEEDED),
            typebox_1.Type.Literal(FlowRunStatus.TIMEOUT),
            typebox_1.Type.Literal(FlowRunStatus.INTERNAL_ERROR),
            typebox_1.Type.Literal(FlowRunStatus.STOPPED),
        ]) })),
]);
const isFlowStateTerminal = (status) => {
    return status === FlowRunStatus.SUCCEEDED
        || status == FlowRunStatus.STOPPED
        || status === FlowRunStatus.TIMEOUT
        || status === FlowRunStatus.FAILED
        || status === FlowRunStatus.INTERNAL_ERROR
        || status === FlowRunStatus.QUOTA_EXCEEDED;
};
exports.isFlowStateTerminal = isFlowStateTerminal;
const isFailedState = (status) => {
    return status === FlowRunStatus.FAILED
        || status === FlowRunStatus.INTERNAL_ERROR
        || status === FlowRunStatus.QUOTA_EXCEEDED
        || status === FlowRunStatus.TIMEOUT;
};
exports.isFailedState = isFailedState;


/***/ }),
/* 42 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListFlowRunsRequestQuery = void 0;
const typebox_1 = __webpack_require__(10);
const id_generator_1 = __webpack_require__(23);
const flow_execution_1 = __webpack_require__(41);
exports.ListFlowRunsRequestQuery = typebox_1.Type.Object({
    flowId: typebox_1.Type.Optional(id_generator_1.ApId),
    tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String({}))),
    status: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Enum(flow_execution_1.FlowRunStatus))),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number({})),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
    createdAfter: typebox_1.Type.Optional(typebox_1.Type.String({})),
    createdBefore: typebox_1.Type.Optional(typebox_1.Type.String({})),
    // TODO make this required after May 2024
    projectId: typebox_1.Type.Optional(id_generator_1.ApId),
});


/***/ }),
/* 43 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExecutionState = exports.ExecutionType = exports.MAX_LOG_SIZE = void 0;
const typebox_1 = __webpack_require__(10);
exports.MAX_LOG_SIZE = 2048 * 1024;
var ExecutionType;
(function (ExecutionType) {
    ExecutionType["BEGIN"] = "BEGIN";
    ExecutionType["RESUME"] = "RESUME";
})(ExecutionType || (exports.ExecutionType = ExecutionType = {}));
exports.ExecutionState = typebox_1.Type.Object({
    steps: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown()),
});


/***/ }),
/* 44 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoopStepOutput = exports.BranchStepOutput = exports.GenericStepOutput = exports.StepOutputStatus = void 0;
const common_1 = __webpack_require__(28);
const action_1 = __webpack_require__(9);
var StepOutputStatus;
(function (StepOutputStatus) {
    StepOutputStatus["FAILED"] = "FAILED";
    StepOutputStatus["PAUSED"] = "PAUSED";
    StepOutputStatus["RUNNING"] = "RUNNING";
    StepOutputStatus["STOPPED"] = "STOPPED";
    StepOutputStatus["SUCCEEDED"] = "SUCCEEDED";
})(StepOutputStatus || (exports.StepOutputStatus = StepOutputStatus = {}));
class GenericStepOutput {
    constructor(step) {
        this.type = step.type;
        this.status = step.status;
        this.input = step.input;
        this.output = step.output;
        this.duration = step.duration;
        this.errorMessage = step.errorMessage;
    }
    setOutput(output) {
        return new GenericStepOutput(Object.assign(Object.assign({}, this), { output }));
    }
    setStatus(status) {
        return new GenericStepOutput(Object.assign(Object.assign({}, this), { status }));
    }
    setErrorMessage(errorMessage) {
        return new GenericStepOutput(Object.assign(Object.assign({}, this), { errorMessage }));
    }
    static create({ input, type, status, output }) {
        return new GenericStepOutput({
            input,
            type,
            status,
            output,
        });
    }
}
exports.GenericStepOutput = GenericStepOutput;
class BranchStepOutput extends GenericStepOutput {
    static init({ input }) {
        return new BranchStepOutput({
            type: action_1.ActionType.BRANCH,
            input,
            status: StepOutputStatus.SUCCEEDED,
        });
    }
}
exports.BranchStepOutput = BranchStepOutput;
class LoopStepOutput extends GenericStepOutput {
    constructor(step) {
        var _a;
        super(step);
        this.output = (_a = step.output) !== null && _a !== void 0 ? _a : {
            item: undefined,
            index: 0,
            iterations: [],
        };
    }
    static init({ input }) {
        return new LoopStepOutput({
            type: action_1.ActionType.LOOP_ON_ITEMS,
            input,
            status: StepOutputStatus.SUCCEEDED,
        });
    }
    hasIteration(iteration) {
        var _a;
        return !(0, common_1.isNil)((_a = this.output) === null || _a === void 0 ? void 0 : _a.iterations[iteration]);
    }
    setItemAndIndex({ item, index }) {
        var _a, _b;
        return new LoopStepOutput(Object.assign(Object.assign({}, this), { output: {
                item,
                index,
                iterations: (_b = (_a = this.output) === null || _a === void 0 ? void 0 : _a.iterations) !== null && _b !== void 0 ? _b : [],
            } }));
    }
    addIteration() {
        var _a, _b, _c, _d;
        return new LoopStepOutput(Object.assign(Object.assign({}, this), { output: {
                item: (_a = this.output) === null || _a === void 0 ? void 0 : _a.item,
                index: (_b = this.output) === null || _b === void 0 ? void 0 : _b.index,
                iterations: [...((_d = (_c = this.output) === null || _c === void 0 ? void 0 : _c.iterations) !== null && _d !== void 0 ? _d : []), {}],
            } }));
    }
}
exports.LoopStepOutput = LoopStepOutput;


/***/ }),
/* 45 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowOperationRequest = exports.ChangePublishedVersionIdRequest = exports.UpdateFlowStatusRequest = exports.UpdateTriggerRequest = exports.AddActionRequest = exports.MoveActionRequest = exports.DuplicateStepRequest = exports.UpdateActionRequest = exports.DeleteActionRequest = exports.ChangeNameRequest = exports.ChangeFolderRequest = exports.ImportFlowRequest = exports.LockFlowRequest = exports.UseAsDraftRequest = exports.StepLocationRelativeToParent = exports.FlowOperationType = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
const action_1 = __webpack_require__(9);
const flow_1 = __webpack_require__(46);
const trigger_1 = __webpack_require__(51);
var FlowOperationType;
(function (FlowOperationType) {
    FlowOperationType["LOCK_AND_PUBLISH"] = "LOCK_AND_PUBLISH";
    FlowOperationType["CHANGE_STATUS"] = "CHANGE_STATUS";
    FlowOperationType["LOCK_FLOW"] = "LOCK_FLOW";
    FlowOperationType["CHANGE_FOLDER"] = "CHANGE_FOLDER";
    FlowOperationType["CHANGE_NAME"] = "CHANGE_NAME";
    FlowOperationType["MOVE_ACTION"] = "MOVE_ACTION";
    FlowOperationType["IMPORT_FLOW"] = "IMPORT_FLOW";
    FlowOperationType["UPDATE_TRIGGER"] = "UPDATE_TRIGGER";
    FlowOperationType["ADD_ACTION"] = "ADD_ACTION";
    FlowOperationType["UPDATE_ACTION"] = "UPDATE_ACTION";
    FlowOperationType["DELETE_ACTION"] = "DELETE_ACTION";
    FlowOperationType["DUPLICATE_ACTION"] = "DUPLICATE_ACTION";
    FlowOperationType["USE_AS_DRAFT"] = "USE_AS_DRAFT";
})(FlowOperationType || (exports.FlowOperationType = FlowOperationType = {}));
var StepLocationRelativeToParent;
(function (StepLocationRelativeToParent) {
    StepLocationRelativeToParent["INSIDE_TRUE_BRANCH"] = "INSIDE_TRUE_BRANCH";
    StepLocationRelativeToParent["INSIDE_FALSE_BRANCH"] = "INSIDE_FALSE_BRANCH";
    StepLocationRelativeToParent["AFTER"] = "AFTER";
    StepLocationRelativeToParent["INSIDE_LOOP"] = "INSIDE_LOOP";
})(StepLocationRelativeToParent || (exports.StepLocationRelativeToParent = StepLocationRelativeToParent = {}));
const optionalNextAction = typebox_1.Type.Object({ nextAction: typebox_1.Type.Optional(action_1.Action) });
exports.UseAsDraftRequest = typebox_1.Type.Object({
    versionId: typebox_1.Type.String(),
});
exports.LockFlowRequest = typebox_1.Type.Object({});
exports.ImportFlowRequest = typebox_1.Type.Object({
    displayName: typebox_1.Type.String({}),
    trigger: typebox_1.Type.Union([typebox_1.Type.Composite([trigger_1.PieceTrigger, optionalNextAction]), typebox_1.Type.Composite([trigger_1.EmptyTrigger, optionalNextAction])]),
});
exports.ChangeFolderRequest = typebox_1.Type.Object({
    folderId: (0, common_1.Nullable)(typebox_1.Type.String({})),
});
exports.ChangeNameRequest = typebox_1.Type.Object({
    displayName: typebox_1.Type.String({}),
});
exports.DeleteActionRequest = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
});
exports.UpdateActionRequest = typebox_1.Type.Union([action_1.CodeActionSchema, action_1.LoopOnItemsActionSchema, action_1.PieceActionSchema, action_1.BranchActionSchema]);
exports.DuplicateStepRequest = typebox_1.Type.Object({
    stepName: typebox_1.Type.String(),
});
exports.MoveActionRequest = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    newParentStep: typebox_1.Type.String(),
    stepLocationRelativeToNewParent: typebox_1.Type.Optional(typebox_1.Type.Enum(StepLocationRelativeToParent)),
});
exports.AddActionRequest = typebox_1.Type.Object({
    parentStep: typebox_1.Type.String(),
    stepLocationRelativeToParent: typebox_1.Type.Optional(typebox_1.Type.Enum(StepLocationRelativeToParent)),
    action: exports.UpdateActionRequest,
});
exports.UpdateTriggerRequest = typebox_1.Type.Union([trigger_1.EmptyTrigger, trigger_1.PieceTrigger]);
exports.UpdateFlowStatusRequest = typebox_1.Type.Object({
    status: typebox_1.Type.Enum(flow_1.FlowStatus),
});
exports.ChangePublishedVersionIdRequest = typebox_1.Type.Object({});
exports.FlowOperationRequest = typebox_1.Type.Union([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.MOVE_ACTION),
        request: exports.MoveActionRequest,
    }, {
        title: 'Move Action',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.CHANGE_STATUS),
        request: exports.UpdateFlowStatusRequest,
    }, {
        title: 'Change Status',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.LOCK_AND_PUBLISH),
        request: exports.ChangePublishedVersionIdRequest,
    }, {
        title: 'Lock and Publish',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.USE_AS_DRAFT),
        request: exports.UseAsDraftRequest,
    }, {
        title: 'Copy as Draft',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.LOCK_FLOW),
        request: exports.LockFlowRequest,
    }, {
        title: 'Lock Flow',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.IMPORT_FLOW),
        request: exports.ImportFlowRequest,
    }, {
        title: 'Import Flow',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.CHANGE_NAME),
        request: exports.ChangeNameRequest,
    }, {
        title: 'Change Name',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.DELETE_ACTION),
        request: exports.DeleteActionRequest,
    }, {
        title: 'Delete Action',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.UPDATE_ACTION),
        request: exports.UpdateActionRequest,
    }, {
        title: 'Update Action',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.ADD_ACTION),
        request: exports.AddActionRequest,
    }, {
        title: 'Add Action',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.UPDATE_TRIGGER),
        request: exports.UpdateTriggerRequest,
    }, {
        title: 'Update Trigger',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.CHANGE_FOLDER),
        request: exports.ChangeFolderRequest,
    }, {
        title: 'Change Folder',
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(FlowOperationType.DUPLICATE_ACTION),
        request: exports.DuplicateStepRequest,
    }, {
        title: 'Duplicate Action',
    }),
]);


/***/ }),
/* 46 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopulatedFlow = exports.Flow = exports.FlowScheduleOptions = exports.FlowStatus = exports.ScheduleType = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const flow_version_1 = __webpack_require__(47);
var ScheduleType;
(function (ScheduleType) {
    ScheduleType["CRON_EXPRESSION"] = "CRON_EXPRESSION";
})(ScheduleType || (exports.ScheduleType = ScheduleType = {}));
var FlowStatus;
(function (FlowStatus) {
    FlowStatus["ENABLED"] = "ENABLED";
    FlowStatus["DISABLED"] = "DISABLED";
})(FlowStatus || (exports.FlowStatus = FlowStatus = {}));
exports.FlowScheduleOptions = typebox_1.Type.Object({
    type: typebox_1.Type.Literal(ScheduleType.CRON_EXPRESSION),
    cronExpression: typebox_1.Type.String(),
    timezone: typebox_1.Type.String(),
});
exports.Flow = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { projectId: typebox_1.Type.String(), folderId: (0, base_model_1.Nullable)(typebox_1.Type.String()), status: typebox_1.Type.Enum(FlowStatus), schedule: (0, base_model_1.Nullable)(exports.FlowScheduleOptions), publishedVersionId: (0, base_model_1.Nullable)(typebox_1.Type.String()) }));
exports.PopulatedFlow = typebox_1.Type.Composite([
    exports.Flow,
    typebox_1.Type.Object({
        version: flow_version_1.FlowVersion,
    }),
]);


/***/ }),
/* 47 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowVersionMetadata = exports.FlowVersion = exports.FlowVersionState = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const user_1 = __webpack_require__(48);
const trigger_1 = __webpack_require__(51);
var FlowVersionState;
(function (FlowVersionState) {
    FlowVersionState["LOCKED"] = "LOCKED";
    FlowVersionState["DRAFT"] = "DRAFT";
})(FlowVersionState || (exports.FlowVersionState = FlowVersionState = {}));
exports.FlowVersion = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { flowId: typebox_1.Type.String(), displayName: typebox_1.Type.String(), trigger: trigger_1.Trigger, updatedBy: (0, base_model_1.Nullable)(typebox_1.Type.String()), valid: typebox_1.Type.Boolean(), state: typebox_1.Type.Enum(FlowVersionState) }));
exports.FlowVersionMetadata = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { flowId: typebox_1.Type.String(), displayName: typebox_1.Type.String(), valid: typebox_1.Type.Boolean(), state: typebox_1.Type.Enum(FlowVersionState), updatedBy: (0, base_model_1.Nullable)(typebox_1.Type.String()), updatedByUser: (0, base_model_1.Nullable)(user_1.User) }));


/***/ }),
/* 48 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateUserRequestBody = void 0;
const tslib_1 = __webpack_require__(1);
const typebox_1 = __webpack_require__(10);
const user_1 = __webpack_require__(49);
tslib_1.__exportStar(__webpack_require__(50), exports);
tslib_1.__exportStar(__webpack_require__(49), exports);
exports.UpdateUserRequestBody = typebox_1.Type.Object({
    status: typebox_1.Type.Optional(typebox_1.Type.Enum(user_1.UserStatus)),
    platformRole: typebox_1.Type.Optional(typebox_1.Type.Enum(user_1.PlatformRole)),
});


/***/ }),
/* 49 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserMeta = exports.User = exports.PasswordType = exports.EmailType = exports.UserStatus = exports.PlatformRole = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const id_generator_1 = __webpack_require__(23);
var PlatformRole;
(function (PlatformRole) {
    PlatformRole["ADMIN"] = "ADMIN";
    PlatformRole["MEMBER"] = "MEMBER";
})(PlatformRole || (exports.PlatformRole = PlatformRole = {}));
var UserStatus;
(function (UserStatus) {
    /* user is active */
    UserStatus["ACTIVE"] = "ACTIVE";
    /* user account deactivated */
    UserStatus["INACTIVE"] = "INACTIVE";
})(UserStatus || (exports.UserStatus = UserStatus = {}));
exports.EmailType = typebox_1.Type.String({
    format: 'email',
});
exports.PasswordType = typebox_1.Type.String({
    minLength: 8,
    maxLength: 64,
});
exports.User = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { email: typebox_1.Type.String(), firstName: typebox_1.Type.String(), lastName: typebox_1.Type.String(), trackEvents: typebox_1.Type.Boolean(), newsLetter: typebox_1.Type.Boolean(), password: typebox_1.Type.String(), verified: typebox_1.Type.Boolean(), platformRole: typebox_1.Type.Enum(PlatformRole), status: typebox_1.Type.Enum(UserStatus), externalId: typebox_1.Type.Optional(typebox_1.Type.String()), platformId: typebox_1.Type.Union([id_generator_1.ApId, typebox_1.Type.Null()]) }));
exports.UserMeta = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    email: typebox_1.Type.String(),
    firstName: typebox_1.Type.String(),
    platformId: typebox_1.Type.Union([id_generator_1.ApId, typebox_1.Type.Null()]),
    platformRole: typebox_1.Type.Enum(PlatformRole),
    lastName: typebox_1.Type.String(),
});


/***/ }),
/* 50 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserResponse = void 0;
const typebox_1 = __webpack_require__(10);
const user_1 = __webpack_require__(49);
exports.UserResponse = typebox_1.Type.Omit(user_1.User, ['password']);


/***/ }),
/* 51 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Trigger = exports.PieceTrigger = exports.PieceTriggerSettings = exports.EmptyTrigger = exports.TriggerType = exports.AUTHENTICATION_PROPERTY_NAME = void 0;
const typebox_1 = __webpack_require__(10);
const pieces_1 = __webpack_require__(11);
const sample_data_1 = __webpack_require__(20);
exports.AUTHENTICATION_PROPERTY_NAME = 'auth';
var TriggerType;
(function (TriggerType) {
    TriggerType["EMPTY"] = "EMPTY";
    TriggerType["PIECE"] = "PIECE_TRIGGER";
})(TriggerType || (exports.TriggerType = TriggerType = {}));
const commonProps = {
    name: typebox_1.Type.String({}),
    valid: typebox_1.Type.Boolean({}),
    displayName: typebox_1.Type.String({}),
    nextAction: typebox_1.Type.Optional(typebox_1.Type.Any()),
};
exports.EmptyTrigger = typebox_1.Type.Object(Object.assign(Object.assign({}, commonProps), { type: typebox_1.Type.Literal(TriggerType.EMPTY), settings: typebox_1.Type.Any() }));
exports.PieceTriggerSettings = typebox_1.Type.Object({
    pieceName: typebox_1.Type.String({}),
    pieceVersion: pieces_1.VersionType,
    pieceType: typebox_1.Type.Enum(pieces_1.PieceType),
    packageType: typebox_1.Type.Enum(pieces_1.PackageType),
    triggerName: typebox_1.Type.String({}),
    input: typebox_1.Type.Record(typebox_1.Type.String({}), typebox_1.Type.Any()),
    inputUiInfo: sample_data_1.SampleDataSettingsObject,
});
exports.PieceTrigger = typebox_1.Type.Object(Object.assign(Object.assign({}, commonProps), { type: typebox_1.Type.Literal(TriggerType.PIECE), settings: exports.PieceTriggerSettings }));
exports.Trigger = typebox_1.Type.Union([
    exports.PieceTrigger,
    exports.EmptyTrigger,
]);


/***/ }),
/* 52 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(53), exports);


/***/ }),
/* 53 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StepExecutionPath = exports.StepRunResponse = exports.CreateStepRunRequestBody = void 0;
const typebox_1 = __webpack_require__(10);
exports.CreateStepRunRequestBody = typebox_1.Type.Object({
    flowVersionId: typebox_1.Type.String(),
    stepName: typebox_1.Type.String(),
    id: typebox_1.Type.String(),
});
exports.StepRunResponse = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    success: typebox_1.Type.Boolean(),
    output: typebox_1.Type.Unknown(),
    standardError: typebox_1.Type.String(),
    standardOutput: typebox_1.Type.String(),
});
exports.StepExecutionPath = typebox_1.Type.Array(typebox_1.Type.Tuple([typebox_1.Type.String(), typebox_1.Type.Number()]));


/***/ }),
/* 54 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteStoreEntryRequest = exports.GetStoreEntryRequest = exports.PutStoreEntryRequest = void 0;
const typebox_1 = __webpack_require__(10);
const store_entry_1 = __webpack_require__(55);
exports.PutStoreEntryRequest = typebox_1.Type.Object({
    key: typebox_1.Type.String({
        maxLength: store_entry_1.STORE_KEY_MAX_LENGTH,
    }),
    value: typebox_1.Type.Any({}),
});
exports.GetStoreEntryRequest = typebox_1.Type.Object({
    key: typebox_1.Type.String({}),
});
exports.DeleteStoreEntryRequest = typebox_1.Type.Object({
    key: typebox_1.Type.String({}),
});


/***/ }),
/* 55 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.STORE_KEY_MAX_LENGTH = void 0;
exports.STORE_KEY_MAX_LENGTH = 128;


/***/ }),
/* 56 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(57), exports);
tslib_1.__exportStar(__webpack_require__(58), exports);


/***/ }),
/* 57 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhookUrlParams = void 0;
const typebox_1 = __webpack_require__(10);
const id_generator_1 = __webpack_require__(23);
exports.WebhookUrlParams = typebox_1.Type.Object({
    flowId: id_generator_1.ApId,
});


/***/ }),
/* 58 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 59 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CountFlowsRequest = void 0;
const typebox_1 = __webpack_require__(10);
exports.CountFlowsRequest = typebox_1.Type.Object({
    folderId: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 60 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExecuteCodeRequest = void 0;
const typebox_1 = __webpack_require__(10);
exports.ExecuteCodeRequest = typebox_1.Type.Object({
    artifact: typebox_1.Type.String(),
    input: typebox_1.Type.Object({}),
});


/***/ }),
/* 61 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 62 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SignUpRequest = void 0;
const typebox_1 = __webpack_require__(10);
const id_generator_1 = __webpack_require__(23);
const user_1 = __webpack_require__(49);
exports.SignUpRequest = typebox_1.Type.Object({
    email: user_1.EmailType,
    password: user_1.PasswordType,
    firstName: typebox_1.Type.String(),
    lastName: typebox_1.Type.String(),
    trackEvents: typebox_1.Type.Boolean(),
    newsLetter: typebox_1.Type.Boolean(),
    referringUserId: typebox_1.Type.Optional(id_generator_1.ApId),
});


/***/ }),
/* 63 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SignInRequest = void 0;
const typebox_1 = __webpack_require__(10);
const user_1 = __webpack_require__(49);
exports.SignInRequest = typebox_1.Type.Object({
    email: user_1.EmailType,
    password: user_1.PasswordType,
});


/***/ }),
/* 64 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EndpointScope = exports.SERVICE_KEY_SECURITY_OPENAPI = exports.ALL_PRINCIPAL_TYPES = exports.PrincipalType = void 0;
var PrincipalType;
(function (PrincipalType) {
    PrincipalType["USER"] = "USER";
    PrincipalType["ENGINE"] = "ENGINE";
    PrincipalType["SERVICE"] = "SERVICE";
    PrincipalType["WORKER"] = "WORKER";
    PrincipalType["UNKNOWN"] = "UNKNOWN";
    /**
     * @deprecated
     */
    PrincipalType["SUPER_USER"] = "SUPER_USER";
})(PrincipalType || (exports.PrincipalType = PrincipalType = {}));
exports.ALL_PRINCIPAL_TYPES = Object.values(PrincipalType);
exports.SERVICE_KEY_SECURITY_OPENAPI = {
    apiKey: [],
};
var EndpointScope;
(function (EndpointScope) {
    EndpointScope["PLATFORM"] = "PLATFORM";
    EndpointScope["PROJECT"] = "PROJECT";
})(EndpointScope || (exports.EndpointScope = EndpointScope = {}));


/***/ }),
/* 65 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 66 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RetryFlowRequestBody = exports.TestFlowRunRequestBody = void 0;
const typebox_1 = __webpack_require__(10);
const id_generator_1 = __webpack_require__(23);
const flow_run_1 = __webpack_require__(67);
exports.TestFlowRunRequestBody = typebox_1.Type.Object({
    flowVersionId: id_generator_1.ApId,
});
exports.RetryFlowRequestBody = typebox_1.Type.Object({
    strategy: typebox_1.Type.Enum(flow_run_1.FlowRetryStrategy),
});


/***/ }),
/* 67 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowRun = exports.FlowRetryStrategy = exports.RunEnvironment = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const flow_execution_1 = __webpack_require__(41);
var RunEnvironment;
(function (RunEnvironment) {
    RunEnvironment["PRODUCTION"] = "PRODUCTION";
    RunEnvironment["TESTING"] = "TESTING";
})(RunEnvironment || (exports.RunEnvironment = RunEnvironment = {}));
var FlowRetryStrategy;
(function (FlowRetryStrategy) {
    FlowRetryStrategy["ON_LATEST_VERSION"] = "ON_LATEST_VERSION";
    FlowRetryStrategy["FROM_FAILED_STEP"] = "FROM_FAILED_STEP";
})(FlowRetryStrategy || (exports.FlowRetryStrategy = FlowRetryStrategy = {}));
exports.FlowRun = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { projectId: typebox_1.Type.String(), flowId: typebox_1.Type.String(), tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())), flowVersionId: typebox_1.Type.String(), flowDisplayName: typebox_1.Type.String(), 
    // TODO remove this, and create migration to remove it
    terminationReason: typebox_1.Type.Optional(typebox_1.Type.String()), logsFileId: (0, base_model_1.Nullable)(typebox_1.Type.String()), tasks: typebox_1.Type.Optional(typebox_1.Type.Number()), status: typebox_1.Type.Enum(flow_execution_1.FlowRunStatus), duration: typebox_1.Type.Optional(typebox_1.Type.Number()), startTime: typebox_1.Type.String(), finishTime: typebox_1.Type.String(), environment: typebox_1.Type.Enum(RunEnvironment), pauseMetadata: typebox_1.Type.Optional(flow_execution_1.PauseMetadata), steps: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown()) }));


/***/ }),
/* 68 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(69), exports);
tslib_1.__exportStar(__webpack_require__(70), exports);
tslib_1.__exportStar(__webpack_require__(71), exports);


/***/ }),
/* 69 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileCompression = void 0;
var FileCompression;
(function (FileCompression) {
    FileCompression["NONE"] = "NONE";
    FileCompression["GZIP"] = "GZIP";
})(FileCompression || (exports.FileCompression = FileCompression = {}));


/***/ }),
/* 70 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileType = void 0;
var FileType;
(function (FileType) {
    FileType["UNKNOWN"] = "UNKNOWN";
    FileType["FLOW_RUN_LOG"] = "FLOW_RUN_LOG";
    FileType["CODE_SOURCE"] = "CODE_SOURCE";
    FileType["PACKAGE_ARCHIVE"] = "PACKAGE_ARCHIVE";
})(FileType || (exports.FileType = FileType = {}));


/***/ }),
/* 71 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.File = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const file_compression_1 = __webpack_require__(69);
const file_type_1 = __webpack_require__(70);
exports.File = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { projectId: typebox_1.Type.Optional(typebox_1.Type.String()), platformId: typebox_1.Type.Optional(typebox_1.Type.String()), type: typebox_1.Type.Enum(file_type_1.FileType), compression: typebox_1.Type.Enum(file_compression_1.FileCompression), data: typebox_1.Type.Unknown() }));


/***/ }),
/* 72 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowHelper = exports.getImportOperations = void 0;
const tslib_1 = __webpack_require__(1);
const compiler_1 = __webpack_require__(73);
const semver_1 = tslib_1.__importDefault(__webpack_require__(74));
const common_1 = __webpack_require__(28);
const activepieces_error_1 = __webpack_require__(19);
const action_1 = __webpack_require__(9);
const flow_operations_1 = __webpack_require__(45);
const flow_version_1 = __webpack_require__(47);
const sample_data_1 = __webpack_require__(20);
const trigger_1 = __webpack_require__(51);
const actionSchemaValidator = compiler_1.TypeCompiler.Compile(action_1.SingleActionSchema);
const triggerSchemaValidation = compiler_1.TypeCompiler.Compile(trigger_1.Trigger);
function isValid(flowVersion) {
    let valid = true;
    const steps = exports.flowHelper.getAllSteps(flowVersion.trigger);
    for (let i = 0; i < steps.length; i++) {
        const step = steps[i];
        valid = valid && step.valid;
    }
    return valid;
}
function isAction(type) {
    return Object.entries(action_1.ActionType).some(([, value]) => value === type);
}
function isTrigger(type) {
    return Object.entries(trigger_1.TriggerType).some(([, value]) => value === type);
}
function deleteAction(flowVersion, request) {
    return transferFlow(flowVersion, (parentStep) => {
        if (parentStep.nextAction && parentStep.nextAction.name === request.name) {
            const stepToUpdate = parentStep.nextAction;
            parentStep.nextAction = stepToUpdate.nextAction;
        }
        switch (parentStep.type) {
            case action_1.ActionType.BRANCH: {
                if (parentStep.onFailureAction &&
                    parentStep.onFailureAction.name === request.name) {
                    const stepToUpdate = parentStep.onFailureAction;
                    parentStep.onFailureAction = stepToUpdate.nextAction;
                }
                if (parentStep.onSuccessAction &&
                    parentStep.onSuccessAction.name === request.name) {
                    const stepToUpdate = parentStep.onSuccessAction;
                    parentStep.onSuccessAction = stepToUpdate.nextAction;
                }
                break;
            }
            case action_1.ActionType.LOOP_ON_ITEMS: {
                if (parentStep.firstLoopAction &&
                    parentStep.firstLoopAction.name === request.name) {
                    const stepToUpdate = parentStep.firstLoopAction;
                    parentStep.firstLoopAction = stepToUpdate.nextAction;
                }
                break;
            }
            default:
                break;
        }
        return parentStep;
    });
}
function getUsedPieces(trigger) {
    return traverseInternal(trigger)
        .filter((step) => step.type === action_1.ActionType.PIECE || step.type === trigger_1.TriggerType.PIECE)
        .map((step) => step.settings.pieceName)
        .filter((value, index, self) => self.indexOf(value) === index);
}
function traverseInternal(step) {
    const steps = [];
    while (step !== undefined && step !== null) {
        steps.push(step);
        if (step.type === action_1.ActionType.BRANCH) {
            steps.push(...traverseInternal(step.onSuccessAction));
            steps.push(...traverseInternal(step.onFailureAction));
        }
        if (step.type === action_1.ActionType.LOOP_ON_ITEMS) {
            steps.push(...traverseInternal(step.firstLoopAction));
        }
        step = step.nextAction;
    }
    return steps;
}
function transferStepAsync(step, transferFunction) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const updatedStep = yield transferFunction(step);
        if (updatedStep.type === action_1.ActionType.BRANCH) {
            const { onSuccessAction, onFailureAction } = updatedStep;
            if (onSuccessAction) {
                updatedStep.onSuccessAction = (yield transferStepAsync(onSuccessAction, transferFunction));
            }
            if (onFailureAction) {
                updatedStep.onFailureAction = (yield transferStepAsync(onFailureAction, transferFunction));
            }
        }
        else if (updatedStep.type === action_1.ActionType.LOOP_ON_ITEMS) {
            const { firstLoopAction } = updatedStep;
            if (firstLoopAction) {
                updatedStep.firstLoopAction = (yield transferStepAsync(firstLoopAction, transferFunction));
            }
        }
        if (updatedStep.nextAction) {
            updatedStep.nextAction = (yield transferStepAsync(updatedStep.nextAction, transferFunction));
        }
        return updatedStep;
    });
}
function transferStep(step, transferFunction) {
    const updatedStep = transferFunction(step);
    if (updatedStep.type === action_1.ActionType.BRANCH) {
        const { onSuccessAction, onFailureAction } = updatedStep;
        if (onSuccessAction) {
            updatedStep.onSuccessAction = transferStep(onSuccessAction, transferFunction);
        }
        if (onFailureAction) {
            updatedStep.onFailureAction = transferStep(onFailureAction, transferFunction);
        }
    }
    else if (updatedStep.type === action_1.ActionType.LOOP_ON_ITEMS) {
        const { firstLoopAction } = updatedStep;
        if (firstLoopAction) {
            updatedStep.firstLoopAction = transferStep(firstLoopAction, transferFunction);
        }
    }
    if (updatedStep.nextAction) {
        updatedStep.nextAction = transferStep(updatedStep.nextAction, transferFunction);
    }
    return updatedStep;
}
function transferFlowAsync(flowVersion, transferFunction) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const clonedFlow = JSON.parse(JSON.stringify(flowVersion));
        clonedFlow.trigger = (yield transferStepAsync(clonedFlow.trigger, transferFunction));
        return clonedFlow;
    });
}
function transferFlow(flowVersion, transferFunction) {
    const clonedFlow = JSON.parse(JSON.stringify(flowVersion));
    clonedFlow.trigger = transferStep(clonedFlow.trigger, transferFunction);
    return clonedFlow;
}
function getAllSteps(trigger) {
    return traverseInternal(trigger);
}
function getAllStepsAtFirstLevel(step) {
    const steps = [];
    steps.push(step);
    let nextAction = step.nextAction;
    while (nextAction !== undefined) {
        steps.push(nextAction);
        nextAction = nextAction.nextAction;
    }
    return steps;
}
function getAllChildSteps(action) {
    switch (action.type) {
        case action_1.ActionType.LOOP_ON_ITEMS:
            return traverseInternal(action.firstLoopAction);
        default:
            return [
                ...traverseInternal(action.onSuccessAction),
                ...traverseInternal(action.onFailureAction),
            ];
    }
}
function getAllDirectChildStepsForLoop(action) {
    const actions = [];
    let child = action.firstLoopAction;
    while (child) {
        actions.push(child);
        child = child.nextAction;
    }
    return actions;
}
function getAllDirectChildStepsForBranch(action, branch) {
    const actions = [];
    if (branch === 'success') {
        let child = action.onSuccessAction;
        while (child) {
            actions.push(child);
            child = child.nextAction;
        }
    }
    else {
        let child = action.onFailureAction;
        while (child) {
            actions.push(child);
            child = child.nextAction;
        }
    }
    return actions;
}
function getStep(flowVersion, stepName) {
    return getAllSteps(flowVersion.trigger).find((step) => step.name === stepName);
}
const getAllSubFlowSteps = ({ subFlowStartStep, }) => {
    return traverseInternal(subFlowStartStep);
};
const getStepFromSubFlow = ({ subFlowStartStep, stepName, }) => {
    const subFlowSteps = getAllSubFlowSteps({
        subFlowStartStep,
    });
    return subFlowSteps.find((step) => step.name === stepName);
};
function updateAction(flowVersion, request) {
    return transferFlow(flowVersion, (parentStep) => {
        if (parentStep.nextAction && parentStep.nextAction.name === request.name) {
            const actions = extractActions(parentStep.nextAction);
            parentStep.nextAction = createAction(request, actions);
        }
        if (parentStep.type === action_1.ActionType.BRANCH) {
            if (parentStep.onFailureAction &&
                parentStep.onFailureAction.name === request.name) {
                const actions = extractActions(parentStep.onFailureAction);
                parentStep.onFailureAction = createAction(request, actions);
            }
            if (parentStep.onSuccessAction &&
                parentStep.onSuccessAction.name === request.name) {
                const actions = extractActions(parentStep.onSuccessAction);
                parentStep.onSuccessAction = createAction(request, actions);
            }
        }
        if (parentStep.type === action_1.ActionType.LOOP_ON_ITEMS) {
            if (parentStep.firstLoopAction &&
                parentStep.firstLoopAction.name === request.name) {
                const actions = extractActions(parentStep.firstLoopAction);
                parentStep.firstLoopAction = createAction(request, actions);
            }
        }
        return parentStep;
    });
}
function extractActions(step) {
    const nextAction = step.nextAction;
    const onSuccessAction = step.type === action_1.ActionType.BRANCH ? step.onSuccessAction : undefined;
    const onFailureAction = step.type === action_1.ActionType.BRANCH ? step.onFailureAction : undefined;
    const firstLoopAction = step.type === action_1.ActionType.LOOP_ON_ITEMS ? step.firstLoopAction : undefined;
    return { nextAction, onSuccessAction, onFailureAction, firstLoopAction };
}
function moveAction(flowVersion, request) {
    const steps = getAllSteps(flowVersion.trigger);
    const sourceStep = steps.find((step) => step.name === request.name);
    if (!sourceStep || !isAction(sourceStep.type)) {
        throw new activepieces_error_1.ActivepiecesError({
            code: activepieces_error_1.ErrorCode.FLOW_OPERATION_INVALID,
            params: {},
        }, `Source step ${request.name} not found`);
    }
    const destinationStep = steps.find((step) => step.name === request.newParentStep);
    if (!destinationStep) {
        throw new activepieces_error_1.ActivepiecesError({
            code: activepieces_error_1.ErrorCode.FLOW_OPERATION_INVALID,
            params: {},
        }, `Destination step ${request.newParentStep} not found`);
    }
    const childOperation = [];
    const clonedSourceStep = JSON.parse(JSON.stringify(sourceStep));
    if (clonedSourceStep.type === action_1.ActionType.LOOP_ON_ITEMS ||
        clonedSourceStep.type === action_1.ActionType.BRANCH) {
        // Don't Clone the next action for first step only
        clonedSourceStep.nextAction = undefined;
        childOperation.push(...getImportOperations(clonedSourceStep));
    }
    flowVersion = deleteAction(flowVersion, { name: request.name });
    flowVersion = addAction(flowVersion, {
        action: sourceStep,
        parentStep: request.newParentStep,
        stepLocationRelativeToParent: request.stepLocationRelativeToNewParent,
    });
    childOperation.forEach((operation) => {
        flowVersion = exports.flowHelper.apply(flowVersion, operation);
    });
    return flowVersion;
}
function addAction(flowVersion, request) {
    return transferFlow(flowVersion, (parentStep) => {
        if (parentStep.name !== request.parentStep) {
            return parentStep;
        }
        if (parentStep.type === action_1.ActionType.LOOP_ON_ITEMS &&
            request.stepLocationRelativeToParent) {
            if (request.stepLocationRelativeToParent ===
                flow_operations_1.StepLocationRelativeToParent.INSIDE_LOOP) {
                parentStep.firstLoopAction = createAction(request.action, {
                    nextAction: parentStep.firstLoopAction,
                });
            }
            else if (request.stepLocationRelativeToParent ===
                flow_operations_1.StepLocationRelativeToParent.AFTER) {
                parentStep.nextAction = createAction(request.action, {
                    nextAction: parentStep.nextAction,
                });
            }
            else {
                throw new activepieces_error_1.ActivepiecesError({
                    code: activepieces_error_1.ErrorCode.FLOW_OPERATION_INVALID,
                    params: {},
                }, `Loop step parent ${request.stepLocationRelativeToParent} not found`);
            }
        }
        else if (parentStep.type === action_1.ActionType.BRANCH &&
            request.stepLocationRelativeToParent) {
            if (request.stepLocationRelativeToParent ===
                flow_operations_1.StepLocationRelativeToParent.INSIDE_TRUE_BRANCH) {
                parentStep.onSuccessAction = createAction(request.action, {
                    nextAction: parentStep.onSuccessAction,
                });
            }
            else if (request.stepLocationRelativeToParent ===
                flow_operations_1.StepLocationRelativeToParent.INSIDE_FALSE_BRANCH) {
                parentStep.onFailureAction = createAction(request.action, {
                    nextAction: parentStep.onFailureAction,
                });
            }
            else if (request.stepLocationRelativeToParent ===
                flow_operations_1.StepLocationRelativeToParent.AFTER) {
                parentStep.nextAction = createAction(request.action, {
                    nextAction: parentStep.nextAction,
                });
            }
            else {
                throw new activepieces_error_1.ActivepiecesError({
                    code: activepieces_error_1.ErrorCode.FLOW_OPERATION_INVALID,
                    params: {},
                }, `Branch step parernt ${request.stepLocationRelativeToParent} not found`);
            }
        }
        else {
            parentStep.nextAction = createAction(request.action, {
                nextAction: parentStep.nextAction,
            });
        }
        return parentStep;
    });
}
function createAction(request, { nextAction, onFailureAction, onSuccessAction, firstLoopAction, }) {
    const baseProperties = {
        displayName: request.displayName,
        name: request.name,
        valid: false,
        nextAction,
    };
    let action;
    switch (request.type) {
        case action_1.ActionType.BRANCH:
            action = Object.assign(Object.assign({}, baseProperties), { onFailureAction,
                onSuccessAction, type: action_1.ActionType.BRANCH, settings: request.settings });
            break;
        case action_1.ActionType.LOOP_ON_ITEMS:
            action = Object.assign(Object.assign({}, baseProperties), { firstLoopAction, type: action_1.ActionType.LOOP_ON_ITEMS, settings: request.settings });
            break;
        case action_1.ActionType.PIECE:
            action = Object.assign(Object.assign({}, baseProperties), { type: action_1.ActionType.PIECE, settings: request.settings });
            break;
        case action_1.ActionType.CODE:
            action = Object.assign(Object.assign({}, baseProperties), { type: action_1.ActionType.CODE, settings: request.settings });
            break;
    }
    return Object.assign(Object.assign({}, action), { valid: ((0, common_1.isNil)(request.valid) ? true : request.valid) && actionSchemaValidator.Check(action) });
}
function isChildOf(parent, childStepName) {
    switch (parent.type) {
        case action_1.ActionType.LOOP_ON_ITEMS: {
            const children = getAllChildSteps(parent);
            return children.findIndex((c) => c.name === childStepName) > -1;
        }
        default: {
            const children = getAllChildSteps(parent);
            return children.findIndex((c) => c.name === childStepName) > -1;
        }
    }
}
function createTrigger(name, request, nextAction) {
    const baseProperties = {
        displayName: request.displayName,
        name,
        valid: false,
        nextAction,
    };
    let trigger;
    switch (request.type) {
        case trigger_1.TriggerType.EMPTY:
            trigger = Object.assign(Object.assign({}, baseProperties), { type: trigger_1.TriggerType.EMPTY, settings: request.settings });
            break;
        case trigger_1.TriggerType.PIECE:
            trigger = Object.assign(Object.assign({}, baseProperties), { type: trigger_1.TriggerType.PIECE, settings: request.settings });
            break;
    }
    return Object.assign(Object.assign({}, trigger), { valid: ((0, common_1.isNil)(request.valid) ? true : request.valid) && triggerSchemaValidation.Check(trigger) });
}
function getImportOperations(step) {
    const steps = [];
    while (step) {
        if (step.nextAction) {
            steps.push({
                type: flow_operations_1.FlowOperationType.ADD_ACTION,
                request: {
                    parentStep: step.name,
                    action: removeAnySubsequentAction(step.nextAction),
                },
            });
        }
        switch (step.type) {
            case action_1.ActionType.BRANCH: {
                if (step.onFailureAction) {
                    steps.push({
                        type: flow_operations_1.FlowOperationType.ADD_ACTION,
                        request: {
                            parentStep: step.name,
                            stepLocationRelativeToParent: flow_operations_1.StepLocationRelativeToParent.INSIDE_FALSE_BRANCH,
                            action: removeAnySubsequentAction(step.onFailureAction),
                        },
                    });
                    steps.push(...getImportOperations(step.onFailureAction));
                }
                if (step.onSuccessAction) {
                    steps.push({
                        type: flow_operations_1.FlowOperationType.ADD_ACTION,
                        request: {
                            parentStep: step.name,
                            stepLocationRelativeToParent: flow_operations_1.StepLocationRelativeToParent.INSIDE_TRUE_BRANCH,
                            action: removeAnySubsequentAction(step.onSuccessAction),
                        },
                    });
                    steps.push(...getImportOperations(step.onSuccessAction));
                }
                break;
            }
            case action_1.ActionType.LOOP_ON_ITEMS: {
                if (step.firstLoopAction) {
                    steps.push({
                        type: flow_operations_1.FlowOperationType.ADD_ACTION,
                        request: {
                            parentStep: step.name,
                            stepLocationRelativeToParent: flow_operations_1.StepLocationRelativeToParent.INSIDE_LOOP,
                            action: removeAnySubsequentAction(step.firstLoopAction),
                        },
                    });
                    steps.push(...getImportOperations(step.firstLoopAction));
                }
                break;
            }
            case action_1.ActionType.CODE:
            case action_1.ActionType.PIECE:
            case trigger_1.TriggerType.PIECE:
            case trigger_1.TriggerType.EMPTY:
                {
                    break;
                }
        }
        step = step.nextAction;
    }
    return steps;
}
exports.getImportOperations = getImportOperations;
function removeAnySubsequentAction(action) {
    const clonedAction = JSON.parse(JSON.stringify(action));
    switch (clonedAction.type) {
        case action_1.ActionType.BRANCH: {
            delete clonedAction.onSuccessAction;
            delete clonedAction.onFailureAction;
            break;
        }
        case action_1.ActionType.LOOP_ON_ITEMS: {
            delete clonedAction.firstLoopAction;
            break;
        }
        case action_1.ActionType.PIECE:
        case action_1.ActionType.CODE:
            break;
    }
    delete clonedAction.nextAction;
    return clonedAction;
}
function normalize(flowVersion) {
    return transferFlow(flowVersion, (step) => {
        const clonedStep = JSON.parse(JSON.stringify(step));
        clonedStep.settings.inputUiInfo = sample_data_1.DEFAULT_SAMPLE_DATA_SETTINGS;
        return upgradePiece(clonedStep, clonedStep.name);
    });
}
function upgradePiece(step, stepName) {
    if (step.name !== stepName) {
        return step;
    }
    const clonedStep = JSON.parse(JSON.stringify(step));
    switch (step.type) {
        case action_1.ActionType.PIECE:
        case trigger_1.TriggerType.PIECE: {
            const { pieceVersion, pieceName } = step.settings;
            if (isLegacyApp({ pieceName, pieceVersion })) {
                return step;
            }
            if (pieceVersion.startsWith('^') || pieceVersion.startsWith('~')) {
                return step;
            }
            if (semver_1.default.valid(pieceVersion) && semver_1.default.lt(pieceVersion, '1.0.0')) {
                clonedStep.settings.pieceVersion = `~${pieceVersion}`;
            }
            else {
                clonedStep.settings.pieceVersion = `^${pieceVersion}`;
            }
            break;
        }
        default:
            break;
    }
    return clonedStep;
}
// TODO Remove this in 2024, these pieces didn't follow the standard versioning where the minor version has to be increased when there is breaking change.
function isLegacyApp({ pieceName, pieceVersion }) {
    let newVersion = pieceVersion;
    if (newVersion.startsWith('^') || newVersion.startsWith('~')) {
        newVersion = newVersion.substring(1);
    }
    if (pieceName === '@activepieces/piece-google-sheets' &&
        semver_1.default.lt(newVersion, '0.3.0')) {
        return true;
    }
    if (pieceName === '@activepieces/piece-gmail' &&
        semver_1.default.lt(newVersion, '0.3.0')) {
        return true;
    }
    return false;
}
function duplicateStep(stepName, flowVersionWithArtifacts) {
    const clonedStep = JSON.parse(JSON.stringify(exports.flowHelper.getStep(flowVersionWithArtifacts, stepName)));
    clonedStep.nextAction = undefined;
    if (!clonedStep) {
        throw new Error(`step with name '${stepName}' not found`);
    }
    const existingNames = getAllSteps(flowVersionWithArtifacts.trigger).map((step) => step.name);
    const oldStepsNameToReplace = getAllSteps(clonedStep).map((step) => step.name);
    const oldNameToNewName = {};
    oldStepsNameToReplace.forEach((name) => {
        const newName = findUnusedName(existingNames, 'step');
        oldNameToNewName[name] = newName;
        existingNames.push(newName);
    });
    const duplicatedStep = transferStep(clonedStep, (step) => {
        step.displayName = `${step.displayName} Copy`;
        step.name = oldNameToNewName[step.name];
        if (step.settings.inputUiInfo) {
            step.settings.inputUiInfo.currentSelectedData = undefined;
            step.settings.inputUiInfo.lastTestDate = undefined;
        }
        oldStepsNameToReplace.forEach((oldName) => {
            step.settings.input = (0, common_1.applyFunctionToValuesSync)(step.settings.input, (value) => {
                if ((0, common_1.isString)(value)) {
                    return replaceOldStepNameWithNewOne({ input: value, oldStepName: oldName, newStepName: oldNameToNewName[oldName] });
                }
                return value;
            });
        });
        return step;
    });
    let finalFlow = addAction(flowVersionWithArtifacts, {
        action: duplicatedStep,
        parentStep: stepName,
        stepLocationRelativeToParent: flow_operations_1.StepLocationRelativeToParent.AFTER,
    });
    const operations = getImportOperations(duplicatedStep);
    operations.forEach((operation) => {
        finalFlow = exports.flowHelper.apply(finalFlow, operation);
    });
    return finalFlow;
}
function replaceOldStepNameWithNewOne({ input, oldStepName, newStepName }) {
    const regex = /{{(.*?)}}/g; // Regular expression to match strings inside {{ }}
    return input.replace(regex, (match, content) => {
        // Replace the content inside {{ }} using the provided function
        const replacedContent = content.replaceAll(new RegExp(`\\b${oldStepName}\\b`, 'g'), `${newStepName}`);
        // Reconstruct the {{ }} with the replaced content
        return `{{${replacedContent}}}`;
    });
}
function doesActionHaveChildren(action) {
    if (action.type === action_1.ActionType.BRANCH || action.type === action_1.ActionType.LOOP_ON_ITEMS) {
        return true;
    }
    return false;
}
function findUnusedName(names, stepPrefix) {
    let availableNumber = 1;
    let availableName = `${stepPrefix}_${availableNumber}`;
    while (names.includes(availableName)) {
        availableNumber++;
        availableName = `${stepPrefix}_${availableNumber}`;
    }
    return availableName;
}
function findAvailableStepName(flowVersion, stepPrefix) {
    const steps = exports.flowHelper
        .getAllSteps(flowVersion.trigger)
        .map((f) => f.name);
    return findUnusedName(steps, stepPrefix);
}
function getDirectParentStep(child, parent) {
    var _a, _b, _c, _d;
    if (!parent) {
        return undefined;
    }
    if (isTrigger(parent.type)) {
        let next = parent.nextAction;
        while (next) {
            if (next.name === child.name) {
                return parent;
            }
            next = next.nextAction;
        }
    }
    if (parent.type === action_1.ActionType.BRANCH) {
        const isChildOfBranch = isChildOf(parent, child.name);
        if (isChildOfBranch) {
            const directTrueBranchChildren = getAllDirectChildStepsForBranch(parent, 'success');
            const directFalseBranchChildren = getAllDirectChildStepsForBranch(parent, 'failure');
            if (((_a = directTrueBranchChildren.at(-1)) === null || _a === void 0 ? void 0 : _a.name) === child.name || ((_b = directFalseBranchChildren.at(-1)) === null || _b === void 0 ? void 0 : _b.name) === child.name) {
                return parent;
            }
            return (_c = getDirectParentStep(child, parent.onSuccessAction)) !== null && _c !== void 0 ? _c : getDirectParentStep(child, parent.onFailureAction);
        }
    }
    if (parent.type === action_1.ActionType.LOOP_ON_ITEMS) {
        const isChildOfLoop = isChildOf(parent, child.name);
        if (isChildOfLoop) {
            const directChildren = getAllDirectChildStepsForLoop(parent);
            if (((_d = directChildren.at(-1)) === null || _d === void 0 ? void 0 : _d.name) === child.name) {
                return parent;
            }
            return getDirectParentStep(child, parent.firstLoopAction);
        }
    }
    return getDirectParentStep(child, parent.nextAction);
}
function isStepLastChildOfParent(child, trigger) {
    var _a, _b, _c;
    const parent = getDirectParentStep(child, trigger);
    if (parent) {
        if (doesStepHaveChildren(parent)) {
            if (parent.type === action_1.ActionType.LOOP_ON_ITEMS) {
                const children = getAllDirectChildStepsForLoop(parent);
                return ((_a = children[children.length - 1]) === null || _a === void 0 ? void 0 : _a.name) === child.name;
            }
            const trueBranchChildren = getAllDirectChildStepsForBranch(parent, 'success');
            const falseBranchChildren = getAllDirectChildStepsForBranch(parent, 'failure');
            return ((_b = trueBranchChildren[trueBranchChildren.length - 1]) === null || _b === void 0 ? void 0 : _b.name) === child.name || ((_c = falseBranchChildren[falseBranchChildren.length - 1]) === null || _c === void 0 ? void 0 : _c.name) === child.name;
        }
        let next = parent.nextAction;
        while (next) {
            if (next.nextAction === undefined && next.name === child.name) {
                return true;
            }
            next = next.nextAction;
        }
    }
    return false;
}
function doesStepHaveChildren(step) {
    return step.type === action_1.ActionType.BRANCH || step.type === action_1.ActionType.LOOP_ON_ITEMS;
}
exports.flowHelper = {
    isValid,
    apply(flowVersion, operation) {
        let clonedVersion = JSON.parse(JSON.stringify(flowVersion));
        switch (operation.type) {
            case flow_operations_1.FlowOperationType.MOVE_ACTION:
                clonedVersion = moveAction(clonedVersion, operation.request);
                break;
            case flow_operations_1.FlowOperationType.LOCK_FLOW:
                clonedVersion.state = flow_version_1.FlowVersionState.LOCKED;
                break;
            case flow_operations_1.FlowOperationType.CHANGE_NAME:
                clonedVersion.displayName = operation.request.displayName;
                break;
            case flow_operations_1.FlowOperationType.DELETE_ACTION:
                clonedVersion = deleteAction(clonedVersion, operation.request);
                break;
            case flow_operations_1.FlowOperationType.ADD_ACTION: {
                clonedVersion = transferFlow(addAction(clonedVersion, operation.request), (step) => upgradePiece(step, operation.request.action.name));
                break;
            }
            case flow_operations_1.FlowOperationType.UPDATE_ACTION:
                clonedVersion = transferFlow(updateAction(clonedVersion, operation.request), (step) => upgradePiece(step, operation.request.name));
                break;
            case flow_operations_1.FlowOperationType.UPDATE_TRIGGER:
                clonedVersion.trigger = createTrigger(clonedVersion.trigger.name, operation.request, clonedVersion.trigger.nextAction);
                clonedVersion = transferFlow(clonedVersion, (step) => upgradePiece(step, operation.request.name));
                break;
            case flow_operations_1.FlowOperationType.DUPLICATE_ACTION: {
                clonedVersion = duplicateStep(operation.request.stepName, clonedVersion);
                break;
            }
            default:
                break;
        }
        clonedVersion.valid = isValid(clonedVersion);
        return clonedVersion;
    },
    getStep,
    isAction,
    isTrigger,
    getAllSteps,
    isStepLastChildOfParent,
    getUsedPieces,
    getImportOperations,
    getAllSubFlowSteps,
    normalize,
    getStepFromSubFlow,
    isChildOf,
    transferFlowAsync,
    getAllChildSteps,
    getAllStepsAtFirstLevel,
    duplicateStep,
    findAvailableStepName,
    doesActionHaveChildren,
};


/***/ }),
/* 73 */
/***/ ((module) => {

module.exports = require("@sinclair/typebox/compiler");

/***/ }),
/* 74 */
/***/ ((module) => {

module.exports = require("semver");

/***/ }),
/* 75 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateFlowRequest = void 0;
const typebox_1 = __webpack_require__(10);
exports.CreateFlowRequest = typebox_1.Type.Object({
    displayName: typebox_1.Type.String({}),
    folderName: typebox_1.Type.Optional(typebox_1.Type.String({})),
    projectId: typebox_1.Type.String({}),
});


/***/ }),
/* 76 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SeekPage = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const SeekPage = (t) => typebox_1.Type.Object({
    data: typebox_1.Type.Array(t),
    next: (0, base_model_1.Nullable)(typebox_1.Type.String({ description: 'Cursor to the next page' })),
    previous: (0, base_model_1.Nullable)(typebox_1.Type.String({ description: 'Cursor to the previous page' })),
});
exports.SeekPage = SeekPage;


/***/ }),
/* 77 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestPollingTriggerRequest = exports.ListTriggerEventsRequest = void 0;
const typebox_1 = __webpack_require__(10);
exports.ListTriggerEventsRequest = typebox_1.Type.Object({
    flowId: typebox_1.Type.String({}),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number({})),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
});
exports.TestPollingTriggerRequest = typebox_1.Type.Object({
    flowId: typebox_1.Type.String({}),
});


/***/ }),
/* 78 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 79 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UncategorizedFolderId = exports.Folder = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
exports.Folder = typebox_1.Type.Object(Object.assign(Object.assign({}, common_1.BaseModelSchema), { id: typebox_1.Type.String(), projectId: typebox_1.Type.String(), displayName: typebox_1.Type.String() }));
exports.UncategorizedFolderId = 'UNCATEGORIZED';


/***/ }),
/* 80 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListFolderRequest = exports.DeleteFolderRequest = exports.CreateOrRenameFolderRequest = void 0;
const typebox_1 = __webpack_require__(10);
exports.CreateOrRenameFolderRequest = typebox_1.Type.Object({
    displayName: typebox_1.Type.String(),
});
exports.DeleteFolderRequest = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
});
exports.ListFolderRequest = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Number({})),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
});


/***/ }),
/* 81 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListFlowTemplatesRequest = exports.FlowTemplateWithoutProjectInformation = exports.FlowTemplate = exports.TemplateType = exports.FlowVersionTemplate = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
const flow_version_1 = __webpack_require__(47);
exports.FlowVersionTemplate = typebox_1.Type.Omit(flow_version_1.FlowVersion, ['id', 'created', 'updated', 'flowId', 'state', 'updatedBy']);
var TemplateType;
(function (TemplateType) {
    TemplateType["PLATFORM"] = "PLATFORM";
    TemplateType["PROJECT"] = "PROJECT";
})(TemplateType || (exports.TemplateType = TemplateType = {}));
exports.FlowTemplate = typebox_1.Type.Object(Object.assign(Object.assign({}, common_1.BaseModelSchema), { name: typebox_1.Type.String(), description: typebox_1.Type.String(), type: typebox_1.Type.Enum(TemplateType), tags: typebox_1.Type.Array(typebox_1.Type.String()), pieces: typebox_1.Type.Array(typebox_1.Type.String()), blogUrl: typebox_1.Type.Optional(typebox_1.Type.String()), template: exports.FlowVersionTemplate, projectId: typebox_1.Type.String(), platformId: typebox_1.Type.String() }));
exports.FlowTemplateWithoutProjectInformation = typebox_1.Type.Omit(exports.FlowTemplate, ['projectId', 'platformId', 'id', 'type']);
exports.ListFlowTemplatesRequest = typebox_1.Type.Object({
    pieces: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    search: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 82 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(83), exports);
tslib_1.__exportStar(__webpack_require__(84), exports);
tslib_1.__exportStar(__webpack_require__(52), exports);
tslib_1.__exportStar(__webpack_require__(46), exports);
tslib_1.__exportStar(__webpack_require__(85), exports);


/***/ }),
/* 83 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.USE_DRAFT_QUERY_PARAM_NAME = exports.FormResponse = exports.FormProps = exports.FormInput = exports.FormInputType = void 0;
const typebox_1 = __webpack_require__(10);
var FormInputType;
(function (FormInputType) {
    FormInputType["TEXT"] = "text";
    FormInputType["FILE"] = "file";
    FormInputType["TEXT_AREA"] = "text_area";
    FormInputType["TOGGLE"] = "toggle";
})(FormInputType || (exports.FormInputType = FormInputType = {}));
exports.FormInput = typebox_1.Type.Object({
    displayName: typebox_1.Type.String(),
    required: typebox_1.Type.Boolean(),
    description: typebox_1.Type.String(),
    type: typebox_1.Type.Enum(FormInputType),
});
exports.FormProps = typebox_1.Type.Object({
    inputs: typebox_1.Type.Array(exports.FormInput),
    waitForResponse: typebox_1.Type.Boolean(),
});
exports.FormResponse = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    title: typebox_1.Type.String(),
    props: exports.FormProps,
    projectId: typebox_1.Type.String(),
});
exports.USE_DRAFT_QUERY_PARAM_NAME = 'useDraft';


/***/ }),
/* 84 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StepFileWithUrl = exports.StepFileGet = exports.StepFileUpsert = exports.StepFile = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
exports.StepFile = typebox_1.Type.Object(Object.assign(Object.assign({}, common_1.BaseModelSchema), { name: typebox_1.Type.String(), flowId: typebox_1.Type.String(), projectId: typebox_1.Type.String(), stepName: typebox_1.Type.String(), size: typebox_1.Type.Number(), data: typebox_1.Type.Unknown() }));
exports.StepFileUpsert = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    flowId: typebox_1.Type.String(),
    stepName: typebox_1.Type.String(),
    file: typebox_1.Type.Unknown(),
});
exports.StepFileGet = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    projectId: typebox_1.Type.String(),
});
exports.StepFileWithUrl = typebox_1.Type.Composite([exports.StepFile, typebox_1.Type.Object({
        url: typebox_1.Type.String(),
    })]);


/***/ }),
/* 85 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestTriggerRequestBody = exports.TriggerTestStrategy = void 0;
const typebox_1 = __webpack_require__(10);
const id_generator_1 = __webpack_require__(23);
var TriggerTestStrategy;
(function (TriggerTestStrategy) {
    TriggerTestStrategy["SIMULATION"] = "SIMULATION";
    TriggerTestStrategy["TEST_FUNCTION"] = "TEST_FUNCTION";
})(TriggerTestStrategy || (exports.TriggerTestStrategy = TriggerTestStrategy = {}));
exports.TestTriggerRequestBody = typebox_1.Type.Object({
    flowId: id_generator_1.ApId,
    flowVersionId: id_generator_1.ApId,
    testStrategy: typebox_1.Type.Enum(TriggerTestStrategy),
});


/***/ }),
/* 86 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListFlowVersionRequest = exports.GetFlowQueryParamsRequest = exports.ListFlowsRequest = void 0;
const typebox_1 = __webpack_require__(10);
const flow_1 = __webpack_require__(46);
exports.ListFlowsRequest = typebox_1.Type.Object({
    folderId: typebox_1.Type.Optional(typebox_1.Type.String()),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number({})),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
    status: typebox_1.Type.Optional(typebox_1.Type.Enum(flow_1.FlowStatus)),
    projectId: typebox_1.Type.String({}),
});
exports.GetFlowQueryParamsRequest = typebox_1.Type.Object({
    versionId: typebox_1.Type.Optional(typebox_1.Type.String({})),
});
exports.ListFlowVersionRequest = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Number({})),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
});


/***/ }),
/* 87 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(88), exports);
tslib_1.__exportStar(__webpack_require__(89), exports);


/***/ }),
/* 88 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateProjectRequestInCommunity = exports.ProjectWithLimits = exports.Project = exports.ProjectPlan = exports.ProjectUsage = exports.NotificationStatus = exports.PiecesFilterType = exports.ListProjectRequestForUserQueryParams = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
const id_generator_1 = __webpack_require__(23);
exports.ListProjectRequestForUserQueryParams = typebox_1.Type.Object({
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
});
var PiecesFilterType;
(function (PiecesFilterType) {
    PiecesFilterType["NONE"] = "NONE";
    PiecesFilterType["ALLOWED"] = "ALLOWED";
})(PiecesFilterType || (exports.PiecesFilterType = PiecesFilterType = {}));
var NotificationStatus;
(function (NotificationStatus) {
    NotificationStatus["NEVER"] = "NEVER";
    NotificationStatus["ALWAYS"] = "ALWAYS";
    NotificationStatus["NEW_ISSUE"] = "NEW_ISSUE";
})(NotificationStatus || (exports.NotificationStatus = NotificationStatus = {}));
exports.ProjectUsage = typebox_1.Type.Object({
    tasks: typebox_1.Type.Number(),
    teamMembers: typebox_1.Type.Number(),
});
exports.ProjectPlan = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { projectId: typebox_1.Type.String(), name: typebox_1.Type.String(), minimumPollingInterval: typebox_1.Type.Number(), piecesFilterType: typebox_1.Type.Enum(PiecesFilterType), pieces: typebox_1.Type.Array(typebox_1.Type.String()), connections: typebox_1.Type.Number(), teamMembers: typebox_1.Type.Number(), tasks: typebox_1.Type.Number() }));
exports.Project = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { deleted: (0, base_model_1.Nullable)(typebox_1.Type.String()), ownerId: typebox_1.Type.String(), displayName: typebox_1.Type.String(), notifyStatus: typebox_1.Type.Enum(NotificationStatus), platformId: id_generator_1.ApId, externalId: typebox_1.Type.Optional(typebox_1.Type.String()) }));
exports.ProjectWithLimits = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.Project, ['deleted']),
    typebox_1.Type.Object({
        usage: exports.ProjectUsage,
        plan: exports.ProjectPlan,
    }),
]);
exports.UpdateProjectRequestInCommunity = typebox_1.Type.Object({
    notifyStatus: typebox_1.Type.Optional(typebox_1.Type.Enum(NotificationStatus)),
    displayName: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 89 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectMemberRole = void 0;
var ProjectMemberRole;
(function (ProjectMemberRole) {
    ProjectMemberRole["ADMIN"] = "ADMIN";
    ProjectMemberRole["EDITOR"] = "EDITOR";
    ProjectMemberRole["OPERATOR"] = "OPERATOR";
    ProjectMemberRole["VIEWER"] = "VIEWER";
})(ProjectMemberRole || (exports.ProjectMemberRole = ProjectMemberRole = {}));


/***/ }),
/* 90 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileResponseInterface = void 0;
const typebox_1 = __webpack_require__(10);
exports.FileResponseInterface = typebox_1.Type.Object({
    base64Url: typebox_1.Type.String(),
    fileName: typebox_1.Type.String(),
    extension: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 91 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(92), exports);
tslib_1.__exportStar(__webpack_require__(95), exports);


/***/ }),
/* 92 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlatformWithoutSensitiveData = exports.Platform = exports.FilteredPieceBehavior = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
const base_model_1 = __webpack_require__(22);
const id_generator_1 = __webpack_require__(23);
const federated_authn_1 = __webpack_require__(93);
var FilteredPieceBehavior;
(function (FilteredPieceBehavior) {
    FilteredPieceBehavior["ALLOWED"] = "ALLOWED";
    FilteredPieceBehavior["BLOCKED"] = "BLOCKED";
})(FilteredPieceBehavior || (exports.FilteredPieceBehavior = FilteredPieceBehavior = {}));
exports.Platform = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { ownerId: id_generator_1.ApId, name: typebox_1.Type.String(), primaryColor: typebox_1.Type.String(), logoIconUrl: typebox_1.Type.String(), fullLogoUrl: typebox_1.Type.String(), favIconUrl: typebox_1.Type.String(), 
    /**
    * @deprecated Use projects filter instead.
    */
    filteredPieceNames: typebox_1.Type.Array(typebox_1.Type.String()), 
    /**
    * @deprecated Use projects filter instead.
    */
    filteredPieceBehavior: typebox_1.Type.Enum(FilteredPieceBehavior), smtpHost: typebox_1.Type.Optional(typebox_1.Type.String()), smtpPort: typebox_1.Type.Optional(typebox_1.Type.Number()), smtpUser: typebox_1.Type.Optional(typebox_1.Type.String()), smtpPassword: typebox_1.Type.Optional(typebox_1.Type.String()), smtpSenderEmail: typebox_1.Type.Optional(typebox_1.Type.String()), smtpUseSSL: typebox_1.Type.Optional(typebox_1.Type.Boolean()), privacyPolicyUrl: typebox_1.Type.Optional(typebox_1.Type.String()), termsOfServiceUrl: typebox_1.Type.Optional(typebox_1.Type.String()), cloudAuthEnabled: typebox_1.Type.Boolean(), gitSyncEnabled: typebox_1.Type.Boolean(), showPoweredBy: typebox_1.Type.Boolean(), auditLogEnabled: typebox_1.Type.Boolean(), embeddingEnabled: typebox_1.Type.Boolean(), managePiecesEnabled: typebox_1.Type.Boolean(), manageTemplatesEnabled: typebox_1.Type.Boolean(), customAppearanceEnabled: typebox_1.Type.Boolean(), manageProjectsEnabled: typebox_1.Type.Boolean(), projectRolesEnabled: typebox_1.Type.Boolean(), customDomainsEnabled: typebox_1.Type.Boolean(), apiKeysEnabled: typebox_1.Type.Boolean(), flowIssuesEnabled: typebox_1.Type.Boolean(), alertsEnabled: typebox_1.Type.Boolean(), defaultLocale: typebox_1.Type.Optional(typebox_1.Type.Enum(common_1.LocalesEnum)), ssoEnabled: typebox_1.Type.Boolean(), enforceAllowedAuthDomains: typebox_1.Type.Boolean(), allowedAuthDomains: typebox_1.Type.Array(typebox_1.Type.String()), federatedAuthProviders: federated_authn_1.FederatedAuthnProviderConfig, emailAuthEnabled: typebox_1.Type.Boolean(), premiumPieces: typebox_1.Type.Array(typebox_1.Type.String()) }));
exports.PlatformWithoutSensitiveData = typebox_1.Type.Composite([typebox_1.Type.Object({
        federatedAuthProviders: federated_authn_1.FederatedAuthnProviderConfigWithoutSensitiveData,
        defaultLocale: (0, base_model_1.Nullable)(typebox_1.Type.String()),
    }), typebox_1.Type.Omit(exports.Platform, ['smtpPassword', 'federatedAuthProviders', 'defaultLocale'])]);


/***/ }),
/* 93 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FederatedAuthnProviderConfigWithoutSensitiveData = exports.FederatedAuthnProviderConfig = exports.SAMLAuthnProviderConfig = exports.GithubAuthnProviderConfig = exports.GoogleAuthnProviderConfig = exports.ClaimTokenRequest = exports.federatedAuthnLoginResponse = void 0;
const tslib_1 = __webpack_require__(1);
const typebox_1 = __webpack_require__(10);
const authn_provider_name_1 = __webpack_require__(94);
tslib_1.__exportStar(__webpack_require__(94), exports);
exports.federatedAuthnLoginResponse = typebox_1.Type.Object({
    loginUrl: typebox_1.Type.String(),
});
exports.ClaimTokenRequest = typebox_1.Type.Object({
    providerName: typebox_1.Type.Enum(authn_provider_name_1.ThirdPartyAuthnProviderEnum),
    code: typebox_1.Type.String(),
});
exports.GoogleAuthnProviderConfig = typebox_1.Type.Object({
    clientId: typebox_1.Type.String(),
    clientSecret: typebox_1.Type.String(),
});
exports.GithubAuthnProviderConfig = typebox_1.Type.Object({
    clientId: typebox_1.Type.String(),
    clientSecret: typebox_1.Type.String(),
});
exports.SAMLAuthnProviderConfig = typebox_1.Type.Object({
    idpMetadata: typebox_1.Type.String(),
    idpCertificate: typebox_1.Type.String(),
});
exports.FederatedAuthnProviderConfig = typebox_1.Type.Object({
    google: typebox_1.Type.Optional(exports.GoogleAuthnProviderConfig),
    github: typebox_1.Type.Optional(exports.GithubAuthnProviderConfig),
    saml: typebox_1.Type.Optional(exports.SAMLAuthnProviderConfig),
});
exports.FederatedAuthnProviderConfigWithoutSensitiveData = typebox_1.Type.Object({
    google: typebox_1.Type.Optional(typebox_1.Type.Pick(exports.GoogleAuthnProviderConfig, ['clientId'])),
    github: typebox_1.Type.Optional(typebox_1.Type.Pick(exports.GithubAuthnProviderConfig, ['clientId'])),
    saml: typebox_1.Type.Optional(typebox_1.Type.Object({})),
});


/***/ }),
/* 94 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ThirdPartyAuthnProviderEnum = void 0;
var ThirdPartyAuthnProviderEnum;
(function (ThirdPartyAuthnProviderEnum) {
    ThirdPartyAuthnProviderEnum["GOOGLE"] = "google";
    ThirdPartyAuthnProviderEnum["GITHUB"] = "github";
    ThirdPartyAuthnProviderEnum["SAML"] = "saml";
})(ThirdPartyAuthnProviderEnum || (exports.ThirdPartyAuthnProviderEnum = ThirdPartyAuthnProviderEnum = {}));


/***/ }),
/* 95 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdminAddPlatformRequestBody = exports.UpdatePlatformRequestBody = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
const id_generator_1 = __webpack_require__(23);
const federated_authn_1 = __webpack_require__(93);
const platform_model_1 = __webpack_require__(92);
exports.UpdatePlatformRequestBody = typebox_1.Type.Object({
    name: typebox_1.Type.Optional(typebox_1.Type.String()),
    primaryColor: typebox_1.Type.Optional(typebox_1.Type.String()),
    logoIconUrl: typebox_1.Type.Optional(typebox_1.Type.String()),
    fullLogoUrl: typebox_1.Type.Optional(typebox_1.Type.String()),
    favIconUrl: typebox_1.Type.Optional(typebox_1.Type.String()),
    filteredPieceNames: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    filteredPieceBehavior: typebox_1.Type.Optional(typebox_1.Type.Enum(platform_model_1.FilteredPieceBehavior)),
    smtpHost: typebox_1.Type.Optional(typebox_1.Type.String()),
    smtpPort: typebox_1.Type.Optional(typebox_1.Type.Number()),
    smtpUser: typebox_1.Type.Optional(typebox_1.Type.String()),
    smtpPassword: typebox_1.Type.Optional(typebox_1.Type.String()),
    smtpSenderEmail: typebox_1.Type.Optional(typebox_1.Type.String()),
    smtpUseSSL: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    federatedAuthProviders: typebox_1.Type.Optional(federated_authn_1.FederatedAuthnProviderConfig),
    cloudAuthEnabled: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    emailAuthEnabled: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    allowedAuthDomains: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    enforceAllowedAuthDomains: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    defaultLocale: typebox_1.Type.Optional(typebox_1.Type.Enum(common_1.LocalesEnum)),
});
exports.AdminAddPlatformRequestBody = typebox_1.Type.Object({
    userId: id_generator_1.ApId,
    projectId: id_generator_1.ApId,
    name: typebox_1.Type.String(),
    primaryColor: typebox_1.Type.Optional(typebox_1.Type.String()),
    logoIconUrl: typebox_1.Type.Optional(typebox_1.Type.String()),
    fullLogoUrl: typebox_1.Type.Optional(typebox_1.Type.String()),
    favIconUrl: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 96 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpsertTagRequest = exports.SetPieceTagsRequest = exports.ListTagsRequest = exports.PieceTag = exports.Tag = void 0;
const typebox_1 = __webpack_require__(10);
const base_model_1 = __webpack_require__(22);
exports.Tag = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { platformId: typebox_1.Type.String(), name: typebox_1.Type.String() }));
exports.PieceTag = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { pieceName: typebox_1.Type.String(), tagId: typebox_1.Type.String(), platformId: typebox_1.Type.String() }));
exports.ListTagsRequest = typebox_1.Type.Object({
    platformId: typebox_1.Type.String(),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.SetPieceTagsRequest = typebox_1.Type.Object({
    piecesName: typebox_1.Type.Array(typebox_1.Type.String()),
    tags: typebox_1.Type.Array(typebox_1.Type.String()),
});
exports.UpsertTagRequest = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
});


/***/ }),
/* 97 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebsocketServerEvent = exports.WebsocketClientEvent = void 0;
var WebsocketClientEvent;
(function (WebsocketClientEvent) {
    WebsocketClientEvent["TEST_FLOW_RUN_STARTED"] = "TEST_FLOW_RUN_STARTED";
    WebsocketClientEvent["TEST_FLOW_RUN_PROGRESS"] = "TEST_FLOW_RUN_PROGRESS";
    WebsocketClientEvent["GENERATE_CODE_FINISHED"] = "GENERATE_CODE_FINIISHED";
    WebsocketClientEvent["TEST_STEP_FINISHED"] = "TEST_STEP_FINISHED";
})(WebsocketClientEvent || (exports.WebsocketClientEvent = WebsocketClientEvent = {}));
var WebsocketServerEvent;
(function (WebsocketServerEvent) {
    WebsocketServerEvent["TEST_STEP_RUN"] = "TEST_STEP_RUN";
    WebsocketServerEvent["GENERATE_CODE"] = "GENERATE_CODE";
    WebsocketServerEvent["TEST_FLOW_RUN"] = "TEST_FLOW_RUN";
})(WebsocketServerEvent || (exports.WebsocketServerEvent = WebsocketServerEvent = {}));


/***/ }),
/* 98 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GenerateCodeResponse = exports.GenerateCodeRequest = void 0;
const typebox_1 = __webpack_require__(10);
exports.GenerateCodeRequest = typebox_1.Type.Object({
    prompt: typebox_1.Type.String(),
});
exports.GenerateCodeResponse = typebox_1.Type.Object({
    result: typebox_1.Type.String(),
});


/***/ }),
/* 99 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.supportUrl = void 0;
exports.supportUrl = 'https://community.activepieces.com';


/***/ }),
/* 100 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LicenseKeyEntity = exports.CreateTrialLicenseKeyRequestBody = void 0;
const typebox_1 = __webpack_require__(10);
exports.CreateTrialLicenseKeyRequestBody = typebox_1.Type.Object({
    email: typebox_1.Type.String(),
    fullName: typebox_1.Type.String(),
    companyName: typebox_1.Type.String(),
    goal: typebox_1.Type.String(),
    numberOfEmployees: typebox_1.Type.String(),
});
exports.LicenseKeyEntity = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    email: typebox_1.Type.String(),
    expiresAt: typebox_1.Type.String(),
    activatedAt: typebox_1.Type.String(),
    createdAt: typebox_1.Type.String(),
    isTrial: typebox_1.Type.Boolean(),
    key: typebox_1.Type.String(),
    ssoEnabled: typebox_1.Type.Boolean(),
    gitSyncEnabled: typebox_1.Type.Boolean(),
    showPoweredBy: typebox_1.Type.Boolean(),
    embeddingEnabled: typebox_1.Type.Boolean(),
    auditLogEnabled: typebox_1.Type.Boolean(),
    customAppearanceEnabled: typebox_1.Type.Boolean(),
    manageProjectsEnabled: typebox_1.Type.Boolean(),
    managePiecesEnabled: typebox_1.Type.Boolean(),
    manageTemplatesEnabled: typebox_1.Type.Boolean(),
    apiKeysEnabled: typebox_1.Type.Boolean(),
    customDomainsEnabled: typebox_1.Type.Boolean(),
    projectRolesEnabled: typebox_1.Type.Boolean(),
    flowIssuesEnabled: typebox_1.Type.Boolean(),
    alertsEnabled: typebox_1.Type.Boolean(),
    premiumPieces: typebox_1.Type.Array(typebox_1.Type.String()),
});


/***/ }),
/* 101 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListUserInvitationsRequest = exports.AcceptUserInvitationRequest = exports.SendUserInvitationRequest = exports.UserInvitationWithLink = exports.UserInvitation = exports.InvitationStatus = exports.InvitationType = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
const project_1 = __webpack_require__(87);
const index_1 = __webpack_require__(48);
var InvitationType;
(function (InvitationType) {
    InvitationType["PLATFORM"] = "PLATFORM";
    InvitationType["PROJECT"] = "PROJECT";
})(InvitationType || (exports.InvitationType = InvitationType = {}));
var InvitationStatus;
(function (InvitationStatus) {
    InvitationStatus["PENDING"] = "PENDING";
    InvitationStatus["ACCEPTED"] = "ACCEPTED";
})(InvitationStatus || (exports.InvitationStatus = InvitationStatus = {}));
exports.UserInvitation = typebox_1.Type.Object(Object.assign(Object.assign({}, common_1.BaseModelSchema), { email: typebox_1.Type.String(), status: typebox_1.Type.Enum(InvitationStatus), type: typebox_1.Type.Enum(InvitationType), platformId: typebox_1.Type.String(), platformRole: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Enum(index_1.PlatformRole), typebox_1.Type.Null()])), projectId: (0, common_1.Nullable)(typebox_1.Type.String()), projectRole: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Enum(project_1.ProjectMemberRole), typebox_1.Type.Null()])) }));
exports.UserInvitationWithLink = typebox_1.Type.Composite([exports.UserInvitation, typebox_1.Type.Object({
        link: typebox_1.Type.Optional(typebox_1.Type.String()),
    })]);
exports.SendUserInvitationRequest = typebox_1.Type.Object({
    email: typebox_1.Type.String(),
    type: typebox_1.Type.Enum(InvitationType),
    platformRole: typebox_1.Type.Optional(typebox_1.Type.Enum(index_1.PlatformRole)),
    projectId: (0, common_1.Nullable)(typebox_1.Type.String()),
    projectRole: typebox_1.Type.Optional(typebox_1.Type.Enum(project_1.ProjectMemberRole)),
});
exports.AcceptUserInvitationRequest = typebox_1.Type.Object({
    invitationToken: typebox_1.Type.String(),
});
exports.ListUserInvitationsRequest = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
    type: typebox_1.Type.Enum(InvitationType),
    status: typebox_1.Type.Optional(typebox_1.Type.Enum(InvitationStatus)),
});


/***/ }),
/* 102 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkerMachineHealthcheckRequest = exports.WorkerMachineWithStatus = exports.WorkerMachine = exports.MachineInformation = exports.WorkerMachineType = exports.WorkerMachineStatus = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(28);
const id_generator_1 = __webpack_require__(23);
var WorkerMachineStatus;
(function (WorkerMachineStatus) {
    WorkerMachineStatus["ONLINE"] = "ONLINE";
    WorkerMachineStatus["OFFLINE"] = "OFFLINE";
})(WorkerMachineStatus || (exports.WorkerMachineStatus = WorkerMachineStatus = {}));
var WorkerMachineType;
(function (WorkerMachineType) {
    WorkerMachineType["DEDICATED"] = "DEDICATED";
    WorkerMachineType["SHARED"] = "SHARED";
})(WorkerMachineType || (exports.WorkerMachineType = WorkerMachineType = {}));
exports.MachineInformation = typebox_1.Type.Object({
    cpuUsagePercentage: typebox_1.Type.Number(),
    ramUsagePercentage: typebox_1.Type.Number(),
    totalAvailableRamInBytes: typebox_1.Type.Number(),
    ip: typebox_1.Type.String(),
});
exports.WorkerMachine = typebox_1.Type.Object(Object.assign(Object.assign({}, common_1.BaseModelSchema), { platformId: id_generator_1.ApId, type: typebox_1.Type.Enum(WorkerMachineType), information: exports.MachineInformation }));
exports.WorkerMachineWithStatus = typebox_1.Type.Composite([exports.WorkerMachine, typebox_1.Type.Object({
        status: typebox_1.Type.Enum(WorkerMachineStatus),
    })]);
exports.WorkerMachineHealthcheckRequest = exports.MachineInformation;


/***/ }),
/* 103 */
/***/ ((module) => {

module.exports = require("@sinclair/typebox/system");

/***/ }),
/* 104 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.networkUtls = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = tslib_1.__importDefault(__webpack_require__(105));
const shared_1 = __webpack_require__(8);
const system_1 = __webpack_require__(106);
const system_prop_1 = __webpack_require__(109);
const GOOGLE_DNS = '216.239.32.10';
const PUBLIC_IP_ADDRESS_QUERY = 'o-o.myaddr.l.google.com';
const CLIENT_REAL_IP_HEADER = system_1.system.getOrThrow(system_prop_1.AppSystemProp.CLIENT_REAL_IP_HEADER);
let ipMetadata;
const getPublicIp = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (ipMetadata !== undefined) {
        return ipMetadata;
    }
    promises_1.default.setServers([GOOGLE_DNS]);
    const ipList = yield promises_1.default.resolve(PUBLIC_IP_ADDRESS_QUERY, 'TXT');
    ipMetadata = {
        ip: ipList[0][0],
    };
    return ipMetadata;
});
const extractClientRealIp = (request) => {
    return request.headers[CLIENT_REAL_IP_HEADER];
};
const appendSlashAndApi = (url) => {
    const slash = url.endsWith('/') ? '' : '/';
    return `${url}${slash}api/`;
};
const getInternalApiUrl = () => {
    if (system_1.system.isApp()) {
        return 'http://127.0.0.1:3000/';
    }
    const url = system_1.system.getOrThrow(system_prop_1.SharedSystemProp.FRONTEND_URL);
    return appendSlashAndApi(url);
};
const getPublicUrl = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const environment = system_1.system.getOrThrow(system_prop_1.SharedSystemProp.ENVIRONMENT);
    let url = system_1.system.getOrThrow(system_prop_1.SharedSystemProp.FRONTEND_URL);
    if (extractHostname(url) === 'localhost' && environment === shared_1.ApEnvironment.PRODUCTION) {
        url = `http://${(yield getPublicIp()).ip}`;
    }
    return appendSlashAndApi(url);
});
function extractHostname(url) {
    try {
        const hostname = new URL(url).hostname;
        return hostname;
    }
    catch (e) {
        return null;
    }
}
exports.networkUtls = {
    getPublicUrl,
    extractClientRealIp,
    getInternalApiUrl,
    getPublicIp,
};


/***/ }),
/* 105 */
/***/ ((module) => {

module.exports = require("node:dns/promises");

/***/ }),
/* 106 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExecutionMode = exports.system = exports.DatabaseType = exports.QueueMode = exports.ContainerType = exports.PiecesSource = exports.CopilotInstanceTypes = void 0;
const tslib_1 = __webpack_require__(1);
const os_1 = tslib_1.__importDefault(__webpack_require__(107));
const path_1 = tslib_1.__importDefault(__webpack_require__(108));
const shared_1 = __webpack_require__(8);
const system_prop_1 = __webpack_require__(109);
var CopilotInstanceTypes;
(function (CopilotInstanceTypes) {
    CopilotInstanceTypes["AZURE_OPENAI"] = "AZURE_OPENAI";
    CopilotInstanceTypes["OPENAI"] = "OPENAI";
})(CopilotInstanceTypes || (exports.CopilotInstanceTypes = CopilotInstanceTypes = {}));
var PiecesSource;
(function (PiecesSource) {
    /**
   * @deprecated Use `DB`, as `CLOUD_AND_DB` is no longer supported.
   */
    PiecesSource["CLOUD_AND_DB"] = "CLOUD_AND_DB";
    PiecesSource["DB"] = "DB";
    PiecesSource["FILE"] = "FILE";
})(PiecesSource || (exports.PiecesSource = PiecesSource = {}));
var ContainerType;
(function (ContainerType) {
    ContainerType["WORKER"] = "WORKER";
    ContainerType["APP"] = "APP";
    ContainerType["WORKER_AND_APP"] = "WORKER_AND_APP";
})(ContainerType || (exports.ContainerType = ContainerType = {}));
var QueueMode;
(function (QueueMode) {
    QueueMode["REDIS"] = "REDIS";
    QueueMode["MEMORY"] = "MEMORY";
})(QueueMode || (exports.QueueMode = QueueMode = {}));
var DatabaseType;
(function (DatabaseType) {
    DatabaseType["POSTGRES"] = "POSTGRES";
    DatabaseType["SQLITE3"] = "SQLITE3";
})(DatabaseType || (exports.DatabaseType = DatabaseType = {}));
const systemPropDefaultValues = {
    [system_prop_1.AppSystemProp.API_RATE_LIMIT_AUTHN_ENABLED]: 'true',
    [system_prop_1.AppSystemProp.API_RATE_LIMIT_AUTHN_MAX]: '50',
    [system_prop_1.AppSystemProp.API_RATE_LIMIT_AUTHN_WINDOW]: '1 minute',
    [system_prop_1.AppSystemProp.CLIENT_REAL_IP_HEADER]: 'x-real-ip',
    [system_prop_1.AppSystemProp.CLOUD_AUTH_ENABLED]: 'true',
    [system_prop_1.SharedSystemProp.CODE_SANDBOX_TYPE]: shared_1.CodeSandboxType.NO_OP,
    [system_prop_1.AppSystemProp.CONFIG_PATH]: path_1.default.join(os_1.default.homedir(), '.activepieces'),
    [system_prop_1.AppSystemProp.DB_TYPE]: DatabaseType.POSTGRES,
    [system_prop_1.SharedSystemProp.EDITION]: shared_1.ApEdition.COMMUNITY,
    [system_prop_1.SharedSystemProp.CONTAINER_TYPE]: ContainerType.WORKER_AND_APP,
    [system_prop_1.AppSystemProp.EXECUTION_DATA_RETENTION_DAYS]: '14',
    [system_prop_1.AppSystemProp.PIECES_SYNC_MODE]: shared_1.PieceSyncMode.OFFICIAL_AUTO,
    [system_prop_1.AppSystemProp.COPILOT_INSTANCE_TYPE]: CopilotInstanceTypes.OPENAI,
    [system_prop_1.AppSystemProp.AZURE_OPENAI_API_VERSION]: '2023-06-01-preview',
    [system_prop_1.SharedSystemProp.ENGINE_EXECUTABLE_PATH]: 'dist/packages/engine/main.js',
    [system_prop_1.SharedSystemProp.ENVIRONMENT]: 'prod',
    [system_prop_1.SharedSystemProp.EXECUTION_MODE]: 'UNSANDBOXED',
    [system_prop_1.WorkerSystemProps.FLOW_WORKER_CONCURRENCY]: '10',
    [system_prop_1.SharedSystemProp.LOG_LEVEL]: 'info',
    [system_prop_1.SharedSystemProp.LOG_PRETTY]: 'false',
    [system_prop_1.SharedSystemProp.PACKAGE_ARCHIVE_PATH]: 'dist/archives',
    [system_prop_1.SharedSystemProp.PIECES_SOURCE]: PiecesSource.CLOUD_AND_DB,
    [system_prop_1.AppSystemProp.QUEUE_MODE]: QueueMode.REDIS,
    [system_prop_1.SharedSystemProp.SANDBOX_MEMORY_LIMIT]: '524288',
    /*
     @deprecated, replease with FLOW_TIMEOUT_SECONDS
    */
    [system_prop_1.SharedSystemProp.SANDBOX_RUN_TIME_SECONDS]: '600',
    [system_prop_1.SharedSystemProp.TRIGGER_TIMEOUT_SECONDS]: '60',
    [system_prop_1.AppSystemProp.TELEMETRY_ENABLED]: 'true',
    [system_prop_1.AppSystemProp.TEMPLATES_SOURCE_URL]: 'https://cloud.activepieces.com/api/v1/flow-templates',
    [system_prop_1.AppSystemProp.TRIGGER_DEFAULT_POLL_INTERVAL]: '5',
};
exports.system = {
    get(prop) {
        return getEnvVar(prop);
    },
    getNumber(prop) {
        const stringNumber = getEnvVar(prop);
        if (!stringNumber) {
            return null;
        }
        const parsedNumber = Number.parseInt(stringNumber, 10);
        if (Number.isNaN(parsedNumber)) {
            return null;
        }
        return parsedNumber;
    },
    getBoolean(prop) {
        const value = getEnvVar(prop);
        if ((0, shared_1.isNil)(value)) {
            return undefined;
        }
        return value === 'true';
    },
    getList(prop) {
        const values = getEnvVar(prop);
        if ((0, shared_1.isNil)(values)) {
            return [];
        }
        return values.split(',').map((value) => value.trim());
    },
    getOrThrow(prop) {
        const value = getEnvVar(prop);
        if (value === undefined) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.SYSTEM_PROP_NOT_DEFINED,
                params: {
                    prop,
                },
            }, `System property AP_${prop} is not defined, please check the documentation`);
        }
        return value;
    },
    getEdition() {
        return this.getOrThrow(system_prop_1.SharedSystemProp.EDITION);
    },
    isWorker() {
        return [ContainerType.WORKER, ContainerType.WORKER_AND_APP].includes(this.getOrThrow(system_prop_1.SharedSystemProp.CONTAINER_TYPE));
    },
    isApp() {
        return [ContainerType.APP, ContainerType.WORKER_AND_APP].includes(this.getOrThrow(system_prop_1.SharedSystemProp.CONTAINER_TYPE));
    },
};
const getEnvVar = (prop) => {
    var _a;
    return (_a = process.env[`AP_${prop}`]) !== null && _a !== void 0 ? _a : systemPropDefaultValues[prop];
};
var ExecutionMode;
(function (ExecutionMode) {
    ExecutionMode["SANDBOXED"] = "SANDBOXED";
    ExecutionMode["UNSANDBOXED"] = "UNSANDBOXED";
})(ExecutionMode || (exports.ExecutionMode = ExecutionMode = {}));


/***/ }),
/* 107 */
/***/ ((module) => {

module.exports = require("os");

/***/ }),
/* 108 */
/***/ ((module) => {

module.exports = require("path");

/***/ }),
/* 109 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkerSystemProps = exports.SharedSystemProp = exports.AppSystemProp = void 0;
var AppSystemProp;
(function (AppSystemProp) {
    AppSystemProp["API_KEY"] = "API_KEY";
    AppSystemProp["API_RATE_LIMIT_AUTHN_ENABLED"] = "API_RATE_LIMIT_AUTHN_ENABLED";
    AppSystemProp["API_RATE_LIMIT_AUTHN_MAX"] = "API_RATE_LIMIT_AUTHN_MAX";
    AppSystemProp["API_RATE_LIMIT_AUTHN_WINDOW"] = "API_RATE_LIMIT_AUTHN_WINDOW";
    AppSystemProp["AZURE_OPENAI_ENDPOINT"] = "AZURE_OPENAI_ENDPOINT";
    AppSystemProp["AZURE_OPENAI_API_VERSION"] = "AZURE_OPENAI_API_VERSION";
    AppSystemProp["CLIENT_REAL_IP_HEADER"] = "CLIENT_REAL_IP_HEADER";
    AppSystemProp["CLOUD_AUTH_ENABLED"] = "CLOUD_AUTH_ENABLED";
    AppSystemProp["CONFIG_PATH"] = "CONFIG_PATH";
    AppSystemProp["COPILOT_INSTANCE_TYPE"] = "COPILOT_INSTANCE_TYPE";
    AppSystemProp["EXECUTION_DATA_RETENTION_DAYS"] = "EXECUTION_DATA_RETENTION_DAYS";
    AppSystemProp["DB_TYPE"] = "DB_TYPE";
    AppSystemProp["ENCRYPTION_KEY"] = "ENCRYPTION_KEY";
    AppSystemProp["LICENSE_KEY"] = "LICENSE_KEY";
    AppSystemProp["OPENAI_API_KEY"] = "OPENAI_API_KEY";
    AppSystemProp["OPENAI_API_BASE_URL"] = "OPENAI_API_BASE_URL";
    AppSystemProp["POSTGRES_URL"] = "POSTGRES_URL";
    AppSystemProp["POSTGRES_DATABASE"] = "POSTGRES_DATABASE";
    AppSystemProp["POSTGRES_HOST"] = "POSTGRES_HOST";
    AppSystemProp["POSTGRES_PASSWORD"] = "POSTGRES_PASSWORD";
    AppSystemProp["POSTGRES_PORT"] = "POSTGRES_PORT";
    AppSystemProp["POSTGRES_SSL_CA"] = "POSTGRES_SSL_CA";
    AppSystemProp["POSTGRES_USERNAME"] = "POSTGRES_USERNAME";
    AppSystemProp["POSTGRES_USE_SSL"] = "POSTGRES_USE_SSL";
    AppSystemProp["QUEUE_MODE"] = "QUEUE_MODE";
    AppSystemProp["QUEUE_UI_ENABLED"] = "QUEUE_UI_ENABLED";
    AppSystemProp["QUEUE_UI_PASSWORD"] = "QUEUE_UI_PASSWORD";
    AppSystemProp["QUEUE_UI_USERNAME"] = "QUEUE_UI_USERNAME";
    AppSystemProp["REDIS_DB"] = "REDIS_DB";
    AppSystemProp["REDIS_HOST"] = "REDIS_HOST";
    AppSystemProp["REDIS_PASSWORD"] = "REDIS_PASSWORD";
    AppSystemProp["REDIS_PORT"] = "REDIS_PORT";
    AppSystemProp["REDIS_URL"] = "REDIS_URL";
    AppSystemProp["REDIS_USER"] = "REDIS_USER";
    AppSystemProp["REDIS_USE_SSL"] = "REDIS_USE_SSL";
    AppSystemProp["SMTP_HOST"] = "SMTP_HOST";
    AppSystemProp["SMTP_PASSWORD"] = "SMTP_PASSWORD";
    AppSystemProp["SMTP_PORT"] = "SMTP_PORT";
    AppSystemProp["SMTP_USERNAME"] = "SMTP_USERNAME";
    AppSystemProp["SMTP_SENDER_NAME"] = "SMTP_SENDER_NAME";
    AppSystemProp["SMTP_SENDER_EMAIL"] = "SMTP_SENDER_EMAIL";
    AppSystemProp["SMTP_USE_SSL"] = "SMTP_USE_SSL";
    AppSystemProp["JWT_SECRET"] = "JWT_SECRET";
    AppSystemProp["TELEMETRY_ENABLED"] = "TELEMETRY_ENABLED";
    AppSystemProp["TEMPLATES_SOURCE_URL"] = "TEMPLATES_SOURCE_URL";
    AppSystemProp["TRIGGER_DEFAULT_POLL_INTERVAL"] = "TRIGGER_DEFAULT_POLL_INTERVAL";
    AppSystemProp["WEBHOOK_TIMEOUT_SECONDS"] = "WEBHOOK_TIMEOUT_SECONDS";
    AppSystemProp["PIECES_SYNC_MODE"] = "PIECES_SYNC_MODE";
    // ENTERPRISE ONLY
    AppSystemProp["APPSUMO_TOKEN"] = "APPSUMO_TOKEN";
    AppSystemProp["FIREBASE_ADMIN_CREDENTIALS"] = "FIREBASE_ADMIN_CREDENTIALS";
    AppSystemProp["FIREBASE_HASH_PARAMETERS"] = "FIREBASE_HASH_PARAMETERS";
    AppSystemProp["STRIPE_SECRET_KEY"] = "STRIPE_SECRET_KEY";
    AppSystemProp["STRIPE_WEBHOOK_SECRET"] = "STRIPE_WEBHOOK_SECRET";
    // CLOUD_ONLY
    AppSystemProp["CLOUD_PLATFORM_ID"] = "CLOUD_PLATFORM_ID";
    AppSystemProp["CLOUDFLARE_AUTH_EMAIL"] = "CLOUDFLARE_AUTH_EMAIL";
    AppSystemProp["CLOUDFLARE_ZONE_ID"] = "CLOUDFLARE_ZONE_ID";
    AppSystemProp["CLOUDFLARE_API_KEY"] = "CLOUDFLARE_API_KEY";
})(AppSystemProp || (exports.AppSystemProp = AppSystemProp = {}));
var SharedSystemProp;
(function (SharedSystemProp) {
    SharedSystemProp["LOG_LEVEL"] = "LOG_LEVEL";
    SharedSystemProp["LOG_PRETTY"] = "LOG_PRETTY";
    SharedSystemProp["ENVIRONMENT"] = "ENVIRONMENT";
    SharedSystemProp["CONTAINER_TYPE"] = "CONTAINER_TYPE";
    SharedSystemProp["TRIGGER_TIMEOUT_SECONDS"] = "TRIGGER_TIMEOUT_SECONDS";
    SharedSystemProp["FLOW_TIMEOUT_SECONDS"] = "FLOW_TIMEOUT_SECONDS";
    SharedSystemProp["APP_WEBHOOK_SECRETS"] = "APP_WEBHOOK_SECRETS";
    /**
     * @deprecated It's replaced now with flow timeout and trigger timeout.
     */
    SharedSystemProp["SANDBOX_RUN_TIME_SECONDS"] = "SANDBOX_RUN_TIME_SECONDS";
    SharedSystemProp["FRONTEND_URL"] = "FRONTEND_URL";
    // These are shared as the app is using the engine as a dependency for now.
    SharedSystemProp["CACHE_PATH"] = "CACHE_PATH";
    SharedSystemProp["CODE_SANDBOX_TYPE"] = "CODE_SANDBOX_TYPE";
    SharedSystemProp["EXECUTION_MODE"] = "EXECUTION_MODE";
    SharedSystemProp["PACKAGE_ARCHIVE_PATH"] = "PACKAGE_ARCHIVE_PATH";
    SharedSystemProp["SANDBOX_MEMORY_LIMIT"] = "SANDBOX_MEMORY_LIMIT";
    SharedSystemProp["SANDBOX_PROPAGATED_ENV_VARS"] = "SANDBOX_PROPAGATED_ENV_VARS";
    SharedSystemProp["PIECES_SOURCE"] = "PIECES_SOURCE";
    SharedSystemProp["EDITION"] = "EDITION";
    SharedSystemProp["ENGINE_EXECUTABLE_PATH"] = "ENGINE_EXECUTABLE_PATH";
    SharedSystemProp["ENRICH_ERROR_CONTEXT"] = "ENRICH_ERROR_CONTEXT";
    // Cloud Only
    SharedSystemProp["SENTRY_DSN"] = "SENTRY_DSN";
    SharedSystemProp["LOKI_PASSWORD"] = "LOKI_PASSWORD";
    SharedSystemProp["LOKI_URL"] = "LOKI_URL";
    SharedSystemProp["LOKI_USERNAME"] = "LOKI_USERNAME";
})(SharedSystemProp || (exports.SharedSystemProp = SharedSystemProp = {}));
var WorkerSystemProps;
(function (WorkerSystemProps) {
    WorkerSystemProps["FLOW_WORKER_CONCURRENCY"] = "FLOW_WORKER_CONCURRENCY";
    WorkerSystemProps["WORKER_TOKEN"] = "WORKER_TOKEN";
})(WorkerSystemProps || (exports.WorkerSystemProps = WorkerSystemProps = {}));


/***/ }),
/* 110 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filePiecesUtils = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(111);
const node_path_1 = __webpack_require__(112);
const node_process_1 = __webpack_require__(113);
const logger_1 = __webpack_require__(114);
function findAllPiecesFolder(folderPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const paths = [];
        const files = yield (0, promises_1.readdir)(folderPath);
        for (const file of files) {
            const filePath = (0, node_path_1.join)(folderPath, file);
            const fileStats = yield (0, promises_1.stat)(filePath);
            if (fileStats.isDirectory() &&
                file !== 'node_modules' &&
                file !== 'dist' &&
                file !== 'framework' &&
                file !== 'common') {
                paths.push(...(yield findAllPiecesFolder(filePath)));
            }
            else if (file === 'package.json') {
                paths.push(folderPath);
            }
        }
        return paths;
    });
}
function findDirectoryByPackageName(packageName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const paths = yield findAllPiecesFolder((0, node_path_1.resolve)((0, node_process_1.cwd)(), 'dist', 'packages', 'pieces'));
        for (const path of paths) {
            try {
                const packageJson = yield (0, promises_1.readFile)((0, node_path_1.join)(path, 'package.json'), 'utf-8').then(JSON.parse);
                if (packageJson.name === packageName) {
                    return path;
                }
            }
            catch (e) {
                logger_1.logger.error({
                    name: 'findDirectoryByPackageName',
                    message: JSON.stringify(e),
                }, 'Error finding directory by package name');
            }
        }
        return null;
    });
}
exports.filePiecesUtils = {
    findAllPiecesFolder,
    findDirectoryByPackageName,
};


/***/ }),
/* 111 */
/***/ ((module) => {

module.exports = require("node:fs/promises");

/***/ }),
/* 112 */
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),
/* 113 */
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),
/* 114 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.logger = void 0;
const tslib_1 = __webpack_require__(1);
const pino_1 = tslib_1.__importDefault(__webpack_require__(115));
__webpack_require__(116);
const system_1 = __webpack_require__(106);
const system_prop_1 = __webpack_require__(109);
const lokiUrl = system_1.system.get(system_prop_1.SharedSystemProp.LOKI_URL);
const lokiUsername = system_1.system.get(system_prop_1.SharedSystemProp.LOKI_USERNAME);
const lokiPassword = system_1.system.get(system_prop_1.SharedSystemProp.LOKI_PASSWORD);
const initLogger = () => {
    var _a, _b;
    const level = (_a = system_1.system.get(system_prop_1.SharedSystemProp.LOG_LEVEL)) !== null && _a !== void 0 ? _a : 'info';
    const pretty = (_b = system_1.system.getBoolean(system_prop_1.SharedSystemProp.LOG_PRETTY)) !== null && _b !== void 0 ? _b : false;
    if (pretty) {
        return (0, pino_1.default)({
            level,
            transport: {
                target: 'pino-pretty',
                options: {
                    translateTime: 'HH:MM:ss Z',
                    colorize: true,
                    ignore: 'pid,hostname',
                },
            },
        });
    }
    const targets = [
        {
            target: 'pino/file',
            level,
            options: {},
        },
    ];
    if (lokiUrl) {
        targets.push({
            target: 'pino-loki',
            level,
            options: {
                batching: true,
                interval: 5,
                host: lokiUrl,
                basicAuth: lokiPassword && lokiPassword
                    ? {
                        username: lokiUsername,
                        password: lokiPassword,
                    }
                    : undefined,
            },
        });
    }
    return (0, pino_1.default)({ level, transport: { targets } });
};
exports.logger = initLogger();


/***/ }),
/* 115 */
/***/ ((module) => {

module.exports = require("pino");

/***/ }),
/* 116 */
/***/ ((module) => {

module.exports = require("pino-loki");

/***/ }),
/* 117 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a, _b, _c;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getEngineTimeout = exports.triggerTimeoutSandbox = exports.flowTimeoutSandbox = exports.ResumeRunRequest = exports.GetRunForWorkerRequest = exports.SubmitPayloadsRequest = exports.SavePayloadRequest = exports.SendWebhookUpdateRequest = exports.DeleteWebhookSimulationRequest = exports.ApQueueJob = exports.UpdateJobRequest = exports.PollJobRequest = exports.QueueName = exports.JobStatus = exports.JobType = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const system_1 = __webpack_require__(106);
const system_prop_1 = __webpack_require__(109);
const job_data_1 = __webpack_require__(7);
var JobType;
(function (JobType) {
    JobType["WEBHOOK"] = "WEBHOOK";
    JobType["ONE_TIME"] = "ONE_TIME";
    JobType["REPEATING"] = "REPEATING";
    JobType["DELAYED"] = "DELAYED";
})(JobType || (exports.JobType = JobType = {}));
var JobStatus;
(function (JobStatus) {
    JobStatus["COMPLETED"] = "COMPLETED";
    JobStatus["FAILED"] = "FAILED";
})(JobStatus || (exports.JobStatus = JobStatus = {}));
var QueueName;
(function (QueueName) {
    QueueName["WEBHOOK"] = "webhookJobs";
    QueueName["ONE_TIME"] = "oneTimeJobs";
    QueueName["SCHEDULED"] = "repeatableJobs";
})(QueueName || (exports.QueueName = QueueName = {}));
exports.PollJobRequest = typebox_1.Type.Object({
    queueName: typebox_1.Type.Enum(QueueName),
});
exports.UpdateJobRequest = typebox_1.Type.Object({
    queueName: typebox_1.Type.Enum(QueueName),
    status: typebox_1.Type.Enum(JobStatus),
    message: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.ApQueueJob = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    data: job_data_1.JobData,
    engineToken: typebox_1.Type.String(),
});
exports.DeleteWebhookSimulationRequest = typebox_1.Type.Object({
    flowId: typebox_1.Type.String(),
    projectId: typebox_1.Type.String(),
});
exports.SendWebhookUpdateRequest = typebox_1.Type.Object({
    workerServerId: typebox_1.Type.String(),
    requestId: typebox_1.Type.String(),
    response: shared_1.EngineHttpResponse,
});
exports.SavePayloadRequest = typebox_1.Type.Object({
    flowId: typebox_1.Type.String(),
    projectId: typebox_1.Type.String(),
    payloads: typebox_1.Type.Array(typebox_1.Type.Unknown()),
});
exports.SubmitPayloadsRequest = typebox_1.Type.Object({
    flowVersionId: typebox_1.Type.String(),
    projectId: typebox_1.Type.String(),
    progressUpdateType: typebox_1.Type.Enum(shared_1.ProgressUpdateType),
    synchronousHandlerId: typebox_1.Type.Optional(typebox_1.Type.String()),
    httpRequestId: typebox_1.Type.Optional(typebox_1.Type.String()),
    payloads: typebox_1.Type.Array(typebox_1.Type.Unknown()),
});
exports.GetRunForWorkerRequest = typebox_1.Type.Object({
    runId: typebox_1.Type.String(),
});
exports.ResumeRunRequest = job_data_1.DelayedJobData;
exports.flowTimeoutSandbox = (_b = (_a = system_1.system.getNumber(system_prop_1.SharedSystemProp.FLOW_TIMEOUT_SECONDS)) !== null && _a !== void 0 ? _a : system_1.system.getNumber(system_prop_1.SharedSystemProp.SANDBOX_RUN_TIME_SECONDS)) !== null && _b !== void 0 ? _b : 600;
exports.triggerTimeoutSandbox = (_c = system_1.system.getNumber(system_prop_1.SharedSystemProp.TRIGGER_TIMEOUT_SECONDS)) !== null && _c !== void 0 ? _c : 60;
function getEngineTimeout(operationType) {
    switch (operationType) {
        case shared_1.EngineOperationType.EXECUTE_STEP:
        case shared_1.EngineOperationType.EXECUTE_FLOW:
            return exports.flowTimeoutSandbox;
        case shared_1.EngineOperationType.EXECUTE_PROPERTY:
        case shared_1.EngineOperationType.EXECUTE_VALIDATE_AUTH:
        case shared_1.EngineOperationType.EXTRACT_PIECE_METADATA:
        case shared_1.EngineOperationType.EXECUTE_TRIGGER_HOOK:
            return exports.triggerTimeoutSandbox;
    }
}
exports.getEngineTimeout = getEngineTimeout;


/***/ }),
/* 118 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enrichErrorContext = exports.exceptionHandler = exports.initializeSentry = void 0;
const tslib_1 = __webpack_require__(1);
const Sentry = tslib_1.__importStar(__webpack_require__(119));
const logger_1 = __webpack_require__(114);
const system_1 = __webpack_require__(106);
const system_prop_1 = __webpack_require__(109);
const sentryDsn = system_1.system.get(system_prop_1.SharedSystemProp.SENTRY_DSN);
const initializeSentry = () => {
    if (sentryDsn) {
        logger_1.logger.info('Initializing Sentry');
        Sentry.init({
            dsn: sentryDsn,
            beforeSend: (event) => {
                var _a, _b, _c, _d, _e;
                if (((_b = (_a = event === null || event === void 0 ? void 0 : event.exception) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[0].type) === 'AxiosError') {
                    return null;
                }
                const value = (_e = (_d = (_c = event === null || event === void 0 ? void 0 : event.exception) === null || _c === void 0 ? void 0 : _c.values) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.value;
                if (value && ['EXECUTION_TIMEOUT', 'ENTITY_NOT_FOUND'].includes(value)) {
                    return null;
                }
                return event;
            },
        });
    }
};
exports.initializeSentry = initializeSentry;
exports.exceptionHandler = {
    handle: (e) => {
        logger_1.logger.error(e);
        if (sentryDsn) {
            Sentry.captureException(e);
        }
    },
};
const ENRICH_ERROR_CONTEXT = (_a = system_1.system.getBoolean(system_prop_1.SharedSystemProp.ENRICH_ERROR_CONTEXT)) !== null && _a !== void 0 ? _a : false;
const enrichErrorContext = ({ error, key, value, }) => {
    if (!ENRICH_ERROR_CONTEXT) {
        return error;
    }
    if (error instanceof Error) {
        if ('context' in error && error.context instanceof Object) {
            const enrichedError = Object.assign(error, Object.assign(Object.assign({}, error.context), { [key]: value }));
            return enrichedError;
        }
        else {
            const enrichedError = Object.assign(error, {
                context: {
                    [key]: value,
                },
            });
            return enrichedError;
        }
    }
    return error;
};
exports.enrichErrorContext = enrichErrorContext;


/***/ }),
/* 119 */
/***/ ((module) => {

module.exports = require("@sentry/node");

/***/ }),
/* 120 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cryptoUtils = void 0;
const tslib_1 = __webpack_require__(1);
const node_crypto_1 = __webpack_require__(121);
const node_util_1 = __webpack_require__(122);
const randomBytesPromisified = (0, node_util_1.promisify)(node_crypto_1.randomBytes);
const generateRandomPassword = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const passwordBytes = yield randomBytesPromisified(32);
    return passwordBytes.toString('hex');
});
function hashSHA256(input) {
    const hash = (0, node_crypto_1.createHash)('sha256');
    hash.update(input);
    return hash.digest('hex');
}
exports.cryptoUtils = {
    generateRandomPassword,
    hashSHA256,
};


/***/ }),
/* 121 */
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),
/* 122 */
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),
/* 123 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApSemaphore = void 0;
const tslib_1 = __webpack_require__(1);
class ApSemaphore {
    constructor(maxConcurrent) {
        this.maxConcurrent = maxConcurrent;
        this.queue = [];
        this.currentConcurrent = 0;
    }
    acquire() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.currentConcurrent >= this.maxConcurrent) {
                yield new Promise((resolve) => this.queue.push(resolve));
            }
            this.currentConcurrent++;
        });
    }
    release() {
        this.currentConcurrent--;
        if (this.queue.length > 0) {
            const nextResolver = this.queue.shift();
            nextResolver === null || nextResolver === void 0 ? void 0 : nextResolver();
        }
    }
}
exports.ApSemaphore = ApSemaphore;


/***/ }),
/* 124 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileCompressor = void 0;
const tslib_1 = __webpack_require__(1);
const node_util_1 = __webpack_require__(122);
const node_zlib_1 = __webpack_require__(125);
const shared_1 = __webpack_require__(8);
const gzip = (0, node_util_1.promisify)(node_zlib_1.gzip);
const unzip = (0, node_util_1.promisify)(node_zlib_1.unzip);
exports.fileCompressor = {
    compress(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ data, compression }) {
            switch (compression) {
                case shared_1.FileCompression.NONE:
                    return data;
                case shared_1.FileCompression.GZIP:
                    return gzip(data);
            }
        });
    },
    decompress(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ data, compression }) {
            switch (compression) {
                case shared_1.FileCompression.NONE:
                    return data;
                case shared_1.FileCompression.GZIP:
                    return unzip(data);
            }
        });
    },
};


/***/ }),
/* 125 */
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),
/* 126 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileExists = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(111);
const fileExists = (path) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        yield (0, promises_1.access)(path);
        return true;
    }
    catch (e) {
        const castedError = e;
        if ('code' in castedError && castedError.code === 'ENOENT') {
            return false;
        }
        throw e;
    }
});
exports.fileExists = fileExists;


/***/ }),
/* 127 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.packageManager = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = tslib_1.__importDefault(__webpack_require__(128));
const path_1 = tslib_1.__importDefault(__webpack_require__(108));
const shared_1 = __webpack_require__(8);
const exception_handler_1 = __webpack_require__(118);
const exec_1 = __webpack_require__(129);
const file_system_1 = __webpack_require__(126);
const logger_1 = __webpack_require__(114);
const runCommand = (path, command, ...args) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        logger_1.logger.debug({ path, command, args }, '[PackageManager#execute]');
        const commandLine = `pnpm ${command} ${args.join(' ')}`;
        return yield (0, exec_1.exec)(commandLine, { cwd: path });
    }
    catch (error) {
        const contextKey = '[PackageManager#runCommand]';
        const contextValue = { path, command, args };
        const enrichedError = (0, exception_handler_1.enrichErrorContext)({
            error,
            key: contextKey,
            value: contextValue,
        });
        throw enrichedError;
    }
});
exports.packageManager = {
    add(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ path, dependencies }) {
            if ((0, shared_1.isEmpty)(dependencies)) {
                return {
                    stdout: '',
                    stderr: '',
                };
            }
            const config = [
                '--prefer-offline',
                '--ignore-scripts',
                '--config.lockfile=false',
                '--config.auto-install-peers=true',
            ];
            const dependencyArgs = dependencies.map((d) => `${d.alias}@${d.spec}`);
            return runCommand(path, 'add', ...dependencyArgs, ...config);
        });
    },
    init(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ path }) {
            const fExists = yield (0, file_system_1.fileExists)(path_1.default.join(path, 'package.json'));
            if (fExists) {
                return {
                    stdout: 'N/A',
                    stderr: 'N/A',
                };
            }
            return runCommand(path, 'init');
        });
    },
    exec(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ path, command }) {
            return runCommand(path, command);
        });
    },
    link(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ path, linkPath, packageName, }) {
            const config = [
                '--config.lockfile=false',
                '--config.auto-install-peers=true',
            ];
            const result = yield runCommand(path, 'link', linkPath, ...config);
            const nodeModules = path_1.default.join(path, 'node_modules', packageName);
            yield replaceRelativeSystemLinkWithAbsolute(nodeModules);
            return result;
        });
    },
};
const replaceRelativeSystemLinkWithAbsolute = (filePath) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        // Inside the isolate sandbox, the relative path is not valid
        const stats = yield promises_1.default.stat(filePath);
        if (stats.isDirectory()) {
            const realPath = yield promises_1.default.realpath(filePath);
            logger_1.logger.info({ realPath, filePath }, '[link]');
            yield promises_1.default.unlink(filePath);
            yield promises_1.default.symlink(realPath, filePath, 'dir');
        }
    }
    catch (error) {
        logger_1.logger.error([error], '[link]');
    }
});


/***/ }),
/* 128 */
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),
/* 129 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exec = void 0;
const node_child_process_1 = __webpack_require__(130);
const node_util_1 = __webpack_require__(122);
exports.exec = (0, node_util_1.promisify)(node_child_process_1.exec);


/***/ }),
/* 130 */
/***/ ((module) => {

module.exports = require("node:child_process");

/***/ }),
/* 131 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rejectedPromiseHandler = void 0;
const logger_1 = __webpack_require__(114);
function rejectedPromiseHandler(promise) {
    promise.catch((error) => {
        logger_1.logger.error(error);
    });
}
exports.rejectedPromiseHandler = rejectedPromiseHandler;


/***/ }),
/* 132 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookSecretsUtils = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const system_1 = __webpack_require__(106);
const system_prop_1 = __webpack_require__(109);
let webhookSecrets = undefined;
exports.webhookSecretsUtils = {
    getWebhookSecret,
    getSupportedAppWebhooks,
    getWebhookSecrets,
};
function getWebhookSecret(flowVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const appName = flowVersion.trigger.settings.pieceName;
        if (!appName) {
            return undefined;
        }
        if (webhookSecrets === undefined) {
            webhookSecrets = getWebhookSecrets();
        }
        const appConfig = webhookSecrets[appName];
        if ((0, shared_1.isNil)(appConfig)) {
            return undefined;
        }
        return appConfig.webhookSecret;
    });
}
function getSupportedAppWebhooks() {
    return Object.keys(getWebhookSecrets());
}
function getWebhookSecrets() {
    const appSecret = system_1.system.get(system_prop_1.SharedSystemProp.APP_WEBHOOK_SECRETS);
    if ((0, shared_1.isNil)(appSecret)) {
        return {};
    }
    return JSON.parse(appSecret);
}


/***/ }),
/* 133 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appPostBoot = exports.setupApp = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const pieces_framework_1 = __webpack_require__(174);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const swagger_1 = tslib_1.__importDefault(__webpack_require__(215));
const redis_adapter_1 = __webpack_require__(216);
const fastify_socket_io_1 = tslib_1.__importDefault(__webpack_require__(217));
const oauth2_1 = __webpack_require__(218);
const app_connection_module_1 = __webpack_require__(469);
const app_event_routing_module_1 = __webpack_require__(518);
const hooks_1 = __webpack_require__(628);
const authentication_module_1 = __webpack_require__(632);
const access_token_manager_1 = __webpack_require__(509);
const copilot_module_1 = __webpack_require__(637);
const rate_limit_1 = __webpack_require__(641);
const security_handler_chain_1 = __webpack_require__(644);
const redis_connection_1 = __webpack_require__(514);
const alerts_module_1 = __webpack_require__(655);
const analytics_module_1 = __webpack_require__(658);
const api_key_module_1 = __webpack_require__(660);
const platform_oauth2_service_1 = __webpack_require__(661);
const app_credentials_module_1 = __webpack_require__(663);
const audit_event_module_1 = __webpack_require__(665);
const audit_event_service_1 = __webpack_require__(666);
const cloud_authentication_service_hooks_1 = __webpack_require__(668);
const enterprise_authentication_service_hooks_1 = __webpack_require__(682);
const enterprise_local_authn_module_1 = __webpack_require__(684);
const federated_authn_module_1 = __webpack_require__(687);
const rbac_middleware_1 = __webpack_require__(694);
const authn_sso_saml_module_1 = __webpack_require__(695);
const appsumo_module_1 = __webpack_require__(701);
const project_billing_module_1 = __webpack_require__(702);
const connection_key_module_1 = __webpack_require__(703);
const custom_domain_module_1 = __webpack_require__(705);
const enterprise_flags_hooks_1 = __webpack_require__(706);
const cloud_flow_run_hooks_1 = __webpack_require__(708);
const platform_flow_template_module_1 = __webpack_require__(709);
const git_repo_module_1 = __webpack_require__(711);
const email_service_1 = __webpack_require__(611);
const platform_domain_helper_1 = __webpack_require__(613);
const issues_module_1 = __webpack_require__(718);
const license_keys_module_1 = __webpack_require__(720);
const license_keys_service_1 = __webpack_require__(683);
const managed_authn_module_1 = __webpack_require__(722);
const oauth_app_module_1 = __webpack_require__(728);
const otp_module_1 = __webpack_require__(729);
const admin_piece_module_1 = __webpack_require__(731);
const enterprise_piece_metadata_service_hooks_1 = __webpack_require__(733);
const platform_piece_module_1 = __webpack_require__(734);
const admin_platform_controller_1 = __webpack_require__(736);
const project_member_module_1 = __webpack_require__(738);
const ee_project_hooks_1 = __webpack_require__(740);
const platform_project_module_1 = __webpack_require__(741);
const referral_module_1 = __webpack_require__(745);
const signing_key_module_1 = __webpack_require__(746);
const usage_tracker_module_1 = __webpack_require__(748);
const file_module_1 = __webpack_require__(749);
const flag_module_1 = __webpack_require__(751);
const flags_hooks_1 = __webpack_require__(752);
const community_flow_template_module_1 = __webpack_require__(753);
const form_module_1 = __webpack_require__(754);
const flow_run_hooks_1 = __webpack_require__(621);
const flow_run_module_1 = __webpack_require__(757);
const flow_module_1 = __webpack_require__(759);
const step_file_module_1 = __webpack_require__(772);
const trigger_event_module_1 = __webpack_require__(773);
const application_events_1 = __webpack_require__(517);
const domain_helper_1 = __webpack_require__(582);
const encryption_1 = __webpack_require__(299);
const jwt_utils_1 = __webpack_require__(510);
const openapi_module_1 = __webpack_require__(774);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const base_piece_module_1 = __webpack_require__(776);
const community_piece_module_1 = __webpack_require__(779);
const hooks_2 = __webpack_require__(456);
const piece_sync_service_1 = __webpack_require__(777);
const platform_module_1 = __webpack_require__(780);
const platform_service_1 = __webpack_require__(459);
const project_hooks_1 = __webpack_require__(449);
const project_module_1 = __webpack_require__(782);
const store_entry_module_1 = __webpack_require__(784);
const tags_module_1 = __webpack_require__(787);
const platform_user_module_1 = __webpack_require__(788);
const user_module_1 = __webpack_require__(790);
const user_invitation_module_1 = __webpack_require__(791);
const webhook_module_1 = __webpack_require__(793);
const websockets_service_1 = __webpack_require__(638);
const consumer_1 = __webpack_require__(763);
const webhook_response_watcher_1 = __webpack_require__(596);
const worker_module_1 = __webpack_require__(797);
const setupApp = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(swagger_1.default, {
        hideUntagged: true,
        openapi: {
            servers: [
                {
                    url: 'https://cloud.activepieces.com/api',
                    description: 'Production Server',
                },
            ],
            components: {
                securitySchemes: {
                    apiKey: {
                        type: 'http',
                        description: 'Use your api key generated from the admin console',
                        scheme: 'bearer',
                    },
                },
                schemas: {
                    [ee_shared_1.ApplicationEventName.FLOW_CREATED]: ee_shared_1.FlowCreatedEvent,
                    [ee_shared_1.ApplicationEventName.FLOW_DELETED]: ee_shared_1.FlowDeletedEvent,
                    [ee_shared_1.ApplicationEventName.FLOW_UPDATED]: ee_shared_1.FlowUpdatedEvent,
                    [ee_shared_1.ApplicationEventName.CONNECTION_UPSERTED]: ee_shared_1.ConnectionEvent,
                    [ee_shared_1.ApplicationEventName.CONNECTION_DELETED]: ee_shared_1.ConnectionEvent,
                    [ee_shared_1.ApplicationEventName.FOLDER_CREATED]: ee_shared_1.FolderEvent,
                    [ee_shared_1.ApplicationEventName.FOLDER_UPDATED]: ee_shared_1.FolderEvent,
                    [ee_shared_1.ApplicationEventName.FOLDER_DELETED]: ee_shared_1.FolderEvent,
                    [ee_shared_1.ApplicationEventName.FLOW_RUN_STARTED]: ee_shared_1.FlowRunEvent,
                    [ee_shared_1.ApplicationEventName.FLOW_RUN_FINISHED]: ee_shared_1.FlowRunEvent,
                    [ee_shared_1.ApplicationEventName.USER_SIGNED_UP]: ee_shared_1.SignUpEvent,
                    [ee_shared_1.ApplicationEventName.USER_SIGNED_IN]: ee_shared_1.AuthenticationEvent,
                    [ee_shared_1.ApplicationEventName.USER_PASSWORD_RESET]: ee_shared_1.AuthenticationEvent,
                    [ee_shared_1.ApplicationEventName.USER_EMAIL_VERIFIED]: ee_shared_1.AuthenticationEvent,
                    [ee_shared_1.ApplicationEventName.SIGNING_KEY_CREATED]: ee_shared_1.SigningKeyEvent,
                    'user-invitation': shared_1.UserInvitation,
                    'project-member': ee_shared_1.ProjectMember,
                    project: shared_1.ProjectWithLimits,
                    flow: shared_1.Flow,
                    'flow-run': shared_1.FlowRun,
                    'app-connection': shared_1.AppConnectionWithoutSensitiveData,
                    piece: pieces_framework_1.PieceMetadata,
                    'git-repo': ee_shared_1.GitRepoWithoutSensitiveData,
                },
            },
            info: {
                title: 'Activepieces Documentation',
                version: '0.0.0',
            },
            externalDocs: {
                url: 'https://www.activepieces.com/docs',
                description: 'Find more info here',
            },
        },
    });
    yield app.register(rate_limit_1.rateLimitModule);
    yield app.register(fastify_socket_io_1.default, Object.assign(Object.assign({ cors: {
            origin: '*',
        } }, (0, shared_1.spreadIfDefined)('adapter', yield getAdapter())), { transports: ['websocket'] }));
    app.io.use((socket, next) => {
        access_token_manager_1.accessTokenManager
            .extractPrincipal(socket.handshake.auth.token)
            .then(() => {
            next();
        })
            .catch(() => {
            next(new Error('Authentication error'));
        });
    });
    app.io.on('connection', (socket) => {
        (0, server_shared_1.rejectedPromiseHandler)(websockets_service_1.websocketService.init(socket));
    });
    app.addHook('onRequest', (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const route = app.hasRoute({
            method: request.method,
            url: request.url,
        });
        if (!route) {
            return reply.code(404).send({
                statusCode: 404,
                error: 'Not Found',
                message: 'Route not found',
            });
        }
    }));
    app.addHook('preHandler', security_handler_chain_1.securityHandlerChain);
    app.addHook('preHandler', rbac_middleware_1.rbacMiddleware);
    yield system_jobs_1.systemJobsSchedule.init();
    yield app.register(file_module_1.fileModule);
    yield app.register(flag_module_1.flagModule);
    yield app.register(store_entry_module_1.storeEntryModule);
    yield app.register(flow_module_1.flowModule);
    yield app.register(base_piece_module_1.pieceModule);
    yield app.register(flow_run_module_1.flowRunModule);
    yield app.register(webhook_module_1.webhookModule);
    yield app.register(app_connection_module_1.appConnectionModule);
    yield app.register(openapi_module_1.openapiModule);
    yield app.register(trigger_event_module_1.triggerEventModule);
    yield app.register(app_event_routing_module_1.appEventRoutingModule);
    yield app.register(step_file_module_1.stepFileModule);
    yield app.register(user_module_1.userModule);
    yield app.register(authentication_module_1.authenticationModule);
    yield app.register(copilot_module_1.copilotModule);
    yield app.register(platform_module_1.platformModule);
    yield app.register(form_module_1.formModule);
    yield app.register(tags_module_1.tagsModule);
    yield piece_sync_service_1.pieceSyncService.setup();
    yield app.register(platform_user_module_1.platformUserModule);
    yield app.register(issues_module_1.issuesModule);
    yield app.register(authn_sso_saml_module_1.authnSsoSamlModule);
    yield app.register(alerts_module_1.alertsModule);
    yield app.register(user_invitation_module_1.invitationModule);
    yield app.register(worker_module_1.workerModule);
    app.get('/redirect', (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const params = {
            code: request.query.code,
        };
        if (!params.code) {
            return reply.send('The code is missing in url');
        }
        else {
            return reply
                .type('text/html')
                .send(`<script>if(window.opener){window.opener.postMessage({ 'code': '${encodeURIComponent(params.code)}' },'*')}</script> <html>Redirect succuesfully, this window should close now</html>`);
        }
    }));
    yield validateEnvPropsOnStartup();
    const edition = server_shared_1.system.getEdition();
    server_shared_1.logger.info({
        edition,
    }, 'Activepieces Edition');
    switch (edition) {
        case shared_1.ApEdition.CLOUD:
            yield app.register(app_credentials_module_1.appCredentialModule);
            yield app.register(connection_key_module_1.connectionKeyModule);
            yield app.register(platform_project_module_1.platformProjectModule);
            yield app.register(project_member_module_1.projectMemberModule);
            yield app.register(appsumo_module_1.appSumoModule);
            yield app.register(referral_module_1.referralModule);
            yield app.register(admin_piece_module_1.adminPieceModule);
            yield app.register(custom_domain_module_1.customDomainModule);
            yield app.register(signing_key_module_1.signingKeyModule);
            yield app.register(managed_authn_module_1.managedAuthnModule);
            yield app.register(oauth_app_module_1.oauthAppModule);
            yield app.register(platform_piece_module_1.platformPieceModule);
            yield app.register(otp_module_1.otpModule);
            yield app.register(enterprise_local_authn_module_1.enterpriseLocalAuthnModule);
            yield app.register(federated_authn_module_1.federatedAuthModule);
            yield app.register(api_key_module_1.apiKeyModule);
            yield app.register(platform_flow_template_module_1.platformFlowTemplateModule);
            yield app.register(git_repo_module_1.gitRepoModule);
            yield app.register(audit_event_module_1.auditEventModule);
            yield app.register(usage_tracker_module_1.usageTrackerModule);
            yield app.register(admin_platform_controller_1.adminPlatformPieceModule);
            yield app.register(analytics_module_1.analyticsModule);
            yield app.register(project_billing_module_1.projectBillingModule);
            (0, oauth2_1.setPlatformOAuthService)({
                service: platform_oauth2_service_1.platformOAuth2Service,
            });
            project_hooks_1.projectHooks.setHooks(ee_project_hooks_1.projectEnterpriseHooks);
            application_events_1.eventsHooks.set(audit_event_service_1.auditLogService);
            flow_run_hooks_1.flowRunHooks.setHooks(cloud_flow_run_hooks_1.platformRunHooks);
            hooks_2.pieceMetadataServiceHooks.set(enterprise_piece_metadata_service_hooks_1.enterprisePieceMetadataServiceHooks);
            flags_hooks_1.flagHooks.set(enterprise_flags_hooks_1.enterpriseFlagsHooks);
            hooks_1.authenticationServiceHooks.set(cloud_authentication_service_hooks_1.cloudAuthenticationServiceHooks);
            domain_helper_1.domainHelper.set(platform_domain_helper_1.platformDomainHelper);
            job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.ISSUES_REMINDER, email_service_1.emailService.sendReminderJobHandler);
            (0, server_shared_1.initializeSentry)();
            break;
        case shared_1.ApEdition.ENTERPRISE:
            yield app.register(custom_domain_module_1.customDomainModule);
            yield app.register(platform_project_module_1.platformProjectModule);
            yield app.register(project_member_module_1.projectMemberModule);
            yield app.register(signing_key_module_1.signingKeyModule);
            yield app.register(managed_authn_module_1.managedAuthnModule);
            yield app.register(oauth_app_module_1.oauthAppModule);
            yield app.register(platform_piece_module_1.platformPieceModule);
            yield app.register(otp_module_1.otpModule);
            yield app.register(enterprise_local_authn_module_1.enterpriseLocalAuthnModule);
            yield app.register(federated_authn_module_1.federatedAuthModule);
            yield app.register(api_key_module_1.apiKeyModule);
            yield app.register(platform_flow_template_module_1.platformFlowTemplateModule);
            yield app.register(git_repo_module_1.gitRepoModule);
            yield app.register(audit_event_module_1.auditEventModule);
            yield app.register(usage_tracker_module_1.usageTrackerModule);
            yield app.register(analytics_module_1.analyticsModule);
            yield app.register(license_keys_module_1.licenseKeysModule);
            job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.ISSUES_REMINDER, email_service_1.emailService.sendReminderJobHandler);
            (0, oauth2_1.setPlatformOAuthService)({
                service: platform_oauth2_service_1.platformOAuth2Service,
            });
            project_hooks_1.projectHooks.setHooks(ee_project_hooks_1.projectEnterpriseHooks);
            application_events_1.eventsHooks.set(audit_event_service_1.auditLogService);
            flow_run_hooks_1.flowRunHooks.setHooks(cloud_flow_run_hooks_1.platformRunHooks);
            hooks_1.authenticationServiceHooks.set(enterprise_authentication_service_hooks_1.enterpriseAuthenticationServiceHooks);
            hooks_2.pieceMetadataServiceHooks.set(enterprise_piece_metadata_service_hooks_1.enterprisePieceMetadataServiceHooks);
            flags_hooks_1.flagHooks.set(enterprise_flags_hooks_1.enterpriseFlagsHooks);
            domain_helper_1.domainHelper.set(platform_domain_helper_1.platformDomainHelper);
            break;
        case shared_1.ApEdition.COMMUNITY:
            yield app.register(project_module_1.projectModule);
            yield app.register(community_piece_module_1.communityPiecesModule);
            yield app.register(community_flow_template_module_1.communityFlowTemplateModule);
            yield app.register(license_keys_module_1.licenseKeysModule);
            break;
    }
    app.addHook('onClose', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield consumer_1.flowConsumer.close();
        yield system_jobs_1.systemJobsSchedule.close();
        yield webhook_response_watcher_1.webhookResponseWatcher.shutdown();
    }));
    return app;
});
exports.setupApp = setupApp;
const validateEnvPropsOnStartup = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queueMode = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
    yield encryption_1.encryptUtils.loadEncryptionKey(queueMode);
    const jwtSecret = yield jwt_utils_1.jwtUtils.getJwtSecret();
    if ((0, shared_1.isNil)(jwtSecret)) {
        throw new Error(JSON.stringify({
            message: 'AP_JWT_SECRET is undefined, please define it in the environment variables',
        }));
    }
});
function getAdapter() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const queue = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
        switch (queue) {
            case server_shared_1.QueueMode.MEMORY: {
                return undefined;
            }
            case server_shared_1.QueueMode.REDIS: {
                const sub = (0, redis_connection_1.getRedisConnection)().duplicate();
                const pub = (0, redis_connection_1.getRedisConnection)().duplicate();
                return (0, redis_adapter_1.createAdapter)(pub, sub);
            }
        }
    });
}
function appPostBoot() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        server_shared_1.logger.info(`
        _____   _______   _____  __      __  ______   _____    _____   ______    _____   ______    _____
/\\      / ____| |__   __| |_   _| \\ \\    / / |  ____| |  __ \\  |_   _| |  ____|  / ____| |  ____|  / ____|
/  \\    | |         | |      | |    \\ \\  / /  | |__    | |__) |   | |   | |__    | |      | |__    | (___
/ /\\ \\   | |         | |      | |     \\ \\/ /   |  __|   |  ___/    | |   |  __|   | |      |  __|    \\___ \\
/ ____ \\  | |____     | |     _| |_     \\  /    | |____  | |       _| |_  | |____  | |____  | |____   ____) |
/_/    \\_\\  \\_____|    |_|    |_____|     \\/     |______| |_|      |_____| |______|  \\_____| |______| |_____/

The application started on ${server_shared_1.system.get(server_shared_1.SharedSystemProp.FRONTEND_URL)}, as specified by the AP_FRONTEND_URL variables.`);
        const environment = server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT);
        const piecesSource = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.PIECES_SOURCE);
        const pieces = process.env.AP_DEV_PIECES;
        server_shared_1.logger.warn(`[WARNING]: Pieces will be loaded from source type ${piecesSource}`);
        if (environment === shared_1.ApEnvironment.DEVELOPMENT) {
            server_shared_1.logger.warn(`[WARNING]: The application is running in ${environment} mode.`);
            server_shared_1.logger.warn(`[WARNING]: This is only shows pieces specified in AP_DEV_PIECES ${pieces} environment variable.`);
        }
        const oldestPlatform = yield platform_service_1.platformService.getOldestPlatform();
        if (!(0, shared_1.isNil)(oldestPlatform)) {
            yield license_keys_service_1.licenseKeysService.verifyKeyAndApplyLimits({
                platformId: oldestPlatform.id,
                license: server_shared_1.system.get(server_shared_1.AppSystemProp.LICENSE_KEY),
            });
        }
    });
}
exports.appPostBoot = appPostBoot;


/***/ }),
/* 134 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(135), exports);
tslib_1.__exportStar(__webpack_require__(136), exports);
tslib_1.__exportStar(__webpack_require__(137), exports);
tslib_1.__exportStar(__webpack_require__(142), exports);
tslib_1.__exportStar(__webpack_require__(143), exports);
tslib_1.__exportStar(__webpack_require__(135), exports);
tslib_1.__exportStar(__webpack_require__(144), exports);
tslib_1.__exportStar(__webpack_require__(145), exports);
tslib_1.__exportStar(__webpack_require__(146), exports);
tslib_1.__exportStar(__webpack_require__(147), exports);
tslib_1.__exportStar(__webpack_require__(148), exports);
tslib_1.__exportStar(__webpack_require__(149), exports);
tslib_1.__exportStar(__webpack_require__(150), exports);
tslib_1.__exportStar(__webpack_require__(153), exports);
tslib_1.__exportStar(__webpack_require__(138), exports);
tslib_1.__exportStar(__webpack_require__(156), exports);
tslib_1.__exportStar(__webpack_require__(158), exports);
tslib_1.__exportStar(__webpack_require__(160), exports);
tslib_1.__exportStar(__webpack_require__(164), exports);
tslib_1.__exportStar(__webpack_require__(168), exports);
tslib_1.__exportStar(__webpack_require__(171), exports);


/***/ }),
/* 135 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PRICE_PER_1000_TASKS = exports.getTasksPriceId = exports.DEFAULT_PLATFORM_LIMIT = exports.DEFAULT_FREE_PLAN_LIMIT = exports.MAXIMUM_ALLOWED_TASKS = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
tslib_1.__exportStar(__webpack_require__(136), exports);
exports.MAXIMUM_ALLOWED_TASKS = 200000;
exports.DEFAULT_FREE_PLAN_LIMIT = {
    nickname: 'free-pay-as-you-go',
    tasks: 1000,
    teamMembers: 100,
    connections: 1000,
    pieces: [],
    piecesFilterType: shared_1.PiecesFilterType.NONE,
    minimumPollingInterval: 5,
};
exports.DEFAULT_PLATFORM_LIMIT = {
    nickname: 'platform',
    connections: 200,
    tasks: 50000,
    teamMembers: 5,
    pieces: [],
    piecesFilterType: shared_1.PiecesFilterType.NONE,
    minimumPollingInterval: 1,
};
function getTasksPriceId(stripeKey) {
    const testMode = stripeKey === null || stripeKey === void 0 ? void 0 : stripeKey.startsWith('sk_test');
    return testMode ? 'price_1OnWqKKZ0dZRqLEKkcYBso8K' : 'price_1OngsdKZ0dZRqLEKPpvm67Sk';
}
exports.getTasksPriceId = getTasksPriceId;
exports.PRICE_PER_1000_TASKS = 1;


/***/ }),
/* 136 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectBillingResponse = exports.ProjectBilling = exports.ApSubscriptionStatus = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
var ApSubscriptionStatus;
(function (ApSubscriptionStatus) {
    ApSubscriptionStatus["ACTIVE"] = "active";
    ApSubscriptionStatus["INCOMPLETE"] = "incomplete";
    ApSubscriptionStatus["INCOMPLETE_EXPIRED"] = "incomplete_expired";
    ApSubscriptionStatus["PAST_DUE"] = "past_due";
    ApSubscriptionStatus["CANCELED"] = "canceled";
    ApSubscriptionStatus["UNAPID"] = "unpaid";
})(ApSubscriptionStatus || (exports.ApSubscriptionStatus = ApSubscriptionStatus = {}));
exports.ProjectBilling = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { projectId: typebox_1.Type.String(), includedTasks: typebox_1.Type.Number(), includedUsers: typebox_1.Type.Number(), stripeCustomerId: typebox_1.Type.String(), stripeSubscriptionId: typebox_1.Type.String(), subscriptionStatus: typebox_1.Type.Enum(ApSubscriptionStatus) }));
exports.ProjectBillingResponse = typebox_1.Type.Object({
    nextBillingDate: typebox_1.Type.String(),
    subscription: exports.ProjectBilling
});


/***/ }),
/* 137 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summarizeApplicationEvent = exports.ApplicationEvent = exports.SigningKeyEvent = exports.SignUpEvent = exports.AuthenticationEvent = exports.FlowUpdatedEvent = exports.FlowDeletedEvent = exports.FlowCreatedEvent = exports.FlowRunEvent = exports.FolderEvent = exports.ConnectionEvent = exports.ApplicationEventName = exports.ListAuditEventsRequest = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
const signing_key_1 = __webpack_require__(138);
exports.ListAuditEventsRequest = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
});
const UserMeta = typebox_1.Type.Pick(shared_1.User, ['email', 'id', 'firstName', 'lastName']);
var ApplicationEventName;
(function (ApplicationEventName) {
    ApplicationEventName["FLOW_CREATED"] = "flow.created";
    ApplicationEventName["FLOW_DELETED"] = "flow.deleted";
    ApplicationEventName["FLOW_UPDATED"] = "flow.updated";
    ApplicationEventName["FLOW_RUN_STARTED"] = "flow.run.started";
    ApplicationEventName["FLOW_RUN_FINISHED"] = "flow.run.finished";
    ApplicationEventName["FOLDER_CREATED"] = "folder.created";
    ApplicationEventName["FOLDER_UPDATED"] = "folder.updated";
    ApplicationEventName["FOLDER_DELETED"] = "folder.deleted";
    ApplicationEventName["CONNECTION_UPSERTED"] = "connection.upserted";
    ApplicationEventName["CONNECTION_DELETED"] = "connection.deleted";
    ApplicationEventName["USER_SIGNED_UP"] = "user.signed.up";
    ApplicationEventName["USER_SIGNED_IN"] = "user.signed.in";
    ApplicationEventName["USER_PASSWORD_RESET"] = "user.password.reset";
    ApplicationEventName["USER_EMAIL_VERIFIED"] = "user.email.verified";
    ApplicationEventName["SIGNING_KEY_CREATED"] = "signing.key.created";
})(ApplicationEventName || (exports.ApplicationEventName = ApplicationEventName = {}));
const BaseAuditEventProps = Object.assign(Object.assign({}, shared_1.BaseModelSchema), { platformId: typebox_1.Type.String(), projectId: typebox_1.Type.Optional(typebox_1.Type.String()), userId: typebox_1.Type.Optional(typebox_1.Type.String()), userEmail: typebox_1.Type.Optional(typebox_1.Type.String()), ip: typebox_1.Type.Optional(typebox_1.Type.String()) });
exports.ConnectionEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Union([typebox_1.Type.Literal(ApplicationEventName.CONNECTION_DELETED), typebox_1.Type.Literal(ApplicationEventName.CONNECTION_UPSERTED)]), data: typebox_1.Type.Object({
        connection: typebox_1.Type.Pick(shared_1.AppConnectionWithoutSensitiveData, ['name', 'pieceName', 'status', 'type', 'id', 'created', 'updated']),
        project: typebox_1.Type.Optional(typebox_1.Type.Pick(shared_1.Project, ['displayName'])),
    }) }));
exports.FolderEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Union([typebox_1.Type.Literal(ApplicationEventName.FOLDER_UPDATED), typebox_1.Type.Literal(ApplicationEventName.FOLDER_CREATED), typebox_1.Type.Literal(ApplicationEventName.FOLDER_DELETED)]), data: typebox_1.Type.Object({
        folder: typebox_1.Type.Pick(shared_1.Folder, ['id', 'displayName', 'created', 'updated']),
        project: typebox_1.Type.Optional(typebox_1.Type.Pick(shared_1.Project, ['displayName'])),
    }) }));
exports.FlowRunEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Union([typebox_1.Type.Literal(ApplicationEventName.FLOW_RUN_STARTED), typebox_1.Type.Literal(ApplicationEventName.FLOW_RUN_FINISHED)]), data: typebox_1.Type.Object({
        flowRun: typebox_1.Type.Pick(shared_1.FlowRun, ['id', 'startTime', 'finishTime', 'duration', 'environment', 'flowId', 'flowVersionId', 'flowDisplayName', 'status']),
        project: typebox_1.Type.Optional(typebox_1.Type.Pick(shared_1.Project, ['displayName'])),
    }) }));
exports.FlowCreatedEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Literal(ApplicationEventName.FLOW_CREATED), data: typebox_1.Type.Object({
        flow: typebox_1.Type.Pick(shared_1.Flow, ['id', 'created', 'updated']),
        project: typebox_1.Type.Optional(typebox_1.Type.Pick(shared_1.Project, ['displayName'])),
    }) }));
exports.FlowDeletedEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Literal(ApplicationEventName.FLOW_DELETED), data: typebox_1.Type.Object({
        flow: typebox_1.Type.Pick(shared_1.Flow, ['id', 'created', 'updated']),
        flowVersion: typebox_1.Type.Pick(shared_1.FlowVersion, ['id', 'displayName', 'flowId', 'created', 'updated']),
        project: typebox_1.Type.Optional(typebox_1.Type.Pick(shared_1.Project, ['displayName'])),
    }) }));
exports.FlowUpdatedEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Literal(ApplicationEventName.FLOW_UPDATED), data: typebox_1.Type.Object({
        flowVersion: typebox_1.Type.Pick(shared_1.FlowVersion, ['id', 'displayName', 'flowId', 'created', 'updated']),
        request: shared_1.FlowOperationRequest,
        project: typebox_1.Type.Optional(typebox_1.Type.Pick(shared_1.Project, ['displayName'])),
    }) }));
exports.AuthenticationEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Union([typebox_1.Type.Literal(ApplicationEventName.USER_SIGNED_IN), typebox_1.Type.Literal(ApplicationEventName.USER_PASSWORD_RESET), typebox_1.Type.Literal(ApplicationEventName.USER_EMAIL_VERIFIED)]), data: typebox_1.Type.Object({
        user: typebox_1.Type.Optional(UserMeta)
    }) }));
exports.SignUpEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Literal(ApplicationEventName.USER_SIGNED_UP), data: typebox_1.Type.Object({
        source: typebox_1.Type.Union([typebox_1.Type.Literal('credentials'), typebox_1.Type.Literal('sso'), typebox_1.Type.Literal('managed')]),
        user: typebox_1.Type.Optional(UserMeta)
    }) }));
exports.SigningKeyEvent = typebox_1.Type.Object(Object.assign(Object.assign({}, BaseAuditEventProps), { action: typebox_1.Type.Union([
        typebox_1.Type.Literal(ApplicationEventName.SIGNING_KEY_CREATED),
    ]), data: typebox_1.Type.Object({
        signingKey: typebox_1.Type.Pick(signing_key_1.SigningKey, ['id', 'created', 'updated', 'displayName']),
    }) }));
exports.ApplicationEvent = typebox_1.Type.Union([
    exports.ConnectionEvent,
    exports.FlowCreatedEvent,
    exports.FlowDeletedEvent,
    exports.FlowUpdatedEvent,
    exports.FlowRunEvent,
    exports.AuthenticationEvent,
    exports.FolderEvent,
    exports.SignUpEvent,
    exports.SigningKeyEvent,
]);
function summarizeApplicationEvent(event) {
    var _a;
    switch (event.action) {
        case ApplicationEventName.FLOW_UPDATED: {
            return convertUpdateActionToDetails(event);
        }
        case ApplicationEventName.FLOW_RUN_STARTED:
        case ApplicationEventName.FLOW_RUN_FINISHED: {
            return `Flow run ${event.data.flowRun.id} is finished`;
        }
        case ApplicationEventName.FLOW_CREATED:
            return `Flow ${event.data.flow.id} is created`;
        case ApplicationEventName.FLOW_DELETED:
            return `Flow ${event.data.flow.id} (${event.data.flowVersion.displayName}) is deleted`;
        case ApplicationEventName.FOLDER_CREATED:
            return `${event.data.folder.displayName} is created`;
        case ApplicationEventName.FOLDER_UPDATED:
            return `${event.data.folder.displayName} is updated`;
        case ApplicationEventName.FOLDER_DELETED:
            return `${event.data.folder.displayName} is deleted`;
        case ApplicationEventName.CONNECTION_UPSERTED:
            return `${event.data.connection.name} is updated`;
        case ApplicationEventName.CONNECTION_DELETED:
            return `${event.data.connection.name} is deleted`;
        case ApplicationEventName.USER_SIGNED_IN:
            return `User ${event.userEmail} signed in`;
        case ApplicationEventName.USER_PASSWORD_RESET:
            return `User ${event.userEmail} reset password`;
        case ApplicationEventName.USER_EMAIL_VERIFIED:
            return `User ${event.userEmail} verified email`;
        case ApplicationEventName.USER_SIGNED_UP:
            return `User ${(_a = event.data.user) === null || _a === void 0 ? void 0 : _a.email} signed up using email from ${event.data.source}`;
        case ApplicationEventName.SIGNING_KEY_CREATED:
            return `${event.data.signingKey.displayName} is created`;
    }
}
exports.summarizeApplicationEvent = summarizeApplicationEvent;
function convertUpdateActionToDetails(event) {
    switch (event.data.request.type) {
        case shared_1.FlowOperationType.ADD_ACTION:
            return `Added action "${event.data.request.request.action.displayName}" to "${event.data.flowVersion.displayName}" Flow.`;
        case shared_1.FlowOperationType.UPDATE_ACTION:
            return `Updated action "${event.data.request.request.displayName}" in "${event.data.flowVersion.displayName}" Flow.`;
        case shared_1.FlowOperationType.DELETE_ACTION:
            return `Deleted action "${event.data.request.request.name}" from "${event.data.flowVersion.displayName}" Flow.`;
        case shared_1.FlowOperationType.CHANGE_NAME:
            return `Renamed flow "${event.data.flowVersion.displayName}" to "${event.data.request.request.displayName}".`;
        case shared_1.FlowOperationType.LOCK_AND_PUBLISH:
            return `Locked and published flow "${event.data.flowVersion.displayName}" Flow.`;
        case shared_1.FlowOperationType.USE_AS_DRAFT:
            return `Unlocked and unpublished flow "${event.data.flowVersion.displayName}" Flow.`;
        case shared_1.FlowOperationType.MOVE_ACTION:
            return `Moved action "${event.data.request.request.name}" to after "${event.data.request.request.newParentStep}".`;
        case shared_1.FlowOperationType.LOCK_FLOW:
            return `Locked flow "${event.data.flowVersion.displayName}" Flow.`;
        case shared_1.FlowOperationType.CHANGE_STATUS:
            return `Changed status of flow "${event.data.flowVersion.displayName}" Flow to "${event.data.request.request.status}".`;
        case shared_1.FlowOperationType.DUPLICATE_ACTION:
            return `Duplicated action "${event.data.request.request.stepName}" in "${event.data.flowVersion.displayName}" Flow.`;
        case shared_1.FlowOperationType.IMPORT_FLOW:
            return `Imported flow in "${event.data.request.request.displayName}" Flow.`;
        case shared_1.FlowOperationType.UPDATE_TRIGGER:
            return `Updated trigger in "${event.data.flowVersion.displayName}" Flow to "${event.data.request.request.displayName}".`;
        case shared_1.FlowOperationType.CHANGE_FOLDER:
            return `Moved flow "${event.data.flowVersion.displayName}" to folder id ${event.data.request.request.folderId}.`;
    }
}


/***/ }),
/* 138 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(139), exports);
tslib_1.__exportStar(__webpack_require__(140), exports);
tslib_1.__exportStar(__webpack_require__(141), exports);


/***/ }),
/* 139 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SigningKey = exports.KeyAlgorithm = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
var KeyAlgorithm;
(function (KeyAlgorithm) {
    KeyAlgorithm["RSA"] = "RSA";
})(KeyAlgorithm || (exports.KeyAlgorithm = KeyAlgorithm = {}));
exports.SigningKey = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { platformId: shared_1.ApId, publicKey: typebox_1.Type.String(), displayName: typebox_1.Type.String(), 
    /* algorithm used to generate this key pair */
    algorithm: typebox_1.Type.Enum(KeyAlgorithm) }));


/***/ }),
/* 140 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 141 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddSigningKeyRequestBody = void 0;
const typebox_1 = __webpack_require__(10);
exports.AddSigningKeyRequestBody = typebox_1.Type.Object({
    displayName: typebox_1.Type.String()
});


/***/ }),
/* 142 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectSyncPlan = exports.ProjectSyncPlanOperation = exports.ProjectSyncError = exports.ConfigureRepoRequest = exports.PullGitRepoRequest = exports.PullGitRepoFromProjectRequest = exports.PushGitRepoRequest = exports.GitPushOperationType = exports.GitRepoWithoutSensitiveData = exports.GitRepo = exports.GitProjectMappingState = exports.GitBranchType = exports.ProjectOperationType = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
var ProjectOperationType;
(function (ProjectOperationType) {
    ProjectOperationType["UPDATE_FLOW"] = "UPDATE_FLOW";
    ProjectOperationType["CREATE_FLOW"] = "CREATE_FLOW";
    ProjectOperationType["DELETE_FLOW"] = "DELETE_FLOW";
})(ProjectOperationType || (exports.ProjectOperationType = ProjectOperationType = {}));
var GitBranchType;
(function (GitBranchType) {
    GitBranchType["PRODUCTION"] = "PRODUCTION";
    GitBranchType["DEVELOPMENT"] = "DEVELOPMENT";
})(GitBranchType || (exports.GitBranchType = GitBranchType = {}));
exports.GitProjectMappingState = typebox_1.Type.Object({
    flows: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Object({
        sourceId: typebox_1.Type.String(),
    })),
});
exports.GitRepo = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { remoteUrl: typebox_1.Type.String(), branch: typebox_1.Type.String(), branchType: typebox_1.Type.Enum(GitBranchType), projectId: typebox_1.Type.String(), sshPrivateKey: typebox_1.Type.String(), slug: typebox_1.Type.String(), mapping: typebox_1.Type.Optional(exports.GitProjectMappingState) }));
exports.GitRepoWithoutSensitiveData = typebox_1.Type.Omit(exports.GitRepo, ['sshPrivateKey']);
var GitPushOperationType;
(function (GitPushOperationType) {
    GitPushOperationType["PUSH_FLOW"] = "PUSH_FLOW";
    GitPushOperationType["DELETE_FLOW"] = "DELETE_FLOW";
})(GitPushOperationType || (exports.GitPushOperationType = GitPushOperationType = {}));
exports.PushGitRepoRequest = typebox_1.Type.Object({
    type: typebox_1.Type.Enum(GitPushOperationType),
    commitMessage: typebox_1.Type.String(),
    flowId: typebox_1.Type.String()
});
exports.PullGitRepoFromProjectRequest = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
});
exports.PullGitRepoRequest = typebox_1.Type.Object({
    dryRun: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
});
exports.ConfigureRepoRequest = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    remoteUrl: typebox_1.Type.String({
        pattern: '^git@',
    }),
    branch: typebox_1.Type.String(),
    branchType: typebox_1.Type.Enum(GitBranchType),
    sshPrivateKey: typebox_1.Type.String(),
    slug: typebox_1.Type.String(),
});
exports.ProjectSyncError = typebox_1.Type.Object({
    flowId: typebox_1.Type.String(),
    message: typebox_1.Type.String(),
});
exports.ProjectSyncPlanOperation = typebox_1.Type.Union([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(ProjectOperationType.CREATE_FLOW),
        flow: typebox_1.Type.Object({
            id: typebox_1.Type.String(),
            displayName: typebox_1.Type.String(),
        }),
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(ProjectOperationType.UPDATE_FLOW),
        flow: typebox_1.Type.Object({
            id: typebox_1.Type.String(),
            displayName: typebox_1.Type.String(),
        }),
        targetFlow: typebox_1.Type.Object({
            id: typebox_1.Type.String(),
            displayName: typebox_1.Type.String(),
        }),
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(ProjectOperationType.DELETE_FLOW),
        flow: typebox_1.Type.Object({
            id: typebox_1.Type.String(),
            displayName: typebox_1.Type.String(),
        }),
    }),
]);
exports.ProjectSyncPlan = typebox_1.Type.Object({
    operations: typebox_1.Type.Array(exports.ProjectSyncPlanOperation),
    errors: typebox_1.Type.Array(exports.ProjectSyncError),
});


/***/ }),
/* 143 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateApiKeyRequest = exports.ApiKeyResponseWithoutValue = exports.ApiKeyResponseWithValue = exports.ApiKey = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
exports.ApiKey = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { platformId: shared_1.ApId, displayName: typebox_1.Type.String(), hashedValue: typebox_1.Type.String(), truncatedValue: typebox_1.Type.String() }));
exports.ApiKeyResponseWithValue = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.ApiKey, ['hashedValue']),
    typebox_1.Type.Object({
        value: typebox_1.Type.String()
    })
]);
exports.ApiKeyResponseWithoutValue = typebox_1.Type.Omit(exports.ApiKey, ['hashedValue']);
exports.CreateApiKeyRequest = typebox_1.Type.Object({
    displayName: typebox_1.Type.String()
});


/***/ }),
/* 144 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreatePlatformProjectRequest = exports.UpdateProjectPlatformRequest = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
exports.UpdateProjectPlatformRequest = typebox_1.Type.Object({
    notifyStatus: typebox_1.Type.Optional(typebox_1.Type.Enum(shared_1.NotificationStatus)),
    displayName: typebox_1.Type.Optional(typebox_1.Type.String()),
    plan: typebox_1.Type.Optional(typebox_1.Type.Object({
        tasks: typebox_1.Type.Optional(typebox_1.Type.Number({})),
        pieces: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String({}))),
        piecesFilterType: typebox_1.Type.Optional(typebox_1.Type.Enum(shared_1.PiecesFilterType)),
    })),
});
exports.CreatePlatformProjectRequest = typebox_1.Type.Object({
    displayName: typebox_1.Type.String(),
    externalId: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 145 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListCustomDomainsRequest = exports.AddDomainRequest = exports.CustomDomain = exports.CustomDomainStatus = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
var CustomDomainStatus;
(function (CustomDomainStatus) {
    CustomDomainStatus["ACTIVE"] = "ACTIVE";
    CustomDomainStatus["PENDING"] = "PENDING";
})(CustomDomainStatus || (exports.CustomDomainStatus = CustomDomainStatus = {}));
exports.CustomDomain = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { domain: typebox_1.Type.String(), platformId: typebox_1.Type.String(), status: typebox_1.Type.Enum(CustomDomainStatus) }));
exports.AddDomainRequest = typebox_1.Type.Object({
    domain: typebox_1.Type.String({
        pattern: '^(?!.*\\.example\\.com$)(?!.*\\.example\\.net$).*'
    })
});
exports.ListCustomDomainsRequest = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 146 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListReferralsRequest = exports.Referral = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
exports.Referral = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { referredUserId: typebox_1.Type.String({
        description: 'The ID of the user who was referred.'
    }), referredUserEmail: typebox_1.Type.String({
        format: 'email',
    }), referringUserId: typebox_1.Type.String({
        description: 'The ID of the user who made the referral.'
    }), referringUserEmail: typebox_1.Type.String({
        format: 'email',
    }) }));
exports.ListReferralsRequest = typebox_1.Type.Object({
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({
        description: 'The cursor to start the list from.'
    })),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number({
        description: 'The maximum number of items to return.'
    }))
});


/***/ }),
/* 147 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AcceptProjectResponse = exports.ListProjectMembersRequestQuery = exports.UpsertProjectMemberRequestBody = exports.AcceptInvitationRequest = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
exports.AcceptInvitationRequest = typebox_1.Type.Object({
    token: typebox_1.Type.String()
});
exports.UpsertProjectMemberRequestBody = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    userId: typebox_1.Type.String(),
    role: typebox_1.Type.Enum(shared_1.ProjectMemberRole),
});
exports.ListProjectMembersRequestQuery = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
});
exports.AcceptProjectResponse = typebox_1.Type.Object({
    registered: typebox_1.Type.Boolean(),
});


/***/ }),
/* 148 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectMemberWithUser = exports.ProjectMember = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
exports.ProjectMember = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { platformId: shared_1.ApId, userId: shared_1.ApId, projectId: typebox_1.Type.String(), role: typebox_1.Type.Enum(shared_1.ProjectMemberRole) }), {
    description: "Project member is which user is assigned to a project."
});
exports.ProjectMemberWithUser = typebox_1.Type.Composite([exports.ProjectMember, typebox_1.Type.Object({
        user: shared_1.UserMeta
    })]);


/***/ }),
/* 149 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateFlowTemplateRequest = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
exports.CreateFlowTemplateRequest = typebox_1.Type.Object({
    description: typebox_1.Type.Optional(typebox_1.Type.String()),
    template: shared_1.FlowVersionTemplate,
    blogUrl: typebox_1.Type.Optional(typebox_1.Type.String()),
    type: typebox_1.Type.Enum(shared_1.TemplateType),
    tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    id: typebox_1.Type.Optional(typebox_1.Type.String())
});


/***/ }),
/* 150 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(151), exports);
tslib_1.__exportStar(__webpack_require__(152), exports);


/***/ }),
/* 151 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppCredentialType = void 0;
var AppCredentialType;
(function (AppCredentialType) {
    AppCredentialType["OAUTH2"] = "OAUTH2";
    AppCredentialType["API_KEY"] = "API_KEY";
})(AppCredentialType || (exports.AppCredentialType = AppCredentialType = {}));


/***/ }),
/* 152 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpsertAppCredentialRequest = exports.UpsertOAuth2CredentialRequest = exports.UpsertApiKeyCredentialRequest = exports.ListAppCredentialsRequest = void 0;
const typebox_1 = __webpack_require__(10);
const app_credentials_1 = __webpack_require__(151);
exports.ListAppCredentialsRequest = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    appName: typebox_1.Type.Optional(typebox_1.Type.String()),
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
});
exports.UpsertApiKeyCredentialRequest = typebox_1.Type.Object({
    id: typebox_1.Type.Optional(typebox_1.Type.String()),
    appName: typebox_1.Type.String(),
    settings: typebox_1.Type.Object({
        type: typebox_1.Type.Literal(app_credentials_1.AppCredentialType.API_KEY),
    }),
});
exports.UpsertOAuth2CredentialRequest = typebox_1.Type.Object({
    id: typebox_1.Type.Optional(typebox_1.Type.String()),
    appName: typebox_1.Type.String(),
    settings: typebox_1.Type.Object({
        type: typebox_1.Type.Literal(app_credentials_1.AppCredentialType.OAUTH2),
        authUrl: typebox_1.Type.String({}),
        scope: typebox_1.Type.String(),
        tokenUrl: typebox_1.Type.String({}),
        clientId: typebox_1.Type.String({}),
        clientSecret: typebox_1.Type.String({})
    })
});
exports.UpsertAppCredentialRequest = typebox_1.Type.Union([exports.UpsertOAuth2CredentialRequest, exports.UpsertApiKeyCredentialRequest]);


/***/ }),
/* 153 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(154), exports);
tslib_1.__exportStar(__webpack_require__(155), exports);


/***/ }),
/* 154 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionKeyType = void 0;
var ConnectionKeyType;
(function (ConnectionKeyType) {
    ConnectionKeyType["SIGNING_KEY"] = "SIGNING_KEY";
})(ConnectionKeyType || (exports.ConnectionKeyType = ConnectionKeyType = {}));


/***/ }),
/* 155 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpsertSigningKeyConnection = exports.UpsertConnectionFromToken = exports.UpsertOAuth2ConnectionFromToken = exports.UpsertApiKeyConnectionFromToken = exports.ListConnectionKeysRequest = exports.GetOrDeleteConnectionFromTokenRequest = void 0;
const typebox_1 = __webpack_require__(10);
const connection_key_1 = __webpack_require__(154);
exports.GetOrDeleteConnectionFromTokenRequest = typebox_1.Type.Object({
    projectId: typebox_1.Type.String(),
    token: typebox_1.Type.String(),
    appName: typebox_1.Type.String()
});
exports.ListConnectionKeysRequest = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String({})),
});
exports.UpsertApiKeyConnectionFromToken = typebox_1.Type.Object({
    appCredentialId: typebox_1.Type.String(),
    apiKey: typebox_1.Type.String(),
    token: typebox_1.Type.String(),
});
exports.UpsertOAuth2ConnectionFromToken = typebox_1.Type.Object({
    appCredentialId: typebox_1.Type.String(),
    props: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Any()),
    token: typebox_1.Type.String(),
    code: typebox_1.Type.String(),
    redirectUrl: typebox_1.Type.String()
});
exports.UpsertConnectionFromToken = typebox_1.Type.Union([exports.UpsertApiKeyConnectionFromToken, exports.UpsertOAuth2ConnectionFromToken]);
exports.UpsertSigningKeyConnection = typebox_1.Type.Object({
    settings: typebox_1.Type.Object({
        type: typebox_1.Type.Literal(connection_key_1.ConnectionKeyType.SIGNING_KEY)
    }),
});


/***/ }),
/* 156 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(157), exports);


/***/ }),
/* 157 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManagedAuthnRequestBody = void 0;
const typebox_1 = __webpack_require__(10);
exports.ManagedAuthnRequestBody = typebox_1.Type.Object({
    externalAccessToken: typebox_1.Type.String(),
});


/***/ }),
/* 158 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(159), exports);


/***/ }),
/* 159 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListOAuth2AppRequest = exports.UpsertOAuth2AppRequest = exports.OAuthApp = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
exports.OAuthApp = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { pieceName: typebox_1.Type.String(), platformId: typebox_1.Type.String(), clientId: typebox_1.Type.String() }));
exports.UpsertOAuth2AppRequest = typebox_1.Type.Object({
    pieceName: typebox_1.Type.String(),
    clientId: typebox_1.Type.String(),
    clientSecret: typebox_1.Type.String()
});
exports.ListOAuth2AppRequest = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Number()),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 160 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(161), exports);
tslib_1.__exportStar(__webpack_require__(163), exports);
tslib_1.__exportStar(__webpack_require__(162), exports);


/***/ }),
/* 161 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OtpModel = exports.OtpState = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
const otp_type_1 = __webpack_require__(162);
var OtpState;
(function (OtpState) {
    OtpState["PENDING"] = "PENDING";
    OtpState["CONFIRMED"] = "CONFIRMED";
})(OtpState || (exports.OtpState = OtpState = {}));
exports.OtpModel = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { type: typebox_1.Type.Enum(otp_type_1.OtpType), userId: shared_1.ApId, value: typebox_1.Type.String(), state: typebox_1.Type.Enum(OtpState) }));


/***/ }),
/* 162 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OtpType = void 0;
var OtpType;
(function (OtpType) {
    OtpType["EMAIL_VERIFICATION"] = "EMAIL_VERIFICATION";
    OtpType["PASSWORD_RESET"] = "PASSWORD_RESET";
})(OtpType || (exports.OtpType = OtpType = {}));


/***/ }),
/* 163 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateOtpRequestBody = void 0;
const typebox_1 = __webpack_require__(10);
const otp_type_1 = __webpack_require__(162);
exports.CreateOtpRequestBody = typebox_1.Type.Object({
    email: typebox_1.Type.String(),
    type: typebox_1.Type.Enum(otp_type_1.OtpType),
});


/***/ }),
/* 164 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(165), exports);
tslib_1.__exportStar(__webpack_require__(167), exports);


/***/ }),
/* 165 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(166), exports);


/***/ }),
/* 166 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SignUpAndAcceptRequestBody = exports.ResetPasswordRequestBody = exports.VerifyEmailRequestBody = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
exports.VerifyEmailRequestBody = typebox_1.Type.Object({
    userId: shared_1.ApId,
    otp: typebox_1.Type.String(),
});
exports.ResetPasswordRequestBody = typebox_1.Type.Object({
    userId: shared_1.ApId,
    otp: typebox_1.Type.String(),
    newPassword: typebox_1.Type.String(),
});
exports.SignUpAndAcceptRequestBody = typebox_1.Type.Composite([
    typebox_1.Type.Omit(shared_1.SignUpRequest, ['referringUserId', 'email']),
    typebox_1.Type.Object({
        invitationToken: typebox_1.Type.String(),
    }),
]);


/***/ }),
/* 167 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rolePermissions = void 0;
const shared_1 = __webpack_require__(8);
exports.rolePermissions = {
    [shared_1.ProjectMemberRole.ADMIN]: [
        shared_1.Permission.READ_APP_CONNECTION,
        shared_1.Permission.WRITE_APP_CONNECTION,
        shared_1.Permission.READ_FLOW,
        shared_1.Permission.WRITE_FLOW,
        shared_1.Permission.UPDATE_FLOW_STATUS,
        shared_1.Permission.READ_PROJECT_MEMBER,
        shared_1.Permission.WRITE_PROJECT_MEMBER,
        shared_1.Permission.WRITE_INVITATION,
        shared_1.Permission.READ_INVITATION,
        shared_1.Permission.WRITE_RPOJECT,
        shared_1.Permission.WRITE_GIT_REPO,
        shared_1.Permission.READ_GIT_REPO,
        shared_1.Permission.RETRY_RUN,
        shared_1.Permission.READ_ISSUES,
        shared_1.Permission.WRITE_ISSUES
    ],
    [shared_1.ProjectMemberRole.EDITOR]: [
        shared_1.Permission.READ_APP_CONNECTION,
        shared_1.Permission.WRITE_APP_CONNECTION,
        shared_1.Permission.READ_FLOW,
        shared_1.Permission.WRITE_FLOW,
        shared_1.Permission.UPDATE_FLOW_STATUS,
        shared_1.Permission.READ_PROJECT_MEMBER,
        shared_1.Permission.READ_INVITATION,
        shared_1.Permission.WRITE_GIT_REPO,
        shared_1.Permission.READ_GIT_REPO,
        shared_1.Permission.RETRY_RUN,
        shared_1.Permission.READ_ISSUES,
        shared_1.Permission.WRITE_ISSUES
    ],
    [shared_1.ProjectMemberRole.OPERATOR]: [
        shared_1.Permission.READ_APP_CONNECTION,
        shared_1.Permission.WRITE_APP_CONNECTION,
        shared_1.Permission.READ_FLOW,
        shared_1.Permission.UPDATE_FLOW_STATUS,
        shared_1.Permission.READ_PROJECT_MEMBER,
        shared_1.Permission.READ_INVITATION,
        shared_1.Permission.READ_GIT_REPO,
        shared_1.Permission.RETRY_RUN,
        shared_1.Permission.READ_ISSUES,
    ],
    [shared_1.ProjectMemberRole.VIEWER]: [
        shared_1.Permission.READ_APP_CONNECTION,
        shared_1.Permission.READ_FLOW,
        shared_1.Permission.READ_PROJECT_MEMBER,
        shared_1.Permission.READ_INVITATION,
        shared_1.Permission.READ_ISSUES,
    ],
};


/***/ }),
/* 168 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(169), exports);
tslib_1.__exportStar(__webpack_require__(170), exports);


/***/ }),
/* 169 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateIssueRequestBody = exports.ListIssuesParams = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
const issue_dto_1 = __webpack_require__(170);
exports.ListIssuesParams = typebox_1.Type.Object({
    projectId: shared_1.ApId,
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
    limit: typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: 1, maximum: 100 })),
});
exports.UpdateIssueRequestBody = typebox_1.Type.Object({
    status: typebox_1.Type.Enum(issue_dto_1.IssueStatus),
});


/***/ }),
/* 170 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopulatedIssue = exports.Issue = exports.IssueStatus = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
var IssueStatus;
(function (IssueStatus) {
    IssueStatus["ONGOING"] = "ONGOING";
    IssueStatus["RESOLEVED"] = "RESOLEVED";
})(IssueStatus || (exports.IssueStatus = IssueStatus = {}));
exports.Issue = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { projectId: shared_1.ApId, flowId: shared_1.ApId, status: typebox_1.Type.Enum(IssueStatus), count: typebox_1.Type.Number(), lastOccurrence: typebox_1.Type.String() }));
exports.PopulatedIssue = typebox_1.Type.Composite([exports.Issue, typebox_1.Type.Object({
        flowDisplayName: typebox_1.Type.String()
    })]);


/***/ }),
/* 171 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(172), exports);
tslib_1.__exportStar(__webpack_require__(173), exports);


/***/ }),
/* 172 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Alert = exports.AlertChannel = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
var AlertChannel;
(function (AlertChannel) {
    AlertChannel["EMAIL"] = "EMAIL";
})(AlertChannel || (exports.AlertChannel = AlertChannel = {}));
exports.Alert = typebox_1.Type.Object(Object.assign(Object.assign({}, shared_1.BaseModelSchema), { projectId: shared_1.ApId, channel: typebox_1.Type.Enum(AlertChannel), receiver: typebox_1.Type.String({}) }));


/***/ }),
/* 173 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateAlertParams = exports.ListAlertsParams = void 0;
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
const alerts_dto_1 = __webpack_require__(172);
exports.ListAlertsParams = typebox_1.Type.Object({
    projectId: shared_1.ApId,
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
    limit: typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: 1, maximum: 100 })),
});
exports.CreateAlertParams = typebox_1.Type.Object({
    projectId: shared_1.ApId,
    channel: typebox_1.Type.Enum(alerts_dto_1.AlertChannel),
    receiver: typebox_1.Type.String({})
});


/***/ }),
/* 174 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(175), exports);


/***/ }),
/* 175 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(176), exports);
tslib_1.__exportStar(__webpack_require__(177), exports);
tslib_1.__exportStar(__webpack_require__(210), exports);
tslib_1.__exportStar(__webpack_require__(211), exports);
tslib_1.__exportStar(__webpack_require__(212), exports);
tslib_1.__exportStar(__webpack_require__(213), exports);
tslib_1.__exportStar(__webpack_require__(199), exports);
tslib_1.__exportStar(__webpack_require__(193), exports);
tslib_1.__exportStar(__webpack_require__(214), exports);


/***/ }),
/* 176 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createAction = exports.IAction = exports.ErrorHandlingOptionsParam = void 0;
const typebox_1 = __webpack_require__(10);
exports.ErrorHandlingOptionsParam = typebox_1.Type.Object({
    retryOnFailure: typebox_1.Type.Object({
        defaultValue: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
        hide: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    }),
    continueOnFailure: typebox_1.Type.Object({
        defaultValue: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
        hide: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    }),
});
class IAction {
    constructor(name, displayName, description, props, run, test, requireAuth, errorHandlingOptions) {
        this.name = name;
        this.displayName = displayName;
        this.description = description;
        this.props = props;
        this.run = run;
        this.test = test;
        this.requireAuth = requireAuth;
        this.errorHandlingOptions = errorHandlingOptions;
    }
}
exports.IAction = IAction;
const createAction = (params) => {
    var _a, _b, _c;
    return new IAction(params.name, params.displayName, params.description, params.props, params.run, (_a = params.test) !== null && _a !== void 0 ? _a : params.run, (_b = params.requireAuth) !== null && _b !== void 0 ? _b : true, (_c = params.errorHandlingOptions) !== null && _c !== void 0 ? _c : {
        continueOnFailure: {
            defaultValue: false,
        },
        retryOnFailure: {
            defaultValue: false,
        }
    });
};
exports.createAction = createAction;


/***/ }),
/* 177 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputPropertyMap = exports.PiecePropertyMap = exports.PieceProperty = exports.JsonProperty = exports.CustomAuthProperty = exports.SecretTextProperty = exports.BasicAuthProperty = exports.FileProperty = exports.OAuth2Property = exports.CustomAuthProps = exports.StaticDropdownProperty = exports.StaticMultiSelectDropdownProperty = exports.BasicAuthPropertyValue = exports.OAuth2AuthorizationMethod = exports.OAuth2Props = exports.ObjectProperty = exports.NumberProperty = exports.LongTextProperty = exports.DateTimeProperty = exports.CheckboxProperty = exports.BasePropertySchema = exports.ArrayProperty = exports.ShortTextProperty = exports.PieceAuthProperty = exports.OAuth2PropertyValue = exports.DropdownOption = exports.DynamicPropsValue = exports.PieceAuth = exports.Property = exports.PropertyType = exports.DynamicProp = exports.DynamicProperties = exports.DropdownState = exports.MultiSelectDropdownProperty = exports.DropdownProperty = exports.ApFile = void 0;
const input_1 = __webpack_require__(178);
const authentication_1 = __webpack_require__(204);
const typebox_1 = __webpack_require__(10);
// EXPORTED
var file_property_1 = __webpack_require__(191);
Object.defineProperty(exports, "ApFile", ({ enumerable: true, get: function () { return file_property_1.ApFile; } }));
var dropdown_prop_1 = __webpack_require__(186);
Object.defineProperty(exports, "DropdownProperty", ({ enumerable: true, get: function () { return dropdown_prop_1.DropdownProperty; } }));
Object.defineProperty(exports, "MultiSelectDropdownProperty", ({ enumerable: true, get: function () { return dropdown_prop_1.MultiSelectDropdownProperty; } }));
var common_1 = __webpack_require__(185);
Object.defineProperty(exports, "DropdownState", ({ enumerable: true, get: function () { return common_1.DropdownState; } }));
var dynamic_prop_1 = __webpack_require__(203);
Object.defineProperty(exports, "DynamicProperties", ({ enumerable: true, get: function () { return dynamic_prop_1.DynamicProperties; } }));
Object.defineProperty(exports, "DynamicProp", ({ enumerable: true, get: function () { return dynamic_prop_1.DynamicProp; } }));
var property_type_1 = __webpack_require__(181);
Object.defineProperty(exports, "PropertyType", ({ enumerable: true, get: function () { return property_type_1.PropertyType; } }));
var input_2 = __webpack_require__(178);
Object.defineProperty(exports, "Property", ({ enumerable: true, get: function () { return input_2.Property; } }));
var authentication_2 = __webpack_require__(204);
Object.defineProperty(exports, "PieceAuth", ({ enumerable: true, get: function () { return authentication_2.PieceAuth; } }));
var dynamic_prop_2 = __webpack_require__(203);
Object.defineProperty(exports, "DynamicPropsValue", ({ enumerable: true, get: function () { return dynamic_prop_2.DynamicPropsValue; } }));
var common_2 = __webpack_require__(185);
Object.defineProperty(exports, "DropdownOption", ({ enumerable: true, get: function () { return common_2.DropdownOption; } }));
var oauth2_prop_1 = __webpack_require__(209);
Object.defineProperty(exports, "OAuth2PropertyValue", ({ enumerable: true, get: function () { return oauth2_prop_1.OAuth2PropertyValue; } }));
var authentication_3 = __webpack_require__(204);
Object.defineProperty(exports, "PieceAuthProperty", ({ enumerable: true, get: function () { return authentication_3.PieceAuthProperty; } }));
var text_property_1 = __webpack_require__(179);
Object.defineProperty(exports, "ShortTextProperty", ({ enumerable: true, get: function () { return text_property_1.ShortTextProperty; } }));
var array_property_1 = __webpack_require__(183);
Object.defineProperty(exports, "ArrayProperty", ({ enumerable: true, get: function () { return array_property_1.ArrayProperty; } }));
var common_3 = __webpack_require__(180);
Object.defineProperty(exports, "BasePropertySchema", ({ enumerable: true, get: function () { return common_3.BasePropertySchema; } }));
var checkbox_property_1 = __webpack_require__(187);
Object.defineProperty(exports, "CheckboxProperty", ({ enumerable: true, get: function () { return checkbox_property_1.CheckboxProperty; } }));
var date_time_property_1 = __webpack_require__(190);
Object.defineProperty(exports, "DateTimeProperty", ({ enumerable: true, get: function () { return date_time_property_1.DateTimeProperty; } }));
var text_property_2 = __webpack_require__(179);
Object.defineProperty(exports, "LongTextProperty", ({ enumerable: true, get: function () { return text_property_2.LongTextProperty; } }));
var number_property_1 = __webpack_require__(182);
Object.defineProperty(exports, "NumberProperty", ({ enumerable: true, get: function () { return number_property_1.NumberProperty; } }));
var object_property_1 = __webpack_require__(188);
Object.defineProperty(exports, "ObjectProperty", ({ enumerable: true, get: function () { return object_property_1.ObjectProperty; } }));
var oauth2_prop_2 = __webpack_require__(209);
Object.defineProperty(exports, "OAuth2Props", ({ enumerable: true, get: function () { return oauth2_prop_2.OAuth2Props; } }));
var oauth2_prop_3 = __webpack_require__(209);
Object.defineProperty(exports, "OAuth2AuthorizationMethod", ({ enumerable: true, get: function () { return oauth2_prop_3.OAuth2AuthorizationMethod; } }));
var basic_auth_prop_1 = __webpack_require__(205);
Object.defineProperty(exports, "BasicAuthPropertyValue", ({ enumerable: true, get: function () { return basic_auth_prop_1.BasicAuthPropertyValue; } }));
var static_dropdown_1 = __webpack_require__(184);
Object.defineProperty(exports, "StaticMultiSelectDropdownProperty", ({ enumerable: true, get: function () { return static_dropdown_1.StaticMultiSelectDropdownProperty; } }));
var static_dropdown_2 = __webpack_require__(184);
Object.defineProperty(exports, "StaticDropdownProperty", ({ enumerable: true, get: function () { return static_dropdown_2.StaticDropdownProperty; } }));
var custom_auth_prop_1 = __webpack_require__(207);
Object.defineProperty(exports, "CustomAuthProps", ({ enumerable: true, get: function () { return custom_auth_prop_1.CustomAuthProps; } }));
var oauth2_prop_4 = __webpack_require__(209);
Object.defineProperty(exports, "OAuth2Property", ({ enumerable: true, get: function () { return oauth2_prop_4.OAuth2Property; } }));
var file_property_2 = __webpack_require__(191);
Object.defineProperty(exports, "FileProperty", ({ enumerable: true, get: function () { return file_property_2.FileProperty; } }));
var basic_auth_prop_2 = __webpack_require__(205);
Object.defineProperty(exports, "BasicAuthProperty", ({ enumerable: true, get: function () { return basic_auth_prop_2.BasicAuthProperty; } }));
var secret_text_property_1 = __webpack_require__(208);
Object.defineProperty(exports, "SecretTextProperty", ({ enumerable: true, get: function () { return secret_text_property_1.SecretTextProperty; } }));
var custom_auth_prop_2 = __webpack_require__(207);
Object.defineProperty(exports, "CustomAuthProperty", ({ enumerable: true, get: function () { return custom_auth_prop_2.CustomAuthProperty; } }));
var json_property_1 = __webpack_require__(189);
Object.defineProperty(exports, "JsonProperty", ({ enumerable: true, get: function () { return json_property_1.JsonProperty; } }));
exports.PieceProperty = typebox_1.Type.Union([input_1.InputProperty, authentication_1.PieceAuthProperty]);
exports.PiecePropertyMap = typebox_1.Type.Record(typebox_1.Type.String(), exports.PieceProperty);
exports.InputPropertyMap = typebox_1.Type.Record(typebox_1.Type.String(), input_1.InputProperty);


/***/ }),
/* 178 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Property = exports.InputProperty = void 0;
const typebox_1 = __webpack_require__(10);
const text_property_1 = __webpack_require__(179);
const number_property_1 = __webpack_require__(182);
const array_property_1 = __webpack_require__(183);
const object_property_1 = __webpack_require__(188);
const json_property_1 = __webpack_require__(189);
const date_time_property_1 = __webpack_require__(190);
const file_property_1 = __webpack_require__(191);
const property_type_1 = __webpack_require__(181);
const markdown_property_1 = __webpack_require__(192);
const checkbox_property_1 = __webpack_require__(187);
const static_dropdown_1 = __webpack_require__(184);
const processors_1 = __webpack_require__(193);
const validators_1 = __webpack_require__(199);
const dynamic_prop_1 = __webpack_require__(203);
const dropdown_prop_1 = __webpack_require__(186);
exports.InputProperty = typebox_1.Type.Union([
    text_property_1.ShortTextProperty,
    text_property_1.LongTextProperty,
    markdown_property_1.MarkDownProperty,
    checkbox_property_1.CheckboxProperty,
    static_dropdown_1.StaticDropdownProperty,
    static_dropdown_1.StaticMultiSelectDropdownProperty,
    dropdown_prop_1.DropdownProperty,
    dropdown_prop_1.MultiSelectDropdownProperty,
    dynamic_prop_1.DynamicProperties,
    number_property_1.NumberProperty,
    array_property_1.ArrayProperty,
    object_property_1.ObjectProperty,
    json_property_1.JsonProperty,
    date_time_property_1.DateTimeProperty,
    file_property_1.FileProperty,
]);
exports.Property = {
    ShortText(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.SHORT_TEXT, defaultProcessors: [processors_1.Processors.string], defaultValidators: [validators_1.Validators.string] });
    },
    Checkbox(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.CHECKBOX });
    },
    LongText(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.LONG_TEXT });
    },
    MarkDown(request) {
        return {
            displayName: 'Markdown',
            required: false,
            description: request.value,
            type: property_type_1.PropertyType.MARKDOWN,
            valueSchema: undefined,
        };
    },
    Number(request) {
        return Object.assign(Object.assign({}, request), { defaultProcessors: [processors_1.Processors.number], defaultValidators: [validators_1.Validators.number], valueSchema: undefined, type: property_type_1.PropertyType.NUMBER });
    },
    Json(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.JSON, defaultProcessors: [processors_1.Processors.json] });
    },
    Array(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.ARRAY });
    },
    Object(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.OBJECT });
    },
    Dropdown(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.DROPDOWN });
    },
    StaticDropdown(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.STATIC_DROPDOWN });
    },
    MultiSelectDropdown(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.MULTI_SELECT_DROPDOWN });
    },
    DynamicProperties(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.DYNAMIC });
    },
    StaticMultiSelectDropdown(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.STATIC_MULTI_SELECT_DROPDOWN });
    },
    DateTime(request) {
        return Object.assign(Object.assign({}, request), { defaultProcessors: [processors_1.Processors.datetime], defaultValidators: [validators_1.Validators.datetimeIso], valueSchema: undefined, type: property_type_1.PropertyType.DATE_TIME });
    },
    File(request) {
        return Object.assign(Object.assign({}, request), { defaultProcessors: [processors_1.Processors.file], defaultValidators: [validators_1.Validators.file], valueSchema: undefined, type: property_type_1.PropertyType.FILE });
    },
};


/***/ }),
/* 179 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LongTextProperty = exports.ShortTextProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.ShortTextProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.String(), property_type_1.PropertyType.SHORT_TEXT)
]);
exports.LongTextProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.String(), property_type_1.PropertyType.LONG_TEXT)
]);


/***/ }),
/* 180 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TPropertyValue = exports.BasePropertySchema = void 0;
const typebox_1 = __webpack_require__(10);
exports.BasePropertySchema = typebox_1.Type.Object({
    displayName: typebox_1.Type.String(),
    description: typebox_1.Type.Optional(typebox_1.Type.String())
});
const TPropertyValue = (T, propertyType) => typebox_1.Type.Object({
    type: typebox_1.Type.Literal(propertyType),
    required: typebox_1.Type.Boolean(),
    defaultValue: typebox_1.Type.Optional(typebox_1.Type.Any()),
});
exports.TPropertyValue = TPropertyValue;


/***/ }),
/* 181 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PropertyType = void 0;
var PropertyType;
(function (PropertyType) {
    PropertyType["SHORT_TEXT"] = "SHORT_TEXT";
    PropertyType["LONG_TEXT"] = "LONG_TEXT";
    PropertyType["MARKDOWN"] = "MARKDOWN";
    PropertyType["DROPDOWN"] = "DROPDOWN";
    PropertyType["STATIC_DROPDOWN"] = "STATIC_DROPDOWN";
    PropertyType["NUMBER"] = "NUMBER";
    PropertyType["CHECKBOX"] = "CHECKBOX";
    PropertyType["OAUTH2"] = "OAUTH2";
    PropertyType["SECRET_TEXT"] = "SECRET_TEXT";
    PropertyType["ARRAY"] = "ARRAY";
    PropertyType["OBJECT"] = "OBJECT";
    PropertyType["BASIC_AUTH"] = "BASIC_AUTH";
    PropertyType["JSON"] = "JSON";
    PropertyType["MULTI_SELECT_DROPDOWN"] = "MULTI_SELECT_DROPDOWN";
    PropertyType["STATIC_MULTI_SELECT_DROPDOWN"] = "STATIC_MULTI_SELECT_DROPDOWN";
    PropertyType["DYNAMIC"] = "DYNAMIC";
    PropertyType["CUSTOM_AUTH"] = "CUSTOM_AUTH";
    PropertyType["DATE_TIME"] = "DATE_TIME";
    PropertyType["FILE"] = "FILE";
})(PropertyType || (exports.PropertyType = PropertyType = {}));


/***/ }),
/* 182 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NumberProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.NumberProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Number(), property_type_1.PropertyType.NUMBER)
]);


/***/ }),
/* 183 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArrayProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
const text_property_1 = __webpack_require__(179);
const static_dropdown_1 = __webpack_require__(184);
const dropdown_prop_1 = __webpack_require__(186);
const checkbox_property_1 = __webpack_require__(187);
const number_property_1 = __webpack_require__(182);
exports.ArrayProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    typebox_1.Type.Object({
        properties: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Union([
            text_property_1.ShortTextProperty,
            text_property_1.LongTextProperty,
            static_dropdown_1.StaticDropdownProperty,
            dropdown_prop_1.MultiSelectDropdownProperty,
            static_dropdown_1.StaticMultiSelectDropdownProperty,
            checkbox_property_1.CheckboxProperty,
            number_property_1.NumberProperty
        ])))
    }),
    (0, common_1.TPropertyValue)(typebox_1.Type.Array(typebox_1.Type.Unknown()), property_type_1.PropertyType.ARRAY)
]);


/***/ }),
/* 184 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StaticMultiSelectDropdownProperty = exports.StaticDropdownProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const common_2 = __webpack_require__(185);
const property_type_1 = __webpack_require__(181);
exports.StaticDropdownProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    typebox_1.Type.Object({
        options: common_2.DropdownState
    }),
    (0, common_1.TPropertyValue)(typebox_1.Type.Unknown(), property_type_1.PropertyType.STATIC_DROPDOWN)
]);
exports.StaticMultiSelectDropdownProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    typebox_1.Type.Object({
        options: common_2.DropdownState
    }),
    (0, common_1.TPropertyValue)(typebox_1.Type.Array(typebox_1.Type.Unknown()), property_type_1.PropertyType.STATIC_MULTI_SELECT_DROPDOWN)
]);


/***/ }),
/* 185 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DropdownState = exports.DropdownOption = void 0;
const typebox_1 = __webpack_require__(10);
exports.DropdownOption = typebox_1.Type.Object({
    label: typebox_1.Type.String(),
    value: typebox_1.Type.Unknown(),
});
exports.DropdownState = typebox_1.Type.Object({
    disabled: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    placeholder: typebox_1.Type.Optional(typebox_1.Type.String()),
    options: typebox_1.Type.Array(exports.DropdownOption)
});


/***/ }),
/* 186 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiSelectDropdownProperty = exports.DropdownProperty = void 0;
const common_1 = __webpack_require__(180);
const typebox_1 = __webpack_require__(10);
const property_type_1 = __webpack_require__(181);
exports.DropdownProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Unknown(), property_type_1.PropertyType.DROPDOWN),
    typebox_1.Type.Object({
        refreshers: typebox_1.Type.Array(typebox_1.Type.String()),
    }),
]);
exports.MultiSelectDropdownProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Array(typebox_1.Type.Unknown()), property_type_1.PropertyType.MULTI_SELECT_DROPDOWN),
    typebox_1.Type.Object({
        refreshers: typebox_1.Type.Array(typebox_1.Type.String()),
    }),
]);


/***/ }),
/* 187 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckboxProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.CheckboxProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Boolean(), property_type_1.PropertyType.CHECKBOX)
]);


/***/ }),
/* 188 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.ObjectProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown()), property_type_1.PropertyType.OBJECT)
]);


/***/ }),
/* 189 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.JsonProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Union([typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown())]), property_type_1.PropertyType.JSON),
]);


/***/ }),
/* 190 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimeProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.DateTimeProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.String(), property_type_1.PropertyType.DATE_TIME)
]);


/***/ }),
/* 191 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileProperty = exports.ApFile = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
class ApFile {
    constructor(filename, data, extension) {
        this.filename = filename;
        this.data = data;
        this.extension = extension;
    }
    get base64() {
        return this.data.toString('base64');
    }
}
exports.ApFile = ApFile;
exports.FileProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Unknown(), property_type_1.PropertyType.FILE)
]);


/***/ }),
/* 192 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarkDownProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.MarkDownProperty = typebox_1.Type.Composite([
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Void(), property_type_1.PropertyType.MARKDOWN)
]);


/***/ }),
/* 193 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Processors = void 0;
const tslib_1 = __webpack_require__(1);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const timezone_1 = tslib_1.__importDefault(__webpack_require__(195));
const utc_1 = tslib_1.__importDefault(__webpack_require__(196));
const is_base64_1 = tslib_1.__importDefault(__webpack_require__(197));
const axios_1 = tslib_1.__importDefault(__webpack_require__(198));
const shared_1 = __webpack_require__(8);
const file_property_1 = __webpack_require__(191);
class Processors {
}
exports.Processors = Processors;
_a = Processors;
Processors.json = (property, value) => {
    if ((0, shared_1.isNil)(value)) {
        return value;
    }
    try {
        if (typeof value === 'object') {
            return value;
        }
        return JSON.parse(value);
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
};
Processors.number = (property, value) => {
    if ((0, shared_1.isNil)(value)) {
        return value;
    }
    if (value === '') {
        return NaN;
    }
    return Number(value);
};
Processors.string = (property, value) => {
    if ((0, shared_1.isNil)(value)) {
        return value;
    }
    if (typeof value === 'object') {
        return JSON.stringify(value);
    }
    return value.toString();
};
Processors.datetime = (property, value) => {
    dayjs_1.default.extend(utc_1.default);
    dayjs_1.default.extend(timezone_1.default);
    const dateTimeString = value;
    try {
        if (!dateTimeString)
            throw Error('Undefined input');
        return dayjs_1.default.tz(dateTimeString, 'UTC').toISOString();
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
};
Processors.file = (property, urlOrBase64) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // convertUrlOrBase64ToFile
    if ((0, shared_1.isNil)(urlOrBase64) || !(0, shared_1.isString)(urlOrBase64)) {
        return null;
    }
    // Get the file from the URL
    try {
        // Check if the string is a Base64 string
        if ((0, is_base64_1.default)(urlOrBase64, { allowMime: true })) {
            const matches = urlOrBase64.match(/^data:([A-Za-z-+/]+);base64,(.+)$/);
            let base64 = urlOrBase64;
            let contentType = null;
            if (matches && (matches === null || matches === void 0 ? void 0 : matches.length) === 3) {
                contentType = matches[1];
                base64 = matches[2];
                // You need to provide how you decide filename and extension in case of base64 string
                const filename = 'unknown';
                const extension = contentType.split('/')[1];
                return new file_property_1.ApFile(filename + '.' + extension, Buffer.from(base64, 'base64'), extension);
            }
        }
        const response = yield axios_1.default.head(urlOrBase64);
        const contentType = response.headers['content-type'];
        console.info(`Content type: ${contentType}`);
        // Check if content type is file
        if (!contentType ||
            !(contentType.startsWith('application/') ||
                contentType.startsWith('image') ||
                contentType.startsWith('audio') ||
                contentType.startsWith('video') ||
                contentType === 'application/octet-stream')) {
            return null;
        }
        const fileResponse = yield axios_1.default.get(urlOrBase64, {
            responseType: 'arraybuffer',
        });
        // Get filename and extension
        const filename = urlOrBase64.substring(urlOrBase64.lastIndexOf('/') + 1);
        const extension = filename.split('.').pop();
        // Return the ApFile object
        return new file_property_1.ApFile(filename, Buffer.from(fileResponse.data, 'binary'), extension);
    }
    catch (e) {
        console.error(e);
        return null;
    }
});


/***/ }),
/* 194 */
/***/ ((module) => {

module.exports = require("dayjs");

/***/ }),
/* 195 */
/***/ ((module) => {

module.exports = require("dayjs/plugin/timezone");

/***/ }),
/* 196 */
/***/ ((module) => {

module.exports = require("dayjs/plugin/utc");

/***/ }),
/* 197 */
/***/ ((module) => {

module.exports = require("is-base64");

/***/ }),
/* 198 */
/***/ ((module) => {

module.exports = require("axios");

/***/ }),
/* 199 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatErrorMessage = exports.Validators = exports.ValidationErrors = exports.ErrorMessages = void 0;
const tslib_1 = __webpack_require__(1);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const errors_1 = __webpack_require__(200);
Object.defineProperty(exports, "ErrorMessages", ({ enumerable: true, get: function () { return errors_1.ErrorMessages; } }));
const types_1 = __webpack_require__(201);
Object.defineProperty(exports, "ValidationErrors", ({ enumerable: true, get: function () { return types_1.ValidationErrors; } }));
const utils_1 = __webpack_require__(202);
Object.defineProperty(exports, "formatErrorMessage", ({ enumerable: true, get: function () { return utils_1.formatErrorMessage; } }));
const shared_1 = __webpack_require__(8);
class Validators {
    static pattern(regex) {
        return {
            type: types_1.ValidationInputType.STRING,
            fn: (property, processedValue, userInput) => {
                if ((0, shared_1.isEmpty)(processedValue))
                    return null;
                if (typeof regex === 'string') {
                    regex = new RegExp(regex);
                }
                return regex.test(String(processedValue))
                    ? null
                    : (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.REGEX, {
                        property: property === null || property === void 0 ? void 0 : property.displayName,
                    });
            },
        };
    }
    static prohibitPattern(regex) {
        return {
            type: types_1.ValidationInputType.STRING,
            fn: (property, processedValue, userInput) => {
                const patternValidator = Validators.pattern(regex);
                const patternError = patternValidator.fn(property, processedValue, userInput);
                return patternError
                    ? null
                    : (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.PROHIBIT_REGEX, {
                        property: property.displayName,
                    });
            },
        };
    }
    static maxLength(max) {
        return {
            type: types_1.ValidationInputType.STRING,
            fn: (property, processedValue, userInput) => {
                if ((0, shared_1.isEmpty)(processedValue))
                    return null;
                const isValid = processedValue.length <= max;
                if (!isValid) {
                    return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.MAX_LENGTH, {
                        userInput,
                        length: max.toString(),
                    });
                }
                return null;
            },
        };
    }
    static minLength(min) {
        return {
            type: types_1.ValidationInputType.STRING,
            fn: (property, processedValue, userInput) => {
                if ((0, shared_1.isEmpty)(processedValue))
                    return null;
                const isValid = processedValue.length >= min;
                if (!isValid) {
                    return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.MIN_LENGTH, {
                        userInput,
                        length: min.toString(),
                    });
                }
                return null;
            },
        };
    }
    static minValue(min) {
        return {
            type: types_1.ValidationInputType.NUMBER,
            fn: (property, processedValue, userInput) => {
                const isValid = Number(processedValue) >= min;
                if (isValid)
                    return null;
                return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.MIN, { userInput, min });
            },
        };
    }
    static maxValue(max) {
        return {
            type: types_1.ValidationInputType.NUMBER,
            fn: (property, processedValue, userInput) => {
                const isValid = Number(processedValue) <= max;
                if (isValid)
                    return null;
                return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.MAX, { userInput, max });
            },
        };
    }
    static minDate(min, unit = 'day', includeBounds = false) {
        return {
            type: types_1.ValidationInputType.DATE_TIME,
            fn: (property, processedValue, userInput) => {
                const dateValue = (0, dayjs_1.default)(processedValue);
                const minDate = (0, dayjs_1.default)(min);
                if (!minDate.isValid())
                    return null;
                const isValid = includeBounds
                    ? dateValue.isAfter(minDate, unit)
                    : dateValue.isSame(minDate, unit) && dateValue.isAfter(minDate, unit);
                if (isValid)
                    return null;
                return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.MIN_DATE, {
                    userInput: dateValue.toISOString(),
                    min: minDate.toISOString(),
                });
            },
        };
    }
    static maxDate(max, unit = 'day', includeBounds = false) {
        return {
            type: types_1.ValidationInputType.DATE_TIME,
            fn: (property, processedValue, userInput) => {
                const dateValue = (0, dayjs_1.default)(processedValue);
                const maxDate = (0, dayjs_1.default)(max);
                if (!maxDate.isValid())
                    return null;
                const isValid = includeBounds
                    ? dateValue.isBefore(maxDate, unit)
                    : dateValue.isSame(maxDate, unit) &&
                        dateValue.isBefore(maxDate, unit);
                if (isValid)
                    return null;
                return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.MAX_DATE, {
                    userInput: dateValue.toISOString(),
                    max: maxDate.toISOString(),
                });
            },
        };
    }
    static inRange(min, max) {
        return {
            type: types_1.ValidationInputType.NUMBER,
            fn: (property, processedValue, userInput) => {
                const numericValue = Number(processedValue);
                const isValid = numericValue <= max && numericValue >= min;
                if (isValid)
                    return null;
                return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.IN_RANGE, {
                    userInput,
                    min,
                    max,
                });
            },
        };
    }
    static inDateRange(min, max, unit = 'day', includeBounds = false) {
        return {
            type: types_1.ValidationInputType.DATE_TIME,
            fn: (property, processedValue) => {
                const dateValue = (0, dayjs_1.default)(processedValue);
                const minDate = (0, dayjs_1.default)(min);
                const maxDate = (0, dayjs_1.default)(max);
                const validRanges = minDate.isValid() && maxDate.isValid();
                if (!validRanges)
                    return null;
                const isValid = includeBounds
                    ? (dateValue.isBefore(maxDate, unit) ||
                        dateValue.isSame(maxDate, unit)) &&
                        (dateValue.isAfter(minDate, unit) ||
                            dateValue.isSame(minDate, unit))
                    : dateValue.isBefore(maxDate, unit) &&
                        dateValue.isAfter(minDate, unit);
                if (isValid)
                    return null;
                return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.IN_RANGE, {
                    userInput: dateValue.toISOString(),
                    min: minDate.toISOString(),
                    max: maxDate.toISOString(),
                });
            },
        };
    }
    static oneOf(values) {
        return {
            type: types_1.ValidationInputType.ANY,
            fn: (property, processedValue, userInput) => {
                if (Array.isArray(values)) {
                    return values.includes(processedValue)
                        ? null
                        : (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.ONE_OF, {
                            userInput,
                            choices: values,
                        });
                }
                return null;
            },
        };
    }
    static requireKeys(values) {
        return {
            type: types_1.ValidationInputType.OBJECT,
            fn: (property, processedValue, userInput) => {
                if (Array.isArray(values)) {
                    const missingKeys = values.filter((key) => !processedValue[key]);
                    return missingKeys.length
                        ? (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.REQUIRE_KEYS, {
                            userInput,
                            keys: missingKeys.join(', '),
                        })
                        : null;
                }
                return null;
            },
        };
    }
}
exports.Validators = Validators;
Validators.number = {
    type: types_1.ValidationInputType.NUMBER,
    fn: (property, processedValue, userInput) => {
        if (isNaN(processedValue)) {
            return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.NUMBER, { userInput });
        }
        return null;
    },
};
Validators.string = {
    type: types_1.ValidationInputType.STRING,
    fn: (property, processedValue, userInput) => {
        if (!(0, shared_1.isString)(processedValue)) {
            return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.STRING, { userInput });
        }
        return null;
    }
};
Validators.nonZero = {
    type: types_1.ValidationInputType.NUMBER,
    fn: (property, processedValue, userInput) => {
        if (processedValue === 0) {
            return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.NON_ZERO, { userInput });
        }
        return null;
    },
};
Validators.integer = {
    type: types_1.ValidationInputType.NUMBER,
    fn: (property, processedValue, userInput) => {
        if (!Number.isInteger(processedValue)) {
            return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.WHOLE_NUMBER, { userInput });
        }
        return null;
    },
};
Validators.image = {
    type: types_1.ValidationInputType.FILE,
    fn: (property, processedValue, userInput) => {
        const allowedType = ['jpg', 'png', 'gif', 'webp', 'flif', 'cr2', 'tif', 'bmp', 'jxr', 'psd', 'ico', 'bpg', 'jp2', 'jpm', 'jpx', 'heic', 'cur', 'dcm', 'avif'];
        const ext = processedValue.extension;
        return allowedType.includes(ext !== null && ext !== void 0 ? ext : '')
            ? null
            : (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.IMAGE, { property: property });
    },
};
Validators.email = {
    type: types_1.ValidationInputType.STRING,
    fn: (property, processedValue, userInput) => {
        const pattern = new RegExp('^(([^<>()\\[\\].,;:\\s@"]+(\\.[^<>()\\[\\].,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z-0-9]+\\.)+[a-zA-Z]{2,}))$');
        if ((0, shared_1.isEmpty)(processedValue)) {
            return null;
        }
        if ((0, shared_1.isEmpty)(processedValue))
            return null;
        return pattern.test(String(processedValue))
            ? null
            : (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.EMAIL, { userInput });
    },
};
Validators.url = {
    type: types_1.ValidationInputType.STRING,
    fn: (property, processedValue, userInput) => {
        const pattern = new RegExp('^((https?|ftp|file)://)?' + // protocol
            '((([a-zA-Z\\d]([a-zA-Z\\d-]*[a-zA-Z\\d])*)\\.)+[a-zA-Z]{2,}|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
            '(\\:\\d+)?(\\/[-a-zA-Z\\d%_.~+]*)*' + // port and path
            '(\\?[;&a-zA-Z\\d%_.~+=-]*)?' + // query string
            '(\\#[-a-zA-Z\\d_]*)?$' // fragment locator
        );
        if ((0, shared_1.isEmpty)(processedValue))
            return null;
        return pattern.test(String(processedValue))
            ? null
            : (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.URL, { userInput });
    },
};
Validators.datetimeIso = {
    type: types_1.ValidationInputType.DATE_TIME,
    fn: (property, processedValue, userInput) => {
        if (property.required && (0, shared_1.isNil)(processedValue)) {
            return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.ISO_DATE, { userInput });
        }
        return null;
    },
};
Validators.file = {
    type: types_1.ValidationInputType.FILE,
    fn: (property, processedValue, userInput) => {
        if (property.required && (0, shared_1.isNil)(processedValue)) {
            return (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.FILE, { userInput });
        }
        return null;
    },
};
Validators.phoneNumber = {
    type: types_1.ValidationInputType.STRING,
    fn: (property, processedValue, userInput) => {
        const pattern = new RegExp('^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$');
        if ((0, shared_1.isEmpty)(processedValue))
            return null;
        return pattern.test(String(processedValue))
            ? null
            : (0, utils_1.formatErrorMessage)(errors_1.ErrorMessages.PHONE_NUMBER, { userInput });
    },
};


/***/ }),
/* 200 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorMessages = void 0;
var ErrorMessages;
(function (ErrorMessages) {
    ErrorMessages["REQUIRED"] = "Expected value, but found value: {userInput}";
    ErrorMessages["EMAIL"] = "Invalid Email format: {userInput}";
    ErrorMessages["ISO_DATE"] = "Expected ISO string, but found value: {userInput}";
    ErrorMessages["FILE"] = "Expected file url or base64 with mimeType, but found value: {userInput}";
    ErrorMessages["NUMBER"] = "Expected number, but found value: {userInput}";
    ErrorMessages["STRING"] = "Expected string, but found value: {userInput}";
    ErrorMessages["WHOLE_NUMBER"] = "Expected whole number, but found value: {userInput}";
    ErrorMessages["MAX_LENGTH"] = "The value: {userInput} may not be greater than {length} characters";
    ErrorMessages["MIN_LENGTH"] = "The value: {userInput} must be at least {length} characters";
    ErrorMessages["MAX"] = "The value: {userInput} must be {max} or less";
    ErrorMessages["MIN"] = "The value: {userInput} must be {min} or more";
    ErrorMessages["MIN_DATE"] = "The date {userInput} must be after {min}";
    ErrorMessages["MAX_DATE"] = "The date {userInput} must be before {max}";
    ErrorMessages["IN_RANGE"] = "The value: {userInput} must be at least {min} and less than or equal {max}";
    ErrorMessages["IN_DATE_RANGE"] = "The date {userInput} must be between {min} and {max}";
    ErrorMessages["URL"] = "The value: {userInput} is not a valid URL";
    ErrorMessages["REGEX"] = "The value: {userInput} format is invalid";
    ErrorMessages["PROHIBIT_REGEX"] = "The value: {userInput} is not allowed";
    ErrorMessages["IMAGE"] = "The {property} value must be an image";
    ErrorMessages["ONE_OF"] = "The {userInput} is not a valid value, valid choices are: {choices}";
    ErrorMessages["REQUIRE_KEYS"] = "The following keys are required: {keys}";
    ErrorMessages["SIZE"] = "The {property} size must be less than 0:{size}KB";
    ErrorMessages["NON_ZERO"] = "The value: {userInput} must be a non-zero value";
    ErrorMessages["PHONE_NUMBER"] = "The phone number entered is not a valid phone number";
})(ErrorMessages || (exports.ErrorMessages = ErrorMessages = {}));


/***/ }),
/* 201 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidationInputType = void 0;
var ValidationInputType;
(function (ValidationInputType) {
    ValidationInputType["NUMBER"] = "NUMBER";
    ValidationInputType["STRING"] = "STRING";
    ValidationInputType["FILE"] = "FILE";
    ValidationInputType["ANY"] = "ANY";
    ValidationInputType["DATE_TIME"] = "DATE_TIME";
    ValidationInputType["OBJECT"] = "OBJECT";
    ValidationInputType["ARRAY"] = "ARRAY";
    ValidationInputType["JSON"] = "JSON";
})(ValidationInputType || (exports.ValidationInputType = ValidationInputType = {}));


/***/ }),
/* 202 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatErrorMessage = void 0;
function formatErrorMessage(errorMessage, tokens) {
    let formattedMessage = errorMessage;
    for (const key in tokens) {
        formattedMessage = formattedMessage.replace(`{${key}}`, tokens[key]);
    }
    return formattedMessage;
}
exports.formatErrorMessage = formatErrorMessage;


/***/ }),
/* 203 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DynamicProperties = exports.DynamicPropsValue = exports.DynamicProp = void 0;
const typebox_1 = __webpack_require__(10);
const static_dropdown_1 = __webpack_require__(184);
const text_property_1 = __webpack_require__(179);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.DynamicProp = typebox_1.Type.Union([
    text_property_1.ShortTextProperty,
    static_dropdown_1.StaticDropdownProperty,
    static_dropdown_1.StaticMultiSelectDropdownProperty,
]);
exports.DynamicPropsValue = typebox_1.Type.Record(typebox_1.Type.String(), exports.DynamicProp);
exports.DynamicProperties = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        refreshers: typebox_1.Type.Array(typebox_1.Type.String()),
    }),
    common_1.BasePropertySchema,
    (0, common_1.TPropertyValue)(typebox_1.Type.Unknown(), property_type_1.PropertyType.DYNAMIC),
]);


/***/ }),
/* 204 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceAuth = exports.PieceAuthProperty = void 0;
const typebox_1 = __webpack_require__(10);
const basic_auth_prop_1 = __webpack_require__(205);
const custom_auth_prop_1 = __webpack_require__(207);
const secret_text_property_1 = __webpack_require__(208);
const property_type_1 = __webpack_require__(181);
const oauth2_prop_1 = __webpack_require__(209);
exports.PieceAuthProperty = typebox_1.Type.Union([
    basic_auth_prop_1.BasicAuthProperty,
    custom_auth_prop_1.CustomAuthProperty,
    oauth2_prop_1.OAuth2Property,
    secret_text_property_1.SecretTextProperty,
]);
exports.PieceAuth = {
    SecretText(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.SECRET_TEXT, required: true });
    },
    OAuth2(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.OAUTH2, displayName: 'Connection' });
    },
    BasicAuth(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.BASIC_AUTH, displayName: 'Connection', required: true });
    },
    CustomAuth(request) {
        return Object.assign(Object.assign({}, request), { valueSchema: undefined, type: property_type_1.PropertyType.CUSTOM_AUTH, displayName: 'Connection' });
    },
    None() {
        return undefined;
    },
};


/***/ }),
/* 205 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BasicAuthProperty = exports.BasicAuthPropertyValue = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
const common_2 = __webpack_require__(206);
exports.BasicAuthPropertyValue = typebox_1.Type.Object({
    username: typebox_1.Type.String(),
    password: typebox_1.Type.String(),
});
exports.BasicAuthProperty = typebox_1.Type.Composite([
    common_2.BasePieceAuthSchema,
    typebox_1.Type.Object({
        username: typebox_1.Type.Object({
            displayName: typebox_1.Type.String(),
            description: typebox_1.Type.Optional(typebox_1.Type.String())
        }),
        password: typebox_1.Type.Object({
            displayName: typebox_1.Type.String(),
            description: typebox_1.Type.Optional(typebox_1.Type.String())
        })
    }),
    (0, common_1.TPropertyValue)(exports.BasicAuthPropertyValue, property_type_1.PropertyType.BASIC_AUTH)
]);


/***/ }),
/* 206 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BasePieceAuthSchema = void 0;
const typebox_1 = __webpack_require__(10);
exports.BasePieceAuthSchema = typebox_1.Type.Object({
    displayName: typebox_1.Type.String(),
    description: typebox_1.Type.Optional(typebox_1.Type.String()),
});


/***/ }),
/* 207 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomAuthProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
const text_property_1 = __webpack_require__(179);
const number_property_1 = __webpack_require__(182);
const checkbox_property_1 = __webpack_require__(187);
const static_dropdown_1 = __webpack_require__(184);
const common_2 = __webpack_require__(206);
const CustomAuthProps = typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Union([
    text_property_1.ShortTextProperty,
    text_property_1.LongTextProperty,
    number_property_1.NumberProperty,
    checkbox_property_1.CheckboxProperty,
    static_dropdown_1.StaticDropdownProperty,
]));
exports.CustomAuthProperty = typebox_1.Type.Composite([
    common_2.BasePieceAuthSchema,
    typebox_1.Type.Object({
        props: CustomAuthProps,
    }),
    (0, common_1.TPropertyValue)(typebox_1.Type.Unknown(), property_type_1.PropertyType.CUSTOM_AUTH)
]);


/***/ }),
/* 208 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SecretTextProperty = void 0;
const typebox_1 = __webpack_require__(10);
const common_1 = __webpack_require__(206);
const common_2 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
exports.SecretTextProperty = typebox_1.Type.Composite([
    common_1.BasePieceAuthSchema,
    (0, common_2.TPropertyValue)(typebox_1.Type.Object({
        auth: typebox_1.Type.String()
    }), property_type_1.PropertyType.SECRET_TEXT)
]);


/***/ }),
/* 209 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OAuth2Property = exports.OAuth2PropertyValue = exports.OAuth2Props = exports.OAuth2AuthorizationMethod = void 0;
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const text_property_1 = __webpack_require__(179);
const secret_text_property_1 = __webpack_require__(208);
const common_1 = __webpack_require__(206);
const common_2 = __webpack_require__(180);
const property_type_1 = __webpack_require__(181);
const static_dropdown_1 = __webpack_require__(184);
var OAuth2AuthorizationMethod;
(function (OAuth2AuthorizationMethod) {
    OAuth2AuthorizationMethod["HEADER"] = "HEADER";
    OAuth2AuthorizationMethod["BODY"] = "BODY";
})(OAuth2AuthorizationMethod || (exports.OAuth2AuthorizationMethod = OAuth2AuthorizationMethod = {}));
const OAuthProp = typebox_1.Type.Union([
    text_property_1.ShortTextProperty,
    secret_text_property_1.SecretTextProperty,
    static_dropdown_1.StaticDropdownProperty,
]);
exports.OAuth2Props = typebox_1.Type.Record(typebox_1.Type.String(), OAuthProp);
const OAuth2ExtraProps = typebox_1.Type.Object({
    props: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), OAuthProp)),
    authUrl: typebox_1.Type.String(),
    tokenUrl: typebox_1.Type.String(),
    scope: typebox_1.Type.Array(typebox_1.Type.String()),
    pkce: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    authorizationMethod: typebox_1.Type.Optional(typebox_1.Type.Enum(OAuth2AuthorizationMethod)),
    grantType: typebox_1.Type.Optional(typebox_1.Type.Enum(shared_1.OAuth2GrantType)),
    extra: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Unknown()))
});
exports.OAuth2PropertyValue = typebox_1.Type.Object({
    access_token: typebox_1.Type.String(),
    props: typebox_1.Type.Optional(exports.OAuth2Props),
    data: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Any())
});
exports.OAuth2Property = typebox_1.Type.Composite([
    common_1.BasePieceAuthSchema,
    OAuth2ExtraProps,
    (0, common_2.TPropertyValue)(exports.OAuth2PropertyValue, property_type_1.PropertyType.OAUTH2)
]);


/***/ }),
/* 210 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTrigger = exports.ITrigger = exports.WebhookRenewConfiguration = exports.WebhookHandshakeConfiguration = exports.WebhookRenewStrategy = exports.WebhookHandshakeStrategy = exports.TriggerStrategy = exports.DEDUPE_KEY_PROPERTY = void 0;
const tslib_1 = __webpack_require__(1);
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
exports.DEDUPE_KEY_PROPERTY = '_dedupe_key';
var TriggerStrategy;
(function (TriggerStrategy) {
    TriggerStrategy["POLLING"] = "POLLING";
    TriggerStrategy["WEBHOOK"] = "WEBHOOK";
    TriggerStrategy["APP_WEBHOOK"] = "APP_WEBHOOK";
})(TriggerStrategy || (exports.TriggerStrategy = TriggerStrategy = {}));
var WebhookHandshakeStrategy;
(function (WebhookHandshakeStrategy) {
    WebhookHandshakeStrategy["NONE"] = "NONE";
    WebhookHandshakeStrategy["HEADER_PRESENT"] = "HEADER_PRESENT";
    WebhookHandshakeStrategy["QUERY_PRESENT"] = "QUERY_PRESENT";
    WebhookHandshakeStrategy["BODY_PARAM_PRESENT"] = "BODY_PARAM_PRESENT";
})(WebhookHandshakeStrategy || (exports.WebhookHandshakeStrategy = WebhookHandshakeStrategy = {}));
var WebhookRenewStrategy;
(function (WebhookRenewStrategy) {
    WebhookRenewStrategy["CRON"] = "CRON";
    WebhookRenewStrategy["NONE"] = "NONE";
})(WebhookRenewStrategy || (exports.WebhookRenewStrategy = WebhookRenewStrategy = {}));
exports.WebhookHandshakeConfiguration = typebox_1.Type.Object({
    strategy: typebox_1.Type.Enum(WebhookHandshakeStrategy),
    paramName: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.WebhookRenewConfiguration = typebox_1.Type.Union([
    typebox_1.Type.Object({
        strategy: typebox_1.Type.Literal(WebhookRenewStrategy.CRON),
        cronExpression: typebox_1.Type.String(),
    }),
    typebox_1.Type.Object({
        strategy: typebox_1.Type.Literal(WebhookRenewStrategy.NONE),
    }),
]);
class ITrigger {
    constructor(name, displayName, description, props, type, handshakeConfiguration, onHandshake, renewConfiguration, onRenew, onEnable, onDisable, run, test, sampleData, testStrategy) {
        this.name = name;
        this.displayName = displayName;
        this.description = description;
        this.props = props;
        this.type = type;
        this.handshakeConfiguration = handshakeConfiguration;
        this.onHandshake = onHandshake;
        this.renewConfiguration = renewConfiguration;
        this.onRenew = onRenew;
        this.onEnable = onEnable;
        this.onDisable = onDisable;
        this.run = run;
        this.test = test;
        this.sampleData = sampleData;
        this.testStrategy = testStrategy;
    }
}
exports.ITrigger = ITrigger;
// TODO refactor and extract common logic
const createTrigger = (params) => {
    var _a, _b, _c, _d, _e, _f, _g;
    switch (params.type) {
        case TriggerStrategy.WEBHOOK:
            return new ITrigger(params.name, params.displayName, params.description, params.props, params.type, (_a = params.handshakeConfiguration) !== null && _a !== void 0 ? _a : { strategy: WebhookHandshakeStrategy.NONE }, (_b = params.onHandshake) !== null && _b !== void 0 ? _b : (() => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return ({ status: 200 }); })), (_c = params.renewConfiguration) !== null && _c !== void 0 ? _c : { strategy: WebhookRenewStrategy.NONE }, (_d = params.onRenew) !== null && _d !== void 0 ? _d : (() => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return Promise.resolve(); })), params.onEnable, params.onDisable, params.run, (_e = params.test) !== null && _e !== void 0 ? _e : (() => Promise.resolve([params.sampleData])), params.sampleData, params.test ? shared_1.TriggerTestStrategy.TEST_FUNCTION : shared_1.TriggerTestStrategy.SIMULATION);
        case TriggerStrategy.POLLING:
            return new ITrigger(params.name, params.displayName, params.description, params.props, params.type, { strategy: WebhookHandshakeStrategy.NONE }, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return ({ status: 200 }); }), { strategy: WebhookRenewStrategy.NONE }, (() => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return Promise.resolve(); })), params.onEnable, params.onDisable, params.run, (_f = params.test) !== null && _f !== void 0 ? _f : (() => Promise.resolve([params.sampleData])), params.sampleData, shared_1.TriggerTestStrategy.TEST_FUNCTION);
        case TriggerStrategy.APP_WEBHOOK:
            return new ITrigger(params.name, params.displayName, params.description, params.props, params.type, { strategy: WebhookHandshakeStrategy.NONE }, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return ({ status: 200 }); }), { strategy: WebhookRenewStrategy.NONE }, (() => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return Promise.resolve(); })), params.onEnable, params.onDisable, params.run, (_g = params.test) !== null && _g !== void 0 ? _g : (() => Promise.resolve([params.sampleData])), params.sampleData, shared_1.TriggerTestStrategy.TEST_FUNCTION);
    }
};
exports.createTrigger = createTrigger;


/***/ }),
/* 211 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StoreScope = void 0;
var StoreScope;
(function (StoreScope) {
    // Collection were deprecated in favor of project
    StoreScope["PROJECT"] = "COLLECTION";
    StoreScope["FLOW"] = "FLOW";
})(StoreScope || (exports.StoreScope = StoreScope = {}));


/***/ }),
/* 212 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPiece = exports.Piece = void 0;
class Piece {
    constructor(displayName, logoUrl, authors, events, actions, triggers, categories, auth, minimumSupportedRelease, maximumSupportedRelease, description = '') {
        this.displayName = displayName;
        this.logoUrl = logoUrl;
        this.authors = authors;
        this.events = events;
        this.categories = categories;
        this.auth = auth;
        this.minimumSupportedRelease = minimumSupportedRelease;
        this.maximumSupportedRelease = maximumSupportedRelease;
        this.description = description;
        this._actions = {};
        this._triggers = {};
        actions.forEach((action) => (this._actions[action.name] = action));
        triggers.forEach((trigger) => (this._triggers[trigger.name] = trigger));
    }
    metadata() {
        return {
            displayName: this.displayName,
            logoUrl: this.logoUrl,
            actions: this._actions,
            triggers: this._triggers,
            categories: this.categories,
            description: this.description,
            authors: this.authors,
            auth: this.auth,
            minimumSupportedRelease: this.minimumSupportedRelease,
            maximumSupportedRelease: this.maximumSupportedRelease,
        };
    }
    getAction(actionName) {
        return this._actions[actionName];
    }
    getTrigger(triggerName) {
        return this._triggers[triggerName];
    }
    actions() {
        return this._actions;
    }
    triggers() {
        return this._triggers;
    }
}
exports.Piece = Piece;
const createPiece = (params) => {
    var _a, _b, _c;
    return new Piece(params.displayName, params.logoUrl, (_a = params.authors) !== null && _a !== void 0 ? _a : [], params.events, params.actions, params.triggers, (_b = params.categories) !== null && _b !== void 0 ? _b : [], (_c = params.auth) !== null && _c !== void 0 ? _c : undefined, params.minimumSupportedRelease, params.maximumSupportedRelease, params.description);
};
exports.createPiece = createPiece;


/***/ }),
/* 213 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceMetadataModelSummary = exports.PieceMetadataModel = exports.PieceMetadataSummary = exports.PieceMetadata = exports.TriggerBase = exports.ActionBase = exports.PieceBase = void 0;
const property_1 = __webpack_require__(177);
const trigger_1 = __webpack_require__(210);
const action_1 = __webpack_require__(176);
const authentication_1 = __webpack_require__(204);
const typebox_1 = __webpack_require__(10);
const shared_1 = __webpack_require__(8);
exports.PieceBase = typebox_1.Type.Object({
    id: typebox_1.Type.Optional(typebox_1.Type.String()),
    name: typebox_1.Type.String(),
    displayName: typebox_1.Type.String(),
    logoUrl: typebox_1.Type.String(),
    description: typebox_1.Type.String(),
    projectId: typebox_1.Type.Optional(typebox_1.Type.String()),
    authors: typebox_1.Type.Array(typebox_1.Type.String()),
    platformId: typebox_1.Type.Optional(typebox_1.Type.String()),
    directoryPath: typebox_1.Type.Optional(typebox_1.Type.String()),
    auth: typebox_1.Type.Optional(authentication_1.PieceAuthProperty),
    version: typebox_1.Type.String(),
    categories: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Enum(shared_1.PieceCategory))),
    minimumSupportedRelease: typebox_1.Type.Optional(typebox_1.Type.String()),
    maximumSupportedRelease: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.ActionBase = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    displayName: typebox_1.Type.String(),
    description: typebox_1.Type.String(),
    props: property_1.PiecePropertyMap,
    requireAuth: typebox_1.Type.Boolean(),
    errorHandlingOptions: typebox_1.Type.Optional(action_1.ErrorHandlingOptionsParam),
});
exports.TriggerBase = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.ActionBase, ["requireAuth"]),
    typebox_1.Type.Object({
        type: typebox_1.Type.Enum(trigger_1.TriggerStrategy),
        sampleData: typebox_1.Type.Unknown(),
        handshakeConfiguration: typebox_1.Type.Optional(trigger_1.WebhookHandshakeConfiguration),
        renewConfiguration: typebox_1.Type.Optional(trigger_1.WebhookRenewConfiguration),
        testStrategy: typebox_1.Type.Enum(shared_1.TriggerTestStrategy),
    })
]);
exports.PieceMetadata = typebox_1.Type.Composite([
    exports.PieceBase,
    typebox_1.Type.Object({
        actions: typebox_1.Type.Record(typebox_1.Type.String(), exports.ActionBase),
        triggers: typebox_1.Type.Record(typebox_1.Type.String(), exports.TriggerBase),
    })
]);
exports.PieceMetadataSummary = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.PieceMetadata, ["actions", "triggers"]),
    typebox_1.Type.Object({
        actions: typebox_1.Type.Number(),
        triggers: typebox_1.Type.Number(),
        suggestedActions: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
            name: typebox_1.Type.String(),
            displayName: typebox_1.Type.String(),
        }))),
        suggestedTriggers: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
            name: typebox_1.Type.String(),
            displayName: typebox_1.Type.String(),
        }))),
    })
]);
const PiecePackageMetadata = typebox_1.Type.Object({
    projectUsage: typebox_1.Type.Number(),
    tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    pieceType: typebox_1.Type.Enum(shared_1.PieceType),
    packageType: typebox_1.Type.Enum(shared_1.PackageType),
    archiveId: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.PieceMetadataModel = typebox_1.Type.Composite([
    exports.PieceMetadata,
    PiecePackageMetadata,
]);
exports.PieceMetadataModelSummary = typebox_1.Type.Composite([
    exports.PieceMetadataSummary,
    PiecePackageMetadata,
]);


/***/ }),
/* 214 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 215 */
/***/ ((module) => {

module.exports = require("@fastify/swagger");

/***/ }),
/* 216 */
/***/ ((module) => {

module.exports = require("@socket.io/redis-adapter");

/***/ }),
/* 217 */
/***/ ((module) => {

module.exports = require("fastify-socket.io");

/***/ }),
/* 218 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setPlatformOAuthService = exports.oauth2Handler = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const cloud_oauth2_service_1 = __webpack_require__(219);
const credentials_oauth2_service_1 = __webpack_require__(220);
const unimplementedService = {
    claim: (_req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        throw new Error('Unimplemented platform oauth');
    }),
    refresh: (_req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        throw new Error('Unimplemented platform oauth');
    }),
};
exports.oauth2Handler = {
    [shared_1.AppConnectionType.CLOUD_OAUTH2]: cloud_oauth2_service_1.cloudOAuth2Service,
    [shared_1.AppConnectionType.OAUTH2]: credentials_oauth2_service_1.credentialsOauth2Service,
    [shared_1.AppConnectionType.PLATFORM_OAUTH2]: unimplementedService,
};
function setPlatformOAuthService({ service, }) {
    exports.oauth2Handler[shared_1.AppConnectionType.PLATFORM_OAUTH2] = service;
}
exports.setPlatformOAuthService = setPlatformOAuthService;


/***/ }),
/* 219 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cloudOAuth2Service = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const axios_1 = tslib_1.__importDefault(__webpack_require__(198));
exports.cloudOAuth2Service = {
    refresh,
    claim,
};
function refresh(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ pieceName, connectionValue, }) {
        const requestBody = {
            refreshToken: connectionValue.refresh_token,
            pieceName,
            clientId: connectionValue.client_id,
            edition: server_shared_1.system.getEdition(),
            authorizationMethod: connectionValue.authorization_method,
            tokenUrl: connectionValue.token_url,
        };
        const response = (yield axios_1.default.post('https://secrets.activepieces.com/refresh', requestBody, {
            timeout: 10000,
        })).data;
        return Object.assign(Object.assign(Object.assign({}, connectionValue), response), { props: connectionValue.props, type: shared_1.AppConnectionType.CLOUD_OAUTH2 });
    });
}
function claim(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ request, pieceName, }) {
        try {
            const cloudRequest = {
                code: request.code,
                codeVerifier: request.codeVerifier,
                authorizationMethod: request.authorizationMethod,
                clientId: request.clientId,
                tokenUrl: request.tokenUrl,
                pieceName,
                edition: server_shared_1.system.getEdition(),
            };
            const value = (yield axios_1.default.post('https://secrets.activepieces.com/claim', cloudRequest, {
                timeout: 10000,
            })).data;
            return Object.assign(Object.assign({}, value), { token_url: request.tokenUrl, props: request.props });
        }
        catch (e) {
            server_shared_1.logger.error(e);
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.INVALID_CLOUD_CLAIM,
                params: {
                    pieceName,
                },
            });
        }
    });
}


/***/ }),
/* 220 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.credentialsOauth2Service = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const axios_1 = tslib_1.__importDefault(__webpack_require__(198));
const oauth2_util_1 = __webpack_require__(221);
exports.credentialsOauth2Service = {
    refresh,
    claim,
};
function claim(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ request, }) {
        var _b, _c;
        try {
            const grantType = (_b = request.grantType) !== null && _b !== void 0 ? _b : shared_1.OAuth2GrantType.AUTHORIZATION_CODE;
            const body = {
                grant_type: grantType,
            };
            switch (grantType) {
                case shared_1.OAuth2GrantType.AUTHORIZATION_CODE: {
                    body.redirect_uri = request.redirectUrl;
                    body.code = request.code;
                    break;
                }
                case shared_1.OAuth2GrantType.CLIENT_CREDENTIALS:
                    break;
            }
            if (request.codeVerifier) {
                body.code_verifier = request.codeVerifier;
            }
            if (request.props && grantType === shared_1.OAuth2GrantType.CLIENT_CREDENTIALS) {
                Object.entries(request.props).forEach(([key, value]) => {
                    body[key] = value;
                });
            }
            const headers = {
                'content-type': 'application/x-www-form-urlencoded',
                accept: 'application/json',
            };
            const authorizationMethod = request.authorizationMethod || pieces_framework_1.OAuth2AuthorizationMethod.BODY;
            switch (authorizationMethod) {
                case pieces_framework_1.OAuth2AuthorizationMethod.BODY:
                    body.client_id = request.clientId;
                    body.client_secret = request.clientSecret;
                    break;
                case pieces_framework_1.OAuth2AuthorizationMethod.HEADER:
                    headers.authorization = `Basic ${Buffer.from(`${request.clientId}:${request.clientSecret}`).toString('base64')}`;
                    break;
                default:
                    throw new Error(`Unknown authorization method: ${authorizationMethod}`);
            }
            const response = (yield axios_1.default.post(request.tokenUrl, new URLSearchParams(body), {
                headers,
            })).data;
            return Object.assign(Object.assign({ type: shared_1.AppConnectionType.OAUTH2 }, oauth2_util_1.oauth2Util.formatOAuth2Response(response)), { token_url: request.tokenUrl, client_id: request.clientId, client_secret: request.clientSecret, redirect_url: request.redirectUrl, grant_type: grantType, props: request.props, authorization_method: authorizationMethod });
        }
        catch (e) {
            server_shared_1.logger.error(e);
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.INVALID_CLAIM,
                params: {
                    clientId: request.clientId,
                    tokenUrl: request.tokenUrl,
                    redirectUrl: (_c = request.redirectUrl) !== null && _c !== void 0 ? _c : '',
                },
            });
        }
    });
}
function refresh(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ connectionValue, }) {
        var _b;
        const appConnection = connectionValue;
        if (!oauth2_util_1.oauth2Util.isExpired(appConnection)) {
            return appConnection;
        }
        const grantType = (_b = connectionValue.grant_type) !== null && _b !== void 0 ? _b : shared_1.OAuth2GrantType.AUTHORIZATION_CODE;
        const body = {};
        switch (grantType) {
            case shared_1.OAuth2GrantType.AUTHORIZATION_CODE: {
                body.grant_type = 'refresh_token';
                body.refresh_token = appConnection.refresh_token;
                break;
            }
            case shared_1.OAuth2GrantType.CLIENT_CREDENTIALS: {
                body.grant_type = grantType;
                break;
            }
            default:
                throw new Error(`Unknown grant type: ${grantType}`);
        }
        const headers = {
            'content-type': 'application/x-www-form-urlencoded',
            accept: 'application/json',
        };
        const authorizationMethod = appConnection.authorization_method || pieces_framework_1.OAuth2AuthorizationMethod.BODY;
        switch (authorizationMethod) {
            case pieces_framework_1.OAuth2AuthorizationMethod.BODY:
                body.client_id = appConnection.client_id;
                body.client_secret = appConnection.client_secret;
                break;
            case pieces_framework_1.OAuth2AuthorizationMethod.HEADER:
                headers.authorization = `Basic ${Buffer.from(`${appConnection.client_id}:${appConnection.client_secret}`).toString('base64')}`;
                break;
            default:
                throw new Error(`Unknown authorization method: ${authorizationMethod}`);
        }
        const response = (yield axios_1.default.post(appConnection.token_url, new URLSearchParams(body), {
            headers,
            timeout: 10000,
        })).data;
        const mergedObject = mergeNonNull(appConnection, oauth2_util_1.oauth2Util.formatOAuth2Response(Object.assign({}, response)));
        return Object.assign(Object.assign({}, mergedObject), { props: appConnection.props });
    });
}
/**
 * When the refresh token is null or undefined, it indicates that the original connection's refresh token is also null
 * or undefined. Therefore, we only need to merge non-null values to avoid overwriting the original refresh token with a
 *  null or undefined value.
 */
function mergeNonNull(appConnection, oAuth2Response) {
    const formattedOAuth2Response = Object.fromEntries(Object.entries(oAuth2Response).filter(([, value]) => !(0, shared_1.isNil)(value)));
    return Object.assign(Object.assign({}, appConnection), formattedOAuth2Response);
}


/***/ }),
/* 221 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.oauth2Util = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const axios_1 = __webpack_require__(198);
const piece_metadata_service_1 = __webpack_require__(222);
exports.oauth2Util = {
    formatOAuth2Response,
    isExpired,
    isUserError,
    getOAuth2TokenUrl,
    removeRefreshTokenAndClientSecret,
};
function removeRefreshTokenAndClientSecret(connection) {
    if (connection.value.type === shared_1.AppConnectionType.OAUTH2 && connection.value.grant_type === shared_1.OAuth2GrantType.CLIENT_CREDENTIALS) {
        connection.value.client_secret = '(REDACTED)';
    }
    if (connection.value.type === shared_1.AppConnectionType.OAUTH2
        || connection.value.type === shared_1.AppConnectionType.CLOUD_OAUTH2
        || connection.value.type === shared_1.AppConnectionType.PLATFORM_OAUTH2) {
        connection.value = Object.assign(Object.assign({}, connection.value), { refresh_token: '(REDACTED)' });
    }
    return connection;
}
function isExpired(connection) {
    var _a, _b;
    const secondsSinceEpoch = Math.round(Date.now() / 1000);
    const grantType = (_a = connection.grant_type) !== null && _a !== void 0 ? _a : shared_1.OAuth2GrantType.AUTHORIZATION_CODE;
    if (grantType === shared_1.OAuth2GrantType.AUTHORIZATION_CODE &&
        !connection.refresh_token) {
        return false;
    }
    // Salesforce doesn't provide an 'expires_in' field, as it is dynamic per organization; therefore, it's necessary for us to establish a low threshold and consistently refresh it.
    const expiresIn = (_b = connection.expires_in) !== null && _b !== void 0 ? _b : 60 * 60;
    const refreshThreshold = 15 * 60; // Refresh if there is less than 15 minutes to expire
    return (secondsSinceEpoch + refreshThreshold >= connection.claimed_at + expiresIn);
}
function getOAuth2TokenUrl(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, pieceName, props, }) {
        const pieceMetadata = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
            name: pieceName,
            projectId,
            version: undefined,
        });
        const auth = pieceMetadata.auth;
        (0, shared_1.assertNotNullOrUndefined)(auth, 'auth');
        switch (auth.type) {
            case pieces_framework_1.PropertyType.OAUTH2:
                return resolveUrl(auth.tokenUrl, props);
            default:
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_APP_CONNECTION,
                    params: {
                        error: 'invalid auth type',
                    },
                });
        }
    });
}
function resolveUrl(url, props) {
    if (!props) {
        return url;
    }
    for (const [key, value] of Object.entries(props)) {
        url = url.replace(`{${key}}`, String(value));
    }
    return url;
}
function formatOAuth2Response(response) {
    const secondsSinceEpoch = Math.round(Date.now() / 1000);
    const formattedResponse = Object.assign(Object.assign({}, response), { data: response, claimed_at: secondsSinceEpoch });
    (0, shared_1.deleteProps)(formattedResponse.data, [
        'access_token',
        'expires_in',
        'refresh_token',
        'scope',
        'token_type',
    ]);
    return formattedResponse;
}
function isUserError(e) {
    var _a;
    if ((0, axios_1.isAxiosError)(e)) {
        const error = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data.error;
        switch (error) {
            case 'invalid_grant':
                return true;
            case 'invalid_request':
            case 'invalid_client':
            case 'invalid_scope':
            case 'unauthorized_client':
            case 'unsupported_grant_type':
            default:
                return false;
        }
    }
    return false;
}


/***/ }),
/* 222 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPieceMetadataModelSummary = exports.getPiecePackage = exports.pieceMetadataService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const file_service_1 = __webpack_require__(223);
const db_piece_metadata_service_1 = __webpack_require__(447);
const file_piece_metadata_service_1 = __webpack_require__(467);
const initPieceMetadataService = () => {
    const source = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.PIECES_SOURCE);
    switch (source) {
        case server_shared_1.PiecesSource.DB:
        case server_shared_1.PiecesSource.CLOUD_AND_DB:
            return (0, db_piece_metadata_service_1.FastDbPieceMetadataService)();
        case server_shared_1.PiecesSource.FILE:
            return (0, file_piece_metadata_service_1.FilePieceMetadataService)();
    }
};
exports.pieceMetadataService = initPieceMetadataService();
const getPiecePackage = (projectId, pkg) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    switch (pkg.packageType) {
        case shared_1.PackageType.ARCHIVE: {
            const pieceMetadata = yield exports.pieceMetadataService.getOrThrow({
                name: pkg.pieceName,
                version: pkg.pieceVersion,
                projectId,
            });
            const archiveFile = yield file_service_1.fileService.getOneOrThrow({
                fileId: pieceMetadata.archiveId,
            });
            return {
                packageType: shared_1.PackageType.ARCHIVE,
                pieceName: pkg.pieceName,
                pieceVersion: pkg.pieceVersion,
                pieceType: pkg.pieceType,
                archiveId: pieceMetadata.archiveId,
                archive: archiveFile.data,
            };
        }
        case shared_1.PackageType.REGISTRY: {
            return pkg;
        }
    }
});
exports.getPiecePackage = getPiecePackage;
function toPieceMetadataModelSummary(pieceMetadataEntityList, originalMetadataList, suggestionType) {
    return pieceMetadataEntityList.map((pieceMetadataEntity) => {
        const originalMetadata = originalMetadataList.find((p) => p.name === pieceMetadataEntity.name);
        (0, shared_1.assertNotNullOrUndefined)(originalMetadata, `Original metadata not found for ${pieceMetadataEntity.name}`);
        return Object.assign(Object.assign({}, pieceMetadataEntity), { actions: Object.keys(originalMetadata.actions).length, triggers: Object.keys(originalMetadata.triggers).length, suggestedActions: suggestionType === shared_1.SuggestionType.ACTION || suggestionType === shared_1.SuggestionType.ACTION_AND_TRIGGER ?
                Object.values(pieceMetadataEntity.actions) : undefined, suggestedTriggers: suggestionType === shared_1.SuggestionType.TRIGGER || suggestionType === shared_1.SuggestionType.ACTION_AND_TRIGGER ?
                Object.values(pieceMetadataEntity.triggers) : undefined });
    });
}
exports.toPieceMetadataModelSummary = toPieceMetadataModelSummary;


/***/ }),
/* 223 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const file_entity_1 = __webpack_require__(247);
const fileRepo = (0, repo_factory_1.repoFactory)(file_entity_1.FileEntity);
exports.fileService = {
    save(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ fileId, projectId, platformId, data, type, compression, }) {
            const file = {
                id: fileId !== null && fileId !== void 0 ? fileId : (0, shared_1.apId)(),
                projectId,
                platformId,
                data,
                type,
                compression,
            };
            const savedFile = yield fileRepo().save(file);
            server_shared_1.logger.info(`[FileService#save] fileId=${savedFile.id} data.length=${data.length}`);
            return savedFile;
        });
    },
    getOne(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, fileId }) {
            const file = yield fileRepo().findOneBy({
                projectId,
                id: fileId,
            });
            if ((0, shared_1.isNil)(file)) {
                return null;
            }
            const decompressedData = yield server_shared_1.fileCompressor.decompress({
                data: file.data,
                compression: file.compression,
            });
            file.data = decompressedData;
            return file;
        });
    },
    getOneOrThrow(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const file = yield this.getOne(params);
            if ((0, shared_1.isNil)(file)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.FILE_NOT_FOUND,
                    params: {
                        id: params.fileId,
                    },
                });
            }
            return file;
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ fileId, projectId }) {
            server_shared_1.logger.info('Deleted file with Id ' + fileId);
            yield fileRepo().delete({ id: fileId, projectId });
        });
    },
};


/***/ }),
/* 224 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.repoFactory = void 0;
const database_connection_1 = __webpack_require__(225);
const instances = new Map();
/**
 * Creates a {@link RepoGetter} for the given entity.
 * @param entity The entity to create a {@link RepoGetter} for.
 * @returns A {@link RepoGetter} for the given entity.
 */
const repoFactory = (entity) => {
    if (instances.has(entity)) {
        return instances.get(entity);
    }
    const newInstance = (entityManager) => {
        var _a;
        return ((_a = entityManager === null || entityManager === void 0 ? void 0 : entityManager.getRepository(entity)) !== null && _a !== void 0 ? _a : (0, database_connection_1.databaseConnection)().getRepository(entity));
    };
    instances.set(entity, newInstance);
    return newInstance;
};
exports.repoFactory = repoFactory;


/***/ }),
/* 225 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.APArrayContains = exports.databaseConnection = exports.commonProperties = void 0;
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const app_connection_entity_1 = __webpack_require__(227);
const app_event_routing_entity_1 = __webpack_require__(229);
const alerts_entity_1 = __webpack_require__(230);
const api_key_entity_1 = __webpack_require__(231);
const app_credentials_entity_1 = __webpack_require__(232);
const audit_event_entity_1 = __webpack_require__(233);
const appsumo_entity_1 = __webpack_require__(234);
const project_billing_entity_1 = __webpack_require__(235);
const connection_key_entity_1 = __webpack_require__(236);
const custom_domain_entity_1 = __webpack_require__(237);
const flow_template_entity_1 = __webpack_require__(238);
const git_repo_entity_1 = __webpack_require__(239);
const issues_entity_1 = __webpack_require__(240);
const oauth_app_entity_1 = __webpack_require__(241);
const otp_entity_1 = __webpack_require__(242);
const project_member_entity_1 = __webpack_require__(243);
const project_plan_entity_1 = __webpack_require__(244);
const referral_entity_1 = __webpack_require__(245);
const signing_key_entity_1 = __webpack_require__(246);
const file_entity_1 = __webpack_require__(247);
const flag_entity_1 = __webpack_require__(248);
const flow_entity_1 = __webpack_require__(249);
const flow_run_entity_1 = __webpack_require__(250);
const flow_version_entity_1 = __webpack_require__(251);
const folder_entity_1 = __webpack_require__(252);
const step_file_entity_1 = __webpack_require__(253);
const trigger_event_entity_1 = __webpack_require__(254);
const piece_metadata_entity_1 = __webpack_require__(255);
const platform_entity_1 = __webpack_require__(256);
const project_entity_1 = __webpack_require__(257);
const store_entry_entity_1 = __webpack_require__(258);
const piece_tag_entity_1 = __webpack_require__(259);
const tag_entity_1 = __webpack_require__(260);
const user_entity_1 = __webpack_require__(261);
const user_invitation_entity_1 = __webpack_require__(262);
const webhook_simulation_entity_1 = __webpack_require__(263);
const machine_entity_1 = __webpack_require__(264);
const postgres_connection_1 = __webpack_require__(265);
const sqlite_connection_1 = __webpack_require__(407);
const databaseType = server_shared_1.system.get(server_shared_1.AppSystemProp.DB_TYPE);
function getEntities() {
    const edition = server_shared_1.system.getEdition();
    const entities = [
        trigger_event_entity_1.TriggerEventEntity,
        app_event_routing_entity_1.AppEventRoutingEntity,
        file_entity_1.FileEntity,
        flag_entity_1.FlagEntity,
        flow_entity_1.FlowEntity,
        flow_version_entity_1.FlowVersionEntity,
        flow_run_entity_1.FlowRunEntity,
        project_entity_1.ProjectEntity,
        store_entry_entity_1.StoreEntryEntity,
        user_entity_1.UserEntity,
        app_connection_entity_1.AppConnectionEntity,
        webhook_simulation_entity_1.WebhookSimulationEntity,
        folder_entity_1.FolderEntity,
        piece_metadata_entity_1.PieceMetadataEntity,
        step_file_entity_1.StepFileEntity,
        platform_entity_1.PlatformEntity,
        tag_entity_1.TagEntity,
        piece_tag_entity_1.PieceTagEntity,
        issues_entity_1.IssueEntity,
        alerts_entity_1.AlertEntity,
        user_invitation_entity_1.UserInvitationEntity,
        machine_entity_1.WorkerMachineEntity,
    ];
    switch (edition) {
        case shared_1.ApEdition.CLOUD:
        case shared_1.ApEdition.ENTERPRISE:
            entities.push(project_member_entity_1.ProjectMemberEntity, project_plan_entity_1.ProjectPlanEntity, custom_domain_entity_1.CustomDomainEntity, signing_key_entity_1.SigningKeyEntity, oauth_app_entity_1.OAuthAppEntity, otp_entity_1.OtpEntity, api_key_entity_1.ApiKeyEntity, flow_template_entity_1.FlowTemplateEntity, git_repo_entity_1.GitRepoEntity, audit_event_entity_1.AuditEventEntity, 
            // CLOUD
            appsumo_entity_1.AppSumoEntity, referral_entity_1.ReferralEntity, connection_key_entity_1.ConnectionKeyEntity, app_credentials_entity_1.AppCredentialEntity, project_billing_entity_1.ProjectBillingEntity);
            break;
        case shared_1.ApEdition.COMMUNITY:
            break;
        default:
            throw new Error(`Unsupported edition: ${edition}`);
    }
    return entities;
}
const getSynchronize = () => {
    var _a;
    const env = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT);
    const value = {
        [shared_1.ApEnvironment.TESTING]: true,
    };
    return (_a = value[env]) !== null && _a !== void 0 ? _a : false;
};
exports.commonProperties = {
    subscribers: [],
    entities: getEntities(),
    synchronize: getSynchronize(),
};
let _databaseConnection = null;
const databaseConnection = () => {
    if ((0, shared_1.isNil)(_databaseConnection)) {
        _databaseConnection = databaseType === server_shared_1.DatabaseType.SQLITE3
            ? (0, sqlite_connection_1.createSqlLiteDataSource)()
            : (0, postgres_connection_1.createPostgresDataSource)();
    }
    return _databaseConnection;
};
exports.databaseConnection = databaseConnection;
function APArrayContains(columnName, values, query) {
    const databaseType = server_shared_1.system.get(server_shared_1.AppSystemProp.DB_TYPE);
    switch (databaseType) {
        case server_shared_1.DatabaseType.POSTGRES:
            return query.andWhere({
                [columnName]: (0, typeorm_1.ArrayContains)(values),
            });
        case server_shared_1.DatabaseType.SQLITE3: {
            const likeConditions = values
                .map((tag, index) => `flow_run.tags LIKE :tag${index}`)
                .join(' AND ');
            const likeParams = values.reduce((params, tag, index) => {
                return Object.assign(Object.assign({}, params), { [`tag${index}`]: `%${tag}%` });
            }, {});
            return query.andWhere(likeConditions, likeParams);
        }
        default:
            throw new Error(`Unsupported database type: ${databaseType}`);
    }
}
exports.APArrayContains = APArrayContains;


/***/ }),
/* 226 */
/***/ ((module) => {

module.exports = require("typeorm");

/***/ }),
/* 227 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppConnectionEntity = void 0;
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.AppConnectionEntity = new typeorm_1.EntitySchema({
    name: 'app_connection',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { name: {
            type: String,
        }, type: {
            type: String,
        }, status: {
            type: String,
            default: shared_1.AppConnectionStatus.ACTIVE,
        }, pieceName: {
            type: String,
        }, projectId: database_common_1.ApIdSchema, value: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        } }),
    indices: [
        {
            name: 'idx_app_connection_project_id_and_name',
            columns: ['projectId', 'name'],
            unique: true,
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_app_connection_app_project_id',
            },
        },
    },
});


/***/ }),
/* 228 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isNotOneOfTheseEditions = exports.BaseColumnSchemaPart = exports.ApIdSchema = exports.isPostgres = exports.COLLATION = exports.TIMESTAMP_COLUMN_TYPE = exports.ARRAY_COLUMN_TYPE = exports.BLOB_COLUMN_TYPE = exports.JSONB_COLUMN_TYPE = exports.JSON_COLUMN_TYPE = void 0;
const server_shared_1 = __webpack_require__(2);
const databaseType = server_shared_1.system.get(server_shared_1.AppSystemProp.DB_TYPE);
exports.JSON_COLUMN_TYPE = databaseType === server_shared_1.DatabaseType.SQLITE3 ? 'simple-json' : 'json';
exports.JSONB_COLUMN_TYPE = databaseType === server_shared_1.DatabaseType.SQLITE3 ? 'simple-json' : 'jsonb';
exports.BLOB_COLUMN_TYPE = databaseType === server_shared_1.DatabaseType.SQLITE3 ? 'blob' : 'bytea';
exports.ARRAY_COLUMN_TYPE = databaseType === server_shared_1.DatabaseType.SQLITE3 ? 'simple-array' : String;
exports.TIMESTAMP_COLUMN_TYPE = databaseType === server_shared_1.DatabaseType.SQLITE3
    ? 'datetime'
    : 'timestamp with time zone';
exports.COLLATION = databaseType === server_shared_1.DatabaseType.SQLITE3 ? undefined : 'en_natural';
function isPostgres() {
    return databaseType === server_shared_1.DatabaseType.POSTGRES;
}
exports.isPostgres = isPostgres;
exports.ApIdSchema = {
    type: String,
    length: 21,
};
exports.BaseColumnSchemaPart = {
    id: Object.assign(Object.assign({}, exports.ApIdSchema), { primary: true }),
    created: {
        name: 'created',
        type: exports.TIMESTAMP_COLUMN_TYPE,
        createDate: true,
    },
    updated: {
        name: 'updated',
        type: exports.TIMESTAMP_COLUMN_TYPE,
        updateDate: true,
    },
};
function isNotOneOfTheseEditions(editions) {
    return !editions.includes(server_shared_1.system.getEdition());
}
exports.isNotOneOfTheseEditions = isNotOneOfTheseEditions;


/***/ }),
/* 229 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppEventRoutingEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.AppEventRoutingEntity = new typeorm_1.EntitySchema({
    name: 'app_event_routing',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { appName: {
            type: String,
        }, projectId: database_common_1.ApIdSchema, flowId: database_common_1.ApIdSchema, identifierValue: {
            type: String,
        }, event: {
            type: String,
        } }),
    indices: [
        {
            name: 'idx_app_event_routing_flow_id',
            columns: ['flowId'],
            unique: false,
        },
        {
            name: 'idx_app_event_project_id_appName_identifier_value_event',
            columns: ['appName', 'projectId', 'identifierValue', 'event'],
            unique: true,
        },
    ],
});


/***/ }),
/* 230 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlertEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.AlertEntity = new typeorm_1.EntitySchema({
    name: 'alert',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: Object.assign({}, database_common_1.ApIdSchema), channel: {
            type: String,
        }, receiver: {
            type: String,
            nullable: false,
        } }),
});


/***/ }),
/* 231 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiKeyEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.ApiKeyEntity = new typeorm_1.EntitySchema({
    name: 'api_key',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { displayName: {
            type: String,
            nullable: false,
        }, platformId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: false }), hashedValue: {
            type: String,
            nullable: false,
        }, truncatedValue: {
            type: String,
            nullable: false,
        } }),
    indices: [],
    relations: {
        platform: {
            type: 'many-to-one',
            target: 'platform',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'platformId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_api_key_platform_id',
            },
        },
    },
});


/***/ }),
/* 232 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppCredentialEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.AppCredentialEntity = new typeorm_1.EntitySchema({
    name: 'app_credential',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { appName: {
            type: String,
        }, projectId: database_common_1.ApIdSchema, settings: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        } }),
    indices: [],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            onDelete: 'CASCADE',
            joinColumn: true,
            inverseSide: 'appCredentials',
        },
    },
});


/***/ }),
/* 233 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuditEventEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.AuditEventEntity = new typeorm_1.EntitySchema({
    name: 'audit_event',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { platformId: {
            type: String,
        }, projectId: {
            type: String,
            nullable: true,
        }, action: {
            type: String,
        }, userEmail: {
            type: String,
        }, data: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        }, ip: {
            type: String,
            nullable: true,
        }, userId: {
            type: String,
            nullable: true,
        } }),
    indices: [
        {
            name: 'audit_event_platform_id_project_id_user_id_idx',
            columns: ['platformId', 'projectId', 'userId'],
        },
    ],
    relations: {
        platform: {
            type: 'many-to-one',
            target: 'platform',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'platformId',
                referencedColumnName: 'id',
            },
        },
    },
});


/***/ }),
/* 234 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppSumoEntity = void 0;
const typeorm_1 = __webpack_require__(226);
exports.AppSumoEntity = new typeorm_1.EntitySchema({
    name: 'appsumo',
    columns: {
        uuid: {
            type: String,
            primary: true,
        },
        plan_id: {
            type: String,
        },
        activation_email: {
            type: String,
        },
    },
    indices: [],
    relations: {},
});


/***/ }),
/* 235 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectBillingEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.ProjectBillingEntity = new typeorm_1.EntitySchema({
    name: 'project_billing',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: database_common_1.ApIdSchema, stripeCustomerId: {
            type: String,
        }, includedTasks: {
            type: Number,
            nullable: true,
        }, includedUsers: {
            type: Number,
            nullable: true,
        }, stripeSubscriptionId: {
            type: String,
            nullable: true,
        }, subscriptionStatus: {
            type: String,
            nullable: true,
        } }),
    indices: [
        {
            name: 'idx_stripe_project_id',
            columns: ['projectId'],
            unique: true,
        },
    ],
    relations: {
        project: {
            type: 'one-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_project_stripe_project_id',
            },
        },
    },
});


/***/ }),
/* 236 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectionKeyEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.ConnectionKeyEntity = new typeorm_1.EntitySchema({
    name: 'connection_key',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: database_common_1.ApIdSchema, settings: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        } }),
    indices: [
        {
            name: 'idx_connection_key_project_id',
            columns: ['projectId'],
            unique: false,
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            onDelete: 'CASCADE',
            joinColumn: true,
            inverseSide: 'connectionKeys',
        },
    },
});


/***/ }),
/* 237 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomDomainEntity = void 0;
const ee_shared_1 = __webpack_require__(134);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.CustomDomainEntity = new typeorm_1.EntitySchema({
    name: 'custom_domain',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { domain: {
            type: String,
        }, platformId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: false }), status: {
            type: String,
            enum: ee_shared_1.CustomDomainStatus,
        } }),
    indices: [
        {
            name: 'custom_domain_domain_unique',
            unique: true,
            columns: ['domain'],
        },
    ],
    relations: {
        platform: {
            type: 'many-to-one',
            target: 'platform',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'platformId',
                foreignKeyConstraintName: 'fk_custom_domain_platform_id',
            },
        },
    },
});


/***/ }),
/* 238 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowTemplateEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.FlowTemplateEntity = new typeorm_1.EntitySchema({
    name: 'flow_template',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { name: {
            type: String,
        }, description: {
            type: String,
        }, type: {
            type: String,
        }, platformId: {
            type: String,
            nullable: false,
        }, projectId: {
            type: String,
        }, template: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        }, tags: {
            type: String,
            array: true,
        }, pieces: {
            type: String,
            array: true,
        }, blogUrl: {
            type: String,
            nullable: true,
        } }),
    indices: [
        {
            name: 'idx_flow_template_tags',
            columns: ['tags'],
            unique: false,
        },
        {
            name: 'idx_flow_template_pieces',
            columns: ['pieces'],
            unique: false,
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_flow_template_project_id',
            },
        },
        platform: {
            type: 'many-to-one',
            target: 'platform',
            cascade: true,
            onDelete: 'CASCADE',
            nullable: true,
            joinColumn: {
                name: 'platformId',
                foreignKeyConstraintName: 'fk_flow_template_platform_id',
            },
        },
    },
});


/***/ }),
/* 239 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GitRepoEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.GitRepoEntity = new typeorm_1.EntitySchema({
    name: 'git_repo',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: database_common_1.ApIdSchema, remoteUrl: {
            type: String,
            nullable: false,
        }, branch: {
            type: String,
            nullable: false,
        }, branchType: {
            type: String,
            nullable: false,
            default: 'DEVELOPMENT',
        }, sshPrivateKey: {
            type: String,
            nullable: true,
        }, slug: {
            type: String,
            nullable: false,
        }, mapping: {
            type: database_common_1.JSONB_COLUMN_TYPE,
            nullable: true,
        } }),
    indices: [
        {
            name: 'idx_git_repo_project_id',
            columns: ['projectId'],
            unique: true,
        },
    ],
    relations: {
        project: {
            type: 'one-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_git_repo_project_id',
            },
        },
    },
});


/***/ }),
/* 240 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IssueEntity = void 0;
const ee_shared_1 = __webpack_require__(134);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.IssueEntity = new typeorm_1.EntitySchema({
    name: 'issue',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: Object.assign({}, database_common_1.ApIdSchema), flowId: Object.assign({}, database_common_1.ApIdSchema), status: {
            type: String,
            enum: ee_shared_1.IssueStatus,
        }, count: {
            type: Number,
        }, lastOccurrence: {
            type: database_common_1.TIMESTAMP_COLUMN_TYPE,
        } }),
    indices: [
        {
            name: 'idx_issue_flow_id',
            unique: true,
            columns: ['flowId'],
        },
        {
            name: 'idx_issue_project_id_flow_id',
            unique: false,
            columns: ['projectId', 'flowId'],
        },
    ],
    relations: {
        flow: {
            type: 'one-to-one',
            target: 'flow',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'flowId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_issue_flow_id',
            },
        },
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onUpdate: 'RESTRICT',
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_issue_project_id',
            },
        },
    },
});


/***/ }),
/* 241 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OAuthAppEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.OAuthAppEntity = new typeorm_1.EntitySchema({
    name: 'oauth_app',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { pieceName: {
            type: String,
        }, platformId: database_common_1.ApIdSchema, clientId: {
            type: String,
        }, clientSecret: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        } }),
    indices: [
        {
            name: 'idx_oauth_app_platformId_pieceName',
            columns: ['platformId', 'pieceName'],
            unique: true,
        },
    ],
    relations: {
        platform: {
            type: 'many-to-one',
            target: 'platform',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'platformId',
                foreignKeyConstraintName: 'fk_oauth_app_platform_id',
            },
        },
    },
});


/***/ }),
/* 242 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OtpEntity = void 0;
const ee_shared_1 = __webpack_require__(134);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.OtpEntity = new typeorm_1.EntitySchema({
    name: 'otp',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { type: {
            type: String,
            enum: ee_shared_1.OtpType,
            nullable: false,
        }, userId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: false }), value: {
            type: String,
            nullable: false,
        }, state: {
            type: String,
            enum: ee_shared_1.OtpState,
            nullable: false,
        } }),
    indices: [
        {
            name: 'idx_otp_user_id_type',
            columns: ['userId', 'type'],
            unique: true,
        },
    ],
    relations: {
        user: {
            type: 'many-to-one',
            target: 'user',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'userId',
                foreignKeyConstraintName: 'fk_otp_user_id',
            },
        },
    },
});


/***/ }),
/* 243 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectMemberEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.ProjectMemberEntity = new typeorm_1.EntitySchema({
    name: 'project_member',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: database_common_1.ApIdSchema, platformId: database_common_1.ApIdSchema, userId: database_common_1.ApIdSchema, role: {
            type: String,
        } }),
    indices: [
        {
            name: 'idx_project_member_project_id_user_id_platform_id',
            columns: ['projectId', 'userId', 'platformId'],
            unique: true,
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_project_member_project_id',
            },
        },
        user: {
            type: 'many-to-one',
            target: 'user',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'userId',
                foreignKeyConstraintName: 'fk_project_member_user_id',
            },
        },
    },
});


/***/ }),
/* 244 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectPlanEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.ProjectPlanEntity = new typeorm_1.EntitySchema({
    name: 'project_plan',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: database_common_1.ApIdSchema, name: {
            type: String,
        }, minimumPollingInterval: {
            type: Number,
        }, connections: {
            type: Number,
        }, pieces: {
            type: database_common_1.ARRAY_COLUMN_TYPE,
            array: (0, database_common_1.isPostgres)(),
            nullable: false,
        }, piecesFilterType: {
            type: String,
        }, teamMembers: {
            type: Number,
        }, tasks: {
            type: Number,
        } }),
    indices: [
        {
            name: 'idx_plan_project_id',
            columns: ['projectId'],
            unique: true,
        },
    ],
    relations: {
        project: {
            type: 'one-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_project_plan_project_id',
            },
        },
    },
});


/***/ }),
/* 245 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReferralEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.ReferralEntity = new typeorm_1.EntitySchema({
    name: 'referal',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { referredUserId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }), referredUserEmail: {
            type: String,
            length: 500,
            nullable: false,
        }, referringUserId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }), referringUserEmail: {
            type: String,
            length: 500,
            nullable: false,
        } }),
    indices: [
        {
            name: 'idx_referral_referring_user_id',
            columns: ['referredUserId', 'referringUserId'],
            unique: true,
        },
    ],
    relations: {
        referredUser: {
            type: 'many-to-one',
            target: 'user',
            cascade: true,
            onDelete: 'SET NULL',
            joinColumn: {
                name: 'referredUserId',
                foreignKeyConstraintName: 'fk_referral_referred_user_id',
            },
        },
        referringUser: {
            type: 'many-to-one',
            target: 'user',
            cascade: true,
            onDelete: 'SET NULL',
            joinColumn: {
                name: 'referringUserId',
                foreignKeyConstraintName: 'fk_referral_referring_user_id',
            },
        },
    },
});


/***/ }),
/* 246 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SigningKeyEntity = void 0;
const ee_shared_1 = __webpack_require__(134);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.SigningKeyEntity = new typeorm_1.EntitySchema({
    name: 'signing_key',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { displayName: {
            type: String,
            nullable: false,
        }, platformId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: false }), publicKey: {
            type: String,
            nullable: false,
        }, algorithm: {
            type: String,
            enum: ee_shared_1.KeyAlgorithm,
            nullable: false,
        } }),
    indices: [],
    relations: {
        platform: {
            type: 'many-to-one',
            target: 'platform',
            onDelete: 'RESTRICT',
            onUpdate: 'RESTRICT',
            joinColumn: {
                name: 'platformId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_signing_key_platform_id',
            },
        },
    },
});


/***/ }),
/* 247 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileEntity = void 0;
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.FileEntity = new typeorm_1.EntitySchema({
    name: 'file',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }), platformId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }), data: {
            type: database_common_1.BLOB_COLUMN_TYPE,
            nullable: false,
        }, type: {
            type: String,
            default: shared_1.FileType.UNKNOWN,
            nullable: false,
        }, compression: {
            type: String,
            default: shared_1.FileCompression.NONE,
            nullable: false,
        } }),
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_file_project_id',
            },
        },
    },
});


/***/ }),
/* 248 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlagEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.FlagEntity = new typeorm_1.EntitySchema({
    name: 'flag',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { value: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        } }),
    indices: [],
    relations: {},
});


/***/ }),
/* 249 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowEntity = void 0;
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.FlowEntity = new typeorm_1.EntitySchema({
    name: 'flow',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: false }), folderId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }), status: {
            type: String,
            enum: shared_1.FlowStatus,
            nullable: false,
            default: shared_1.FlowStatus.DISABLED,
        }, schedule: {
            type: database_common_1.JSONB_COLUMN_TYPE,
            nullable: true,
        }, publishedVersionId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true, unique: true }) }),
    indices: [
        {
            name: 'idx_flow_project_id',
            columns: ['projectId'],
            unique: false,
        },
        {
            name: 'idx_flow_folder_id',
            columns: ['folderId'],
            unique: false,
        },
    ],
    relations: {
        runs: {
            type: 'one-to-many',
            target: 'flow_run',
            inverseSide: 'flow',
        },
        folder: {
            type: 'many-to-one',
            target: 'folder',
            onDelete: 'SET NULL',
            nullable: true,
            joinColumn: {
                name: 'folderId',
                foreignKeyConstraintName: 'fk_flow_folder_id',
            },
        },
        events: {
            type: 'one-to-many',
            target: 'trigger_event',
            inverseSide: 'flow',
        },
        versions: {
            type: 'one-to-many',
            target: 'flow_version',
            inverseSide: 'flow',
        },
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_flow_project_id',
            },
        },
        publishedVersion: {
            type: 'one-to-one',
            target: 'flow_version',
            nullable: true,
            onDelete: 'RESTRICT',
            joinColumn: {
                name: 'publishedVersionId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_flow_published_version',
            },
        },
    },
});


/***/ }),
/* 250 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowRunEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.FlowRunEntity = new typeorm_1.EntitySchema({
    name: 'flow_run',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { projectId: database_common_1.ApIdSchema, flowId: database_common_1.ApIdSchema, flowVersionId: database_common_1.ApIdSchema, environment: {
            type: String,
            nullable: true,
        }, flowDisplayName: {
            type: String,
        }, logsFileId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }), status: {
            type: String,
        }, terminationReason: {
            type: String,
            nullable: true,
        }, tags: {
            type: database_common_1.ARRAY_COLUMN_TYPE,
            array: (0, database_common_1.isPostgres)(),
            nullable: true,
        }, duration: {
            nullable: true,
            type: Number,
        }, tasks: {
            nullable: true,
            type: Number,
        }, startTime: {
            type: database_common_1.TIMESTAMP_COLUMN_TYPE,
        }, finishTime: {
            nullable: true,
            type: database_common_1.TIMESTAMP_COLUMN_TYPE,
        }, pauseMetadata: {
            type: database_common_1.JSONB_COLUMN_TYPE,
            nullable: true,
        } }),
    indices: [
        {
            name: 'idx_run_project_id_environment_created_desc',
            columns: ['projectId', 'environment', 'created'],
        },
        {
            name: 'idx_run_project_id_environment_status_created_desc',
            columns: ['projectId', 'environment', 'status', 'created'],
        },
        {
            name: 'idx_run_project_id_flow_id_environment_created_desc',
            columns: ['projectId', 'flowId', 'environment', 'created'],
        },
        {
            name: 'idx_run_project_id_flow_id_environment_status_created_desc',
            columns: ['projectId', 'flowId', 'environment', 'status', 'created'],
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_flow_run_project_id',
            },
        },
        flow: {
            type: 'many-to-one',
            target: 'flow',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'flowId',
                foreignKeyConstraintName: 'fk_flow_run_flow_id',
            },
        },
    },
});


/***/ }),
/* 251 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowVersionEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.FlowVersionEntity = new typeorm_1.EntitySchema({
    name: 'flow_version',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { flowId: database_common_1.ApIdSchema, displayName: {
            type: String,
        }, trigger: {
            type: database_common_1.JSONB_COLUMN_TYPE,
            nullable: true,
        }, updatedBy: {
            type: String,
            nullable: true,
        }, valid: {
            type: Boolean,
        }, state: {
            type: String,
        } }),
    indices: [
        {
            name: 'idx_flow_version_flow_id',
            columns: ['flowId'],
            unique: false,
        },
    ],
    relations: {
        updatedByUser: {
            type: 'many-to-one',
            target: 'user',
            cascade: true,
            onDelete: 'SET NULL',
            joinColumn: {
                name: 'updatedBy',
                foreignKeyConstraintName: 'fk_updated_by_user_flow',
            },
        },
        flow: {
            type: 'many-to-one',
            target: 'flow',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'flowId',
                foreignKeyConstraintName: 'fk_flow_version_flow',
            },
        },
    },
});


/***/ }),
/* 252 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FolderEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.FolderEntity = new typeorm_1.EntitySchema({
    name: 'folder',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { displayName: {
            type: String,
        }, projectId: database_common_1.ApIdSchema }),
    indices: [
        {
            name: 'idx_folder_project_id_display_name',
            columns: ['projectId', 'displayName'],
            unique: true,
        },
    ],
    relations: {
        flows: {
            type: 'one-to-many',
            target: 'flow',
            inverseSide: 'folder',
        },
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_folder_project',
            },
        },
    },
});


/***/ }),
/* 253 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StepFileEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.StepFileEntity = new typeorm_1.EntitySchema({
    name: 'step_file',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { flowId: database_common_1.ApIdSchema, projectId: database_common_1.ApIdSchema, name: {
            type: String,
            nullable: false,
        }, size: {
            type: Number,
            nullable: false,
        }, stepName: {
            type: String,
            nullable: false,
        }, data: {
            type: database_common_1.BLOB_COLUMN_TYPE,
            nullable: false,
        } }),
    indices: [
        {
            name: 'step_file_project_id_flow_id_step_name_name',
            unique: true,
            columns: ['projectId', 'flowId', 'stepName', 'name'],
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_step_file_project_id',
            },
        },
        flow: {
            type: 'many-to-one',
            target: 'flow',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'flowId',
                foreignKeyConstraintName: 'fk_step_file_flow_id',
            },
        },
    },
});


/***/ }),
/* 254 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TriggerEventEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.TriggerEventEntity = new typeorm_1.EntitySchema({
    name: 'trigger_event',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { flowId: database_common_1.ApIdSchema, projectId: database_common_1.ApIdSchema, sourceName: {
            type: String,
        }, payload: {
            type: database_common_1.JSONB_COLUMN_TYPE,
            nullable: true,
        } }),
    indices: [
        {
            name: 'idx_trigger_event_flow_id',
            columns: ['flowId'],
            unique: false,
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_trigger_event_project_id',
            },
        },
        flow: {
            type: 'many-to-one',
            target: 'flow',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'flowId',
                foreignKeyConstraintName: 'fk_trigger_event_flow_id',
            },
        },
    },
});


/***/ }),
/* 255 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceMetadataEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.PieceMetadataEntity = new typeorm_1.EntitySchema({
    name: 'piece_metadata',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { name: {
            type: String,
            nullable: false,
        }, authors: {
            type: database_common_1.ARRAY_COLUMN_TYPE,
            nullable: false,
            array: (0, database_common_1.isPostgres)(),
        }, displayName: {
            type: String,
            nullable: false,
        }, logoUrl: {
            type: String,
            nullable: false,
        }, projectUsage: {
            type: Number,
            nullable: false,
            default: 0,
        }, description: {
            type: String,
            nullable: true,
        }, projectId: {
            type: String,
            nullable: true,
        }, platformId: {
            type: String,
            nullable: true,
        }, version: {
            type: String,
            nullable: false,
            collation: database_common_1.COLLATION,
        }, minimumSupportedRelease: {
            type: String,
            nullable: false,
            collation: database_common_1.COLLATION,
        }, maximumSupportedRelease: {
            type: String,
            nullable: false,
            collation: database_common_1.COLLATION,
        }, auth: {
            type: database_common_1.JSON_COLUMN_TYPE,
            nullable: true,
        }, actions: {
            type: database_common_1.JSON_COLUMN_TYPE,
            nullable: false,
        }, triggers: {
            type: database_common_1.JSON_COLUMN_TYPE,
            nullable: false,
        }, pieceType: {
            type: String,
            nullable: false,
        }, categories: {
            type: database_common_1.ARRAY_COLUMN_TYPE,
            nullable: true,
            array: (0, database_common_1.isPostgres)(),
        }, packageType: {
            type: String,
            nullable: false,
        }, archiveId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }) }),
    indices: [
        {
            name: 'idx_piece_metadata_name_project_id_version',
            columns: ['name', 'version', 'projectId'],
            unique: true,
        },
    ],
    relations: {
        project: {
            type: 'many-to-one',
            target: 'project',
            cascade: true,
            onDelete: 'CASCADE',
            joinColumn: {
                name: 'projectId',
                foreignKeyConstraintName: 'fk_piece_metadata_project_id',
            },
            nullable: true,
        },
        archiveId: {
            type: 'one-to-one',
            target: 'file',
            onDelete: 'NO ACTION',
            onUpdate: 'NO ACTION',
            joinColumn: {
                name: 'archiveId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_piece_metadata_file',
            },
        },
    },
});


/***/ }),
/* 256 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlatformEntity = void 0;
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.PlatformEntity = new typeorm_1.EntitySchema({
    name: 'platform',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { ownerId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: false }), name: {
            type: String,
            nullable: false,
        }, primaryColor: {
            type: String,
            nullable: false,
        }, logoIconUrl: {
            type: String,
            nullable: false,
        }, fullLogoUrl: {
            type: String,
            nullable: false,
        }, favIconUrl: {
            type: String,
            nullable: false,
        }, smtpHost: {
            type: String,
            nullable: true,
        }, smtpPort: {
            type: Number,
            nullable: true,
        }, smtpUser: {
            type: String,
            nullable: true,
        }, smtpPassword: {
            type: String,
            nullable: true,
        }, smtpSenderEmail: {
            type: String,
            nullable: true,
        }, smtpUseSSL: {
            type: Boolean,
            nullable: true,
        }, privacyPolicyUrl: {
            type: String,
            nullable: true,
        }, termsOfServiceUrl: {
            type: String,
            nullable: true,
        }, showPoweredBy: {
            type: Boolean,
            nullable: false,
        }, flowIssuesEnabled: {
            type: Boolean,
            nullable: false,
        }, cloudAuthEnabled: {
            type: Boolean,
            nullable: false,
            default: true,
        }, customDomainsEnabled: {
            type: Boolean,
            nullable: false,
        }, customAppearanceEnabled: {
            type: Boolean,
            nullable: false,
        }, manageProjectsEnabled: {
            type: Boolean,
            nullable: false,
        }, managePiecesEnabled: {
            type: Boolean,
            nullable: false,
        }, manageTemplatesEnabled: {
            type: Boolean,
            nullable: false,
        }, apiKeysEnabled: {
            type: Boolean,
            nullable: false,
        }, projectRolesEnabled: {
            type: Boolean,
            nullable: false,
        }, embeddingEnabled: {
            type: Boolean,
            nullable: false,
            default: true,
        }, filteredPieceNames: {
            type: database_common_1.ARRAY_COLUMN_TYPE,
            array: (0, database_common_1.isPostgres)(),
            nullable: false,
        }, filteredPieceBehavior: {
            type: String,
            enum: shared_1.FilteredPieceBehavior,
            nullable: false,
        }, gitSyncEnabled: {
            type: Boolean,
            nullable: false,
        }, defaultLocale: {
            type: String,
            enum: shared_1.LocalesEnum,
            nullable: true,
        }, allowedAuthDomains: {
            type: database_common_1.ARRAY_COLUMN_TYPE,
            array: (0, database_common_1.isPostgres)(),
        }, enforceAllowedAuthDomains: {
            type: Boolean,
            nullable: false,
        }, ssoEnabled: {
            type: Boolean,
            nullable: false,
        }, emailAuthEnabled: {
            type: Boolean,
            nullable: false,
        }, federatedAuthProviders: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        }, auditLogEnabled: {
            type: Boolean,
            nullable: false,
        }, alertsEnabled: {
            type: Boolean,
            nullable: false,
        }, premiumPieces: {
            type: database_common_1.ARRAY_COLUMN_TYPE,
            array: (0, database_common_1.isPostgres)(),
            nullable: false,
        } }),
    indices: [],
    relations: {
        owner: {
            type: 'one-to-one',
            target: 'user',
            onDelete: 'RESTRICT',
            onUpdate: 'RESTRICT',
            joinColumn: {
                name: 'ownerId',
                referencedColumnName: 'id',
                foreignKeyConstraintName: 'fk_platform_user',
            },
        },
    },
});


/***/ }),
/* 257 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.ProjectEntity = new typeorm_1.EntitySchema({
    name: 'project',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { deleted: {
            type: database_common_1.TIMESTAMP_COLUMN_TYPE,
            deleteDate: true,
            nullable: true,
        }, ownerId: database_common_1.ApIdSchema, displayName: {
            type: String,
        }, notifyStatus: {
            type: String,
        }, platformId: Object.assign({}, database_common_1.ApIdSchema), externalId: {
            type: String,
            nullable: true,
        } }),
    indices: [
        {
            name: 'idx_project_owner_id',
            columns: ['ownerId'],
            unique: false,
        },
        {
            name: 'idx_project_platform_id_external_id',
            columns: ['platformId', 'externalId'],
            unique: true,
        },
    ],
    relations: {
        owner: {
            type: 'many-to-one',
            target: 'user',
            joinColumn: {
                name: 'ownerId',
                foreignKeyConstraintName: 'fk_project_owner_id',
            },
        },
        platform: {
            type: 'many-to-one',
            target: 'platform',
            cascade: true,
            onDelete: 'RESTRICT',
            onUpdate: 'RESTRICT',
            joinColumn: {
                name: 'platformId',
                foreignKeyConstraintName: 'fk_project_platform_id',
            },
        },
        folders: {
            type: 'one-to-many',
            target: 'folder',
            inverseSide: 'project',
        },
        appConnections: {
            type: 'one-to-many',
            target: 'app_connection',
            inverseSide: 'project',
        },
        events: {
            type: 'one-to-many',
            target: 'trigger_event',
            inverseSide: 'project',
        },
        files: {
            type: 'one-to-many',
            target: 'file',
            inverseSide: 'project',
        },
        flows: {
            type: 'one-to-many',
            target: 'flow',
            inverseSide: 'project',
        },
    },
});


/***/ }),
/* 258 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StoreEntryEntity = void 0;
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.StoreEntryEntity = new typeorm_1.EntitySchema({
    name: 'store-entry',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { key: {
            type: String,
            length: shared_1.STORE_KEY_MAX_LENGTH,
        }, projectId: database_common_1.ApIdSchema, value: {
            type: database_common_1.JSONB_COLUMN_TYPE,
            nullable: true,
        } }),
    uniques: [
        {
            columns: ['projectId', 'key'],
        },
    ],
});


/***/ }),
/* 259 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceTagEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.PieceTagEntity = new typeorm_1.EntitySchema({
    name: 'piece_tag',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { platformId: {
            type: String,
        }, pieceName: {
            type: String,
        }, tagId: {
            type: String,
        } }),
    uniques: [
        {
            columns: ['tagId', 'pieceName'],
        },
    ],
    indices: [
        {
            name: 'tag_platformId',
            columns: ['platformId'],
        },
    ],
    relations: {
        tag: {
            target: 'tag',
            type: 'many-to-one',
            cascade: true,
            joinColumn: {
                name: 'tagId',
            },
        },
        platform: {
            target: 'platform',
            type: 'many-to-one',
            cascade: true,
            joinColumn: {
                name: 'platformId',
            },
        },
    },
});


/***/ }),
/* 260 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TagEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.TagEntity = new typeorm_1.EntitySchema({
    name: 'tag',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { platformId: {
            type: String,
        }, name: {
            type: String,
        } }),
    uniques: [
        {
            columns: ['platformId', 'name'],
        },
    ],
    relations: {
        platform: {
            target: 'platform',
            type: 'many-to-one',
            cascade: true,
            joinColumn: {
                name: 'platformId',
            },
        },
    },
});


/***/ }),
/* 261 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.UserEntity = new typeorm_1.EntitySchema({
    name: 'user',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { email: {
            type: String,
        }, firstName: {
            type: String,
        }, lastName: {
            type: String,
        }, password: {
            type: String,
        }, verified: {
            type: Boolean,
        }, status: {
            type: String,
        }, trackEvents: {
            type: Boolean,
            nullable: true,
        }, newsLetter: {
            type: Boolean,
            nullable: true,
        }, platformRole: {
            type: String,
            nullable: false,
        }, externalId: {
            type: String,
            nullable: true,
        }, platformId: {
            type: String,
            nullable: true,
        } }),
    indices: [
        {
            name: 'idx_user_platform_id_email',
            columns: ['platformId', 'email'],
            unique: true,
        },
        {
            name: 'idx_user_platform_id_external_id',
            columns: ['platformId', 'externalId'],
            unique: true,
        },
    ],
    relations: {
        projects: {
            type: 'one-to-many',
            target: 'user',
            inverseSide: 'owner',
        },
    },
});


/***/ }),
/* 262 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserInvitationEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.UserInvitationEntity = new typeorm_1.EntitySchema({
    name: 'user_invitation',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { platformId: {
            type: String,
            nullable: false,
        }, type: {
            type: String,
            nullable: false,
        }, platformRole: {
            type: String,
            nullable: true,
        }, email: {
            type: String,
        }, projectId: {
            type: String,
            nullable: true,
        }, projectRole: {
            type: String,
            nullable: true,
        }, status: {
            type: String,
            nullable: false,
        } }),
    indices: [
        {
            name: 'idx_user_invitation_email_platform_project',
            columns: ['email', 'platformId', 'projectId'],
            unique: true,
        },
    ],
    relations: {},
});


/***/ }),
/* 263 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebhookSimulationEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.WebhookSimulationEntity = new typeorm_1.EntitySchema({
    name: 'webhook_simulation',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { flowId: database_common_1.ApIdSchema, projectId: database_common_1.ApIdSchema }),
    indices: [
        {
            name: 'idx_webhook_simulation_flow_id',
            columns: ['flowId'],
            unique: true,
        },
    ],
});


/***/ }),
/* 264 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkerMachineEntity = void 0;
const typeorm_1 = __webpack_require__(226);
const database_common_1 = __webpack_require__(228);
exports.WorkerMachineEntity = new typeorm_1.EntitySchema({
    name: 'worker_machine',
    columns: Object.assign(Object.assign({}, database_common_1.BaseColumnSchemaPart), { platformId: Object.assign(Object.assign({}, database_common_1.ApIdSchema), { nullable: true }), type: {
            type: String,
        }, information: {
            type: database_common_1.JSONB_COLUMN_TYPE,
        } }),
    relations: {
        platform: {
            type: 'many-to-one',
            target: 'platform',
            joinColumn: {
                name: 'platformId',
            },
        },
    },
});


/***/ }),
/* 265 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPostgresDataSource = void 0;
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const _1685053959806_MakeStripeSubscriptionNullable_1 = __webpack_require__(266);
const _1685538145476_addTemplates_1 = __webpack_require__(267);
const _1685991260335_ChangeToJsonToPeserveKeys_1 = __webpack_require__(268);
const _1686133672743_AddPinnedAndBlogUrlToTemplates_1 = __webpack_require__(269);
const _1686154285890_add_pinned_order_1 = __webpack_require__(270);
const _1688083336934_AddProjectIdToTemplate_1 = __webpack_require__(271);
const _1688739844617_AddBillingParameters_1 = __webpack_require__(272);
const _1688943462327_AddAppSumo_1 = __webpack_require__(273);
const _1689177797092_AddProjectMembers_1 = __webpack_require__(274);
const _1689336533370_AddTasksPerDays_1 = __webpack_require__(275);
const _1689806173642_RemoveCalculatedMetrics_1 = __webpack_require__(276);
const _1690459469381_AddReferral_1 = __webpack_require__(277);
const _1694379223109_flow_template_add_user_id_and_image_url_1 = __webpack_require__(278);
const _1694381968985_project_member_relations_1 = __webpack_require__(279);
const _1694604120205_AddFeaturedDescriptionAndFlagToTemplates_1 = __webpack_require__(280);
const _1694902537045_ModifyBilling_1 = __webpack_require__(281);
const _1695916063833_AddDatasourcesLimit_1 = __webpack_require__(282);
const _1697717995884_add_platform_1 = __webpack_require__(283);
const _1698077078271_AddCustomDomain_1 = __webpack_require__(284);
const database_connection_1 = __webpack_require__(225);
const _1696245170061_add_piece_type_and_package_type_to_flow_version_1 = __webpack_require__(285);
const _1696245170062_add_piece_type_and_package_type_to_flow_template_1 = __webpack_require__(286);
const _1697969398200_store_code_inside_flow_1 = __webpack_require__(287);
const _1699818680567_update_user_status_rename_shadow_to_invited_1 = __webpack_require__(289);
const _1701096458822_add_partial_unique_index_for_email_and_platform_id_is_null_1 = __webpack_require__(290);
const _1707087022764_add_trigger_test_strategy_1 = __webpack_require__(291);
const _1709581196563_migrate_webhook_1 = __webpack_require__(292);
const _1716105958530_RemoveShowActivityLog_1 = __webpack_require__(293);
const _1716725027424_AddDurationForRuns_1 = __webpack_require__(294);
const _1688922241747_AddAuthToPiecesMetadata_1 = __webpack_require__(295);
const _1674788714498_FlowAndFileProjectId_1 = __webpack_require__(296);
const _1676238396411_initialize_schema_1 = __webpack_require__(297);
const _1676505294811_encrypt_credentials_1 = __webpack_require__(298);
const _1676649852890_remove_store_action_1 = __webpack_require__(303);
const _1677286751592_billing_1 = __webpack_require__(304);
const _1677521257188_add_version_to_piece_steps_1 = __webpack_require__(305);
const _1677894800372_product_embed_1 = __webpack_require__(306);
const _1678382946390_add_event_routing_1 = __webpack_require__(307);
const _1678492809093_removeCollectionVersion_1 = __webpack_require__(308);
const _1678621361185_addtriggerevents_1 = __webpack_require__(309);
const _1678928503715_bump_fix_piece_versions_1 = __webpack_require__(310);
const _1679014156667_migrate_schedule_1 = __webpack_require__(311);
const _1680563747425_add_notifications_status_1 = __webpack_require__(312);
const _1680698259291_create_webhook_simulation_schema_1 = __webpack_require__(313);
const _1680986182074_RemoveCollections_1 = __webpack_require__(314);
const _1681019096716_StoreAllPeriods_1 = __webpack_require__(315);
const _1681107443963_AddInputUiInfo_1 = __webpack_require__(316);
const _1683040965874_allow_nullable_store_entry_1 = __webpack_require__(317);
const _1683195711242_rename_notifications_1 = __webpack_require__(318);
const _1683199709317_list_flow_runs_indices_1 = __webpack_require__(319);
const _1683458275525_project_notify_status_not_null_1 = __webpack_require__(320);
const _1683552928243_flow_run_pause_metadata_1 = __webpack_require__(321);
const _1683898241599_ChangeVariableSyntax_1 = __webpack_require__(322);
const _1685537054805_piece_metadata_1 = __webpack_require__(323);
const _1686090319016_AddProjectIdToPieceMetadata_1 = __webpack_require__(324);
const _1686138629812_unifyPieceName_1 = __webpack_require__(325);
const _1687384796637_AddScheduleOptions_1 = __webpack_require__(326);
const _1689292797727_AddUpdatedByInFlowVersion_1 = __webpack_require__(327);
const _1689351564290_AddTasksToRun_1 = __webpack_require__(328);
const _1691703023866_add_app_connection_type_to_top_level_1 = __webpack_require__(329);
const _1692106375081_AddTagsToRun_1 = __webpack_require__(330);
const _1693004806926_AddFileToPostgres_1 = __webpack_require__(331);
const _1693402930301_AddStatusToConnections_1 = __webpack_require__(332);
const _1693850082449_AddUserMetaInformation_1 = __webpack_require__(333);
const _1694367186954_fix_piece_metadata_order_bug_1 = __webpack_require__(334);
const _1694691554696_file_type_compression_1 = __webpack_require__(335);
const _1694902537040_Chatbot_1 = __webpack_require__(336);
const _1695719749099_AddVisibilityStatusToChatbot_1 = __webpack_require__(337);
const _1695992551156_add_piece_type_and_package_type_to_piece_metadata_1 = __webpack_require__(338);
const _1696950789636_add_archive_id_to_piece_metadata_1 = __webpack_require__(339);
const _1698065083750_add_platform_to_project_1 = __webpack_require__(340);
const _1698323987669_AddTerminationReason_1 = __webpack_require__(341);
const _1698602417745_add_signing_key_1 = __webpack_require__(342);
const _1698698190965_AddDisplayNameToSigningKey_1 = __webpack_require__(343);
const _1698700720482_managed_authn_initial_1 = __webpack_require__(344);
const _1699221414907_AddOAuth2AppEntiity_1 = __webpack_require__(345);
const _1699281870038_add_filtered_pieces_to_platform_1 = __webpack_require__(346);
const _1699491705906_AddSmtpAndPrivacyUrlToPlatform_1 = __webpack_require__(347);
const _1699901161457_add_platform_id_to_user_1 = __webpack_require__(348);
const _1700132368636_RemoveUnusedFieldsinBilling_1 = __webpack_require__(349);
const _1700396157624_add_otp_entity_1 = __webpack_require__(350);
const _1700406308445_AddPlatformDefaultLanguage_1 = __webpack_require__(351);
const _1700522340280_AddPlatformIdToPieceMetadata_1 = __webpack_require__(352);
const _1700751925992_MakeStripeCustomerIdNullable_1 = __webpack_require__(353);
const _1701084418793_add_state_to_otp_1 = __webpack_require__(354);
const _1701261357197_migrate_ee_users_to_oldest_platform_1 = __webpack_require__(355);
const _1701647565290_ModifyProjectMembersAndRemoveUserId_1 = __webpack_require__(356);
const _1701716639135_AddApiKeys_1 = __webpack_require__(357);
const _1701794452891_AddEmbeddingFeatureToPlatform_1 = __webpack_require__(358);
const _1701807681821_AddPlatformIdToFile_1 = __webpack_require__(359);
const _1702379794665_remove_flow_instance_1 = __webpack_require__(360);
const _1703411318826_AddPlatformIdToFlowTemplates_1 = __webpack_require__(361);
const _1703711596105_RenameAppNameToPieceName_1 = __webpack_require__(362);
const _1703769034497_AddVerifiedAndChangeStatus_1 = __webpack_require__(363);
const _1704503804056_AddGitRepoMigrationPostgres_1 = __webpack_require__(364);
const _1704636362533_AddGitSyncEnabledToPlatform_1 = __webpack_require__(365);
const _1704667304953_AddAuthOptionsToPlatform_1 = __webpack_require__(366);
const _1704797979825_AddEnableEmailAuthToPlatform_1 = __webpack_require__(367);
const _1705586178452_RemoveUniqueonAppNameAppCredentials_1 = __webpack_require__(368);
const _1705969874745_MakePlatformNotNullable_1 = __webpack_require__(369);
const _1707231704973_AddCategoriesToPieceMetadataPostgres_1 = __webpack_require__(370);
const _1707614902283_AddAuditEvents_1 = __webpack_require__(371);
const _1708515756040_create_activity_table_1 = __webpack_require__(372);
const _1708521505204_AddUniqueStoreConstraint_1 = __webpack_require__(373);
const _1708529586342_add_length_limits_to_activity_1 = __webpack_require__(374);
const _1708811745694_AddProjectBilling_1 = __webpack_require__(375);
const _1708861032399_add_show_activity_log_to_platform_1 = __webpack_require__(376);
const _1709052740378_AddPlatformToPostgres_1 = __webpack_require__(377);
const _1709151540095_add_slug_to_git_repo_1 = __webpack_require__(378);
const _1709500213947_add_user_email_to_referral_1 = __webpack_require__(379);
const _1709500873378_DropUnusedPlatformIndex_1 = __webpack_require__(380);
const _1709505632771_SetNotNullOnPlatform_1 = __webpack_require__(381);
const _1709566642531_add_platform_foreign_key_to_project_postgres_1 = __webpack_require__(382);
const _1709581196564_migrate_webhook_templates_1 = __webpack_require__(383);
const _1709641016072_set_flow_version_updated_by_to_null_if_user_is_deleted_postgres_1 = __webpack_require__(384);
const _1709669091258_move_generated_by_from_signing_key_to_audit_event_postgres_1 = __webpack_require__(385);
const _1709753080714_AddMappingStateToGit_1 = __webpack_require__(386);
const _1710098373707_AddAuthorsToPieces_1 = __webpack_require__(387);
const _1710243591721_add_deleted_to_project_postgres_1 = __webpack_require__(388);
const _1710720610669_cascade_project_delete_app_credentials_and_connection_key_1 = __webpack_require__(389);
const _1710720610670_cascade_project_delete_activity_1 = __webpack_require__(390);
const _1711073772867_AddBranchTypeToGit_1 = __webpack_require__(391);
const _1711411372480_migrateInputUiInfo_1 = __webpack_require__(392);
const _1711768296861_AddProjectUsageColumnToPiece_1 = __webpack_require__(393);
const _1712107871405_AddPieceTags_1 = __webpack_require__(394);
const _1712279318440_PiecesProjectLimits_1 = __webpack_require__(395);
const _1713221809186_RemoveUniqueEmailOnUser_1 = __webpack_require__(396);
const _1713302610746_AddPlatformRoleToUser_1 = __webpack_require__(397);
const _1713643694049_AddUniqueNameToFolder_1 = __webpack_require__(398);
const _1714145914415_AddFeaturesToPlatform_1 = __webpack_require__(399);
const _1714249840058_UnifyEnterpriseWithCloud_1 = __webpack_require__(400);
const _1714904516114_AddIssueEntityPostgres_1 = __webpack_require__(401);
const _1716989780835_AddAlertsEntityPostgres_1 = __webpack_require__(402);
const _1717370717678_AddPremiumPiecesColumnPostgres_1 = __webpack_require__(403);
const _1717960689650_AddUserInvitation_1 = __webpack_require__(404);
const _1717961669938_ModifyProjectMembers_1 = __webpack_require__(405);
const _1720101280025_AddWorkerMachine_1 = __webpack_require__(406);
const getSslConfig = () => {
    var _a;
    const useSsl = server_shared_1.system.get(server_shared_1.AppSystemProp.POSTGRES_USE_SSL);
    if (useSsl === 'true') {
        return {
            ca: (_a = server_shared_1.system.get(server_shared_1.AppSystemProp.POSTGRES_SSL_CA)) === null || _a === void 0 ? void 0 : _a.replace(/\\n/g, '\n'),
        };
    }
    return false;
};
const getMigrations = () => {
    const commonMigration = [
        _1674788714498_FlowAndFileProjectId_1.FlowAndFileProjectId1674788714498,
        _1676238396411_initialize_schema_1.initializeSchema1676238396411,
        _1676505294811_encrypt_credentials_1.encryptCredentials1676505294811,
        _1676649852890_remove_store_action_1.removeStoreAction1676649852890,
        _1677286751592_billing_1.billing1677286751592,
        _1677521257188_add_version_to_piece_steps_1.addVersionToPieceSteps1677521257188,
        _1677894800372_product_embed_1.productEmbed1677894800372,
        _1678621361185_addtriggerevents_1.addtriggerevents1678621361185,
        _1678492809093_removeCollectionVersion_1.removeCollectionVersion1678492809093,
        _1678382946390_add_event_routing_1.addEventRouting1678382946390,
        _1678928503715_bump_fix_piece_versions_1.bumpFixPieceVersions1678928503715,
        _1679014156667_migrate_schedule_1.migrateSchedule1679014156667,
        _1680563747425_add_notifications_status_1.addNotificationsStatus1680563747425,
        _1681107443963_AddInputUiInfo_1.AddInputUiInfo1681107443963,
        _1680698259291_create_webhook_simulation_schema_1.CreateWebhookSimulationSchema1680698259291,
        _1680986182074_RemoveCollections_1.RemoveCollections1680986182074,
        _1681019096716_StoreAllPeriods_1.StoreAllPeriods1681019096716,
        _1683040965874_allow_nullable_store_entry_1.AllowNullableStoreEntryAndTrigger1683040965874,
        _1683195711242_rename_notifications_1.RenameNotifications1683195711242,
        _1683199709317_list_flow_runs_indices_1.ListFlowRunsIndices1683199709317,
        _1683458275525_project_notify_status_not_null_1.ProjectNotifyStatusNotNull1683458275525,
        _1683552928243_flow_run_pause_metadata_1.FlowRunPauseMetadata1683552928243,
        _1683898241599_ChangeVariableSyntax_1.ChangeVariableSyntax1683898241599,
        _1685537054805_piece_metadata_1.PieceMetadata1685537054805,
        _1686090319016_AddProjectIdToPieceMetadata_1.AddProjectIdToPieceMetadata1686090319016,
        _1686138629812_unifyPieceName_1.UnifyPieceName1686138629812,
        _1687384796637_AddScheduleOptions_1.AddScheduleOptions1687384796637,
        _1688922241747_AddAuthToPiecesMetadata_1.AddAuthToPiecesMetadata1688922241747,
        _1689292797727_AddUpdatedByInFlowVersion_1.AddUpdatedByInFlowVersion1689292797727,
        _1689351564290_AddTasksToRun_1.AddTasksToRun1689351564290,
        _1691703023866_add_app_connection_type_to_top_level_1.AddAppConnectionTypeToTopLevel1691703023866,
        _1692106375081_AddTagsToRun_1.AddTagsToRun1692106375081,
        _1693004806926_AddFileToPostgres_1.AddFileToPostgres1693004806926,
        _1693402930301_AddStatusToConnections_1.AddStatusToConnections1693402930301,
        _1693850082449_AddUserMetaInformation_1.AddUserMetaInformation1693850082449,
        _1694367186954_fix_piece_metadata_order_bug_1.FixPieceMetadataOrderBug1694367186954,
        _1694691554696_file_type_compression_1.FileTypeCompression1694691554696,
        _1694902537040_Chatbot_1.Chatbot1694902537040,
        _1695719749099_AddVisibilityStatusToChatbot_1.AddVisibilityStatusToChatbot1695719749099,
        _1695992551156_add_piece_type_and_package_type_to_piece_metadata_1.AddPieceTypeAndPackageTypeToPieceMetadata1695992551156,
        _1696245170061_add_piece_type_and_package_type_to_flow_version_1.AddPieceTypeAndPackageTypeToFlowVersion1696245170061,
        _1696950789636_add_archive_id_to_piece_metadata_1.AddArchiveIdToPieceMetadata1696950789636,
        _1697969398200_store_code_inside_flow_1.StoreCodeInsideFlow1697969398200,
        _1698065083750_add_platform_to_project_1.AddPlatformToProject1698065083750,
        _1698323987669_AddTerminationReason_1.AddTerminationReason1698323987669,
        _1698700720482_managed_authn_initial_1.ManagedAuthnInitial1698700720482,
        _1699818680567_update_user_status_rename_shadow_to_invited_1.UpdateUserStatusRenameShadowToInvited1699818680567,
        _1699901161457_add_platform_id_to_user_1.AddPlatformIdToUser1699901161457,
        _1700522340280_AddPlatformIdToPieceMetadata_1.AddPlatformIdToPieceMetadata1700522340280,
        _1701096458822_add_partial_unique_index_for_email_and_platform_id_is_null_1.AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822,
        _1701807681821_AddPlatformIdToFile_1.AddPlatformIdToFile1701807681821,
        _1702379794665_remove_flow_instance_1.RemoveFlowInstance1702379794665,
        _1703711596105_RenameAppNameToPieceName_1.RenameAppNameToPieceName1703711596105,
        _1703769034497_AddVerifiedAndChangeStatus_1.AddVerifiedAndChangeStatus1703769034497,
        _1707087022764_add_trigger_test_strategy_1.AddTriggerTestStrategy1707087022764,
        _1707231704973_AddCategoriesToPieceMetadataPostgres_1.AddCategoriesToPieceMetadataPostgres1707231704973,
        _1708521505204_AddUniqueStoreConstraint_1.AddUniqueStoreConstraint1708521505204,
        _1709641016072_set_flow_version_updated_by_to_null_if_user_is_deleted_postgres_1.SetFlowVersionUpdatedByToNullIfUserIsDeletedPostgres1709641016072,
        _1709581196563_migrate_webhook_1.MigrateWebhook1709581196563,
        _1710098373707_AddAuthorsToPieces_1.AddAuthorsToPieces1710098373707,
        _1710243591721_add_deleted_to_project_postgres_1.AddDeletedToProjectPostgres1710243591721,
        _1711411372480_migrateInputUiInfo_1.MigrateInputUiInfo1711411372480,
        _1711768296861_AddProjectUsageColumnToPiece_1.AddProjectUsageColumnToPiece1711768296861,
        _1712107871405_AddPieceTags_1.AddPieceTags1712107871405,
        _1713221809186_RemoveUniqueEmailOnUser_1.RemoveUniqueEmailOnUser1713221809186,
        _1713302610746_AddPlatformRoleToUser_1.AddPlatformRoleToUser1713302610746,
        _1713643694049_AddUniqueNameToFolder_1.AddUniqueNameToFolder1713643694049,
        _1714145914415_AddFeaturesToPlatform_1.AddFeaturesToPlatform1714145914415,
        _1714904516114_AddIssueEntityPostgres_1.AddIssueEntityPostgres1714904516114,
        _1716105958530_RemoveShowActivityLog_1.RemoveShowActivityLog1716105958530,
        _1716725027424_AddDurationForRuns_1.AddDurationForRuns1716725027424,
        _1716989780835_AddAlertsEntityPostgres_1.AddAlertsEntityPostgres1716989780835,
        _1717960689650_AddUserInvitation_1.AddUserInvitation1717960689650,
        _1717370717678_AddPremiumPiecesColumnPostgres_1.AddPremiumPiecesColumnPostgres1717370717678,
        _1720101280025_AddWorkerMachine_1.AddWorkerMachine1720101280025,
    ];
    const edition = server_shared_1.system.getEdition();
    switch (edition) {
        case shared_1.ApEdition.CLOUD:
        case shared_1.ApEdition.ENTERPRISE:
            commonMigration.push(_1685538145476_addTemplates_1.AddTemplates1685538145476, _1686133672743_AddPinnedAndBlogUrlToTemplates_1.AddPinnedAndBlogUrlToTemplates1686133672743, _1686154285890_add_pinned_order_1.AddPinnedOrder1686154285890, _1688083336934_AddProjectIdToTemplate_1.AddProjectIdToTemplate1688083336934, _1694379223109_flow_template_add_user_id_and_image_url_1.FlowTemplateAddUserIdAndImageUrl1694379223109, _1694604120205_AddFeaturedDescriptionAndFlagToTemplates_1.AddFeaturedDescriptionAndFlagToTemplates1694604120205, _1689177797092_AddProjectMembers_1.AddProjectMembers1689177797092, _1694381968985_project_member_relations_1.ProjectMemberRelations1694381968985, _1697717995884_add_platform_1.AddPlatform1697717995884, _1698077078271_AddCustomDomain_1.AddCustomDomain1698077078271, _1698602417745_add_signing_key_1.AddSigningKey1698602417745, _1698698190965_AddDisplayNameToSigningKey_1.AddDisplayNameToSigningKey1698698190965, _1699221414907_AddOAuth2AppEntiity_1.AddOAuth2AppEntiity1699221414907, _1699281870038_add_filtered_pieces_to_platform_1.AddFilteredPiecesToPlatform1699281870038, _1699491705906_AddSmtpAndPrivacyUrlToPlatform_1.AddSmtpAndPrivacyUrlToPlatform1699491705906, _1700396157624_add_otp_entity_1.AddOtpEntity1700396157624, _1700406308445_AddPlatformDefaultLanguage_1.AddPlatformDefaultLanguage1700406308445, _1685053959806_MakeStripeSubscriptionNullable_1.MakeStripeSubscriptionNullable1685053959806, _1688739844617_AddBillingParameters_1.AddBillingParameters1688739844617, _1689336533370_AddTasksPerDays_1.AddTasksPerDays1689336533370, _1689806173642_RemoveCalculatedMetrics_1.RemoveCalculatedMetrics1689806173642, _1694902537045_ModifyBilling_1.ModifyBilling1694902537045, _1700132368636_RemoveUnusedFieldsinBilling_1.RemoveUnusedFieldsinBilling1700132368636, _1695916063833_AddDatasourcesLimit_1.AddDatasourcesLimit1695916063833, _1700751925992_MakeStripeCustomerIdNullable_1.MakeStripeCustomerIdNullable1700751925992, _1701084418793_add_state_to_otp_1.AddStateToOtp1701084418793, _1701647565290_ModifyProjectMembersAndRemoveUserId_1.ModifyProjectMembersAndRemoveUserId1701647565290, _1701716639135_AddApiKeys_1.AddApiKeys1701716639135, _1701794452891_AddEmbeddingFeatureToPlatform_1.AddEmbeddingFeatureToPlatform1701794452891, _1703411318826_AddPlatformIdToFlowTemplates_1.AddPlatformIdToFlowTemplates1703411318826, _1704667304953_AddAuthOptionsToPlatform_1.AddAuthOptionsToPlatform1704667304953, _1704797979825_AddEnableEmailAuthToPlatform_1.AddEnableEmailAuthToPlatform1704797979825, _1704503804056_AddGitRepoMigrationPostgres_1.AddGitRepoMigrationPostgres1704503804056, _1704636362533_AddGitSyncEnabledToPlatform_1.AddGitSyncEnabledToPlatform1704636362533, _1707614902283_AddAuditEvents_1.AddAuditEvents1707614902283, _1708515756040_create_activity_table_1.CreateActivityTable1708515756040, _1708529586342_add_length_limits_to_activity_1.AddLengthLimitsToActivity1708529586342, _1708861032399_add_show_activity_log_to_platform_1.AddShowActivityLogToPlatform1708861032399, _1705969874745_MakePlatformNotNullable_1.MakePlatformNotNullable1705969874745, _1709151540095_add_slug_to_git_repo_1.AddSlugToGitRepo1709151540095, _1709500873378_DropUnusedPlatformIndex_1.DropUnusedPlatformIndex1709500873378, _1709581196564_migrate_webhook_templates_1.MigrateWebhookTemplate1709581196564, _1709566642531_add_platform_foreign_key_to_project_postgres_1.AddPlatformForeignKeyToProjectPostgres1709566642531, _1709669091258_move_generated_by_from_signing_key_to_audit_event_postgres_1.MoveGeneratedByFromSigningKeyToAuditEventPostgres1709669091258, _1709753080714_AddMappingStateToGit_1.AddMappingStateToGit1709753080714, _1710720610670_cascade_project_delete_activity_1.CascadeProjectDeleteToActivity1710720610670, _1711073772867_AddBranchTypeToGit_1.AddBranchTypeToGit1711073772867, _1712279318440_PiecesProjectLimits_1.PiecesProjectLimits1712279318440, 
            // Cloud Only Migrations, before unifing the migrations.
            _1685991260335_ChangeToJsonToPeserveKeys_1.ChangeToJsonToKeepKeysOrder1685991260335, _1696245170062_add_piece_type_and_package_type_to_flow_template_1.AddPieceTypeAndPackageTypeToFlowTemplate1696245170062, _1705586178452_RemoveUniqueonAppNameAppCredentials_1.RemoveUniqueonAppNameAppCredentials1705586178452, _1710720610669_cascade_project_delete_app_credentials_and_connection_key_1.CascadeProjectDeleteAppCredentialsAndConnectionKey1710720610669, 
            // Enterprise Only Migrations, before unifing the migrations.
            _1701261357197_migrate_ee_users_to_oldest_platform_1.MigrateEeUsersToOldestPlatform1701261357197, _1714249840058_UnifyEnterpriseWithCloud_1.UnifyEnterpriseWithCloud1714249840058, 
            // Cloud Only Entities, But we need to run them for Enterprise as well.
            _1688943462327_AddAppSumo_1.AddAppSumo1688943462327, _1690459469381_AddReferral_1.AddReferral1690459469381, _1709500213947_add_user_email_to_referral_1.AddUserEmailToReferral1709500213947, _1708811745694_AddProjectBilling_1.AddProjectBilling1708811745694, 
            // New Migration After Unifying
            _1717961669938_ModifyProjectMembers_1.ModifyProjectMembers1717961669938);
            break;
        case shared_1.ApEdition.COMMUNITY:
            commonMigration.push(_1709052740378_AddPlatformToPostgres_1.AddPlatformToPostgres1709052740378, _1709505632771_SetNotNullOnPlatform_1.SetNotNullOnPlatform1709505632771);
            break;
    }
    return commonMigration;
};
const getMigrationConfig = () => {
    const env = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT);
    if (env === shared_1.ApEnvironment.TESTING) {
        return {};
    }
    return {
        migrationsRun: true,
        migrationsTransactionMode: 'each',
        migrations: getMigrations(),
    };
};
const createPostgresDataSource = () => {
    const migrationConfig = getMigrationConfig();
    const url = server_shared_1.system.get(server_shared_1.AppSystemProp.POSTGRES_URL);
    if (!(0, shared_1.isNil)(url)) {
        return new typeorm_1.DataSource(Object.assign(Object.assign({ type: 'postgres', url, ssl: getSslConfig() }, migrationConfig), database_connection_1.commonProperties));
    }
    const database = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.POSTGRES_DATABASE);
    const host = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.POSTGRES_HOST);
    const password = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.POSTGRES_PASSWORD);
    const serializedPort = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.POSTGRES_PORT);
    const port = Number.parseInt(serializedPort, 10);
    const username = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.POSTGRES_USERNAME);
    return new typeorm_1.DataSource(Object.assign(Object.assign({ type: 'postgres', host,
        port,
        username,
        password,
        database, ssl: getSslConfig() }, migrationConfig), database_connection_1.commonProperties));
};
exports.createPostgresDataSource = createPostgresDataSource;


/***/ }),
/* 266 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MakeStripeSubscriptionNullable1685053959806 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class MakeStripeSubscriptionNullable1685053959806 {
    constructor() {
        this.name = 'MakeStripeSubscriptionNullable1685053959806';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "stripeSubscriptionId" DROP NOT NULL');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "name" character varying NOT NULL');
        });
    }
}
exports.MakeStripeSubscriptionNullable1685053959806 = MakeStripeSubscriptionNullable1685053959806;


/***/ }),
/* 267 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTemplates1685538145476 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddTemplates1685538145476 {
    constructor() {
        this.name = 'AddTemplates1685538145476';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('CREATE TABLE "flow_template" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "name" character varying NOT NULL, "description" character varying NOT NULL, "template" jsonb NOT NULL, "tags" character varying array NOT NULL, "pieces" character varying array NOT NULL, CONSTRAINT "PK_fcacbf8776a0a3337eb8eca7478" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_flow_template_tags" ON "flow_template" ("tags") ');
            yield queryRunner.query('CREATE INDEX "idx_flow_template_pieces" ON "flow_template" ("pieces") ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('DROP INDEX "public"."idx_flow_template_pieces"');
            yield queryRunner.query('DROP INDEX "public"."idx_flow_template_tags"');
            yield queryRunner.query('DROP TABLE "flow_template"');
        });
    }
}
exports.AddTemplates1685538145476 = AddTemplates1685538145476;


/***/ }),
/* 268 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChangeToJsonToKeepKeysOrder1685991260335 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class ChangeToJsonToKeepKeysOrder1685991260335 {
    constructor() {
        this.name = 'ChangeToJsonToKeepKeysOrder1685991260335';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "actions"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "actions" json NOT NULL');
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "triggers"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "triggers" json NOT NULL');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "triggers"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "triggers" jsonb NOT NULL');
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "actions"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "actions" jsonb NOT NULL');
        });
    }
}
exports.ChangeToJsonToKeepKeysOrder1685991260335 = ChangeToJsonToKeepKeysOrder1685991260335;


/***/ }),
/* 269 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPinnedAndBlogUrlToTemplates1686133672743 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddPinnedAndBlogUrlToTemplates1686133672743 {
    constructor() {
        this.name = 'AddPinnedAndBlogUrlToTemplates1686133672743';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "pinned" boolean NOT NULL');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "blogUrl" character varying NOT NULL');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "blogUrl"');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "pinned"');
        });
    }
}
exports.AddPinnedAndBlogUrlToTemplates1686133672743 = AddPinnedAndBlogUrlToTemplates1686133672743;


/***/ }),
/* 270 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPinnedOrder1686154285890 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddPinnedOrder1686154285890 {
    constructor() {
        this.name = 'AddPinnedOrder1686154285890';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "pinned"');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "pinnedOrder" integer');
            yield queryRunner.query('ALTER TABLE "flow_template" ALTER COLUMN "blogUrl" DROP NOT NULL');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" ALTER COLUMN "blogUrl" SET NOT NULL');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "pinnedOrder"');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "pinned" boolean NOT NULL');
        });
    }
}
exports.AddPinnedOrder1686154285890 = AddPinnedOrder1686154285890;


/***/ }),
/* 271 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddProjectIdToTemplate1688083336934 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddProjectIdToTemplate1688083336934 {
    constructor() {
        this.name = 'AddProjectIdToTemplate1688083336934';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            server_shared_1.logger.info('Running migration AddProjectIdToTemplate1688083336934');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "projectId" character varying');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD CONSTRAINT "fk_flow_template_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('Finished migration AddProjectIdToTemplate1688083336934');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" DROP CONSTRAINT "fk_flow_template_project_id"');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "projectId"');
        });
    }
}
exports.AddProjectIdToTemplate1688083336934 = AddProjectIdToTemplate1688083336934;


/***/ }),
/* 272 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddBillingParameters1688739844617 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddBillingParameters1688739844617 {
    constructor() {
        this.name = 'AddBillingParameters1688739844617';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "minimumPollingInterval" integer NOT NULL DEFAULT 5');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "activeFlows" integer NOT NULL DEFAULT 100');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "connections" integer NOT NULL DEFAULT 100');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "teamMembers" integer NOT NULL DEFAULT 1');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "activeFlows" integer NOT NULL DEFAULT 0');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "connections" integer NOT NULL DEFAULT 0');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "teamMembers" integer NOT NULL DEFAULT 0');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "teamMembers"');
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "connections"');
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "activeFlows"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "teamMembers"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "connections"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "activeFlows"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "minimumPollingInterval"');
        });
    }
}
exports.AddBillingParameters1688739844617 = AddBillingParameters1688739844617;


/***/ }),
/* 273 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAppSumo1688943462327 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddAppSumo1688943462327 {
    constructor() {
        this.name = 'AddAppSumo1688943462327';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('CREATE TABLE "appsumo" ("uuid" character varying NOT NULL, "plan_id" character varying NOT NULL, "activation_email" character varying NOT NULL, CONSTRAINT "PK_3589df5be2973351814f727ae86" PRIMARY KEY ("uuid"))');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('DROP TABLE "appsumo"');
        });
    }
}
exports.AddAppSumo1688943462327 = AddAppSumo1688943462327;


/***/ }),
/* 274 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddProjectMembers1689177797092 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddProjectMembers1689177797092 {
    constructor() {
        this.name = 'AddProjectMembers1689177797092';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('CREATE TABLE "project_member" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "userId" character varying(21) NOT NULL, "projectId" character varying(21) NOT NULL, "role" character varying NOT NULL, "status" character varying NOT NULL, CONSTRAINT "PK_64dba8e9dcf96ce383cfd19d6fb" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_project_member_project_id_user_id" ON "project_member" ("projectId", "userId") ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('DROP INDEX "public"."idx_project_member_project_id_user_id"');
            yield queryRunner.query('DROP TABLE "project_member"');
        });
    }
}
exports.AddProjectMembers1689177797092 = AddProjectMembers1689177797092;


/***/ }),
/* 275 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTasksPerDays1689336533370 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddTasksPerDays1689336533370 {
    constructor() {
        this.name = 'AddTasksPerDays1689336533370';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "tasksPerDay" integer');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "minimumPollingInterval" DROP DEFAULT');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "activeFlows" DROP DEFAULT');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "connections" DROP DEFAULT');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "teamMembers" DROP DEFAULT');
            yield queryRunner.query('ALTER TABLE "project_usage" ALTER COLUMN "activeFlows" DROP DEFAULT');
            yield queryRunner.query('ALTER TABLE "project_usage" ALTER COLUMN "connections" DROP DEFAULT');
            yield queryRunner.query('ALTER TABLE "project_usage" ALTER COLUMN "teamMembers" DROP DEFAULT');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_usage" ALTER COLUMN "teamMembers" SET DEFAULT \'0\'');
            yield queryRunner.query('ALTER TABLE "project_usage" ALTER COLUMN "connections" SET DEFAULT \'0\'');
            yield queryRunner.query('ALTER TABLE "project_usage" ALTER COLUMN "activeFlows" SET DEFAULT \'0\'');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "teamMembers" SET DEFAULT \'1\'');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "connections" SET DEFAULT \'100\'');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "activeFlows" SET DEFAULT \'100\'');
            yield queryRunner.query('ALTER TABLE "project_plan" ALTER COLUMN "minimumPollingInterval" SET DEFAULT \'5\'');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "tasksPerDay"');
        });
    }
}
exports.AddTasksPerDays1689336533370 = AddTasksPerDays1689336533370;


/***/ }),
/* 276 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveCalculatedMetrics1689806173642 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class RemoveCalculatedMetrics1689806173642 {
    constructor() {
        this.name = 'RemoveCalculatedMetrics1689806173642';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "activeFlows"');
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "connections"');
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "teamMembers"');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "teamMembers" integer NOT NULL');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "connections" integer NOT NULL');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "activeFlows" integer NOT NULL');
        });
    }
}
exports.RemoveCalculatedMetrics1689806173642 = RemoveCalculatedMetrics1689806173642;


/***/ }),
/* 277 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddReferral1690459469381 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddReferral1690459469381 {
    constructor() {
        this.name = 'AddReferral1690459469381';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('CREATE TABLE "referal" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "referredUserId" character varying(21) NOT NULL, "referringUserId" character varying(21) NOT NULL, CONSTRAINT "PK_567787298ed6c13527df7887096" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_referral_referring_user_id" ON "referal" ("referredUserId", "referringUserId") ');
            yield queryRunner.query('ALTER TABLE "referal" ADD CONSTRAINT "fk_referral_referred_user_id" FOREIGN KEY ("referredUserId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "referal" ADD CONSTRAINT "fk_referral_referring_user_id" FOREIGN KEY ("referringUserId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "referal" DROP CONSTRAINT "fk_referral_referring_user_id"');
            yield queryRunner.query('ALTER TABLE "referal" DROP CONSTRAINT "fk_referral_referred_user_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_referral_referring_user_id"');
            yield queryRunner.query('DROP TABLE "referal"');
        });
    }
}
exports.AddReferral1690459469381 = AddReferral1690459469381;


/***/ }),
/* 278 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowTemplateAddUserIdAndImageUrl1694379223109 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class FlowTemplateAddUserIdAndImageUrl1694379223109 {
    constructor() {
        this.name = 'FlowTemplateAddUserIdAndImageUrl1694379223109';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "pinnedOrder"');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "userId" character varying');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "imageUrl" character varying');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP CONSTRAINT "fk_flow_template_project_id"');
            yield queryRunner.query('ALTER TABLE "flow_template" ALTER COLUMN "projectId" SET NOT NULL');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD CONSTRAINT "fk_flow_template_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD CONSTRAINT "fk_flow_template_user_id" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('FlowTemplateAddUserIdAndImageUrl1694379223109 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" DROP CONSTRAINT "fk_flow_template_user_id"');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP CONSTRAINT "fk_flow_template_project_id"');
            yield queryRunner.query('ALTER TABLE "flow_template" ALTER COLUMN "projectId" DROP NOT NULL');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD CONSTRAINT "fk_flow_template_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "imageUrl"');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "userId"');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "pinnedOrder" integer');
            server_shared_1.logger.info('FlowTemplateAddUserIdAndImageUrl1694379223109 down');
        });
    }
}
exports.FlowTemplateAddUserIdAndImageUrl1694379223109 = FlowTemplateAddUserIdAndImageUrl1694379223109;


/***/ }),
/* 279 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectMemberRelations1694381968985 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class ProjectMemberRelations1694381968985 {
    constructor() {
        this.name = 'ProjectMemberRelations1694381968985';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_member" ADD CONSTRAINT "fk_project_member_user_id" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "project_member" ADD CONSTRAINT "fk_project_member_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('ProjectMemberRelations1694381968985 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_member" DROP CONSTRAINT "fk_project_member_project_id"');
            yield queryRunner.query('ALTER TABLE "project_member" DROP CONSTRAINT "fk_project_member_user_id"');
            server_shared_1.logger.info('ProjectMemberRelations1694381968985 down');
        });
    }
}
exports.ProjectMemberRelations1694381968985 = ProjectMemberRelations1694381968985;


/***/ }),
/* 280 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddFeaturedDescriptionAndFlagToTemplates1694604120205 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddFeaturedDescriptionAndFlagToTemplates1694604120205 {
    constructor() {
        this.name = 'AddFeaturedDescriptionAndFlagToTemplates1694604120205';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "isFeatured" boolean');
            yield queryRunner.query('ALTER TABLE "flow_template" ADD "featuredDescription" character varying');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "featuredDescription"');
            yield queryRunner.query('ALTER TABLE "flow_template" DROP COLUMN "isFeatured"');
        });
    }
}
exports.AddFeaturedDescriptionAndFlagToTemplates1694604120205 = AddFeaturedDescriptionAndFlagToTemplates1694604120205;


/***/ }),
/* 281 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModifyBilling1694902537045 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class ModifyBilling1694902537045 {
    constructor() {
        this.name = 'ModifyBilling1694902537045';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_plan" RENAME COLUMN "name" TO "flowPlanName"');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "botPlanName" character varying NOT NULL DEFAULT \'free\'');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "bots" integer NOT NULL DEFAULT 1');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "datasourcesSize" integer NOT NULL DEFAULT 10485760');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "datasourcesSize" integer NOT NULL DEFAULT \'0\'');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD "bots" integer NOT NULL DEFAULT \'0\'');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "bots"');
            yield queryRunner.query('ALTER TABLE "project_usage" DROP COLUMN "datasourcesSize"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "datasourcesSize"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "bots"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "botPlanName"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "flowPlanName"');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "name" character varying NOT NULL');
        });
    }
}
exports.ModifyBilling1694902537045 = ModifyBilling1694902537045;


/***/ }),
/* 282 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddDatasourcesLimit1695916063833 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddDatasourcesLimit1695916063833 {
    constructor() {
        this.name = 'AddDatasourcesLimit1695916063833';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            // Add the "datasources" column with a default value of 1
            yield queryRunner.query('ALTER TABLE "project_plan" ADD "datasources" integer NOT NULL DEFAULT 1');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD])) {
                return;
            }
            // Remove the "datasources" column
            yield queryRunner.query('ALTER TABLE "project_plan" DROP COLUMN "datasources"');
        });
    }
}
exports.AddDatasourcesLimit1695916063833 = AddDatasourcesLimit1695916063833;


/***/ }),
/* 283 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatform1697717995884 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddPlatform1697717995884 {
    constructor() {
        this.name = 'AddPlatform1697717995884';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "ownerId" character varying(21) NOT NULL,
                "name" character varying NOT NULL,
                "primaryColor" character varying NOT NULL,
                "logoIconUrl" character varying NOT NULL,
                "fullLogoUrl" character varying NOT NULL,
                "favIconUrl" character varying NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "PK_c33d6abeebd214bd2850bfd6b8e" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
            server_shared_1.logger.info('AddPlatform1697717995884 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP CONSTRAINT "fk_platform_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
            server_shared_1.logger.info('AddPlatform1697717995884 down');
        });
    }
}
exports.AddPlatform1697717995884 = AddPlatform1697717995884;


/***/ }),
/* 284 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddCustomDomain1698077078271 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddCustomDomain1698077078271 {
    constructor() {
        this.name = 'AddCustomDomain1698077078271';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "custom_domain" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "domain" character varying NOT NULL,
                "platformId" character varying(21) NOT NULL,
                "status" character varying NOT NULL,
                CONSTRAINT "PK_76b2cc5a1514eeffc66184c922a" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "custom_domain_domain_unique" ON "custom_domain" ("domain")
        `);
            yield queryRunner.query(`
            ALTER TABLE "custom_domain"
            ADD CONSTRAINT "fk_custom_domain_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "custom_domain" DROP CONSTRAINT "fk_custom_domain_platform_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."custom_domain_domain_unique"
        `);
            yield queryRunner.query(`
            DROP TABLE "custom_domain"
        `);
        });
    }
}
exports.AddCustomDomain1698077078271 = AddCustomDomain1698077078271;


/***/ }),
/* 285 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPieceTypeAndPackageTypeToFlowVersion1696245170061 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPieceTypeAndPackageTypeToFlowVersion1696245170061 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Execute raw SQL query to fetch IDs of FlowVersion records
            const flowVersionIds = yield queryRunner.query('SELECT id FROM flow_version');
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToFlowVersion1696245170061: found ' +
                flowVersionIds.length +
                ' versions');
            let updatedFlows = 0;
            for (const { id } of flowVersionIds) {
                // Fetch FlowVersion record by ID
                const flowVersion = yield queryRunner.query('SELECT * FROM flow_version WHERE id = $1', [id]);
                if (flowVersion.length > 0) {
                    const updated = traverseAndUpdateSubFlow(addPackageTypeAndPieceTypeToPieceStepSettings, flowVersion[0].trigger);
                    if (updated) {
                        yield queryRunner.query('UPDATE flow_version SET trigger = $1 WHERE id = $2', [flowVersion[0].trigger, flowVersion[0].id]);
                    }
                }
                updatedFlows++;
                if (updatedFlows % 100 === 0) {
                    server_shared_1.logger.info('AddPieceTypeAndPackageTypeToFlowVersion1696245170061: ' +
                        updatedFlows +
                        ' flows updated');
                }
            }
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToFlowVersion1696245170061: up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Execute raw SQL query to fetch IDs of FlowVersion records
            const flowVersionIds = yield queryRunner.query('SELECT id FROM flow_version');
            for (const { id } of flowVersionIds) {
                // Fetch FlowVersion record by ID
                const flowVersion = yield queryRunner.query('SELECT * FROM flow_version WHERE id = $1', [id]);
                if (flowVersion.length > 0) {
                    const updated = traverseAndUpdateSubFlow(removePackageTypeAndPieceTypeFromPieceStepSettings, flowVersion[0].trigger);
                    if (updated) {
                        yield queryRunner.query('UPDATE flow_version SET trigger = $1 WHERE id = $2', [flowVersion[0].trigger, flowVersion[0].id]);
                    }
                }
            }
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToFlowVersion1696245170061: down');
        });
    }
}
exports.AddPieceTypeAndPackageTypeToFlowVersion1696245170061 = AddPieceTypeAndPackageTypeToFlowVersion1696245170061;
const traverseAndUpdateSubFlow = (updater, root) => {
    if (!root) {
        return false;
    }
    let updated = false;
    switch (root.type) {
        case 'BRANCH':
            updated =
                traverseAndUpdateSubFlow(updater, root.onSuccessAction) || updated;
            updated =
                traverseAndUpdateSubFlow(updater, root.onFailureAction) || updated;
            break;
        case 'LOOP_ON_ITEMS':
            updated =
                traverseAndUpdateSubFlow(updater, root.firstLoopAction) || updated;
            break;
        case 'PIECE':
        case 'PIECE_TRIGGER':
            updater(root);
            updated = true;
            break;
        default:
            break;
    }
    updated = traverseAndUpdateSubFlow(updater, root.nextAction) || updated;
    return updated;
};
const addPackageTypeAndPieceTypeToPieceStepSettings = (pieceStep) => {
    pieceStep.settings.packageType = 'REGISTRY';
    pieceStep.settings.pieceType = 'OFFICIAL';
};
const removePackageTypeAndPieceTypeFromPieceStepSettings = (pieceStep) => {
    delete pieceStep.settings.packageType;
    delete pieceStep.settings.pieceType;
};


/***/ }),
/* 286 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPieceTypeAndPackageTypeToFlowTemplate1696245170062 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddPieceTypeAndPackageTypeToFlowTemplate1696245170062 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            const connection = queryRunner.connection;
            const templates = yield connection.query('SELECT * FROM flow_template');
            for (const template of templates) {
                const updated = traverseAndUpdateSubFlow(addPackageTypeAndPieceTypeToPieceStepSettings, template.template.trigger);
                if (updated) {
                    yield connection.query('UPDATE flow_template SET template = $1 WHERE id = $2', [template.template, template.id]);
                }
            }
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToFlowTemplate1696245170062: up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            const connection = queryRunner.connection;
            const templates = yield connection.query('SELECT * FROM flow_template');
            for (const template of templates) {
                const updated = traverseAndUpdateSubFlow(removePackageTypeAndPieceTypeFromPieceStepSettings, template.template.trigger);
                if (updated) {
                    yield connection.query('UPDATE flow_template SET template = $1 WHERE id = $2', [template.template, template.id]);
                }
            }
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToFlowTemplate1696245170062: down');
        });
    }
}
exports.AddPieceTypeAndPackageTypeToFlowTemplate1696245170062 = AddPieceTypeAndPackageTypeToFlowTemplate1696245170062;
const traverseAndUpdateSubFlow = (updater, root) => {
    if (!root) {
        return false;
    }
    let updated = false;
    switch (root.type) {
        case 'BRANCH':
            updated =
                traverseAndUpdateSubFlow(updater, root.onSuccessAction) || updated;
            updated =
                traverseAndUpdateSubFlow(updater, root.onFailureAction) || updated;
            break;
        case 'LOOP_ON_ITEMS':
            updated =
                traverseAndUpdateSubFlow(updater, root.firstLoopAction) || updated;
            break;
        case 'PIECE':
        case 'PIECE_TRIGGER':
            updater(root);
            updated = true;
            break;
        default:
            break;
    }
    updated = traverseAndUpdateSubFlow(updater, root.nextAction) || updated;
    return updated;
};
const addPackageTypeAndPieceTypeToPieceStepSettings = (pieceStep) => {
    pieceStep.settings.packageType = 'REGISTRY';
    pieceStep.settings.pieceType = 'OFFICIAL';
};
const removePackageTypeAndPieceTypeFromPieceStepSettings = (pieceStep) => {
    delete pieceStep.settings.packageType;
    delete pieceStep.settings.pieceType;
};


/***/ }),
/* 287 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StoreCodeInsideFlow1697969398200 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const decompress_1 = tslib_1.__importDefault(__webpack_require__(288));
class StoreCodeInsideFlow1697969398200 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.processFlowVersions(queryRunner, flattenCodeStep);
            yield this.processFlowTemplates(queryRunner, flattenCodeStep);
            server_shared_1.logger.info('StoreCodeInsideFlow1697969398200: up finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.processFlowVersions(queryRunner, removeNewCodeField);
            yield this.processFlowTemplates(queryRunner, removeNewCodeField);
            server_shared_1.logger.info('StoreCodeInsideFlow1697969398200: down finished');
        });
    }
    processFlowVersions(queryRunner, stepFunction) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowVersionIds = yield queryRunner.query('SELECT id FROM flow_version');
            for (const { id } of flowVersionIds) {
                const flowVersion = yield this.findFlowVersionById(queryRunner, id);
                if (flowVersion) {
                    const updated = yield traverseAndUpdateSubFlow(stepFunction, flowVersion.trigger, queryRunner, flowVersion.flowId, flowVersion.id);
                    if (updated) {
                        yield this.updateFlowVersion(queryRunner, flowVersion.id, flowVersion);
                    }
                }
            }
        });
    }
    processFlowTemplates(queryRunner, stepFunction) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Check if the "flow_template" table exists
            const doesTableExist = yield queryRunner.hasTable('flow_template');
            if (doesTableExist) {
                server_shared_1.logger.info('StoreCodeInsideFlow1697969398200: flow template table exists');
                const templates = yield queryRunner.query('SELECT * FROM flow_template');
                for (const template of templates) {
                    const updated = yield traverseAndUpdateSubFlow(stepFunction, template.template.trigger, queryRunner, template.projectId, template.id);
                    if (updated) {
                        yield queryRunner.query('UPDATE flow_template SET template = $1 WHERE id = $2', [template.template, template.id]);
                    }
                }
            }
        });
    }
    findFlowVersionById(queryRunner, id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowVersion = yield queryRunner.query('SELECT * FROM flow_version WHERE id = $1', [id]);
            return flowVersion[0];
        });
    }
    updateFlowVersion(queryRunner, id, flowVersion) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('UPDATE flow_version SET "flowId" = $1, trigger = $2 WHERE id = $3', [flowVersion.flowId, flowVersion.trigger, id]);
        });
    }
}
exports.StoreCodeInsideFlow1697969398200 = StoreCodeInsideFlow1697969398200;
const traverseAndUpdateSubFlow = (updater, root, queryRunner, flowId, flowVersionId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (!root) {
        return false;
    }
    let updated = false;
    switch (root.type) {
        case 'BRANCH':
            updated =
                (yield traverseAndUpdateSubFlow(updater, root.onSuccessAction, queryRunner, flowId, flowVersionId)) || updated;
            updated =
                (yield traverseAndUpdateSubFlow(updater, root.onFailureAction, queryRunner, flowId, flowVersionId)) || updated;
            break;
        case 'LOOP_ON_ITEMS':
            updated =
                (yield traverseAndUpdateSubFlow(updater, root.firstLoopAction, queryRunner, flowId, flowVersionId)) || updated;
            break;
        case 'CODE':
            yield updater(root, queryRunner, flowId, flowVersionId);
            updated = true;
            break;
        default:
            break;
    }
    updated =
        (yield traverseAndUpdateSubFlow(updater, root.nextAction, queryRunner, flowId, flowVersionId)) || updated;
    return updated;
});
const flattenCodeStep = (codeStep, queryRunner, flowVersionId, flowId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const sourceCodeId = codeStep.settings.artifactSourceId;
    const sourceCode = codeStep.settings.sourceCode;
    if (!(0, shared_1.isNil)(sourceCodeId) && (0, shared_1.isNil)(sourceCode)) {
        const [file] = yield queryRunner.query('SELECT * FROM file WHERE id = $1', [
            sourceCodeId,
        ]);
        if ((0, shared_1.isNil)(file)) {
            server_shared_1.logger.warn(`StoreCodeInsideFlow1697969398100: file not found for file id ${sourceCodeId} in flow ${flowId} of flow version ${flowVersionId}`);
            return;
        }
        const buffer = yield (0, decompress_1.default)(file.data);
        const code = buffer.find((f) => f.path.includes('index.ts') || f.path.includes('index.js'));
        const packageJson = buffer.find((f) => f.path.includes('package.json'));
        if ((0, shared_1.isNil)(code) || (0, shared_1.isNil)(packageJson)) {
            server_shared_1.logger.warn(`StoreCodeInsideFlow1697969398100: code or package.json not found for file ${file.id} in flow ${flowId} of flow version ${flowVersionId}`);
            return;
        }
        codeStep.settings.sourceCode = {
            code: code.data.toString('utf-8'),
            packageJson: packageJson.data.toString('utf-8'),
        };
    }
});
const removeNewCodeField = (codeStep, _queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    delete codeStep.settings.sourceCode;
});


/***/ }),
/* 288 */
/***/ ((module) => {

module.exports = require("decompress");

/***/ }),
/* 289 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateUserStatusRenameShadowToInvited1699818680567 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class UpdateUserStatusRenameShadowToInvited1699818680567 {
    constructor() {
        this.name = 'UpdateUserStatusRenameShadowToInvited1699818680567';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            UPDATE "user"
            SET "status" = 'INVITED'
            WHERE "status" = 'SHADOW'
        `);
            server_shared_1.logger.info('UpdateUserStatusRenameShadowToInvited1699818680567 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            UPDATE "user"
            SET "status" = 'SHADOW'
            WHERE "status" = 'INVITED'
        `);
            server_shared_1.logger.info('UpdateUserStatusRenameShadowToInvited1699818680567 down');
        });
    }
}
exports.UpdateUserStatusRenameShadowToInvited1699818680567 = UpdateUserStatusRenameShadowToInvited1699818680567;


/***/ }),
/* 290 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822 {
    constructor() {
        this.name = 'AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null"
            ON "user"("email") WHERE "platformId" IS NULL
        `);
            server_shared_1.logger.info('AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "user_partial_unique_email_platform_id_is_null"
        `);
            server_shared_1.logger.info('AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822 down');
        });
    }
}
exports.AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822 = AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822;


/***/ }),
/* 291 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTriggerTestStrategy1707087022764 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddTriggerTestStrategy1707087022764 {
    constructor() {
        this.name = 'AddTriggerTestStrategy1707087022764';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const ids = yield getAllPieceMetadataIds(queryRunner);
            for (const id of ids) {
                const pieceMetadata = yield getPieceMetadataById(queryRunner, id);
                addTestStrategyToTriggers(pieceMetadata);
                yield updatePieceMetadata(queryRunner, pieceMetadata);
            }
            server_shared_1.logger.info({ name: 'AddTriggerTestStrategy1707087022764' }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const ids = yield getAllPieceMetadataIds(queryRunner);
            for (const id of ids) {
                const pieceMetadata = yield getPieceMetadataById(queryRunner, id);
                removeTestStrategyFromTriggers(pieceMetadata);
                yield updatePieceMetadata(queryRunner, pieceMetadata);
            }
            server_shared_1.logger.info({ name: 'AddTriggerTestStrategy1707087022764' }, 'down');
        });
    }
}
exports.AddTriggerTestStrategy1707087022764 = AddTriggerTestStrategy1707087022764;
const getAllPieceMetadataIds = (queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queryResult = yield queryRunner.query('SELECT id FROM piece_metadata');
    return queryResult.map(({ id }) => id);
});
const getPieceMetadataById = (queryRunner, id) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queryResult = yield queryRunner.query('SELECT id, triggers FROM piece_metadata WHERE id = $1', [id]);
    return queryResult[0];
});
const addTestStrategyToTriggers = (pieceMetadata) => {
    const testStrategyMap = {
        POLLING: 'TEST_FUNCTION',
        WEBHOOK: 'SIMULATION',
        APP_WEBHOOK: 'TEST_FUNCTION',
    };
    pieceMetadata.triggers = parseTriggers(pieceMetadata.triggers);
    for (const trigger of Object.values(pieceMetadata.triggers)) {
        trigger.testStrategy = testStrategyMap[trigger.type];
    }
};
const removeTestStrategyFromTriggers = (pieceMetadata) => {
    pieceMetadata.triggers = parseTriggers(pieceMetadata.triggers);
    for (const trigger of Object.values(pieceMetadata.triggers)) {
        delete trigger.testStrategy;
    }
};
const updatePieceMetadata = (queryRunner, pieceMetadata) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield queryRunner.query('UPDATE piece_metadata SET triggers = $1 WHERE id = $2', [JSON.stringify(pieceMetadata.triggers), pieceMetadata.id]);
});
const parseTriggers = (triggers) => {
    if (typeof triggers === 'string') {
        return JSON.parse(triggers);
    }
    return triggers;
};


/***/ }),
/* 292 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MigrateWebhook1709581196563 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const FLOW_VERSION_TABLE = 'flow_version';
class MigrateWebhook1709581196563 {
    constructor() {
        this.name = 'MigrateWebhook1709581196563';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('MigrateWebhook1709581196563, started');
            let count = 0;
            const flowVersionsIds = yield queryRunner.query('SELECT id FROM flow_version');
            for (const { id } of flowVersionsIds) {
                const [flowVersion] = yield queryRunner.query('SELECT * FROM flow_version WHERE id = $1', [id]);
                const step = parseJson(flowVersion.trigger);
                const isString = typeof flowVersion.trigger === 'string';
                if (step.type === 'WEBHOOK') {
                    step.type = 'PIECE_TRIGGER';
                    step.settings = {
                        input: {},
                        'inputUiInfo': step.settings.inputUiInfo,
                        triggerName: 'catch_request',
                        pieceName: '@activepieces/piece-webhook',
                        pieceVersion: '0.0.1',
                        'pieceType': 'OFFICIAL',
                        'packageType': 'REGISTRY',
                    };
                    count++;
                    const result = isString ? JSON.stringify(step) : step;
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [result, flowVersion.id]);
                }
            }
            server_shared_1.logger.info('MigrateWebhook1709581196563, migrated flows ' + count);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('rolling back MigrateWebhook1709581196563, started');
            let count = 0;
            const flowVersionsIds = yield queryRunner.query('SELECT id FROM flow_version');
            for (const { id } of flowVersionsIds) {
                const [flowVersion] = yield queryRunner.query('SELECT * FROM flow_version WHERE id = $1', [id]);
                const step = parseJson(flowVersion.trigger);
                const isString = typeof flowVersion.trigger === 'string';
                if (step.type === 'PIECE_TRIGGER') {
                    if (step.settings.pieceName === '@activepieces/piece-webhook') {
                        step.type = 'WEBHOOK';
                        step.settings = {
                            'inputUiInfo': step.settings.inputUiInfo,
                        };
                        count++;
                        const result = isString ? JSON.stringify(step) : step;
                        yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [result, flowVersion.id]);
                    }
                }
            }
            server_shared_1.logger.info('rolling back  MigrateWebhook1709581196563, finished flows ' + count);
        });
    }
}
exports.MigrateWebhook1709581196563 = MigrateWebhook1709581196563;
const parseJson = (json) => {
    try {
        return JSON.parse(json);
    }
    catch (e) {
        return json;
    }
};


/***/ }),
/* 293 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveShowActivityLog1716105958530 = void 0;
const tslib_1 = __webpack_require__(1);
class RemoveShowActivityLog1716105958530 {
    constructor() {
        this.name = 'RemoveShowActivityLog1716105958530';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE platform
            DROP COLUMN "showActivityLog";
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE platform
            ADD COLUMN "showActivityLog" BOOLEAN;
        `);
            yield queryRunner.query(`
            UPDATE platform
            SET "showActivityLog" = false;
        `);
            yield queryRunner.query(`
            ALTER TABLE platform
            ALTER COLUMN "showActivityLog" SET NOT NULL;
        `);
        });
    }
}
exports.RemoveShowActivityLog1716105958530 = RemoveShowActivityLog1716105958530;


/***/ }),
/* 294 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddDurationForRuns1716725027424 = void 0;
const tslib_1 = __webpack_require__(1);
class AddDurationForRuns1716725027424 {
    constructor() {
        this.name = 'AddDurationForRuns1716725027424';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "flow_run"
            ADD "duration" integer
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "flow_run" DROP COLUMN "duration"
        `);
        });
    }
}
exports.AddDurationForRuns1716725027424 = AddDurationForRuns1716725027424;


/***/ }),
/* 295 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAuthToPiecesMetadata1688922241747 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddAuthToPiecesMetadata1688922241747 {
    constructor() {
        this.name = 'AddAuthToPiecesMetadata1688922241747';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddAuthToPiecesMetadata1688922241747 is Running');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "auth" jsonb');
            server_shared_1.logger.info('AddAuthToPiecesMetadata1688922241747 is Finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "auth"');
        });
    }
}
exports.AddAuthToPiecesMetadata1688922241747 = AddAuthToPiecesMetadata1688922241747;


/***/ }),
/* 296 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowAndFileProjectId1674788714498 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class FlowAndFileProjectId1674788714498 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            server_shared_1.logger.info('FlowAndFileProjectId1674788714498: started');
            const flowTableExistsQueryResponse = yield queryRunner.query(`SELECT exists (
            SELECT FROM information_schema.tables
              WHERE  table_schema = 'public'
              AND    table_name   = 'flow'
          )`);
            const flowTableNotExist = flowTableExistsQueryResponse &&
                flowTableExistsQueryResponse.length > 0 &&
                !flowTableExistsQueryResponse[0].exists;
            if (flowTableNotExist) {
                server_shared_1.logger.info('FlowAndFileProjectId1674788714498: skipped');
                return;
            }
            const flows = yield queryRunner.query('SELECT * FROM flow');
            for (let i = 0; i < flows.length; ++i) {
                const currentFlow = flows[i];
                const collection = yield queryRunner.query('SELECT * FROM collection WHERE id = $1', [currentFlow.collectionId]);
                currentFlow.projectId = collection[0].projectId;
                yield queryRunner.query('UPDATE flow SET "projectId" = $1 WHERE id = $2', [currentFlow.projectId, currentFlow.id]);
            }
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            for (let i = 0; i < flowVersions.length; ++i) {
                const currentFlowVersion = flowVersions[i];
                const currentFlow = yield queryRunner.query('SELECT * FROM flow WHERE id = $1', [currentFlowVersion.flowId]);
                let action = (_a = currentFlowVersion.trigger) === null || _a === void 0 ? void 0 : _a.nextAction;
                while (action !== undefined && action !== null) {
                    if (action.type === 'CODE') {
                        const packagedFileId = action.settings.artifactPackagedId;
                        if (packagedFileId !== undefined && packagedFileId !== null) {
                            const packagedFileToUpdate = yield queryRunner.query('SELECT * FROM file WHERE id = $1', [packagedFileId]);
                            if (packagedFileToUpdate.length === 0) {
                                server_shared_1.logger.error('Found an old packaged artifact file id without file ' +
                                    packagedFileId +
                                    ' and for flow ' +
                                    currentFlow[0].id);
                            }
                            else {
                                packagedFileToUpdate[0].projectId = currentFlow[0].projectId;
                                yield queryRunner.query('UPDATE file SET "projectId" = $1 WHERE id = $2', [packagedFileToUpdate[0].projectId, packagedFileId]);
                            }
                        }
                        const sourceFileId = action.settings.artifactSourceId;
                        if (sourceFileId !== undefined && sourceFileId !== null) {
                            const sourceFileToUpdate = yield queryRunner.query('SELECT * FROM file WHERE id = $1', [sourceFileId]);
                            if (sourceFileToUpdate.length === 0) {
                                server_shared_1.logger.error('Found an old source artifact file id without file ' +
                                    sourceFileId +
                                    ' and for flow ' +
                                    currentFlow[0].id);
                            }
                            else {
                                sourceFileToUpdate[0].projectId = currentFlow[0].projectId;
                                yield queryRunner.query('UPDATE file SET "projectId" = $1 WHERE id = $2', [sourceFileToUpdate[0].projectId, sourceFileId]);
                            }
                        }
                    }
                    action = action.nextAction;
                }
            }
            const flowRuns = yield queryRunner.query('SELECT * FROM flow_run');
            for (let i = 0; i < flowRuns.length; ++i) {
                const currentFlowRun = flowRuns[i];
                if (currentFlowRun.logsFileId !== undefined &&
                    currentFlowRun.logsFileId !== null) {
                    const logFlowRunFile = yield queryRunner.query('SELECT * FROM file WHERE id = $1', [currentFlowRun.logsFileId]);
                    logFlowRunFile[0].projectId = currentFlowRun.projectId;
                    yield queryRunner.query('UPDATE file SET "projectId" = $1 WHERE id = $2', [logFlowRunFile[0].projectId, logFlowRunFile[0].id]);
                }
            }
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    down() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { });
    }
}
exports.FlowAndFileProjectId1674788714498 = FlowAndFileProjectId1674788714498;


/***/ }),
/* 297 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initializeSchema1676238396411 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class initializeSchema1676238396411 {
    constructor() {
        this.name = 'initializeSchema1676238396411';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('initializeSchema1676238396411: started');
            const userTableExistsQueryResponse = yield queryRunner.query(`SELECT exists (
            SELECT FROM information_schema.tables
              WHERE  table_schema = 'public'
              AND    table_name   = 'user'
          )`);
            const userTableExists = userTableExistsQueryResponse &&
                userTableExistsQueryResponse.length > 0 &&
                userTableExistsQueryResponse[0].exists;
            if (userTableExists) {
                server_shared_1.logger.info('initializeSchema1676238396411: skipped');
                return;
            }
            yield queryRunner.query('CREATE TABLE "collection" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21) NOT NULL, CONSTRAINT "PK_ad3f485bbc99d875491f44d7c85" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_collection_project_id" ON "collection" ("projectId") ');
            yield queryRunner.query('CREATE TABLE "collection_version" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "displayName" character varying NOT NULL, "collectionId" character varying(21) NOT NULL, "configs" jsonb NOT NULL, "state" character varying NOT NULL, CONSTRAINT "PK_76c769e96c091b478e3c338a0ac" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_collection_version_collection_id" ON "collection_version" ("collectionId") ');
            yield queryRunner.query('CREATE TABLE "file" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21), "data" bytea NOT NULL, CONSTRAINT "PK_36b46d232307066b3a2c9ea3a1d" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE TABLE "flag" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "value" jsonb NOT NULL, CONSTRAINT "PK_17b74257294fdfd221178a132d4" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE TABLE "flow" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21), "collectionId" character varying(21) NOT NULL, CONSTRAINT "PK_6c2ad4a3e86394cd9bb7a80a228" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_flow_collection_id" ON "flow" ("collectionId") ');
            yield queryRunner.query('CREATE TABLE "flow_version" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "flowId" character varying(21) NOT NULL, "displayName" character varying NOT NULL, "trigger" jsonb, "valid" boolean NOT NULL, "state" character varying NOT NULL, CONSTRAINT "PK_2f20a52dcddf98d3fafe621a9f5" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId") ');
            yield queryRunner.query('CREATE TABLE "instance" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21) NOT NULL, "collectionId" character varying(21) NOT NULL, "collectionVersionId" character varying(21) NOT NULL, "flowIdToVersionId" jsonb NOT NULL, "status" character varying NOT NULL, CONSTRAINT "REL_183c020130aa172f58c6a0c647" UNIQUE ("collectionVersionId"), CONSTRAINT "REL_6b75536fbdf7d8dc967fc350ff" UNIQUE ("collectionId"), CONSTRAINT "PK_eaf60e4a0c399c9935413e06474" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_instance_project_id" ON "instance" ("projectId") ');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_instance_collection_id" ON "instance" ("collectionId") ');
            yield queryRunner.query('CREATE TABLE "flow_run" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21) NOT NULL, "flowId" character varying(21) NOT NULL, "collectionId" character varying(21) NOT NULL, "flowVersionId" character varying(21) NOT NULL, "collectionVersionId" character varying(21) NOT NULL, "environment" character varying, "flowDisplayName" character varying NOT NULL, "collectionDisplayName" character varying NOT NULL, "logsFileId" character varying(21), "status" character varying NOT NULL, "startTime" TIMESTAMP WITH TIME ZONE NOT NULL, "finishTime" TIMESTAMP WITH TIME ZONE, CONSTRAINT "PK_858b1dd0d1055c44261ae00d45b" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id" ON "flow_run" ("projectId") ');
            yield queryRunner.query('CREATE TABLE "project" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "ownerId" character varying(21) NOT NULL, "displayName" character varying NOT NULL, CONSTRAINT "PK_4d68b1358bb5b766d3e78f32f57" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId") ');
            yield queryRunner.query('CREATE TABLE "store-entry" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "key" character varying NOT NULL, "collectionId" character varying(21) NOT NULL, "value" jsonb NOT NULL, CONSTRAINT "PK_afb44ca7c0b4606b19deb1680d6" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE TABLE "user" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "email" character varying NOT NULL, "firstName" character varying NOT NULL, "lastName" character varying NOT NULL, "password" character varying NOT NULL, "status" character varying NOT NULL, "trackEvents" boolean, "newsLetter" boolean, CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email"), CONSTRAINT "PK_cace4a159ff9f2512dd42373760" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE TABLE "app_connection" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "name" character varying NOT NULL, "appName" character varying NOT NULL, "projectId" character varying(21) NOT NULL, "value" jsonb NOT NULL, CONSTRAINT "PK_9efa2d6633ecc57cc5adeafa039" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_app_name_and_name" ON "app_connection" ("projectId", "appName", "name") ');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
            yield queryRunner.query('ALTER TABLE "collection" ADD CONSTRAINT "fk_collection_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "collection_version" ADD CONSTRAINT "fk_collection_version_collection_id" FOREIGN KEY ("collectionId") REFERENCES "collection"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "file" ADD CONSTRAINT "fk_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow" ADD CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow" ADD CONSTRAINT "fk_flow_collection_id" FOREIGN KEY ("collectionId") REFERENCES "collection"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_version" ADD CONSTRAINT "fk_flow_version_flow" FOREIGN KEY ("flowId") REFERENCES "flow"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "instance" ADD CONSTRAINT "fk_instance_collection_version" FOREIGN KEY ("collectionVersionId") REFERENCES "collection_version"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "instance" ADD CONSTRAINT "fk_instance_collection" FOREIGN KEY ("collectionId") REFERENCES "collection"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD CONSTRAINT "fk_flow_run_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD CONSTRAINT "fk_flow_run_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD CONSTRAINT "fk_flow_run_collection_id" FOREIGN KEY ("collectionId") REFERENCES "collection"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD CONSTRAINT "fk_flow_run_collection_version_id" FOREIGN KEY ("collectionVersionId") REFERENCES "collection_version"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "project" ADD CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "app_connection" ADD CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('initializeSchema1676238396411: completed');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "app_connection" DROP CONSTRAINT "fk_app_connection_app_project_id"');
            yield queryRunner.query('ALTER TABLE "project" DROP CONSTRAINT "fk_project_owner_id"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP CONSTRAINT "fk_flow_run_collection_version_id"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP CONSTRAINT "fk_flow_run_collection_id"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP CONSTRAINT "fk_flow_run_flow_id"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP CONSTRAINT "fk_flow_run_project_id"');
            yield queryRunner.query('ALTER TABLE "instance" DROP CONSTRAINT "fk_instance_collection"');
            yield queryRunner.query('ALTER TABLE "instance" DROP CONSTRAINT "fk_instance_collection_version"');
            yield queryRunner.query('ALTER TABLE "flow_version" DROP CONSTRAINT "fk_flow_version_flow"');
            yield queryRunner.query('ALTER TABLE "flow" DROP CONSTRAINT "fk_flow_collection_id"');
            yield queryRunner.query('ALTER TABLE "flow" DROP CONSTRAINT "fk_flow_project_id"');
            yield queryRunner.query('ALTER TABLE "file" DROP CONSTRAINT "fk_file_project_id"');
            yield queryRunner.query('ALTER TABLE "collection_version" DROP CONSTRAINT "fk_collection_version_collection_id"');
            yield queryRunner.query('ALTER TABLE "collection" DROP CONSTRAINT "fk_collection_project_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_app_connection_project_id_and_name"');
            yield queryRunner.query('DROP INDEX "public"."idx_app_connection_project_id_and_app_name_and_name"');
            yield queryRunner.query('DROP TABLE "app_connection"');
            yield queryRunner.query('DROP TABLE "user"');
            yield queryRunner.query('DROP TABLE "store-entry"');
            yield queryRunner.query('DROP INDEX "public"."idx_project_owner_id"');
            yield queryRunner.query('DROP TABLE "project"');
            yield queryRunner.query('DROP INDEX "public"."idx_run_project_id"');
            yield queryRunner.query('DROP TABLE "flow_run"');
            yield queryRunner.query('DROP INDEX "public"."idx_instance_collection_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_instance_project_id"');
            yield queryRunner.query('DROP TABLE "instance"');
            yield queryRunner.query('DROP INDEX "public"."idx_flow_version_flow_id"');
            yield queryRunner.query('DROP TABLE "flow_version"');
            yield queryRunner.query('DROP INDEX "public"."idx_flow_collection_id"');
            yield queryRunner.query('DROP TABLE "flow"');
            yield queryRunner.query('DROP TABLE "flag"');
            yield queryRunner.query('DROP TABLE "file"');
            yield queryRunner.query('DROP INDEX "public"."idx_collection_version_collection_id"');
            yield queryRunner.query('DROP TABLE "collection_version"');
            yield queryRunner.query('DROP INDEX "public"."idx_collection_project_id"');
            yield queryRunner.query('DROP TABLE "collection"');
        });
    }
}
exports.initializeSchema1676238396411 = initializeSchema1676238396411;


/***/ }),
/* 298 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.encryptCredentials1676505294811 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const encryption_1 = __webpack_require__(299);
class encryptCredentials1676505294811 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('encryptCredentials1676505294811 up: started');
            const connections = yield queryRunner.query('SELECT * FROM app_connection');
            for (const currentConnection of connections) {
                currentConnection.value = encryption_1.encryptUtils.encryptObject(currentConnection.value);
                yield queryRunner.query(`UPDATE app_connection SET value = '${JSON.stringify(currentConnection.value)}' WHERE id = ${currentConnection.id}`);
            }
            server_shared_1.logger.info('encryptCredentials1676505294811 up: finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('encryptCredentials1676505294811 down: started');
            const connections = yield queryRunner.query('SELECT * FROM app_connection');
            for (const currentConnection of connections) {
                try {
                    currentConnection.value = encryption_1.encryptUtils.decryptObject(currentConnection.value);
                    yield queryRunner.query(`UPDATE app_connection SET value = '${JSON.stringify(currentConnection.value)}' WHERE id = ${currentConnection.id}`);
                }
                catch (e) {
                    server_shared_1.logger.error(e);
                }
            }
            server_shared_1.logger.info('encryptCredentials1676505294811 down: finished');
        });
    }
}
exports.encryptCredentials1676505294811 = encryptCredentials1676505294811;


/***/ }),
/* 299 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.encryptUtils = void 0;
const tslib_1 = __webpack_require__(1);
const crypto = tslib_1.__importStar(__webpack_require__(6));
const node_crypto_1 = __webpack_require__(121);
const util_1 = __webpack_require__(300);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const local_store_1 = __webpack_require__(301);
let secret;
const algorithm = 'aes-256-cbc';
const ivLength = 16;
const loadEncryptionKey = (queueMode) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    secret = (_a = server_shared_1.system.get(server_shared_1.AppSystemProp.ENCRYPTION_KEY)) !== null && _a !== void 0 ? _a : null;
    if (queueMode === server_shared_1.QueueMode.MEMORY) {
        if ((0, shared_1.isNil)(secret)) {
            secret = yield local_store_1.localFileStore.load(server_shared_1.AppSystemProp.ENCRYPTION_KEY);
        }
        if ((0, shared_1.isNil)(secret)) {
            secret = yield generateAndStoreSecret();
        }
    }
    if ((0, shared_1.isNil)(secret)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.SYSTEM_PROP_INVALID,
            params: {
                prop: server_shared_1.AppSystemProp.ENCRYPTION_KEY,
            },
        }, `System property AP_${server_shared_1.AppSystemProp.ENCRYPTION_KEY} must be defined`);
    }
});
const generateAndStoreSecret = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const secretLengthInBytes = 16;
    const secretBuffer = yield (0, util_1.promisify)(node_crypto_1.randomBytes)(secretLengthInBytes);
    const secret = secretBuffer.toString('hex'); // Convert to hexadecimal
    yield local_store_1.localFileStore.save(server_shared_1.AppSystemProp.ENCRYPTION_KEY, secret);
    return secret;
});
function encryptString(inputString) {
    const iv = crypto.randomBytes(ivLength); // Generate a random initialization vector
    (0, shared_1.assertNotNullOrUndefined)(secret, 'secret');
    const key = Buffer.from(secret, 'binary');
    const cipher = crypto.createCipheriv(algorithm, key, iv); // Create a cipher with the key and initialization vector
    let encrypted = cipher.update(inputString, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return {
        iv: iv.toString('hex'),
        data: encrypted,
    };
}
function encryptObject(object) {
    const objectString = JSON.stringify(object); // Convert the object to a JSON string
    return encryptString(objectString);
}
function decryptObject(encryptedObject) {
    const iv = Buffer.from(encryptedObject.iv, 'hex');
    const key = Buffer.from(secret, 'binary');
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encryptedObject.data, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return JSON.parse(decrypted);
}
function decryptString(encryptedObject) {
    const iv = Buffer.from(encryptedObject.iv, 'hex');
    const key = Buffer.from(secret, 'binary');
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encryptedObject.data, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
}
function get16ByteKey() {
    (0, shared_1.assertNotNullOrUndefined)(secret, 'secret is not defined');
    return secret;
}
exports.encryptUtils = {
    decryptString,
    decryptObject,
    encryptObject,
    encryptString,
    get16ByteKey,
    loadEncryptionKey,
};


/***/ }),
/* 300 */
/***/ ((module) => {

module.exports = require("util");

/***/ }),
/* 301 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.localFileStore = void 0;
const tslib_1 = __webpack_require__(1);
const fs_1 = tslib_1.__importDefault(__webpack_require__(302));
const path_1 = tslib_1.__importDefault(__webpack_require__(108));
const server_shared_1 = __webpack_require__(2);
exports.localFileStore = {
    save(key, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const settingsFilePath = path_1.default.join(server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.CONFIG_PATH), 'settings.json');
            const settings = getSettingsFilePath();
            settings[key] = value;
            const parentDir = path_1.default.dirname(settingsFilePath);
            if (!fs_1.default.existsSync(parentDir)) {
                fs_1.default.mkdirSync(parentDir, { recursive: true });
            }
            fs_1.default.writeFileSync(settingsFilePath, JSON.stringify(settings));
        });
    },
    load(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const settings = getSettingsFilePath();
            return settings[key] || null;
        });
    },
};
const getSettingsFilePath = () => {
    const settingsFilePath = path_1.default.join(server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.CONFIG_PATH), 'settings.json');
    try {
        return JSON.parse(fs_1.default.readFileSync(settingsFilePath, 'utf8'));
    }
    catch (error) {
        return {};
    }
};


/***/ }),
/* 302 */
/***/ ((module) => {

module.exports = require("fs");

/***/ }),
/* 303 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.removeStoreAction1676649852890 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class removeStoreAction1676649852890 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            server_shared_1.logger.info('Running migration removeStoreAction1676649852890');
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            let count = 0;
            for (let i = 0; i < flowVersions.length; ++i) {
                const currentFlowVersion = flowVersions[i];
                let action = (_a = currentFlowVersion.trigger) === null || _a === void 0 ? void 0 : _a.nextAction;
                let changed = false;
                while (action !== undefined && action !== null) {
                    if (action.type === 'STORAGE') {
                        action.type = 'PIECE';
                        const operation = action.settings.operation === 'GET' ? 'get' : 'put';
                        const key = action.settings.key;
                        const value = action.settings.value;
                        count++;
                        action.settings = {
                            pieceName: 'storage',
                            actionName: operation,
                            input: {
                                key,
                                value,
                            },
                            inputUiInfo: {},
                        };
                        changed = true;
                    }
                    action = action.nextAction;
                }
                if (changed) {
                    yield queryRunner.query(`UPDATE flow_version SET trigger = '${JSON.stringify(currentFlowVersion.trigger)}' WHERE id = ${currentFlowVersion.id}`);
                }
            }
            server_shared_1.logger.info('Finished running migration removeStoreAction1676649852890, changed ' +
                count +
                ' actions');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            for (let i = 0; i < flowVersions.length; ++i) {
                const currentFlowVersion = flowVersions[i];
                let changed = false;
                let action = (_a = currentFlowVersion.trigger) === null || _a === void 0 ? void 0 : _a.nextAction;
                while (action !== undefined && action !== null) {
                    if (action.type === 'PIECE' &&
                        action.settings.pieceName === 'storage') {
                        action.type = 'STORAGE';
                        action.settings = {
                            operation: action.setings.operation.toUpperCase(),
                            key: action.settings.key,
                            value: action.settings.value,
                        };
                        changed = true;
                    }
                    action = action.nextAction;
                }
                if (changed) {
                    yield queryRunner.query(`UPDATE flow_version SET trigger = '${JSON.stringify(currentFlowVersion.trigger)}' WHERE id = ${currentFlowVersion.id}`);
                }
            }
        });
    }
}
exports.removeStoreAction1676649852890 = removeStoreAction1676649852890;


/***/ }),
/* 304 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.billing1677286751592 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class billing1677286751592 {
    constructor() {
        this.name = 'billing1677286751592';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running migration billing1677286751592');
            yield queryRunner.query('DROP INDEX "public"."idx_app_connection_project_id_and_app_name_and_name"');
            yield queryRunner.query('CREATE TABLE "project_plan" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21) NOT NULL, "name" character varying NOT NULL, "stripeCustomerId" character varying NOT NULL, "stripeSubscriptionId" character varying NOT NULL, "tasks" integer NOT NULL, "subscriptionStartDatetime" TIMESTAMP WITH TIME ZONE NOT NULL, CONSTRAINT "REL_4f52e89612966d95843e4158bb" UNIQUE ("projectId"), CONSTRAINT "PK_759d33fce71c95de832df935841" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_plan_project_id" ON "project_plan" ("projectId") ');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_plan_stripe_customer_id" ON "project_plan" ("stripeCustomerId") ');
            yield queryRunner.query('CREATE TABLE "project_usage" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21) NOT NULL, "consumedTasks" integer NOT NULL, "nextResetDatetime" TIMESTAMP WITH TIME ZONE NOT NULL, CONSTRAINT "REL_c407fc9b2bfb44515af69d575a" UNIQUE ("projectId"), CONSTRAINT "PK_100c1959e9dc487c4cadbf9cb56" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_project_usage_project_id" ON "project_usage" ("projectId") ');
            yield queryRunner.query('ALTER TABLE "project_plan" ADD CONSTRAINT "fk_project_plan_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "project_usage" ADD CONSTRAINT "fk_project_usage_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('Finished migration billing1677286751592');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('rolling back migration billing1677286751592');
            yield queryRunner.query('ALTER TABLE "project_usage" DROP CONSTRAINT "fk_project_usage_project_id"');
            yield queryRunner.query('ALTER TABLE "project_plan" DROP CONSTRAINT "fk_project_plan_project_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_project_usage_project_id"');
            yield queryRunner.query('DROP TABLE "project_usage"');
            yield queryRunner.query('DROP INDEX "public"."idx_plan_stripe_customer_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_plan_project_id"');
            yield queryRunner.query('DROP TABLE "project_plan"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_app_name_and_name" ON "app_connection" ("name", "appName", "projectId") ');
            server_shared_1.logger.info('Finished rolling back billing1677286751592');
        });
    }
}
exports.billing1677286751592 = billing1677286751592;


/***/ }),
/* 305 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addVersionToPieceSteps1677521257188 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const FLOW_VERSION_TABLE = 'flow_version';
const PIECE_TYPE = 'PIECE';
class addVersionToPieceSteps1677521257188 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('addVersionToPieceSteps1677521257188, started');
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            for (const flowVersion of flowVersions) {
                let step = flowVersion.trigger;
                let update = false;
                while (step) {
                    if (step.type === PIECE_TYPE) {
                        step.settings.pieceVersion = '0.0.0';
                        update = true;
                    }
                    step = step.nextAction;
                }
                if (update) {
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
                }
            }
            server_shared_1.logger.info('addVersionToPieceSteps1677521257188, finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('addVersionToPieceSteps1677521257188, started');
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            for (const flowVersion of flowVersions) {
                let step = flowVersion.trigger;
                let update = false;
                while (step) {
                    if (step.type === PIECE_TYPE) {
                        delete step.settings.pieceVersion;
                        update = true;
                    }
                    step = step.nextAction;
                }
                if (update) {
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
                }
            }
            server_shared_1.logger.info('addVersionToPieceSteps1677521257188, finished');
        });
    }
}
exports.addVersionToPieceSteps1677521257188 = addVersionToPieceSteps1677521257188;


/***/ }),
/* 306 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.productEmbed1677894800372 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class productEmbed1677894800372 {
    constructor() {
        this.name = 'productEmbed1677894800372';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const appCredentialExistsQuery = yield queryRunner.query(`SELECT exists (
            SELECT FROM information_schema.tables
              WHERE  table_schema = 'public'
              AND    table_name   = 'app_credential'
          )`);
            const appCredentialExists = appCredentialExistsQuery &&
                appCredentialExistsQuery.length > 0 &&
                appCredentialExistsQuery[0].exists;
            if (appCredentialExists) {
                server_shared_1.logger.info('initializeSchema1676238396411: skipped');
                return;
            }
            yield queryRunner.query('CREATE TABLE "app_credential" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "appName" character varying NOT NULL, "projectId" character varying(21) NOT NULL, "settings" jsonb NOT NULL, CONSTRAINT "PK_62eb102bb75a05d2951796a3b46" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_credentials_projectId_appName" ON "app_credential" ("appName", "projectId") ');
            yield queryRunner.query('CREATE TABLE "connection_key" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21) NOT NULL, "settings" jsonb NOT NULL, CONSTRAINT "PK_4dcf1d9ae4ba5eb261a6c775ad2" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_connection_key_project_id" ON "connection_key" ("projectId") ');
            yield queryRunner.query('ALTER TABLE "app_credential" ADD CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE NO ACTION ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "connection_key" ADD CONSTRAINT "FK_03177dc6779e6e147866d43c050" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE NO ACTION ON UPDATE NO ACTION');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "public"."idx_connection_key_project_id"');
            yield queryRunner.query('DROP TABLE "connection_key"');
            yield queryRunner.query('DROP INDEX "public"."idx_app_credentials_projectId_appName"');
            yield queryRunner.query('DROP TABLE "app_credential"');
            yield queryRunner.query('ALTER TABLE "connection_key" DROP CONSTRAINT "FK_03177dc6779e6e147866d43c050"');
            yield queryRunner.query('ALTER TABLE "app_credential" DROP CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e"');
        });
    }
}
exports.productEmbed1677894800372 = productEmbed1677894800372;


/***/ }),
/* 307 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addEventRouting1678382946390 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class addEventRouting1678382946390 {
    constructor() {
        this.name = 'addEventRouting1678382946390';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running migration addEventRouting1678382946390');
            yield queryRunner.query('CREATE TABLE "app_event_routing" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "appName" character varying NOT NULL, "projectId" character varying(21) NOT NULL, "flowId" character varying(21) NOT NULL, "identifierValue" character varying NOT NULL, "event" character varying NOT NULL, CONSTRAINT "PK_2107df2b2faf9d50435f9d5acd7" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_app_event_routing_flow_id" ON "app_event_routing" ("flowId") ');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_event_project_id_appName_identifier_value_event" ON "app_event_routing" ("appName", "projectId", "identifierValue", "event") ');
            server_shared_1.logger.info('Finished migration addEventRouting1678382946390');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Rolling Back migration addEventRouting1678382946390');
            yield queryRunner.query('DROP INDEX "public"."idx_app_event_project_id_appName_identifier_value_event"');
            yield queryRunner.query('DROP INDEX "public"."idx_app_event_routing_flow_id"');
            yield queryRunner.query('DROP TABLE "app_event_routing"');
            server_shared_1.logger.info('Finished Rolling Back migration addEventRouting1678382946390');
        });
    }
}
exports.addEventRouting1678382946390 = addEventRouting1678382946390;


/***/ }),
/* 308 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.removeCollectionVersion1678492809093 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class removeCollectionVersion1678492809093 {
    constructor() {
        this.name = 'removeCollectionVersion1678492809093';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running migration removeCollectionVersion1678492809093');
            yield queryRunner.query('ALTER TABLE "instance" DROP CONSTRAINT "fk_instance_collection_version"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP CONSTRAINT "fk_flow_run_collection_version_id"');
            yield queryRunner.query('ALTER TABLE "instance" DROP CONSTRAINT "REL_183c020130aa172f58c6a0c647"');
            yield queryRunner.query('ALTER TABLE "instance" DROP COLUMN "collectionVersionId"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP COLUMN "collectionVersionId"');
            yield queryRunner.query('ALTER TABLE "collection" ADD "displayName" character varying');
            const collections = yield queryRunner.query('SELECT * FROM public.collection');
            for (let i = 0; i < collections.length; ++i) {
                let currentCollection = collections[i];
                const latestCollectionVersionQuery = `
                SELECT * FROM public.collection_version
                WHERE "collectionId" = '${currentCollection.id}'
                ORDER BY created DESC
                LIMIT 1
            `;
                const [latestCollectionVersion] = yield queryRunner.query(latestCollectionVersionQuery);
                let displayName = 'Untitled';
                if (latestCollectionVersion) {
                    displayName = latestCollectionVersion.displayName;
                }
                currentCollection = Object.assign(Object.assign({}, currentCollection), { displayName });
                const updateCollectionQuery = `
                UPDATE public.collection
                SET displayName = '${displayName}'
                WHERE id = '${currentCollection.id}'
            `;
                yield queryRunner.query(updateCollectionQuery);
            }
            server_shared_1.logger.info('Finished migration removeCollectionVersion1678492809093');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "collection" DROP COLUMN "displayName"');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD "collectionVersionId" character varying(21) NOT NULL');
            yield queryRunner.query('ALTER TABLE "instance" ADD "collectionVersionId" character varying(21) NOT NULL');
            yield queryRunner.query('ALTER TABLE "instance" ADD CONSTRAINT "REL_183c020130aa172f58c6a0c647" UNIQUE ("collectionVersionId")');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD CONSTRAINT "fk_flow_run_collection_version_id" FOREIGN KEY ("collectionVersionId") REFERENCES "collection_version"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "instance" ADD CONSTRAINT "fk_instance_collection_version" FOREIGN KEY ("collectionVersionId") REFERENCES "collection_version"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
        });
    }
}
exports.removeCollectionVersion1678492809093 = removeCollectionVersion1678492809093;


/***/ }),
/* 309 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addtriggerevents1678621361185 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class addtriggerevents1678621361185 {
    constructor() {
        this.name = 'addtriggerevents1678621361185';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('addtriggerevents1678621361185 up: started');
            yield queryRunner.query('CREATE TABLE "trigger_event" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "flowId" character varying(21) NOT NULL, "projectId" character varying(21) NOT NULL, "sourceName" character varying NOT NULL, "payload" jsonb NOT NULL, CONSTRAINT "PK_79bbc8c2af95776e801c7eaab11" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_trigger_event_flow_id" ON "trigger_event" ("flowId") ');
            yield queryRunner.query('ALTER TABLE "trigger_event" ADD CONSTRAINT "fk_trigger_event_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "trigger_event" ADD CONSTRAINT "fk_trigger_event_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('addtriggerevents1678621361185 up: finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "trigger_event" DROP CONSTRAINT "fk_trigger_event_flow_id"');
            yield queryRunner.query('ALTER TABLE "trigger_event" DROP CONSTRAINT "fk_trigger_event_project_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_trigger_event_flow_id"');
            yield queryRunner.query('DROP TABLE "trigger_event"');
        });
    }
}
exports.addtriggerevents1678621361185 = addtriggerevents1678621361185;


/***/ }),
/* 310 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bumpFixPieceVersions1678928503715 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const FLOW_VERSION_TABLE = 'flow_version';
const APP_CONNECTION_TABLE = 'app_connection';
const PIECE_TYPE = 'PIECE';
const PIECE_TRIGGER_TYPE = 'PIECE_TRIGGER';
const BRANCH_TYPE = 'BRANCH';
class bumpFixPieceVersions1678928503715 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('bumpFixPieceVersions1678928503715, started');
            let count = 0;
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            for (const flowVersion of flowVersions) {
                const step = flowVersion.trigger;
                const update = updateStep(step);
                if (update) {
                    count++;
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET "trigger" = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
                }
            }
            let connectionCount = 0;
            const appConnections = yield queryRunner.query(`SELECT * FROM ${APP_CONNECTION_TABLE}`);
            for (const appConnection of appConnections) {
                let update = false;
                if (appConnection.appName === 'google_sheets') {
                    appConnection.appName = 'google-sheets';
                    update = true;
                }
                if (appConnection.appName === 'google_calendar') {
                    appConnection.appName = 'google-calendar';
                    update = true;
                }
                if (appConnection.appName === 'google_contacts') {
                    appConnection.appName = 'google-contacts';
                    update = true;
                }
                if (appConnection.appName === 'google_drive') {
                    appConnection.appName = 'google-drive';
                    update = true;
                }
                if (appConnection.appName === 'google_tasks') {
                    appConnection.appName = 'google-tasks';
                    update = true;
                }
                if (appConnection.appName === 'cal.com') {
                    appConnection.appName = 'cal-com';
                    update = true;
                }
                if (appConnection.appName === 'storage') {
                    appConnection.appName = 'store';
                    update = true;
                }
                if (appConnection.appName === 'telegram_bot') {
                    appConnection.appName = 'telegram-bot';
                    update = true;
                }
                if (update) {
                    connectionCount++;
                    yield queryRunner.query(`UPDATE ${APP_CONNECTION_TABLE} SET "appName" = $1 WHERE id = $2`, [appConnection.appName, appConnection.id]);
                }
            }
            server_shared_1.logger.info('bumpFixPieceVersions1678928503715, finished bumping ' +
                count +
                ' flows ' +
                ' and connections count ' +
                connectionCount);
        });
    }
    down() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Ignored
        });
    }
}
exports.bumpFixPieceVersions1678928503715 = bumpFixPieceVersions1678928503715;
function updateStep(step) {
    let update = false;
    while (step) {
        if (step.type === PIECE_TYPE || step.type === PIECE_TRIGGER_TYPE) {
            if (step.settings.pieceName === 'google_sheets') {
                step.settings.pieceName = 'google-sheets';
            }
            if (step.settings.pieceName === 'google_calendar') {
                step.settings.pieceName = 'google-calendar';
            }
            if (step.settings.pieceName === 'google_contacts') {
                step.settings.pieceName = 'google-contacts';
            }
            if (step.settings.pieceName === 'google_drive') {
                step.settings.pieceName = 'google-drive';
            }
            if (step.settings.pieceName === 'google_tasks') {
                step.settings.pieceName = 'google-tasks';
            }
            if (step.settings.pieceName === 'cal.com') {
                step.settings.pieceName = 'cal-com';
            }
            if (step.settings.pieceName === 'storage') {
                step.settings.pieceName = 'store';
            }
            if (step.settings.pieceName === 'telegram_bot') {
                step.settings.pieceName = 'telegram-bot';
            }
            if (step.settings.pieceName === 'youtube') {
                // Youtube latest version is 0.1.4
                step.settings.pieceVersion = '0.1.4';
            }
            else {
                step.settings.pieceVersion = '0.1.3';
            }
            update = true;
        }
        if (step.type === BRANCH_TYPE) {
            if (step.onSuccessAction) {
                update = update || updateStep(step.onSuccessAction);
            }
            if (step.onFailureAction) {
                update = update || updateStep(step.onFailureAction);
            }
        }
        step = step.nextAction;
    }
    return update;
}


/***/ }),
/* 311 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.migrateSchedule1679014156667 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const FLOW_VERSION_TABLE = 'flow_version';
class migrateSchedule1679014156667 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('migrateSchedule1679014156667, started');
            let count = 0;
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            for (const flowVersion of flowVersions) {
                const step = flowVersion.trigger;
                if (step.type === 'SCHEDULE') {
                    step.type = 'PIECE_TRIGGER';
                    step.settings = {
                        input: {
                            cronExpression: step.settings.cronExpression,
                        },
                        triggerName: 'cron_expression',
                        pieceName: 'schedule',
                        pieceVersion: '0.0.2',
                    };
                    count++;
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
                }
            }
            server_shared_1.logger.info('migrateSchedule1679014156667, finished flows ' + count);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('rolling back migrateSchedule1679014156667, started');
            let count = 0;
            const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
            for (const flowVersion of flowVersions) {
                const step = flowVersion.trigger;
                if (step.type === 'PIECE_TRIGGER') {
                    if (step.settings.pieceName === 'schedule') {
                        step.type = 'SCHEDULE';
                        step.settings = {
                            cronExpression: step.settings.input.cronExpression,
                        };
                        count++;
                        yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
                    }
                }
            }
            server_shared_1.logger.info('rolling back  migrateSchedule1679014156667, finished flows ' + count);
        });
    }
}
exports.migrateSchedule1679014156667 = migrateSchedule1679014156667;


/***/ }),
/* 312 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addNotificationsStatus1680563747425 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class addNotificationsStatus1680563747425 {
    constructor() {
        this.name = 'addNotificationsStatus1680563747425';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running migration: addNotificationsStatus1680563747425');
            yield queryRunner.query('ALTER TABLE "project" ADD "notifications" character varying');
            yield queryRunner.query('UPDATE "project" SET "notifications" = \'ALWAYS\'');
            server_shared_1.logger.info('Completed migration: addNotificationsStatus1680563747425');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "project" DROP COLUMN "notifications"');
        });
    }
}
exports.addNotificationsStatus1680563747425 = addNotificationsStatus1680563747425;


/***/ }),
/* 313 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateWebhookSimulationSchema1680698259291 = void 0;
const tslib_1 = __webpack_require__(1);
class CreateWebhookSimulationSchema1680698259291 {
    constructor() {
        this.name = 'CreateWebhookSimulationSchema1680698259291';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('CREATE TABLE "webhook_simulation" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "flowId" character varying(21) NOT NULL, "projectId" character varying(21) NOT NULL, CONSTRAINT "PK_6854a1ac9a5b24810b29aaf0f43" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_webhook_simulation_flow_id" ON "webhook_simulation" ("flowId") ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "public"."idx_webhook_simulation_flow_id"');
            yield queryRunner.query('DROP TABLE "webhook_simulation"');
        });
    }
}
exports.CreateWebhookSimulationSchema1680698259291 = CreateWebhookSimulationSchema1680698259291;


/***/ }),
/* 314 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveCollections1680986182074 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
class RemoveCollections1680986182074 {
    constructor() {
        this.name = 'RemoveCollections1680986182074';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running RemoveCollections1680986182074 migration');
            // Data Queries
            yield queryRunner.query(`
        UPDATE "store-entry"
        SET "collectionId" = "collection"."projectId"
        FROM "collection"
        WHERE "store-entry"."collectionId" = "collection"."id";
        `);
            yield queryRunner.query('CREATE TABLE "folder" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "displayName" character varying NOT NULL, "projectId" character varying(21) NOT NULL, CONSTRAINT "PK_6278a41a706740c94c02e288df8" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE INDEX "idx_folder_project_id" ON "folder" ("projectId") ');
            yield queryRunner.query('ALTER TABLE "flow" ADD "folderId" character varying(21)');
            let countFolders = 0;
            const collections = yield queryRunner.query('SELECT * FROM "collection"');
            for (const collection of collections) {
                const randomId = (0, shared_1.apId)();
                yield queryRunner.query('INSERT INTO "folder" ("id", "created", "updated", "displayName", "projectId") VALUES ($1, NOW(), NOW(), $2, $3)', [randomId, collection.displayName, collection.projectId]);
                yield queryRunner.query(`UPDATE "flow" SET "folderId" = '${randomId}' WHERE "collectionId" = '${collection.id}'`);
                countFolders++;
            }
            server_shared_1.logger.info(`RemoveCollections1680986182074 Migrated ${countFolders} folders`);
            // Schema Queries
            yield queryRunner.query('ALTER TABLE "flow" DROP CONSTRAINT "fk_flow_collection_id"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP CONSTRAINT "fk_flow_run_collection_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_flow_collection_id"');
            yield queryRunner.query('ALTER TABLE "store-entry" RENAME COLUMN "collectionId" TO "projectId"');
            yield queryRunner.query('CREATE TABLE "flow_instance" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "projectId" character varying(21) NOT NULL, "flowId" character varying(21) NOT NULL, "flowVersionId" character varying(21) NOT NULL, "status" character varying NOT NULL, CONSTRAINT "REL_cb897f5e48cc3cba1418966326" UNIQUE ("flowId"), CONSTRAINT "REL_ec72f514c21734fb7a08797d75" UNIQUE ("flowVersionId"), CONSTRAINT "PK_5b0308060b7de5abec61ac5d2db" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_flow_instance_project_id_flow_id" ON "flow_instance" ("projectId", "flowId") ');
            yield queryRunner.query('ALTER TABLE "flow" DROP COLUMN "collectionId"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP COLUMN "collectionId"');
            yield queryRunner.query('ALTER TABLE "flow_run" DROP COLUMN "collectionDisplayName"');
            yield queryRunner.query('ALTER TABLE "flow" DROP CONSTRAINT "fk_flow_project_id"');
            yield queryRunner.query('ALTER TABLE "flow" ALTER COLUMN "projectId" SET NOT NULL');
            yield queryRunner.query('CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId") ');
            yield queryRunner.query('CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId") ');
            yield queryRunner.query('ALTER TABLE "flow_instance" ADD CONSTRAINT "fk_flow_instance_flow" FOREIGN KEY ("flowId") REFERENCES "flow"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow_instance" ADD CONSTRAINT "fk_flow_instance_flow_version" FOREIGN KEY ("flowVersionId") REFERENCES "flow_version"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow" ADD CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder"("id") ON DELETE SET NULL ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow" ADD CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "folder" ADD CONSTRAINT "fk_folder_project" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            // Migrate Flow Instances
            const instances = yield queryRunner.query('SELECT * FROM "instance"');
            let count = 0;
            let failed = 0;
            for (const instance of instances) {
                const flowIdToVersionId = instance.flowIdToVersionId;
                for (const flowId of Object.keys(flowIdToVersionId)) {
                    const flowVersionId = flowIdToVersionId[flowId];
                    const randomId = (0, shared_1.apId)();
                    const flowExists = yield queryRunner.query(`SELECT EXISTS(SELECT 1 FROM "flow" WHERE "id" = '${flowId}')`);
                    const flowVersionExists = yield queryRunner.query(`SELECT EXISTS(SELECT 1 FROM "flow_version" WHERE "id" = '${flowVersionId}')`);
                    if (!flowExists[0].exists || !flowVersionExists[0].exists) {
                        failed++;
                        server_shared_1.logger.info(`Skipping flow instance ${instance.id} because flow ${flowId} or flow version ${flowVersionId} does not exist`);
                    }
                    else {
                        yield queryRunner.query(`INSERT INTO "flow_instance" ("id", "created", "updated", "projectId", "flowId", "flowVersionId", "status") VALUES ('${randomId}', 'NOW()', 'NOW()', '${instance.projectId}', '${flowId}', '${flowVersionId}', '${instance.status}')`);
                        count++;
                    }
                }
            }
            server_shared_1.logger.info(`Finished Running RemoveCollections1680986182074 migration with ${count} flow instances migrated and ${failed} failed`);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Schema Queries
            yield queryRunner.query('ALTER TABLE "folder" DROP CONSTRAINT "fk_folder_project"');
            yield queryRunner.query('ALTER TABLE "flow" DROP CONSTRAINT "fk_flow_project_id"');
            yield queryRunner.query('ALTER TABLE "flow" DROP CONSTRAINT "fk_flow_folder_id"');
            yield queryRunner.query('ALTER TABLE "flow_instance" DROP CONSTRAINT "fk_flow_instance_flow_version"');
            yield queryRunner.query('ALTER TABLE "flow_instance" DROP CONSTRAINT "fk_flow_instance_flow"');
            yield queryRunner.query('DROP INDEX "public"."idx_flow_folder_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_flow_project_id"');
            yield queryRunner.query('ALTER TABLE "flow" ALTER COLUMN "projectId" DROP NOT NULL');
            yield queryRunner.query('ALTER TABLE "flow" ADD CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow" DROP COLUMN "folderId"');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD "collectionDisplayName" character varying NOT NULL');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD "collectionId" character varying(21) NOT NULL');
            yield queryRunner.query('ALTER TABLE "flow" ADD "collectionId" character varying(21) NOT NULL');
            yield queryRunner.query('DROP INDEX "public"."idx_folder_project_id"');
            yield queryRunner.query('DROP TABLE "folder"');
            yield queryRunner.query('DROP INDEX "public"."idx_flow_instance_project_id_flow_id"');
            yield queryRunner.query('DROP TABLE "flow_instance"');
            yield queryRunner.query('ALTER TABLE "store-entry" RENAME COLUMN "projectId" TO "collectionId"');
            yield queryRunner.query('CREATE INDEX "idx_flow_collection_id" ON "flow" ("collectionId") ');
            yield queryRunner.query('ALTER TABLE "flow_run" ADD CONSTRAINT "fk_flow_run_collection_id" FOREIGN KEY ("collectionId") REFERENCES "collection"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "flow" ADD CONSTRAINT "fk_flow_collection_id" FOREIGN KEY ("collectionId") REFERENCES "collection"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            // Data queries
            yield queryRunner.query(`
        UPDATE "store-entry"
        SET "collectionId" = "collection"."id"
        FROM "collection"
        WHERE "store-entry"."collectionId" = "collection"."projectId";`);
        });
    }
}
exports.RemoveCollections1680986182074 = RemoveCollections1680986182074;


/***/ }),
/* 315 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StoreAllPeriods1681019096716 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class StoreAllPeriods1681019096716 {
    constructor() {
        this.name = 'StoreAllPeriods1681019096716';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running StoreAllPeriods1681019096716');
            yield queryRunner.query('ALTER TABLE "project_usage" DROP CONSTRAINT "REL_c407fc9b2bfb44515af69d575a"');
            yield queryRunner.query('DROP INDEX "public"."idx_project_usage_project_id"');
            yield queryRunner.query('CREATE INDEX "idx_project_usage_project_id" ON "project_usage" ("projectId") ');
            server_shared_1.logger.info('Finished Running StoreAllPeriods1681019096716');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "project_usage" ADD CONSTRAINT "REL_c407fc9b2bfb44515af69d575a" UNIQUE ("projectId")');
            yield queryRunner.query('DROP INDEX "public"."idx_project_usage_project_id"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_project_usage_project_id" ON "project_usage" ("projectId") ');
        });
    }
}
exports.StoreAllPeriods1681019096716 = StoreAllPeriods1681019096716;


/***/ }),
/* 316 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddInputUiInfo1681107443963 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const FLOW_VERSION_TABLE = 'flow_version';
// Legacy flow versions have no inputUiInfo, so we should add it
class AddInputUiInfo1681107443963 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddInputUiInfo1681107443963, started');
            let count = 0;
            const flowVersions = yield queryRunner.query(`SELECT * FROM ${FLOW_VERSION_TABLE}`);
            for (const flowVersion of flowVersions) {
                const steps = getAllSteps(flowVersion);
                let changed = false;
                for (const step of steps) {
                    if (step.type === 'PIECE_TRIGGER' || step.type === 'PIECE') {
                        if (!step.settings.inputUiInfo) {
                            step.settings.inputUiInfo = {};
                            changed = true;
                        }
                    }
                }
                if (changed) {
                    count++;
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET flow_version = $1 WHERE id = $2`, [flowVersion, flowVersion.id]);
                }
            }
            server_shared_1.logger.info('AddInputUiInfo1681107443963, finished flows ' + count);
        });
    }
    down() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('no rolling back AddInputUiInfo1681107443963');
        });
    }
}
exports.AddInputUiInfo1681107443963 = AddInputUiInfo1681107443963;
function traverseFlowInternal(step) {
    const steps = [];
    while (step !== undefined && step !== null) {
        steps.push(step);
        if (step.type === 'BRANCH') {
            steps.push(...traverseFlowInternal(step.onFailureAction));
            steps.push(...traverseFlowInternal(step.onSuccessAction));
        }
        step = step.nextAction;
    }
    return steps;
}
function getAllSteps(flowVersion) {
    return traverseFlowInternal(flowVersion.trigger);
}


/***/ }),
/* 317 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AllowNullableStoreEntryAndTrigger1683040965874 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AllowNullableStoreEntryAndTrigger1683040965874 {
    constructor() {
        this.name = 'AllowNullableStoreEntryAndTrigger1683040965874';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AllowNullableStoreEntryAndTrigger1683040965874, started');
            yield queryRunner.query('ALTER TABLE "store-entry" ALTER COLUMN "value" DROP NOT NULL');
            yield queryRunner.query('ALTER TABLE "trigger_event" ALTER COLUMN "payload" DROP NOT NULL');
            server_shared_1.logger.info('AllowNullableStoreEntryAndTrigger1683040965874, ended');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "trigger_event" ALTER COLUMN "payload" SET NOT NULL');
            yield queryRunner.query('ALTER TABLE "store-entry" ALTER COLUMN "value" SET NOT NULL');
        });
    }
}
exports.AllowNullableStoreEntryAndTrigger1683040965874 = AllowNullableStoreEntryAndTrigger1683040965874;


/***/ }),
/* 318 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameNotifications1683195711242 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class RenameNotifications1683195711242 {
    constructor() {
        this.name = 'RenameNotifications1683195711242';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running migration: RenameNotifications1683195711242');
            yield queryRunner.query('ALTER TABLE "project" RENAME COLUMN "notifications" TO "notifyStatus"');
            server_shared_1.logger.info('Migration complete: RenameNotifications1683195711242');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "project" RENAME COLUMN "notifyStatus" TO "notifications"');
        });
    }
}
exports.RenameNotifications1683195711242 = RenameNotifications1683195711242;


/***/ }),
/* 319 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListFlowRunsIndices1683199709317 = void 0;
const tslib_1 = __webpack_require__(1);
class ListFlowRunsIndices1683199709317 {
    constructor() {
        this.name = 'ListFlowRunsIndices1683199709317';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "public"."idx_run_project_id"');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created" DESC) ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created" DESC) ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created" DESC) ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "status", "created" DESC) ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "public"."idx_run_project_id_flow_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "public"."idx_run_project_id_flow_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "public"."idx_run_project_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "public"."idx_run_project_id_environment_created_desc"');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id" ON "flow_run" ("projectId") ');
        });
    }
}
exports.ListFlowRunsIndices1683199709317 = ListFlowRunsIndices1683199709317;


/***/ }),
/* 320 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectNotifyStatusNotNull1683458275525 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class ProjectNotifyStatusNotNull1683458275525 {
    constructor() {
        this.name = 'ProjectNotifyStatusNotNull1683458275525';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('UPDATE "project" SET "notifyStatus" = \'ALWAYS\' WHERE "notifyStatus" IS NULL');
            yield queryRunner.query('ALTER TABLE "project" ALTER COLUMN "notifyStatus" SET NOT NULL');
            server_shared_1.logger.info('[ProjectNotifyStatusNotNull1683458275525] up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "project" ALTER COLUMN "notifyStatus" DROP NOT NULL');
            yield queryRunner.query('UPDATE "project" SET "notifyStatus" = NULL WHERE "notifyStatus" = \'ALWAYS\'');
            server_shared_1.logger.info('[ProjectNotifyStatusNotNull1683458275525] down');
        });
    }
}
exports.ProjectNotifyStatusNotNull1683458275525 = ProjectNotifyStatusNotNull1683458275525;


/***/ }),
/* 321 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FlowRunPauseMetadata1683552928243 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class FlowRunPauseMetadata1683552928243 {
    constructor() {
        this.name = 'FlowRunPauseMetadata1683552928243';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_run" ADD "pauseMetadata" jsonb');
            server_shared_1.logger.info('[FlowRunPauseMetadata1683552928243] up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_run" DROP COLUMN "pauseMetadata"');
            server_shared_1.logger.info('[FlowRunPauseMetadata1683552928243] down');
        });
    }
}
exports.FlowRunPauseMetadata1683552928243 = FlowRunPauseMetadata1683552928243;


/***/ }),
/* 322 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChangeVariableSyntax1683898241599 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const FLOW_VERSION_TABLE = 'flow_version';
class ChangeVariableSyntax1683898241599 {
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('ChangeVariableSyntax1683898241599, started');
            const flowVersions = yield queryRunner.query(`SELECT * FROM ${FLOW_VERSION_TABLE}`);
            let count = 0;
            for (const flowVersion of flowVersions) {
                const step = flowVersion.trigger;
                const update = updateStep(step, true);
                if (update) {
                    count++;
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
                }
            }
            server_shared_1.logger.info(`ChangeVariableSyntax1683898241599, updated ${count} flow versions`);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('ChangeVariableSyntax1683898241599 down, started');
            const flowVersions = yield queryRunner.query(`SELECT * FROM ${FLOW_VERSION_TABLE}`);
            let count = 0;
            for (const flowVersion of flowVersions) {
                const step = flowVersion.trigger;
                const update = updateStep(step, false);
                if (update) {
                    count++;
                    yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
                }
            }
            server_shared_1.logger.info(`ChangeVariableSyntax1683898241599, down ${count} flow versions`);
        });
    }
}
exports.ChangeVariableSyntax1683898241599 = ChangeVariableSyntax1683898241599;
function updateStep(step, forward) {
    let update = false;
    while (step) {
        if (step.settings.input) {
            step.settings.input = traverse(step.settings.input, forward);
            update = true;
        }
        if (step.onSuccessAction) {
            const result = updateStep(step.onSuccessAction, forward);
            update = update || result;
        }
        if (step.onFailureAction) {
            const result = updateStep(step.onFailureAction, forward);
            update = update || result;
        }
        if (step.firstLoopAction) {
            const result = updateStep(step.firstLoopAction, forward);
            update = update || result;
        }
        step = step.nextAction;
    }
    return update;
}
function traverse(input, forward) {
    if (input === undefined || input === null) {
        return input;
    }
    if (typeof input === 'string') {
        if (forward) {
            // Replace anything ${var.asd } to {{ var.asd }}
            return input.replace(/\$\{([^}]+)\}/g, '{{$1}}');
        }
        else {
            // Revert above change
            return input.replace(/\{\{([^}]+)\}\}/g, '${$1}');
        }
    }
    else if (Array.isArray(input)) {
        return input.map((item) => traverse(item, forward));
    }
    else if (typeof input === 'object') {
        const result = {};
        for (const [key, value] of Object.entries(input)) {
            result[key] = traverse(value, forward);
        }
        return result;
    }
    return input;
}


/***/ }),
/* 323 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceMetadata1685537054805 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class PieceMetadata1685537054805 {
    constructor() {
        this.name = 'PieceMetadata1685537054805';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('CREATE COLLATION en_natural (LOCALE = \'en-US-u-kn-true\', PROVIDER = \'icu\')');
            yield queryRunner.query('CREATE TABLE "piece_metadata" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "name" character varying NOT NULL, "displayName" character varying NOT NULL, "logoUrl" character varying NOT NULL, "description" character varying, "version" character varying COLLATE "en_natural" NOT NULL, "minimumSupportedRelease" character varying COLLATE "en_natural" NOT NULL, "maximumSupportedRelease" character varying COLLATE "en_natural" NOT NULL, "actions" jsonb NOT NULL, "triggers" jsonb NOT NULL, CONSTRAINT "PK_b045821e9caf2be9aba520d96da" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_version" ON "piece_metadata" ("name", "version") ');
            server_shared_1.logger.info('[PieceMetadata1685537054805] up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP COLLATION en_natural');
            yield queryRunner.query('DROP INDEX "public"."idx_piece_metadata_name_version"');
            yield queryRunner.query('DROP TABLE "piece_metadata"');
            server_shared_1.logger.info('[PieceMetadata1685537054805] down');
        });
    }
}
exports.PieceMetadata1685537054805 = PieceMetadata1685537054805;


/***/ }),
/* 324 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddProjectIdToPieceMetadata1686090319016 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddProjectIdToPieceMetadata1686090319016 {
    constructor() {
        this.name = 'AddProjectIdToPieceMetadata1686090319016';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('[AddProjectIdToPieceMetadata1686090319016] up');
            yield queryRunner.query('DROP INDEX "public"."idx_piece_metadata_name_version"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "projectId" character varying');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId") ');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('[AddProjectIdToPieceMetadata1686090319016] finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP CONSTRAINT "fk_piece_metadata_project_id"');
            yield queryRunner.query('DROP INDEX "public"."idx_piece_metadata_name_project_id_version"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "projectId"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_version" ON "piece_metadata" ("name", "version") ');
        });
    }
}
exports.AddProjectIdToPieceMetadata1686090319016 = AddProjectIdToPieceMetadata1686090319016;


/***/ }),
/* 325 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnifyPieceName1686138629812 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const FLOW_VERSION_TABLE = 'flow_version';
const APP_CONNECTION_TABLE = 'app_connection';
const APP_EVENT_ROUTING_TABLE = 'app_event_routing';
const TRIGGER_EVENT = 'trigger_event';
const PIECE_TYPE = 'PIECE';
const PIECE_TRIGGER_TYPE = 'PIECE_TRIGGER';
class UnifyPieceName1686138629812 {
    constructor() {
        this.name = 'UnifyPieceName1686138629812';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('UnifyPieceName1686138629812, started');
            const count = yield updateFlowVersions(queryRunner, false);
            const connectionCount = yield updateAppConnections(queryRunner, false);
            const appEventsRoutCount = yield updateAppEventRoutes(queryRunner, false);
            const pieceMetadataCount = yield updatePieceMetadata(queryRunner, false);
            const triggerEventCount = yield updateTriggerEvent(queryRunner, false);
            server_shared_1.logger.info('UnifyPieceName1686138629812, finished renaming ' +
                count +
                ' flows and connections count ' +
                connectionCount +
                ' appEventsRoutCount ' +
                appEventsRoutCount +
                ' pieceMetadataCount ' +
                pieceMetadataCount +
                ' triggerEventCount ' +
                triggerEventCount);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('UnifyPieceName1686138629812, reverting');
            const count = yield updateFlowVersions(queryRunner, true);
            const connectionCount = yield updateAppConnections(queryRunner, true);
            const appEventsRoutCount = yield updateAppEventRoutes(queryRunner, true);
            const pieceMetadataCount = yield updatePieceMetadata(queryRunner, true);
            const triggerEventCount = yield updateTriggerEvent(queryRunner, true);
            server_shared_1.logger.info('UnifyPieceName1686138629812, finished reverting renaming ' +
                count +
                ' flows and connections count ' +
                connectionCount +
                ' appEventsRoutCount ' +
                appEventsRoutCount +
                ' pieceMetadataCount ' +
                pieceMetadataCount +
                ' triggerEventCount ' +
                triggerEventCount);
        });
    }
}
exports.UnifyPieceName1686138629812 = UnifyPieceName1686138629812;
function updateFlowVersions(queryRunner, revert) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flowVersions = yield queryRunner.query('SELECT * FROM flow_version');
        let count = 0;
        for (const flowVersion of flowVersions) {
            const step = flowVersion.trigger;
            const update = updateStep(step, revert);
            if (update) {
                count++;
                yield queryRunner.query(`UPDATE ${FLOW_VERSION_TABLE} SET trigger = $1 WHERE id = $2`, [flowVersion.trigger, flowVersion.id]);
            }
        }
        return count;
    });
}
function updateTriggerEvent(queryRunner, revert) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const triggerEvents = yield queryRunner.query(`SELECT * FROM ${TRIGGER_EVENT}`);
        let count = 0;
        for (const triggerEvent of triggerEvents) {
            if (triggerEvent.source) {
                if (revert) {
                    triggerEvent.source = `@activepieces/piece-${triggerEvent.source}`;
                }
                else {
                    triggerEvent.source = triggerEvent.source.replace('@activepieces/piece-', '');
                }
                count++;
                yield queryRunner.query(`UPDATE ${TRIGGER_EVENT} SET source = $1 WHERE id = $2`, [triggerEvent.source, triggerEvent.id]);
            }
        }
        return count;
    });
}
function updateAppConnections(queryRunner, revert) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const appConnections = yield queryRunner.query(`SELECT * FROM ${APP_CONNECTION_TABLE}`);
        let count = 0;
        for (const appConnection of appConnections) {
            appConnection.appName = getPackageNameForPiece(appConnection.appName, revert);
            count++;
            yield queryRunner.query(`UPDATE ${APP_CONNECTION_TABLE} SET "appName" = $1 WHERE id = $2`, [appConnection.appName, appConnection.id]);
        }
        return count;
    });
}
function updateAppEventRoutes(queryRunner, revert) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const appEventsRoutes = yield queryRunner.query(`SELECT * FROM ${APP_EVENT_ROUTING_TABLE}`);
        let count = 0;
        for (const appEventsRoute of appEventsRoutes) {
            appEventsRoute.appName = getPackageNameForPiece(appEventsRoute.appName, revert);
            count++;
            yield queryRunner.query(`UPDATE ${APP_EVENT_ROUTING_TABLE} SET "appName" = $1 WHERE id = $2`, [appEventsRoute.appName, appEventsRoute.id]);
        }
        return count;
    });
}
function updatePieceMetadata(queryRunner, revert) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const pieceMetadatas = yield queryRunner.query('SELECT * FROM piece_metadata;');
        let count = 0;
        for (const pieceMetadata of pieceMetadatas) {
            const updatedName = getPackageNameForPiece(pieceMetadata.name, revert);
            const updateQuery = 'UPDATE piece_metadata SET name = $1 WHERE id = $2;';
            yield queryRunner.query(updateQuery, [updatedName, pieceMetadata.id]);
            count++;
        }
        return count;
    });
}
function updateStep(step, revert) {
    let update = false;
    while (step) {
        if (step.type === PIECE_TYPE || step.type === PIECE_TRIGGER_TYPE) {
            step.settings.pieceName = getPackageNameForPiece(step.settings.pieceName, revert);
            update = true;
        }
        if (step.firstLoopAction) {
            const result = updateStep(step.firstLoopAction, revert);
            update = update || result;
        }
        if (step.onSuccessAction) {
            const result = updateStep(step.onSuccessAction, revert);
            update = update || result;
        }
        if (step.onFailureAction) {
            const result = updateStep(step.onFailureAction, revert);
            update = update || result;
        }
        step = step.nextAction;
    }
    return update;
}
const getPackageNameForPiece = (pieceName, revert) => {
    if (!pieceName) {
        return pieceName;
    }
    if (revert) {
        return pieceName.replace('@activepieces/piece-', '');
    }
    return `@activepieces/piece-${pieceName}`;
};


/***/ }),
/* 326 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddScheduleOptions1687384796637 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddScheduleOptions1687384796637 {
    constructor() {
        this.name = 'AddScheduleOptions1687384796637';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('Running AddScheduleOptions1687384796637 migration up');
            yield queryRunner.query('ALTER TABLE "flow_instance" ADD "schedule" jsonb');
            server_shared_1.logger.info('Running AddScheduleOptions1687384796637 migration done');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_instance" DROP COLUMN "schedule"');
        });
    }
}
exports.AddScheduleOptions1687384796637 = AddScheduleOptions1687384796637;


/***/ }),
/* 327 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUpdatedByInFlowVersion1689292797727 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddUpdatedByInFlowVersion1689292797727 {
    constructor() {
        this.name = 'AddUpdatedByInFlowVersion1689292797727';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddUpdatedByInFlowVersion1689292797727 up');
            yield queryRunner.query('ALTER TABLE "flow_version" ADD "updatedBy" character varying');
            yield queryRunner.query('ALTER TABLE "flow_version" ADD CONSTRAINT "fk_updated_by_user_flow" FOREIGN KEY ("updatedBy") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            server_shared_1.logger.info('AddUpdatedByInFlowVersion1689292797727 finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_version" DROP CONSTRAINT "fk_updated_by_user_flow"');
            yield queryRunner.query('ALTER TABLE "flow_version" DROP COLUMN "updatedBy"');
        });
    }
}
exports.AddUpdatedByInFlowVersion1689292797727 = AddUpdatedByInFlowVersion1689292797727;


/***/ }),
/* 328 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTasksToRun1689351564290 = void 0;
const tslib_1 = __webpack_require__(1);
class AddTasksToRun1689351564290 {
    constructor() {
        this.name = 'AddTasksToRun1689351564290';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_run" ADD "tasks" integer');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_run" DROP COLUMN "tasks"');
        });
    }
}
exports.AddTasksToRun1689351564290 = AddTasksToRun1689351564290;


/***/ }),
/* 329 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAppConnectionTypeToTopLevel1691703023866 = void 0;
const tslib_1 = __webpack_require__(1);
const crypto = tslib_1.__importStar(__webpack_require__(6));
const server_shared_1 = __webpack_require__(2);
const algorithm = 'aes-256-cbc';
class AddAppConnectionTypeToTopLevel1691703023866 {
    constructor() {
        this.name = 'AddAppConnectionTypeToTopLevel1691703023866';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691703023866 up');
            yield queryRunner.query('ALTER TABLE "app_connection" ADD "type" character varying');
            const connections = yield queryRunner.query('SELECT * FROM app_connection');
            for (const currentConnection of connections) {
                try {
                    const connectionValue = decryptObject(currentConnection.value);
                    yield queryRunner.query(`UPDATE "app_connection" SET "type" = '${connectionValue.type}' WHERE id = '${currentConnection.id}'`);
                }
                catch (e) {
                    server_shared_1.logger.error(e);
                }
            }
            yield queryRunner.query('ALTER TABLE "app_connection" ALTER COLUMN "type" SET NOT NULL');
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691703023866 finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691703023866 down');
            yield queryRunner.query('ALTER TABLE "app_connection" DROP COLUMN "type"');
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691703023866 finished');
        });
    }
}
exports.AddAppConnectionTypeToTopLevel1691703023866 = AddAppConnectionTypeToTopLevel1691703023866;
function decryptObject(encryptedObject) {
    const iv = Buffer.from(encryptedObject.iv, 'hex');
    const key = Buffer.from(server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.ENCRYPTION_KEY), 'binary');
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encryptedObject.data, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return JSON.parse(decrypted);
}


/***/ }),
/* 330 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTagsToRun1692106375081 = void 0;
const tslib_1 = __webpack_require__(1);
class AddTagsToRun1692106375081 {
    constructor() {
        this.name = 'AddTagsToRun1692106375081';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_run" ADD "tags" character varying array');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "flow_run" DROP COLUMN "tags"');
        });
    }
}
exports.AddTagsToRun1692106375081 = AddTagsToRun1692106375081;


/***/ }),
/* 331 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddFileToPostgres1693004806926 = void 0;
const tslib_1 = __webpack_require__(1);
class AddFileToPostgres1693004806926 {
    constructor() {
        this.name = 'AddFileToPostgres1693004806926';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('CREATE TABLE "step_file" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "flowId" character varying(21) NOT NULL, "projectId" character varying(21) NOT NULL, "name" character varying NOT NULL, "size" integer NOT NULL, "stepName" character varying NOT NULL, "data" bytea NOT NULL, CONSTRAINT "PK_04bb9022ff8c2190fea2036174e" PRIMARY KEY ("id"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "step_file_project_id_flow_id_step_name_name" ON "step_file" ("projectId", "flowId", "stepName", "name") ');
            yield queryRunner.query('ALTER TABLE "step_file" ADD CONSTRAINT "fk_step_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "step_file" ADD CONSTRAINT "fk_step_file_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow"("id") ON DELETE CASCADE ON UPDATE NO ACTION');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "step_file" DROP CONSTRAINT "fk_step_file_flow_id"');
            yield queryRunner.query('ALTER TABLE "step_file" DROP CONSTRAINT "fk_step_file_project_id"');
            yield queryRunner.query('DROP INDEX "public"."step_file_project_id_flow_id_step_name_name"');
            yield queryRunner.query('DROP TABLE "step_file"');
        });
    }
}
exports.AddFileToPostgres1693004806926 = AddFileToPostgres1693004806926;


/***/ }),
/* 332 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddStatusToConnections1693402930301 = void 0;
const tslib_1 = __webpack_require__(1);
class AddStatusToConnections1693402930301 {
    constructor() {
        this.name = 'AddStatusToConnections1693402930301';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Add the new column without NOT NULL constraint first
            yield queryRunner.query('ALTER TABLE "app_connection" ADD "status" character varying DEFAULT \'ACTIVE\'');
            // Update existing rows to set the default value
            yield queryRunner.query('UPDATE "app_connection" SET "status" = \'ACTIVE\'');
            // Finally, alter the column to set NOT NULL constraint
            yield queryRunner.query('ALTER TABLE "app_connection" ALTER COLUMN "status" SET NOT NULL');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Remove NOT NULL constraint first
            yield queryRunner.query('ALTER TABLE "app_connection" ALTER COLUMN "status" DROP NOT NULL');
            // Drop the "status" column
            yield queryRunner.query('ALTER TABLE "app_connection" DROP COLUMN "status"');
        });
    }
}
exports.AddStatusToConnections1693402930301 = AddStatusToConnections1693402930301;


/***/ }),
/* 333 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUserMetaInformation1693850082449 = void 0;
const tslib_1 = __webpack_require__(1);
class AddUserMetaInformation1693850082449 {
    constructor() {
        this.name = 'AddUserMetaInformation1693850082449';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "user" ADD "imageUrl" character varying');
            yield queryRunner.query('ALTER TABLE "user" ADD "title" character varying');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "user" DROP COLUMN "title"');
            yield queryRunner.query('ALTER TABLE "user" DROP COLUMN "imageUrl"');
        });
    }
}
exports.AddUserMetaInformation1693850082449 = AddUserMetaInformation1693850082449;


/***/ }),
/* 334 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FixPieceMetadataOrderBug1694367186954 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class FixPieceMetadataOrderBug1694367186954 {
    constructor() {
        this.name = 'FixPieceMetadataOrderBug1694367186954';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "auth" TYPE json');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "actions" TYPE json');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "triggers" TYPE json');
            server_shared_1.logger.info('[FixPieceMetadataOrderBug1694367186954] up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "auth" SET DATA TYPE jsonb USING my_json::jsonb');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "actions" SET DATA TYPE jsonb USING my_json::jsonb');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "triggers" SET DATA TYPE jsonb USING my_json::jsonb');
            server_shared_1.logger.info('[FixPieceMetadataOrderBug1694367186954] down');
        });
    }
}
exports.FixPieceMetadataOrderBug1694367186954 = FixPieceMetadataOrderBug1694367186954;


/***/ }),
/* 335 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileTypeCompression1694691554696 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class FileTypeCompression1694691554696 {
    constructor() {
        this.name = 'FileTypeCompression1694691554696';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "file" ADD "type" character varying NOT NULL DEFAULT \'UNKNOWN\'');
            yield queryRunner.query('ALTER TABLE "file" ADD "compression" character varying NOT NULL DEFAULT \'NONE\'');
            server_shared_1.logger.info('[FileTypeCompression1694691554696] up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "file" DROP COLUMN "compression"');
            yield queryRunner.query('ALTER TABLE "file" DROP COLUMN "type"');
            server_shared_1.logger.info('[FileTypeCompression1694691554696] down');
        });
    }
}
exports.FileTypeCompression1694691554696 = FileTypeCompression1694691554696;


/***/ }),
/* 336 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Chatbot1694902537040 = void 0;
const tslib_1 = __webpack_require__(1);
class Chatbot1694902537040 {
    constructor() {
        this.name = 'Chatbot1694902537040';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('CREATE TABLE "chatbot" ("id" character varying(21) NOT NULL, "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "type" character varying NOT NULL, "displayName" character varying NOT NULL, "projectId" character varying NOT NULL, "connectionId" character varying, "dataSources" jsonb NOT NULL, "prompt" character varying, CONSTRAINT "PK_1ee1961e62c5cec278314f1d68e" PRIMARY KEY ("id"))');
            yield queryRunner.query('ALTER TABLE "chatbot" ADD CONSTRAINT "FK_d2f5f245c27541cd70f13f169eb" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE NO ACTION ON UPDATE NO ACTION');
            yield queryRunner.query('ALTER TABLE "chatbot" ADD CONSTRAINT "FK_13f7ad52cefa43433864732c384" FOREIGN KEY ("connectionId") REFERENCES "app_connection"("id") ON DELETE NO ACTION ON UPDATE NO ACTION');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "chatbot" DROP CONSTRAINT "FK_13f7ad52cefa43433864732c384"');
            yield queryRunner.query('ALTER TABLE "chatbot" DROP CONSTRAINT "FK_d2f5f245c27541cd70f13f169eb"');
            yield queryRunner.query('DROP TABLE "chatbot"');
        });
    }
}
exports.Chatbot1694902537040 = Chatbot1694902537040;


/***/ }),
/* 337 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddVisibilityStatusToChatbot1695719749099 = void 0;
const tslib_1 = __webpack_require__(1);
class AddVisibilityStatusToChatbot1695719749099 {
    constructor() {
        this.name = 'AddVisibilityStatusToChatbot1695719749099';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "chatbot" ADD "visibilityStatus" character varying NOT NULL DEFAULT \'PRIVATE\'');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "chatbot" DROP COLUMN "visibilityStatus"');
        });
    }
}
exports.AddVisibilityStatusToChatbot1695719749099 = AddVisibilityStatusToChatbot1695719749099;


/***/ }),
/* 338 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPieceTypeAndPackageTypeToPieceMetadata1695992551156 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPieceTypeAndPackageTypeToPieceMetadata1695992551156 {
    constructor() {
        this.name = 'AddPieceTypeAndPackageTypeToPieceMetadata1695992551156';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "pieceType" character varying');
            yield queryRunner.query('UPDATE "piece_metadata" SET "pieceType" = \'OFFICIAL\' WHERE "projectId" IS NULL');
            yield queryRunner.query('UPDATE "piece_metadata" SET "pieceType" = \'CUSTOM\' WHERE "projectId" IS NOT NULL');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "pieceType" SET NOT NULL');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ADD "packageType" character varying');
            yield queryRunner.query('UPDATE "piece_metadata" SET "packageType" = \'REGISTRY\'');
            yield queryRunner.query('ALTER TABLE "piece_metadata" ALTER COLUMN "packageType" SET NOT NULL');
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToPieceMetadata1695992551156 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "packageType"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" DROP COLUMN "pieceType"');
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToPieceMetadata1695992551156 down');
        });
    }
}
exports.AddPieceTypeAndPackageTypeToPieceMetadata1695992551156 = AddPieceTypeAndPackageTypeToPieceMetadata1695992551156;


/***/ }),
/* 339 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddArchiveIdToPieceMetadata1696950789636 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddArchiveIdToPieceMetadata1696950789636 {
    constructor() {
        this.name = 'AddArchiveIdToPieceMetadata1696950789636';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ADD "archiveId" character varying(21)
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ADD CONSTRAINT "UQ_b43d7b070f0fc309932d4cf0165" UNIQUE ("archiveId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ADD CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
            server_shared_1.logger.info('AddArchiveIdToPieceMetadata1696950789636 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata" DROP CONSTRAINT "fk_piece_metadata_file"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata" DROP CONSTRAINT "UQ_b43d7b070f0fc309932d4cf0165"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata" DROP COLUMN "archiveId"
        `);
            server_shared_1.logger.info('AddArchiveIdToPieceMetadata1696950789636 down');
        });
    }
}
exports.AddArchiveIdToPieceMetadata1696950789636 = AddArchiveIdToPieceMetadata1696950789636;


/***/ }),
/* 340 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformToProject1698065083750 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPlatformToProject1698065083750 {
    constructor() {
        this.name = 'AddPlatformToProject1698065083750';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD "type" character varying NOT NULL DEFAULT 'STANDALONE'
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD "platformId" character varying(21)
        `);
            server_shared_1.logger.info('AddPlatformToProject1698065083750 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "project" DROP COLUMN "platformId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project" DROP COLUMN "type"
        `);
            server_shared_1.logger.info('AddPlatformToProject1698065083750 down');
        });
    }
}
exports.AddPlatformToProject1698065083750 = AddPlatformToProject1698065083750;


/***/ }),
/* 341 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTerminationReason1698323987669 = void 0;
const tslib_1 = __webpack_require__(1);
class AddTerminationReason1698323987669 {
    constructor() {
        this.name = 'AddTerminationReason1698323987669';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "flow_run"
            ADD "terminationReason" character varying
        `);
            yield queryRunner.query(`
        UPDATE "flow_run"
        SET "status" = 'SUCCEEDED',
            "terminationReason" = 'STOPPED_BY_HOOK'
        WHERE "status" = 'STOPPED'
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
        UPDATE "flow_run"
        SET "status" = 'STOPPED',
            "terminationReason" = null
        WHERE "status" = 'SUCCEEDED' AND "terminationReason" = 'STOPPED_BY_HOOK'
    `);
            yield queryRunner.query(`
            ALTER TABLE "flow_run" DROP COLUMN "terminationReason"
        `);
        });
    }
}
exports.AddTerminationReason1698323987669 = AddTerminationReason1698323987669;


/***/ }),
/* 342 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddSigningKey1698602417745 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddSigningKey1698602417745 {
    constructor() {
        this.name = 'AddSigningKey1698602417745';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "signing_key" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "platformId" character varying(21) NOT NULL,
                "publicKey" character varying NOT NULL,
                "algorithm" character varying NOT NULL,
                "generatedBy" character varying(21) NOT NULL,
                CONSTRAINT "PK_934695464c4ffe5280d79ff541a" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            ALTER TABLE "signing_key"
            ADD CONSTRAINT "fk_signing_key_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
            yield queryRunner.query(`
            ALTER TABLE "signing_key"
            ADD CONSTRAINT "fk_signing_key_generated_by" FOREIGN KEY ("generatedBy") REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
            server_shared_1.logger.info('AddSigningKey1698602417745 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "signing_key" DROP CONSTRAINT "fk_signing_key_generated_by"
        `);
            yield queryRunner.query(`
            ALTER TABLE "signing_key" DROP CONSTRAINT "fk_signing_key_platform_id"
        `);
            yield queryRunner.query(`
            DROP TABLE "signing_key"
        `);
            server_shared_1.logger.info('AddSigningKey1698602417745 down');
        });
    }
}
exports.AddSigningKey1698602417745 = AddSigningKey1698602417745;


/***/ }),
/* 343 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddDisplayNameToSigningKey1698698190965 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddDisplayNameToSigningKey1698698190965 {
    constructor() {
        this.name = 'AddDisplayNameToSigningKey1698698190965';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "signing_key"
            ADD "displayName" character varying NOT NULL
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "signing_key" DROP COLUMN "displayName"
        `);
        });
    }
}
exports.AddDisplayNameToSigningKey1698698190965 = AddDisplayNameToSigningKey1698698190965;


/***/ }),
/* 344 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManagedAuthnInitial1698700720482 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class ManagedAuthnInitial1698700720482 {
    constructor() {
        this.name = 'ManagedAuthnInitial1698700720482';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD "externalId" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ADD "externalId" character varying
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_external_id" ON "user" ("externalId")
        `);
            server_shared_1.logger.info('ManagedAuthnInitial1698700720482 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user" DROP COLUMN "externalId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project" DROP COLUMN "externalId"
        `);
            server_shared_1.logger.info('ManagedAuthnInitial1698700720482 down');
        });
    }
}
exports.ManagedAuthnInitial1698700720482 = ManagedAuthnInitial1698700720482;


/***/ }),
/* 345 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddOAuth2AppEntiity1699221414907 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddOAuth2AppEntiity1699221414907 {
    constructor() {
        this.name = 'AddOAuth2AppEntiity1699221414907';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "oauth_app" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "pieceName" character varying NOT NULL,
                "platformId" character varying(21) NOT NULL,
                "clientId" character varying NOT NULL,
                "clientSecret" jsonb NOT NULL,
                CONSTRAINT "PK_3256b97c0a3ee2d67240805dca4" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_oauth_app_platformId_pieceName" ON "oauth_app" ("platformId", "pieceName")
        `);
            yield queryRunner.query(`
            ALTER TABLE "oauth_app"
            ADD CONSTRAINT "fk_oauth_app_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "oauth_app" DROP CONSTRAINT "fk_oauth_app_platform_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_oauth_app_platformId_pieceName"
        `);
            yield queryRunner.query(`
            DROP TABLE "oauth_app"
        `);
        });
    }
}
exports.AddOAuth2AppEntiity1699221414907 = AddOAuth2AppEntiity1699221414907;


/***/ }),
/* 346 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddFilteredPiecesToPlatform1699281870038 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddFilteredPiecesToPlatform1699281870038 {
    constructor() {
        this.name = 'AddFilteredPiecesToPlatform1699281870038';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "filteredPieceNames" character varying array,
            ADD "filteredPieceBehavior" character varying
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET
                "filteredPieceNames" = '{}',
                "filteredPieceBehavior" = 'BLOCKED'
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "filteredPieceNames" SET NOT NULL,
            ALTER COLUMN "filteredPieceBehavior" SET NOT NULL
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "filteredPieceBehavior"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "filteredPieceNames"
        `);
        });
    }
}
exports.AddFilteredPiecesToPlatform1699281870038 = AddFilteredPiecesToPlatform1699281870038;


/***/ }),
/* 347 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddSmtpAndPrivacyUrlToPlatform1699491705906 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddSmtpAndPrivacyUrlToPlatform1699491705906 {
    constructor() {
        this.name = 'AddSmtpAndPrivacyUrlToPlatform1699491705906';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "smtpHost" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "smtpPort" integer
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "smtpUser" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "smtpPassword" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "smtpSenderEmail" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "smtpUseSSL" boolean
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "privacyPolicyUrl" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "termsOfServiceUrl" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "showPoweredBy" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "showPoweredBy" = false
        `);
            yield queryRunner.query(`
        ALTER TABLE "platform"
        ALTER COLUMN "showPoweredBy" SET NOT NULL
    `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "cloudAuthEnabled" boolean NOT NULL DEFAULT true
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
        ALTER TABLE "platform" DROP COLUMN "cloudAuthEnabled"
    `);
            yield queryRunner.query(`
        ALTER TABLE "platform" DROP COLUMN "showPoweredBy"
    `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "termsOfServiceUrl"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "privacyPolicyUrl"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "smtpUseSSL"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "smtpSenderEmail"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "smtpPassword"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "smtpUser"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "smtpPort"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "smtpHost"
        `);
        });
    }
}
exports.AddSmtpAndPrivacyUrlToPlatform1699491705906 = AddSmtpAndPrivacyUrlToPlatform1699491705906;


/***/ }),
/* 348 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformIdToUser1699901161457 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPlatformIdToUser1699901161457 {
    constructor() {
        this.name = 'AddPlatformIdToUser1699901161457';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ADD "platformId" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "user" DROP CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            server_shared_1.logger.info('AddPlatformIdToUser1699901161457 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ADD CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
        `);
            yield queryRunner.query(`
            ALTER TABLE "user" DROP COLUMN "platformId"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_external_id" ON "user" ("externalId")
        `);
            server_shared_1.logger.info('AddPlatformIdToUser1699901161457 down');
        });
    }
}
exports.AddPlatformIdToUser1699901161457 = AddPlatformIdToUser1699901161457;


/***/ }),
/* 349 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveUnusedFieldsinBilling1700132368636 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class RemoveUnusedFieldsinBilling1700132368636 {
    constructor() {
        this.name = 'RemoveUnusedFieldsinBilling1700132368636';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "activeFlows"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "botPlanName"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "bots"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "datasourcesSize"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "datasources"
        `);
            yield queryRunner.query(`
            ALTER TABLE "chatbot"
            ALTER COLUMN "visibilityStatus" DROP DEFAULT
        `);
            yield queryRunner.query(`
            ALTER TABLE "chatbot"
            ALTER COLUMN "visibilityStatus" DROP DEFAULT
        `);
            yield queryRunner.query(`
        ALTER TABLE "project_usage" DROP COLUMN "datasourcesSize"
    `);
            yield queryRunner.query(`
        ALTER TABLE "project_usage" DROP COLUMN "bots"
    `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
        ALTER TABLE "project_usage"
        ADD "bots" integer NOT NULL DEFAULT '0'
    `);
            yield queryRunner.query(`
        ALTER TABLE "project_usage"
        ADD "datasourcesSize" integer NOT NULL DEFAULT '0'
    `);
            yield queryRunner.query(`
            ALTER TABLE "chatbot"
            ALTER COLUMN "visibilityStatus"
            SET DEFAULT 'PRIVATE'
        `);
            yield queryRunner.query(`
            ALTER TABLE "chatbot"
            ALTER COLUMN "visibilityStatus"
            SET DEFAULT 'PRIVATE'
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "datasources" integer NOT NULL DEFAULT '1'
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "datasourcesSize" integer NOT NULL DEFAULT '10485760'
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "bots" integer NOT NULL DEFAULT '1'
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "botPlanName" character varying NOT NULL DEFAULT 'free'
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "activeFlows" integer NOT NULL
        `);
        });
    }
}
exports.RemoveUnusedFieldsinBilling1700132368636 = RemoveUnusedFieldsinBilling1700132368636;


/***/ }),
/* 350 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddOtpEntity1700396157624 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddOtpEntity1700396157624 {
    constructor() {
        this.name = 'AddOtpEntity1700396157624';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "otp" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "type" character varying NOT NULL,
                "userId" character varying(21) NOT NULL,
                "value" character varying NOT NULL,
                CONSTRAINT "PK_32556d9d7b22031d7d0e1fd6723" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_otp_user_id_type" ON "otp" ("userId", "type")
        `);
            yield queryRunner.query(`
            ALTER TABLE "otp"
            ADD CONSTRAINT "fk_otp_user_id" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            server_shared_1.logger.info('AddOtpEntity1700396157624 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "otp" DROP CONSTRAINT "fk_otp_user_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_otp_user_id_type"
        `);
            yield queryRunner.query(`
            DROP TABLE "otp"
        `);
            server_shared_1.logger.info('AddOtpEntity1700396157624 down');
        });
    }
}
exports.AddOtpEntity1700396157624 = AddOtpEntity1700396157624;


/***/ }),
/* 351 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformDefaultLanguage1700406308445 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddPlatformDefaultLanguage1700406308445 {
    constructor() {
        this.name = 'AddPlatformDefaultLanguage1700406308445';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "defaultLocale" character varying
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "defaultLocale"
        `);
        });
    }
}
exports.AddPlatformDefaultLanguage1700406308445 = AddPlatformDefaultLanguage1700406308445;


/***/ }),
/* 352 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformIdToPieceMetadata1700522340280 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPlatformIdToPieceMetadata1700522340280 {
    constructor() {
        this.name = 'AddPlatformIdToPieceMetadata1700522340280';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ADD "platformId" character varying
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata" DROP COLUMN "platformId"
        `);
        });
    }
}
exports.AddPlatformIdToPieceMetadata1700522340280 = AddPlatformIdToPieceMetadata1700522340280;


/***/ }),
/* 353 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MakeStripeCustomerIdNullable1700751925992 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class MakeStripeCustomerIdNullable1700751925992 {
    constructor() {
        this.name = 'MakeStripeCustomerIdNullable1700751925992';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            server_shared_1.logger.info('MakeStripeCustomerIdNullable1700751925992 is up');
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ALTER COLUMN "stripeCustomerId" DROP NOT NULL
        `);
            yield queryRunner.query(`
        DROP INDEX "public"."idx_plan_stripe_customer_id"
    `);
            server_shared_1.logger.info('MakeStripeCustomerIdNullable1700751925992 finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            server_shared_1.logger.info('MakeStripeCustomerIdNullable1700751925992 is down');
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ALTER COLUMN "stripeCustomerId"
            SET NOT NULL
        `);
            yield queryRunner.query(`
        CREATE UNIQUE INDEX "idx_plan_stripe_customer_id" ON "project_plan" ("stripeCustomerId")
    `);
        });
    }
}
exports.MakeStripeCustomerIdNullable1700751925992 = MakeStripeCustomerIdNullable1700751925992;


/***/ }),
/* 354 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddStateToOtp1701084418793 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddStateToOtp1701084418793 {
    constructor() {
        this.name = 'AddStateToOtp1701084418793';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "otp"
            ADD "state" character varying NOT NULL
        `);
            server_shared_1.logger.info('AddStateToOtp1701084418793 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "otp" DROP COLUMN "state"
        `);
            server_shared_1.logger.info('AddStateToOtp1701084418793 down');
        });
    }
}
exports.AddStateToOtp1701084418793 = AddStateToOtp1701084418793;


/***/ }),
/* 355 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MigrateEeUsersToOldestPlatform1701261357197 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class MigrateEeUsersToOldestPlatform1701261357197 {
    constructor() {
        this.name = 'MigrateEeUsersToOldestPlatform1701261357197';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            const result = yield queryRunner.query(`
        SELECT *
        FROM platform
        ORDER BY created ASC
        LIMIT 1;
        `);
            if ((0, shared_1.isNil)(result) || result.length == 0) {
                return;
            }
            yield queryRunner.query(`
            UPDATE "user"
            SET "platformId" = '${result[0].id}'
            WHERE "platformId" IS NULL
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            UPDATE "user"
            SET "platformId" = NULL
            WHERE "platformId" IS NOT NULL
        `);
        });
    }
}
exports.MigrateEeUsersToOldestPlatform1701261357197 = MigrateEeUsersToOldestPlatform1701261357197;


/***/ }),
/* 356 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModifyProjectMembersAndRemoveUserId1701647565290 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class ModifyProjectMembersAndRemoveUserId1701647565290 {
    constructor() {
        this.name = 'ModifyProjectMembersAndRemoveUserId1701647565290';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
        ALTER TABLE "project_member"
        ADD "email" character varying
    `);
            yield queryRunner.query(`
        ALTER TABLE "project_member"
        ADD "platformId" character varying
    `);
            yield queryRunner.query(`
        CREATE UNIQUE INDEX "idx_project_member_project_id_email_platform_id" ON "project_member" ("projectId", "email", "platformId")
    `);
            // Data migration
            yield queryRunner.query(`
            UPDATE "project_member" SET "email" = "user"."email", "platformId" = "user"."platformId" FROM "user" WHERE "project_member"."userId" = "user"."id"
        `);
            yield queryRunner.query(`
            UPDATE public.user SET "email" = CONCAT("email", 'deleted') WHERE "status" = 'INVITED';
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ALTER COLUMN "email" SET NOT NULL;
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP CONSTRAINT "fk_project_member_user_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_member_project_id_user_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "userId"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_member_project_id_email_platform_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "platformId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD "userId" character varying(21) NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_member_project_id_user_id" ON "project_member" ("userId", "projectId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD CONSTRAINT "fk_project_member_user_id" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
}
exports.ModifyProjectMembersAndRemoveUserId1701647565290 = ModifyProjectMembersAndRemoveUserId1701647565290;


/***/ }),
/* 357 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddApiKeys1701716639135 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddApiKeys1701716639135 {
    constructor() {
        this.name = 'AddApiKeys1701716639135';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "api_key" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "displayName" character varying NOT NULL,
                "platformId" character varying(21) NOT NULL,
                "hashedValue" character varying NOT NULL,
                "truncatedValue" character varying NOT NULL,
                CONSTRAINT "PK_b1bd840641b8acbaad89c3d8d11" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            ALTER TABLE "api_key"
            ADD CONSTRAINT "fk_api_key_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "api_key" DROP CONSTRAINT "fk_api_key_platform_id"
        `);
            yield queryRunner.query(`
            DROP TABLE "api_key"
        `);
        });
    }
}
exports.AddApiKeys1701716639135 = AddApiKeys1701716639135;


/***/ }),
/* 358 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddEmbeddingFeatureToPlatform1701794452891 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddEmbeddingFeatureToPlatform1701794452891 {
    constructor() {
        this.name = 'AddEmbeddingFeatureToPlatform1701794452891';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "embeddingEnabled" boolean NOT NULL DEFAULT true
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "embeddingEnabled" = true
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "embeddingEnabled"
        `);
        });
    }
}
exports.AddEmbeddingFeatureToPlatform1701794452891 = AddEmbeddingFeatureToPlatform1701794452891;


/***/ }),
/* 359 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformIdToFile1701807681821 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPlatformIdToFile1701807681821 {
    constructor() {
        this.name = 'AddPlatformIdToFile1701807681821';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "file"
            ADD "platformId" character varying(21)
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "file" DROP COLUMN "platformId"
        `);
        });
    }
}
exports.AddPlatformIdToFile1701807681821 = AddPlatformIdToFile1701807681821;


/***/ }),
/* 360 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveFlowInstance1702379794665 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class RemoveFlowInstance1702379794665 {
    constructor() {
        this.name = 'RemoveFlowInstance1702379794665';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "flow"
            ADD "status" character varying NOT NULL DEFAULT 'DISABLED'
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
            ADD "schedule" jsonb
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
            ADD "publishedVersionId" character varying(21)
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
            ADD CONSTRAINT "UQ_f6608fe13b916017a8202f993cb" UNIQUE ("publishedVersionId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
            ADD CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version"("id") ON DELETE RESTRICT ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            UPDATE "flow"
            SET "status" = "flow_instance"."status",
                "schedule" = "flow_instance"."schedule",
                "publishedVersionId" = "flow_instance"."flowVersionId"
            FROM "flow_instance"
            WHERE "flow"."id" = "flow_instance"."flowId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_instance"
            RENAME TO "DELETED_flow_instance"
        `);
            server_shared_1.logger.info('RemoveFlowInstance1702379794665 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "DELETED_flow_instance"
            RENAME TO "flow_instance"
        `);
            yield queryRunner.query(`
            UPDATE "flow_instance"
            SET "status" = "flow"."status",
                "schedule" = "flow"."schedule",
                "flowVersionId" = "flow"."publishedVersionId"
            FROM "flow"
            WHERE "flow_instance"."flowId" = "flow"."id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow" DROP CONSTRAINT "fk_flow_published_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow" DROP CONSTRAINT "UQ_f6608fe13b916017a8202f993cb"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow" DROP COLUMN "publishedVersionId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow" DROP COLUMN "schedule"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow" DROP COLUMN "status"
        `);
            server_shared_1.logger.info('RemoveFlowInstance1702379794665 down');
        });
    }
}
exports.RemoveFlowInstance1702379794665 = RemoveFlowInstance1702379794665;


/***/ }),
/* 361 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformIdToFlowTemplates1703411318826 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddPlatformIdToFlowTemplates1703411318826 {
    constructor() {
        this.name = 'AddPlatformIdToFlowTemplates1703411318826';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP CONSTRAINT "fk_flow_template_user_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP COLUMN "userId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP COLUMN "imageUrl"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP COLUMN "isFeatured"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP COLUMN "featuredDescription"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" ADD "type" character varying
        `);
            yield queryRunner.query(`
            UPDATE "flow_template" SET "type" = 'PROJECT'
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" ALTER COLUMN "type" SET NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" ADD "platformId" character varying
        `);
            yield queryRunner.query(`
            UPDATE "flow_template" SET "platformId" = (
                SELECT "platformId" FROM "project" WHERE project.id = flow_template."projectId"
            )
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" ALTER COLUMN "platformId" SET NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template"
            ADD CONSTRAINT "fk_flow_template_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP CONSTRAINT "fk_flow_template_platform_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP COLUMN "platformId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template" DROP COLUMN "type"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template"
            ADD "featuredDescription" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template"
            ADD "isFeatured" boolean
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template"
            ADD "imageUrl" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template"
            ADD "userId" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_template"
            ADD CONSTRAINT "fk_flow_template_user_id" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
}
exports.AddPlatformIdToFlowTemplates1703411318826 = AddPlatformIdToFlowTemplates1703411318826;


/***/ }),
/* 362 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameAppNameToPieceName1703711596105 = void 0;
const tslib_1 = __webpack_require__(1);
class RenameAppNameToPieceName1703711596105 {
    constructor() {
        this.name = 'RenameAppNameToPieceName1703711596105';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "app_connection"
                RENAME COLUMN "appName" TO "pieceName"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "app_connection"
                RENAME COLUMN "pieceName" TO "appName"
        `);
        });
    }
}
exports.RenameAppNameToPieceName1703711596105 = RenameAppNameToPieceName1703711596105;


/***/ }),
/* 363 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddVerifiedAndChangeStatus1703769034497 = void 0;
const tslib_1 = __webpack_require__(1);
class AddVerifiedAndChangeStatus1703769034497 {
    constructor() {
        this.name = 'AddVerifiedAndChangeStatus1703769034497';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "user"
            ADD "verified" boolean
        `);
            yield queryRunner.query(`
            UPDATE "user"
            SET "verified" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ALTER COLUMN "verified" SET NOT NULL
        `);
            yield queryRunner.query(`
            UPDATE "user"
            SET "verified" = true
            WHERE "status" = 'VERIFIED'
        `);
            yield queryRunner.query(`
            UPDATE "user"
            SET "status" = 'ACTIVE'
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            UPDATE "user"
            SET "status" = 'VERIFIED'
            WHERE "verified" = true
        `);
            yield queryRunner.query(`
            UPDATE "user"
            SET "status" = 'CREATED'
            WHERE "verified" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ALTER COLUMN "verified" DROP NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            DROP COLUMN "verified"
        `);
        });
    }
}
exports.AddVerifiedAndChangeStatus1703769034497 = AddVerifiedAndChangeStatus1703769034497;


/***/ }),
/* 364 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddGitRepoMigrationPostgres1704503804056 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddGitRepoMigrationPostgres1704503804056 {
    constructor() {
        this.name = 'AddGitRepoMigrationPostgres1704503804056';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "git_repo" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "projectId" character varying(21) NOT NULL,
                "remoteUrl" character varying NOT NULL,
                "branch" character varying NOT NULL,
                "sshPrivateKey" character varying,
                CONSTRAINT "REL_5b59d96420074128fc1d269b9c" UNIQUE ("projectId"),
                CONSTRAINT "PK_de881ac6eac39e4d9ba7c5ed3e6" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_git_repo_project_id" ON "git_repo" ("projectId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "git_repo"
            ADD CONSTRAINT "fk_git_repo_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "git_repo" DROP CONSTRAINT "fk_git_repo_project_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_git_repo_project_id"
        `);
            yield queryRunner.query(`
            DROP TABLE "git_repo"
        `);
        });
    }
}
exports.AddGitRepoMigrationPostgres1704503804056 = AddGitRepoMigrationPostgres1704503804056;


/***/ }),
/* 365 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddGitSyncEnabledToPlatform1704636362533 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddGitSyncEnabledToPlatform1704636362533 {
    constructor() {
        this.name = 'AddGitSyncEnabledToPlatform1704636362533';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "gitSyncEnabled" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "gitSyncEnabled" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "gitSyncEnabled" SET NOT NULL
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "gitSyncEnabled"
        `);
        });
    }
}
exports.AddGitSyncEnabledToPlatform1704636362533 = AddGitSyncEnabledToPlatform1704636362533;


/***/ }),
/* 366 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAuthOptionsToPlatform1704667304953 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddAuthOptionsToPlatform1704667304953 {
    constructor() {
        this.name = 'AddAuthOptionsToPlatform1704667304953';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            // allowedAuthDomains
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD COLUMN "allowedAuthDomains" character varying[]
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "allowedAuthDomains" = '{}'::character varying[]
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "allowedAuthDomains" SET NOT NULL
        `);
            // enforceAllowedAuthDomains
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD COLUMN "enforceAllowedAuthDomains" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "enforceAllowedAuthDomains" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "enforceAllowedAuthDomains" SET NOT NULL
        `);
            // ssoEnabled
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD COLUMN "ssoEnabled" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "ssoEnabled" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "ssoEnabled" SET NOT NULL
        `);
            // federatedAuthProviders
            yield queryRunner.query('ALTER TABLE "platform" ADD COLUMN "federatedAuthProviders" jsonb');
            yield queryRunner.query('UPDATE "platform" SET "federatedAuthProviders" = \'{}\'');
            yield queryRunner.query('ALTER TABLE "platform" ALTER COLUMN "federatedAuthProviders" SET NOT NULL');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "federatedAuthProviders"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "ssoEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "enforceAllowedAuthDomains"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "allowedAuthDomains"
        `);
        });
    }
}
exports.AddAuthOptionsToPlatform1704667304953 = AddAuthOptionsToPlatform1704667304953;


/***/ }),
/* 367 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddEnableEmailAuthToPlatform1704797979825 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddEnableEmailAuthToPlatform1704797979825 {
    constructor() {
        this.name = 'AddEnableEmailAuthToPlatform1704797979825';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query('ALTER TABLE "platform" ADD "emailAuthEnabled" boolean');
            yield queryRunner.query('UPDATE "platform" SET "emailAuthEnabled" = TRUE');
            yield queryRunner.query('ALTER TABLE "platform" ALTER COLUMN "emailAuthEnabled" SET NOT NULL');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "emailAuthEnabled"
        `);
        });
    }
}
exports.AddEnableEmailAuthToPlatform1704797979825 = AddEnableEmailAuthToPlatform1704797979825;


/***/ }),
/* 368 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveUniqueonAppNameAppCredentials1705586178452 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class RemoveUniqueonAppNameAppCredentials1705586178452 {
    constructor() {
        this.name = 'RemoveUniqueonAppNameAppCredentials1705586178452';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query(`
            DROP INDEX "public"."idx_app_credentials_projectId_appName"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_app_credentials_projectId_appName" ON "app_credential" ("appName", "projectId")
        `);
        });
    }
}
exports.RemoveUniqueonAppNameAppCredentials1705586178452 = RemoveUniqueonAppNameAppCredentials1705586178452;


/***/ }),
/* 369 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MakePlatformNotNullable1705969874745 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class MakePlatformNotNullable1705969874745 {
    constructor() {
        this.name = 'MakePlatformNotNullable1705969874745';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project" DROP COLUMN "type"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ALTER COLUMN "platformId"
            SET NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD CONSTRAINT "fk_project_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project" DROP CONSTRAINT "fk_project_platform_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ALTER COLUMN "platformId" DROP NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD "type" character varying NOT NULL DEFAULT 'STANDALONE'
        `);
        });
    }
}
exports.MakePlatformNotNullable1705969874745 = MakePlatformNotNullable1705969874745;


/***/ }),
/* 370 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddCategoriesToPieceMetadataPostgres1707231704973 = void 0;
const tslib_1 = __webpack_require__(1);
class AddCategoriesToPieceMetadataPostgres1707231704973 {
    constructor() {
        this.name = 'AddCategoriesToPieceMetadataPostgres1707231704973';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ADD "categories" character varying array
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata" DROP COLUMN "categories"
        `);
        });
    }
}
exports.AddCategoriesToPieceMetadataPostgres1707231704973 = AddCategoriesToPieceMetadataPostgres1707231704973;


/***/ }),
/* 371 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAuditEvents1707614902283 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddAuditEvents1707614902283 {
    constructor() {
        this.name = 'AddAuditEvents1707614902283';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "audit_event" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "platformId" character varying NOT NULL,
                "projectId" character varying,
                "action" character varying NOT NULL,
                "userEmail" character varying NOT NULL,
                "projectDisplayName" character varying,
                "data" jsonb NOT NULL,
                "ip" character varying,
                "userId" character varying NOT NULL,
                CONSTRAINT "PK_481efbe8b0a403efe3f47a6528f" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE INDEX "audit_event_platform_id_project_id_user_id_idx" ON "audit_event" ("platformId", "projectId", "userId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "audit_event"
            ADD CONSTRAINT "FK_8188cdbf5c16c58d431efddd451" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "auditLogEnabled" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "auditLogEnabled" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "auditLogEnabled" SET NOT NULL
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "auditLogEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "audit_event" DROP CONSTRAINT "FK_8188cdbf5c16c58d431efddd451"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."audit_event_platform_id_project_id_user_id_idx"
        `);
            yield queryRunner.query(`
            DROP TABLE "audit_event"
        `);
        });
    }
}
exports.AddAuditEvents1707614902283 = AddAuditEvents1707614902283;


/***/ }),
/* 372 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateActivityTable1708515756040 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class CreateActivityTable1708515756040 {
    constructor() {
        this.name = 'CreateActivityTable1708515756040';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "activity" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "projectId" character varying(21) NOT NULL,
                "event" character varying NOT NULL,
                "message" character varying NOT NULL,
                "status" character varying NOT NULL,
                CONSTRAINT "PK_24625a1d6b1b089c8ae206fe467" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_activity_project_id_created_desc" ON "activity" ("projectId", "created" DESC)
        `);
            yield queryRunner.query(`
            ALTER TABLE "activity"
            ADD CONSTRAINT "fk_activity_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "activity" DROP CONSTRAINT "fk_activity_project_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_activity_project_id_created_desc"
        `);
            yield queryRunner.query(`
            DROP TABLE "activity"
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.CreateActivityTable1708515756040 = CreateActivityTable1708515756040;


/***/ }),
/* 373 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUniqueStoreConstraint1708521505204 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddUniqueStoreConstraint1708521505204 {
    constructor() {
        this.name = 'AddUniqueStoreConstraint1708521505204';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info(`${this.name} is up`);
            // Delete entries larger than 128 characters
            yield queryRunner.query(`
            DELETE FROM "store-entry" AS se WHERE ("se"."projectId", "se"."key", "se"."created") NOT IN (SELECT "projectId", "key", MAX("created") FROM "store-entry" GROUP BY "projectId", "key");
        `);
            yield queryRunner.query(`
             DELETE FROM "store-entry"
             WHERE LENGTH("key") > 128
         `);
            // Alter the column to change its type
            yield queryRunner.query(`
            ALTER TABLE "store-entry"
            ALTER COLUMN "key" TYPE character varying(128) USING "key"::character varying(128)
        `);
            // Add constraints
            yield queryRunner.query(`
            ALTER TABLE "store-entry"
            ADD CONSTRAINT "UQ_6f251cc141de0a8d84d7a4ac17d" UNIQUE ("projectId", "key")
        `);
            server_shared_1.logger.info(`${this.name} is finished`);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Drop constraints
            yield queryRunner.query(`
            ALTER TABLE "store-entry" DROP CONSTRAINT "UQ_6f251cc141de0a8d84d7a4ac17d"
        `);
            // Alter the column to change its type back to the previous type
            yield queryRunner.query(`
            ALTER TABLE "store-entry"
            ALTER COLUMN "key" TYPE character varying USING "key"::character varying
        `);
        });
    }
}
exports.AddUniqueStoreConstraint1708521505204 = AddUniqueStoreConstraint1708521505204;


/***/ }),
/* 374 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddLengthLimitsToActivity1708529586342 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddLengthLimitsToActivity1708529586342 {
    constructor() {
        this.name = 'AddLengthLimitsToActivity1708529586342';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "activity"
                ALTER COLUMN "event" TYPE character varying(200) USING "event"::character varying(200),
                ALTER COLUMN "message" TYPE character varying(2000) USING "message"::character varying(2000),
                ALTER COLUMN "status" TYPE character varying(100) USING "status"::character varying(100)
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "activity"
                ALTER COLUMN "event" TYPE character varying USING "event"::character varying,
                ALTER COLUMN "message" TYPE character varying USING "message"::character varying,
                ALTER COLUMN "status" TYPE character varying USING "status"::character varying
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddLengthLimitsToActivity1708529586342 = AddLengthLimitsToActivity1708529586342;


/***/ }),
/* 375 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddProjectBilling1708811745694 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddProjectBilling1708811745694 {
    constructor() {
        this.name = 'AddProjectBilling1708811745694';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            CREATE TABLE "project_billing" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "projectId" character varying(21) NOT NULL,
                "stripeCustomerId" character varying NOT NULL,
                "includedTasks" integer,
                "includedUsers" integer,
                "stripeSubscriptionId" character varying,
                "subscriptionStatus" character varying,
                CONSTRAINT "REL_915ee7969204c1118a3605da64" UNIQUE ("projectId"),
                CONSTRAINT "PK_07b2429736c158fbe490cd67e4b" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_stripe_project_id" ON "project_billing" ("projectId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_billing"
            ADD CONSTRAINT "fk_project_stripe_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project_billing" DROP CONSTRAINT "fk_project_stripe_project_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_stripe_project_id"
        `);
            yield queryRunner.query(`
            DROP TABLE "project_billing"
        `);
        });
    }
}
exports.AddProjectBilling1708811745694 = AddProjectBilling1708811745694;


/***/ }),
/* 376 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddShowActivityLogToPlatform1708861032399 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddShowActivityLogToPlatform1708861032399 {
    constructor() {
        this.name = 'AddShowActivityLogToPlatform1708861032399';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "showActivityLog" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "showActivityLog" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "showActivityLog" SET NOT NULL
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "showActivityLog"
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddShowActivityLogToPlatform1708861032399 = AddShowActivityLogToPlatform1708861032399;


/***/ }),
/* 377 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformToPostgres1709052740378 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
class AddPlatformToPostgres1709052740378 {
    constructor() {
        this.name = 'AddPlatformToPostgres1709052740378';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "ownerId" character varying(21) NOT NULL,
                "name" character varying NOT NULL,
                "primaryColor" character varying NOT NULL,
                "logoIconUrl" character varying NOT NULL,
                "fullLogoUrl" character varying NOT NULL,
                "favIconUrl" character varying NOT NULL,
                "smtpHost" character varying,
                "smtpPort" integer,
                "smtpUser" character varying,
                "smtpPassword" character varying,
                "smtpSenderEmail" character varying,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" character varying,
                "termsOfServiceUrl" character varying,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT true,
                "embeddingEnabled" boolean NOT NULL DEFAULT true,
                "filteredPieceNames" character varying array NOT NULL,
                "filteredPieceBehavior" character varying NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" character varying,
                "allowedAuthDomains" character varying array NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" jsonb NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "PK_c33d6abeebd214bd2850bfd6b8e" PRIMARY KEY ("id")
            )
        `);
            yield migrateProjects(queryRunner);
            yield queryRunner.query(`
            ALTER TABLE "project" DROP COLUMN "type"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP CONSTRAINT "fk_platform_user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD "type" character varying NOT NULL DEFAULT 'STANDALONE'
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
        });
    }
}
exports.AddPlatformToPostgres1709052740378 = AddPlatformToPostgres1709052740378;
function migrateProjects(queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        server_shared_1.logger.info('CreateDefaultPlatform1705967115116 up');
        const standaloneProjects = yield queryRunner.query('select * from project where "platformId" is null;');
        server_shared_1.logger.info(`Found ${standaloneProjects.length} standalone projects`);
        for (const project of standaloneProjects) {
            const ownerId = project.ownerId;
            const platformId = (0, shared_1.apId)();
            yield queryRunner.query(`INSERT INTO "platform"
            ("id", "created", "updated", "ownerId", "name", "primaryColor",
            "logoIconUrl", "fullLogoUrl", "favIconUrl", "filteredPieceNames",
            "filteredPieceBehavior", "smtpHost", "smtpPort", "smtpUser",
            "smtpPassword", "smtpSenderEmail", "smtpUseSSL", "privacyPolicyUrl",
            "termsOfServiceUrl", "showPoweredBy", "cloudAuthEnabled",
            "defaultLocale", "embeddingEnabled", "gitSyncEnabled",
            "allowedAuthDomains", "enforceAllowedAuthDomains", "ssoEnabled",
            "federatedAuthProviders", "emailAuthEnabled", "auditLogEnabled",
            "showActivityLog")
            VALUES
            ($1, current_timestamp, current_timestamp, $2, 'Activepieces',
            '#6e41e2', 'https://cdn.activepieces.com/brand/logo.svg',
            'https://cdn.activepieces.com/brand/full-logo.png',
            'https://cdn.activepieces.com/brand/favicon.ico', '{}',
            'BLOCKED', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            'f', 't', 'en', 'f', 'f', '{}', 'f', 'f', '{}', 'f', 'f', 'f');`, [platformId, ownerId]);
            yield queryRunner.query(`update "project" set "platformId" = '${platformId}' where "id" = '${project.id}'`);
            yield queryRunner.query(`update "user" set "platformId" = '${platformId}' where "id" = '${ownerId}'`);
        }
        server_shared_1.logger.info('CreateDefaultPlatform1705967115116 up done');
    });
}


/***/ }),
/* 378 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddSlugToGitRepo1709151540095 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddSlugToGitRepo1709151540095 {
    constructor() {
        this.name = 'AddSlugToGitRepo1709151540095';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "git_repo"
            ADD "slug" character varying
        `);
            yield queryRunner.query(`
            UPDATE "git_repo"
            SET "slug" = "projectId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "git_repo"
            ALTER COLUMN "slug" SET NOT NULL
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "git_repo" DROP COLUMN "slug"
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddSlugToGitRepo1709151540095 = AddSlugToGitRepo1709151540095;


/***/ }),
/* 379 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUserEmailToReferral1709500213947 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddUserEmailToReferral1709500213947 {
    constructor() {
        this.name = 'AddUserEmailToReferral1709500213947';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ADD "referredUserEmail" character varying(500)
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ADD "referringUserEmail" character varying(500)
        `);
            yield queryRunner.query(`
            UPDATE "referal"
            SET "referredUserEmail" = "user"."email"
            FROM "user"
            WHERE "referal"."referredUserId" = "user"."id"
        `);
            yield queryRunner.query(`
            UPDATE "referal"
            SET "referringUserEmail" = "user"."email"
            FROM "user"
            WHERE "referal"."referringUserId" = "user"."id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ALTER COLUMN "referredUserEmail" SET NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ALTER COLUMN "referringUserEmail" SET NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal" DROP CONSTRAINT "fk_referral_referred_user_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal" DROP CONSTRAINT "fk_referral_referring_user_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_referral_referring_user_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ALTER COLUMN "referredUserId" DROP NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ALTER COLUMN "referringUserId" DROP NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_referral_referring_user_id" ON "referal" ("referredUserId", "referringUserId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ADD CONSTRAINT "fk_referral_referred_user_id" FOREIGN KEY ("referredUserId") REFERENCES "user"("id")
            ON DELETE SET NULL ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ADD CONSTRAINT "fk_referral_referring_user_id" FOREIGN KEY ("referringUserId") REFERENCES "user"("id")
            ON DELETE SET NULL ON UPDATE NO ACTION
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "referal" DROP CONSTRAINT "fk_referral_referring_user_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal" DROP CONSTRAINT "fk_referral_referred_user_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_referral_referring_user_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ALTER COLUMN "referringUserId"
            SET NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ALTER COLUMN "referredUserId"
            SET NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_referral_referring_user_id" ON "referal" ("referredUserId", "referringUserId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal" DROP COLUMN "referringUserEmail"
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal" DROP COLUMN "referredUserEmail"
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ADD CONSTRAINT "fk_referral_referring_user_id" FOREIGN KEY ("referringUserId") REFERENCES "user"("id")
            ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "referal"
            ADD CONSTRAINT "fk_referral_referred_user_id" FOREIGN KEY ("referredUserId") REFERENCES "user"("id")
            ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddUserEmailToReferral1709500213947 = AddUserEmailToReferral1709500213947;


/***/ }),
/* 380 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DropUnusedPlatformIndex1709500873378 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class DropUnusedPlatformIndex1709500873378 {
    constructor() {
        this.name = 'DropUnusedPlatformIndex1709500873378';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project" DROP CONSTRAINT "fk_project_platform_id"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD CONSTRAINT "fk_project_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
        });
    }
}
exports.DropUnusedPlatformIndex1709500873378 = DropUnusedPlatformIndex1709500873378;


/***/ }),
/* 381 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetNotNullOnPlatform1709505632771 = void 0;
const tslib_1 = __webpack_require__(1);
class SetNotNullOnPlatform1709505632771 {
    constructor() {
        this.name = 'SetNotNullOnPlatform1709505632771';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ALTER COLUMN "platformId"
            SET NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
            ALTER COLUMN "platformId" DROP NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
        });
    }
}
exports.SetNotNullOnPlatform1709505632771 = SetNotNullOnPlatform1709505632771;


/***/ }),
/* 382 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformForeignKeyToProjectPostgres1709566642531 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddPlatformForeignKeyToProjectPostgres1709566642531 {
    constructor() {
        this.name = 'AddPlatformForeignKeyToProjectPostgres1709566642531';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD CONSTRAINT "fk_project_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform"("id")
            ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project" DROP CONSTRAINT "fk_project_platform_id"
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddPlatformForeignKeyToProjectPostgres1709566642531 = AddPlatformForeignKeyToProjectPostgres1709566642531;


/***/ }),
/* 383 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MigrateWebhookTemplate1709581196564 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class MigrateWebhookTemplate1709581196564 {
    constructor() {
        this.name = 'MigrateWebhookTemplate1709581196564';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            server_shared_1.logger.info('MigrateWebhookTemplate1709581196564, started');
            let count = 0;
            const flowVersionsIds = yield queryRunner.query('SELECT id FROM flow_template');
            for (const { id } of flowVersionsIds) {
                const [flowVersion] = yield queryRunner.query('SELECT * FROM flow_template WHERE id = $1', [id]);
                const step = flowVersion.template.trigger;
                if (step.type === 'WEBHOOK') {
                    step.type = 'PIECE_TRIGGER';
                    step.settings = {
                        input: {},
                        'inputUiInfo': step.settings.inputUiInfo,
                        triggerName: 'catch_request',
                        pieceName: '@activepieces/piece-webhook',
                        pieceVersion: '~0.0.1',
                        'pieceType': 'OFFICIAL',
                        'packageType': 'REGISTRY',
                    };
                    count++;
                    const endResult = Object.assign(Object.assign({}, flowVersion.template), { trigger: step });
                    yield queryRunner.query('UPDATE flow_template SET template = $1 WHERE id = $2', [endResult, flowVersion.id]);
                }
            }
            server_shared_1.logger.info('MigrateWebhookTemplate1709581196564, finished flows ' + count);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            server_shared_1.logger.info('rolling back MigrateWebhookTemplate1709581196564, started');
            let count = 0;
            const flowVersionsIds = yield queryRunner.query('SELECT id FROM flow_template');
            for (const { id } of flowVersionsIds) {
                const [flowVersion] = yield queryRunner.query('SELECT * FROM flow_template WHERE id = $1', [id]);
                const step = flowVersion.template.trigger;
                if (step.type === 'PIECE_TRIGGER') {
                    if (step.settings.pieceName === '@activepieces/piece-webhook') {
                        step.type = 'WEBHOOK';
                        step.settings = {
                            'inputUiInfo': step.settings.inputUiInfo,
                        };
                        count++;
                        const endResult = Object.assign(Object.assign({}, flowVersion.template), { trigger: step });
                        yield queryRunner.query('UPDATE flow_template SET template = $1 WHERE id = $2', [endResult, flowVersion.id]);
                    }
                }
            }
            server_shared_1.logger.info('rolling back  MigrateWebhookTemplate1709581196564, finished flows ' + count);
        });
    }
}
exports.MigrateWebhookTemplate1709581196564 = MigrateWebhookTemplate1709581196564;


/***/ }),
/* 384 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetFlowVersionUpdatedByToNullIfUserIsDeletedPostgres1709641016072 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class SetFlowVersionUpdatedByToNullIfUserIsDeletedPostgres1709641016072 {
    constructor() {
        this.name = 'SetFlowVersionUpdatedByToNullIfUserIsDeletedPostgres1709641016072';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "flow_version" DROP CONSTRAINT "fk_updated_by_user_flow"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_version"
            ADD CONSTRAINT "fk_updated_by_user_flow" FOREIGN KEY ("updatedBy") REFERENCES "user"("id")
            ON DELETE SET NULL ON UPDATE NO ACTION
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "flow_version" DROP CONSTRAINT "fk_updated_by_user_flow"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_version"
            ADD CONSTRAINT "fk_updated_by_user_flow" FOREIGN KEY ("updatedBy") REFERENCES "user"("id")
            ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.SetFlowVersionUpdatedByToNullIfUserIsDeletedPostgres1709641016072 = SetFlowVersionUpdatedByToNullIfUserIsDeletedPostgres1709641016072;


/***/ }),
/* 385 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoveGeneratedByFromSigningKeyToAuditEventPostgres1709669091258 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class MoveGeneratedByFromSigningKeyToAuditEventPostgres1709669091258 {
    constructor() {
        this.name = 'MoveGeneratedByFromSigningKeyToAuditEventPostgres1709669091258';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            const ids = yield getAllSigningKeyIds(queryRunner);
            for (const id of ids) {
                const signingKey = yield getSigningKeyById(id, queryRunner);
                yield generateAuditEventForSigningKey(signingKey, queryRunner);
            }
            yield queryRunner.query(`
            ALTER TABLE "signing_key" DROP CONSTRAINT "fk_signing_key_generated_by"
        `);
            yield queryRunner.query(`
            ALTER TABLE "signing_key" DROP COLUMN "generatedBy"
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "signing_key"
            ADD "generatedBy" character varying(21)
        `);
            const ids = yield getAllCreatedSigningKeyAuditEventIds(queryRunner);
            for (const id of ids) {
                const auditEvent = yield getCreatedSigningKeyAuditEventById(id, queryRunner);
                yield populateSigningKeyGeneratedBy(auditEvent, queryRunner);
            }
            yield queryRunner.query(`
            ALTER TABLE "signing_key"
            ALTER COLUMN "generatedBy" SET NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "signing_key"
            ADD CONSTRAINT "fk_signing_key_generated_by" FOREIGN KEY ("generatedBy") REFERENCES "user"("id")
            ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.MoveGeneratedByFromSigningKeyToAuditEventPostgres1709669091258 = MoveGeneratedByFromSigningKeyToAuditEventPostgres1709669091258;
const getAllSigningKeyIds = (queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queryResult = yield queryRunner.query('SELECT id FROM "signing_key"');
    return queryResult.map(({ id }) => id);
});
const getSigningKeyById = (id, queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queryResult = yield queryRunner.query('SELECT "id", "created", "generatedBy", "platformId", "displayName" FROM "signing_key" WHERE "id" = $1', [id]);
    return queryResult[0];
});
const generateAuditEventForSigningKey = (signingKey, queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const userEmail = yield getUserEmail(signingKey.generatedBy, queryRunner);
    yield queryRunner.query(`INSERT INTO "audit_event"
            (
                "id",
                "created",
                "updated",
                "platformId",
                "action",
                "userId",
                "userEmail",
                "data"
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`, [
        (0, shared_1.apId)(),
        signingKey.created,
        signingKey.created,
        signingKey.platformId,
        'CREATED_SIGNING_KEY',
        signingKey.generatedBy,
        userEmail,
        JSON.stringify({ signingKeyId: signingKey.id, signingKeyName: signingKey.displayName }),
    ]);
});
const getUserEmail = (userId, queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queryResult = yield queryRunner.query('SELECT "email" FROM "user" WHERE "id" = $1', [userId]);
    return queryResult[0].email;
});
const getAllCreatedSigningKeyAuditEventIds = (queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queryResult = yield queryRunner.query('SELECT "id" FROM "audit_event" where "action" = $1', ['CREATED_SIGNING_KEY']);
    return queryResult.map(({ id }) => id);
});
const getCreatedSigningKeyAuditEventById = (id, queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const queryResult = yield queryRunner.query('SELECT "userId", "data" FROM "audit_event" WHERE "id" = $1', [id]);
    return queryResult[0];
});
const populateSigningKeyGeneratedBy = (auditEvent, queryRunner) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield queryRunner.query('UPDATE "signing_key" SET "generatedBy" = $1 WHERE "id" = $2', [auditEvent.userId, auditEvent.data.signingKeyId]);
});


/***/ }),
/* 386 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddMappingStateToGit1709753080714 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddMappingStateToGit1709753080714 {
    constructor() {
        this.name = 'AddMappingStateToGit1709753080714';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "git_repo"
            ADD "mapping" jsonb
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "git_repo" DROP COLUMN "mapping"
        `);
        });
    }
}
exports.AddMappingStateToGit1709753080714 = AddMappingStateToGit1709753080714;


/***/ }),
/* 387 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAuthorsToPieces1710098373707 = void 0;
const tslib_1 = __webpack_require__(1);
class AddAuthorsToPieces1710098373707 {
    constructor() {
        this.name = 'AddAuthorsToPieces1710098373707';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Step 1: Add the column "authors" with a varying array type
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ADD "authors" character varying array;
        `);
            // Step 2: Set the existing data in "authors" to an empty array
            yield queryRunner.query(`
            UPDATE "piece_metadata"
            SET "authors" = ARRAY[]::varchar[];
        `);
            // Step 3: Add the NOT NULL constraint to the "authors" column
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ALTER COLUMN "authors" SET NOT NULL;
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata" DROP COLUMN "authors"
        `);
        });
    }
}
exports.AddAuthorsToPieces1710098373707 = AddAuthorsToPieces1710098373707;


/***/ }),
/* 388 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddDeletedToProjectPostgres1710243591721 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddDeletedToProjectPostgres1710243591721 {
    constructor() {
        this.name = 'AddDeletedToProjectPostgres1710243591721';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "project"
            ADD "deleted" TIMESTAMP WITH TIME ZONE
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "project" DROP COLUMN "deleted"
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddDeletedToProjectPostgres1710243591721 = AddDeletedToProjectPostgres1710243591721;


/***/ }),
/* 389 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CascadeProjectDeleteAppCredentialsAndConnectionKey1710720610669 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class CascadeProjectDeleteAppCredentialsAndConnectionKey1710720610669 {
    constructor() {
        this.name = 'CascadeProjectDeleteAppCredentialsAndConnectionKey1710720610669';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query(`
        ALTER TABLE "connection_key" DROP CONSTRAINT "FK_03177dc6779e6e147866d43c050"
    `);
            yield queryRunner.query(`
        ALTER TABLE "app_credential" DROP CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e"
    `);
            yield queryRunner.query(`
            ALTER TABLE "connection_key"
            ADD CONSTRAINT "FK_03177dc6779e6e147866d43c050" FOREIGN KEY ("projectId") REFERENCES "project"("id")
                ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "app_credential"
            ADD CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e" FOREIGN KEY ("projectId") REFERENCES "project"("id")
                ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD])) {
                return;
            }
            yield queryRunner.query(`
        ALTER TABLE "app_credential" DROP CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e"
    `);
            yield queryRunner.query(`
        ALTER TABLE "connection_key" DROP CONSTRAINT "FK_03177dc6779e6e147866d43c050"
    `);
            yield queryRunner.query(`
            ALTER TABLE "app_credential" DROP CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e"
        `);
            yield queryRunner.query(`
            ALTER TABLE "connection_key" DROP CONSTRAINT "FK_03177dc6779e6e147866d43c050"
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.CascadeProjectDeleteAppCredentialsAndConnectionKey1710720610669 = CascadeProjectDeleteAppCredentialsAndConnectionKey1710720610669;


/***/ }),
/* 390 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CascadeProjectDeleteToActivity1710720610670 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class CascadeProjectDeleteToActivity1710720610670 {
    constructor() {
        this.name = 'CascadeProjectDeleteToActivity1710720610670';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "activity" DROP CONSTRAINT "fk_activity_project_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "activity"
            ADD CONSTRAINT "fk_activity_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id")
                ON DELETE CASCADE ON UPDATE RESTRICT
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "activity" DROP CONSTRAINT "fk_activity_project_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "activity"
            ADD CONSTRAINT "fk_activity_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id")
                ON DELETE RESTRICT ON UPDATE RESTRICT
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.CascadeProjectDeleteToActivity1710720610670 = CascadeProjectDeleteToActivity1710720610670;


/***/ }),
/* 391 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddBranchTypeToGit1711073772867 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class AddBranchTypeToGit1711073772867 {
    constructor() {
        this.name = 'AddBranchTypeToGit1711073772867';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "git_repo"
            ADD COLUMN "branchType" character varying DEFAULT 'DEVELOPMENT';
        `);
            yield queryRunner.query(`
            UPDATE "git_repo"
            SET "branchType" = 'DEVELOPMENT';
        `);
            yield queryRunner.query(`
            ALTER TABLE "git_repo"
            ALTER COLUMN "branchType" SET NOT NULL;
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "git_repo" DROP COLUMN "branchType"
        `);
        });
    }
}
exports.AddBranchTypeToGit1711073772867 = AddBranchTypeToGit1711073772867;


/***/ }),
/* 392 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MigrateInputUiInfo1711411372480 = void 0;
const tslib_1 = __webpack_require__(1);
class MigrateInputUiInfo1711411372480 {
    constructor() {
        this.name = 'MigrateInputUiInfo1711411372480';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // This input ui is no longer optional
            yield queryRunner.query('UPDATE flow_version SET trigger = jsonb_set(trigger, \'{settings,inputUiInfo}\', \'{}\'::jsonb) WHERE trigger->\'settings\'->>\'inputUiInfo\' IS NULL;');
        });
    }
    down() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // This migration is irreversible and shouldn't be rolled back
        });
    }
}
exports.MigrateInputUiInfo1711411372480 = MigrateInputUiInfo1711411372480;


/***/ }),
/* 393 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddProjectUsageColumnToPiece1711768296861 = void 0;
const tslib_1 = __webpack_require__(1);
class AddProjectUsageColumnToPiece1711768296861 {
    constructor() {
        this.name = 'AddProjectUsageColumnToPiece1711768296861';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
            ADD "projectUsage" integer NOT NULL DEFAULT '0'
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata" DROP COLUMN "projectUsage"
        `);
        });
    }
}
exports.AddProjectUsageColumnToPiece1711768296861 = AddProjectUsageColumnToPiece1711768296861;


/***/ }),
/* 394 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPieceTags1712107871405 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPieceTags1712107871405 {
    constructor() {
        this.name = 'AddPieceTags1712107871405';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "tag" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "platformId" character varying NOT NULL,
                "name" character varying NOT NULL,
                CONSTRAINT "UQ_0aaf8e30187e0b89ebc9c4764ba" UNIQUE ("platformId", "name"),
                CONSTRAINT "PK_8e4052373c579afc1471f526760" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE TABLE "piece_tag" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "platformId" character varying NOT NULL,
                "pieceName" character varying NOT NULL,
                "tagId" character varying NOT NULL,
                CONSTRAINT "UQ_84a810ed305b758e07fa57f604a" UNIQUE ("tagId", "pieceName"),
                CONSTRAINT "PK_f06201adf8d82249e8f2f390426" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE INDEX "tag_platformId" ON "piece_tag" ("platformId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "tag"
            ADD CONSTRAINT "FK_9dec09e187398715b7f1e32a6cb" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_tag"
            ADD CONSTRAINT "FK_6ee5c7cca2b33700e400ea2703e" FOREIGN KEY ("tagId") REFERENCES "tag"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_tag"
            ADD CONSTRAINT "FK_5f483919deb37416ff32594918a" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "piece_tag" DROP CONSTRAINT "FK_5f483919deb37416ff32594918a"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_tag" DROP CONSTRAINT "FK_6ee5c7cca2b33700e400ea2703e"
        `);
            yield queryRunner.query(`
            ALTER TABLE "tag" DROP CONSTRAINT "FK_9dec09e187398715b7f1e32a6cb"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."tag_platformId"
        `);
            yield queryRunner.query(`
            DROP TABLE "piece_tag"
        `);
            yield queryRunner.query(`
            DROP TABLE "tag"
        `);
        });
    }
}
exports.AddPieceTags1712107871405 = AddPieceTags1712107871405;


/***/ }),
/* 395 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PiecesProjectLimits1712279318440 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class PiecesProjectLimits1712279318440 {
    constructor() {
        this.name = 'PiecesProjectLimits1712279318440';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            server_shared_1.logger.info({
                name: 'PiecesProjectLimits1712279318440'
            }, 'up');
            yield queryRunner.query(`
            ALTER TABLE "project_plan" RENAME COLUMN "flowPlanName" TO "name"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "stripeCustomerId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "stripeSubscriptionId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "subscriptionStartDatetime"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "tasksPerDay"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "pieces" character varying array
        `);
            yield queryRunner.query(`
            UPDATE "project_plan"
            SET "pieces" = ARRAY[]::varchar[]
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ALTER COLUMN "pieces" SET NOT NULL;
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "piecesFilterType" character varying
        `);
            yield queryRunner.query(`
            UPDATE "project_plan"
            SET "piecesFilterType" = 'NONE'
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ALTER COLUMN "piecesFilterType" SET NOT NULL
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "project_plan" RENAME COLUMN "name" TO "flowPlanName"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "piecesFilterType"
        `);
            yield queryRunner.query(`
            DROP TYPE "public"."project_plan_piecesfiltertype_enum"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan" DROP COLUMN "pieces"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "tasksPerDay" integer
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "subscriptionStartDatetime" TIMESTAMP WITH TIME ZONE NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "stripeSubscriptionId" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_plan"
            ADD "stripeCustomerId" character varying
        `);
        });
    }
}
exports.PiecesProjectLimits1712279318440 = PiecesProjectLimits1712279318440;


/***/ }),
/* 396 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveUniqueEmailOnUser1713221809186 = void 0;
const tslib_1 = __webpack_require__(1);
class RemoveUniqueEmailOnUser1713221809186 {
    constructor() {
        this.name = 'RemoveUniqueEmailOnUser1713221809186';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_partial_unique_email_platform_id_is_null"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE ("platformId" IS NULL)
        `);
        });
    }
}
exports.RemoveUniqueEmailOnUser1713221809186 = RemoveUniqueEmailOnUser1713221809186;


/***/ }),
/* 397 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformRoleToUser1713302610746 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPlatformRoleToUser1713302610746 {
    constructor() {
        this.name = 'AddPlatformRoleToUser1713302610746';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "user" DROP COLUMN "imageUrl"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user" DROP COLUMN "title"
        `);
            yield queryRunner.query(`
        ALTER TABLE "user"
        ADD "platformRole" character varying;
        `);
            yield queryRunner.query(`
        UPDATE "user"
        SET "platformRole" = 'MEMBER';
        `);
            yield queryRunner.query(`
        UPDATE "user"
        SET "platformRole" = 'ADMIN'
        WHERE "id" IN (
            SELECT "ownerId"
            FROM "platform"
        )
    `);
            yield queryRunner.query(`
        ALTER TABLE "user"
        ALTER COLUMN "platformRole" SET NOT NULL;
     `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ALTER COLUMN "platformId" DROP NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            const adminUserIds = yield queryRunner.query(`
            SELECT id
            FROM "user"
            WHERE "platformRole" = 'ADMIN'
        `);
            const ownerIds = yield queryRunner.query(`
            SELECT "ownerId"
            FROM "platform"
        `);
            const adminUserIdsSet = new Set(adminUserIds.map((u) => u.id));
            const ownerIdsSet = new Set(ownerIds.map((p) => p.ownerId));
            if (adminUserIdsSet.size !== ownerIdsSet.size || !Array.from(adminUserIdsSet).every(id => ownerIdsSet.has(id))) {
                throw new Error('Admin user IDs and owner IDs do not match');
            }
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ALTER COLUMN "platformId"
            SET NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("email", "platformId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("externalId", "platformId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "user" DROP COLUMN "platformRole"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ADD "title" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
            ADD "imageUrl" character varying
        `);
        });
    }
}
exports.AddPlatformRoleToUser1713302610746 = AddPlatformRoleToUser1713302610746;


/***/ }),
/* 398 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUniqueNameToFolder1713643694049 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddUniqueNameToFolder1713643694049 {
    constructor() {
        this.name = 'AddUniqueNameToFolder1713643694049';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info({ name: this.name }, 'Up');
            yield queryRunner.query(`
            DELETE FROM "folder"
            WHERE ("projectId", LOWER("displayName")) IN (
            SELECT "projectId", LOWER("displayName")
            FROM "folder"
            GROUP BY "projectId", LOWER("displayName")
            HAVING COUNT(*) > 1
            )
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_folder_project_id"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_folder_project_id_display_name" ON "folder" ("projectId", "displayName")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "public"."idx_folder_project_id_display_name"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_folder_project_id" ON "folder" ("projectId")
        `);
        });
    }
}
exports.AddUniqueNameToFolder1713643694049 = AddUniqueNameToFolder1713643694049;


/***/ }),
/* 399 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddFeaturesToPlatform1714145914415 = void 0;
const tslib_1 = __webpack_require__(1);
class AddFeaturesToPlatform1714145914415 {
    constructor() {
        this.name = 'AddFeaturesToPlatform1714145914415';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield addColumnWithFalse(queryRunner, 'customDomainsEnabled');
            yield addColumnWithFalse(queryRunner, 'customAppearanceEnabled');
            yield addColumnWithFalse(queryRunner, 'manageProjectsEnabled');
            yield addColumnWithFalse(queryRunner, 'managePiecesEnabled');
            yield addColumnWithFalse(queryRunner, 'manageTemplatesEnabled');
            yield addColumnWithFalse(queryRunner, 'apiKeysEnabled');
            yield addColumnWithFalse(queryRunner, 'projectRolesEnabled');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "projectRolesEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "apiKeysEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "manageTemplatesEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "managePiecesEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "manageProjectsEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "customAppearanceEnabled"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "customDomainsEnabled"
        `);
        });
    }
}
exports.AddFeaturesToPlatform1714145914415 = AddFeaturesToPlatform1714145914415;
function addColumnWithFalse(queryRunner, feature) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield queryRunner.query(`
        ALTER TABLE "platform"
        ADD "${feature}" boolean
    `);
        yield queryRunner.query(`
        UPDATE "platform"
        SET "${feature}" = false
    `);
        yield queryRunner.query(`
        ALTER TABLE "platform"
        ALTER COLUMN "${feature}" SET NOT NULL
    `);
    });
}


/***/ }),
/* 400 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnifyEnterpriseWithCloud1714249840058 = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const database_common_1 = __webpack_require__(228);
class UnifyEnterpriseWithCloud1714249840058 {
    constructor() {
        this.name = 'UnifyEnterpriseWithCloud1714249840058';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "connection_key" DROP CONSTRAINT "FK_03177dc6779e6e147866d43c050"
        `);
            yield queryRunner.query(`
            ALTER TABLE "app_credential" DROP CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_app_credentials_projectId_appName"
        `);
            yield queryRunner.query(`
            ALTER TABLE "connection_key"
            ADD CONSTRAINT "FK_03177dc6779e6e147866d43c050" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "app_credential"
            ADD CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, database_common_1.isNotOneOfTheseEditions)([shared_1.ApEdition.ENTERPRISE])) {
                return;
            }
            yield queryRunner.query(`
            ALTER TABLE "app_credential" DROP CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e"
        `);
            yield queryRunner.query(`
            ALTER TABLE "connection_key" DROP CONSTRAINT "FK_03177dc6779e6e147866d43c050"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_app_credentials_projectId_appName" ON "app_credential" ("appName", "projectId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "app_credential"
            ADD CONSTRAINT "FK_d82bfb4c7432a69dc2419083a0e" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "connection_key"
            ADD CONSTRAINT "FK_03177dc6779e6e147866d43c050" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
        });
    }
}
exports.UnifyEnterpriseWithCloud1714249840058 = UnifyEnterpriseWithCloud1714249840058;


/***/ }),
/* 401 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddIssueEntityPostgres1714904516114 = void 0;
const tslib_1 = __webpack_require__(1);
class AddIssueEntityPostgres1714904516114 {
    constructor() {
        this.name = 'AddIssueEntityPostgres1714904516114';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "issue" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "projectId" character varying(21) NOT NULL,
                "flowId" character varying(21) NOT NULL,
                "status" character varying NOT NULL,
                "count" integer NOT NULL,
                "lastOccurrence" TIMESTAMP WITH TIME ZONE NOT NULL,
                CONSTRAINT "REL_6c7309a7ac3112d264f5d7b49f" UNIQUE ("flowId"),
                CONSTRAINT "PK_f80e086c249b9f3f3ff2fd321b7" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_issue_flow_id" ON "issue" ("flowId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_issue_project_id_flow_id" ON "issue" ("projectId", "flowId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "flowIssuesEnabled" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "flowIssuesEnabled" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "flowIssuesEnabled" SET NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "issue"
            ADD CONSTRAINT "fk_issue_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            yield queryRunner.query(`
            ALTER TABLE "issue"
            ADD CONSTRAINT "fk_issue_project_id" FOREIGN KEY ("projectId") REFERENCES "project"("id") ON DELETE CASCADE ON UPDATE RESTRICT
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "issue" DROP CONSTRAINT "fk_issue_project_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "issue" DROP CONSTRAINT "fk_issue_flow_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "flowIssuesEnabled"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_issue_project_id_flow_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_issue_flow_id"
        `);
            yield queryRunner.query(`
            DROP TABLE "issue"
        `);
        });
    }
}
exports.AddIssueEntityPostgres1714904516114 = AddIssueEntityPostgres1714904516114;


/***/ }),
/* 402 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAlertsEntityPostgres1716989780835 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
class AddAlertsEntityPostgres1716989780835 {
    constructor() {
        this.name = 'AddAlertsEntityPostgres1716989780835';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "alert" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "projectId" character varying(21) NOT NULL,
                "channel" character varying NOT NULL,
                "receiver" character varying NOT NULL,
                PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "alertsEnabled" boolean
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "alertsEnabled" = false
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "alertsEnabled" SET NOT NULL
        `);
            const projects = yield queryRunner.query(`
            SELECT p."id" AS "projectId", u."email" AS "receiver"
            FROM "project" p
            INNER JOIN "user" u ON u."id" = p."ownerId"
        `);
            const countAlerts = yield insertAlertsInBatches(projects, queryRunner);
            server_shared_1.logger.info(`CreateAlerts1716989780835 Migrated ${countAlerts} alerts`);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "flowIssuesEnabled"
        `);
            yield queryRunner.query(`
            DROP TABLE "alert"
        `);
        });
    }
}
exports.AddAlertsEntityPostgres1716989780835 = AddAlertsEntityPostgres1716989780835;
function insertAlertsInBatches(projects_1, queryRunner_1) {
    return tslib_1.__awaiter(this, arguments, void 0, function* (projects, queryRunner, batchSize = 500) {
        if (projects.length === 0)
            return 0;
        let totalInserted = 0;
        for (let i = 0; i < projects.length; i += batchSize) {
            const batch = projects.slice(i, i + batchSize);
            const result = yield insertBatch(batch, queryRunner);
            totalInserted += result;
        }
        return totalInserted;
    });
}
function insertBatch(batch, queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let query = 'INSERT INTO "alert" ("id", "created", "updated", "projectId", "channel", "receiver") VALUES ';
        const values = [];
        const placeholders = [];
        for (const project of batch) {
            const alertId = (0, shared_1.apId)();
            placeholders.push(`($${values.length + 1}, NOW(), NOW(), $${values.length + 2}, 'EMAIL', $${values.length + 3})`);
            values.push(alertId, project.projectId, project.receiver);
        }
        query += placeholders.join(', ');
        yield queryRunner.query(query, values);
        return batch.length;
    });
}


/***/ }),
/* 403 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPremiumPiecesColumnPostgres1717370717678 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPremiumPiecesColumnPostgres1717370717678 {
    constructor() {
        this.name = 'AddPremiumPiecesColumnPostgres1717370717678';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ADD "premiumPieces" character varying array
        `);
            yield queryRunner.query(`
            UPDATE "platform"
            SET "premiumPieces" = '{}'
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
            ALTER COLUMN "premiumPieces" SET NOT NULL
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform" DROP COLUMN "premiumPieces"
        `);
        });
    }
}
exports.AddPremiumPiecesColumnPostgres1717370717678 = AddPremiumPiecesColumnPostgres1717370717678;


/***/ }),
/* 404 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUserInvitation1717960689650 = void 0;
const tslib_1 = __webpack_require__(1);
class AddUserInvitation1717960689650 {
    constructor() {
        this.name = 'AddUserInvitation1717960689650';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "user_invitation" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "platformId" character varying NOT NULL,
                "type" character varying NOT NULL,
                "platformRole" character varying,
                "email" character varying NOT NULL,
                "projectId" character varying,
                "projectRole" character varying,
                "status" character varying NOT NULL,
                CONSTRAINT "PK_41026b90b70299ac5dc0183351a" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_invitation_email_platform_project" ON "user_invitation" ("email", "platformId", "projectId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP TABLE "user_invitation"
        `);
        });
    }
}
exports.AddUserInvitation1717960689650 = AddUserInvitation1717960689650;


/***/ }),
/* 405 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModifyProjectMembers1717961669938 = void 0;
const tslib_1 = __webpack_require__(1);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
class ModifyProjectMembers1717961669938 {
    constructor() {
        this.name = 'ModifyProjectMembers1717961669938';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectMembers = yield queryRunner.query('SELECT * FROM project_member WHERE status = \'ACTIVE\'');
            yield queryRunner.query('TRUNCATE TABLE project_member CASCADE');
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_member_project_id_email_platform_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "status"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD "userId" character varying(21) NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "platformId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD "platformId" character varying(21) NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_member_project_id_user_id_platform_id" ON "project_member" ("projectId", "userId", "platformId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD CONSTRAINT "fk_project_member_user_id" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE ON UPDATE NO ACTION
        `);
            for (const projectMember of projectMembers) {
                if (projectMember.role === 'EXTERNAL_CUSTOMER') {
                    projectMember.role = 'OPERATOR';
                }
                const user = yield queryRunner.query(`SELECT * FROM "public"."user" WHERE email = '${projectMember.email}' AND "platformId" = '${projectMember.platformId}'`);
                if (user.length === 0) {
                    // Skip if user not found
                    continue;
                }
                yield queryRunner.query(`
            INSERT INTO "project_member" ("id", "created", "updated", "projectId", "platformId", "userId", "role")
            VALUES ('${projectMember.id}','${(0, dayjs_1.default)(projectMember.created).toISOString()}', '${(0, dayjs_1.default)(projectMember.updated).toISOString()}', '${projectMember.projectId}', '${projectMember.platformId}', '${user[0].id}', '${projectMember.role}')
        `);
            }
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectMembers = yield queryRunner.query('SELECT * FROM project_member');
            yield queryRunner.query('TRUNCATE TABLE project_member CASCADE');
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP CONSTRAINT "fk_project_member_user_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "public"."idx_project_member_project_id_user_id_platform_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "platformId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD "platformId" character varying
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member" DROP COLUMN "userId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD "email" character varying NOT NULL
        `);
            yield queryRunner.query(`
            ALTER TABLE "project_member"
            ADD "status" character varying NOT NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_member_project_id_email_platform_id" ON "project_member" ("projectId", "email", "platformId")
        `);
            for (const projectMember of projectMembers) {
                const user = yield queryRunner.query(`SELECT * FROM "public.user" WHERE id = '${projectMember.userId}'`);
                yield queryRunner.query(`
            INSERT INTO "project_member" ("id", "created", "updated", "projectId", "platformId", "email", "status", "role")
            VALUES ('${projectMember.id}','${(0, dayjs_1.default)(projectMember.created).toISOString()}', '${(0, dayjs_1.default)(projectMember.updated).toISOString()}', '${projectMember.projectId}', '${projectMember.platformId}', '${user.email}', '${projectMember.status}', '${projectMember.role}')
        `);
            }
        });
    }
}
exports.ModifyProjectMembers1717961669938 = ModifyProjectMembers1717961669938;


/***/ }),
/* 406 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddWorkerMachine1720101280025 = void 0;
const tslib_1 = __webpack_require__(1);
class AddWorkerMachine1720101280025 {
    constructor() {
        this.name = 'AddWorkerMachine1720101280025';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "worker_machine" (
                "id" character varying(21) NOT NULL,
                "created" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "updated" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
                "platformId" character varying(21),
                "type" character varying NOT NULL,
                "information" jsonb NOT NULL,
                CONSTRAINT "PK_9d6b1b7507214e3480582ef32e7" PRIMARY KEY ("id")
            )
        `);
            yield queryRunner.query(`
            ALTER TABLE "worker_machine"
            ADD CONSTRAINT "FK_7f3c83a5162a2de787dc62bf519" FOREIGN KEY ("platformId") REFERENCES "platform"("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "worker_machine" DROP CONSTRAINT "FK_7f3c83a5162a2de787dc62bf519"
        `);
            yield queryRunner.query(`
            DROP TABLE "worker_machine"
        `);
        });
    }
}
exports.AddWorkerMachine1720101280025 = AddWorkerMachine1720101280025;


/***/ }),
/* 407 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createSqlLiteDataSource = void 0;
const tslib_1 = __webpack_require__(1);
const node_fs_1 = __webpack_require__(408);
const node_path_1 = tslib_1.__importDefault(__webpack_require__(112));
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const database_connection_1 = __webpack_require__(225);
const _1696245170061_add_piece_type_and_package_type_to_flow_version_1 = __webpack_require__(285);
const _1697969398200_store_code_inside_flow_1 = __webpack_require__(287);
const _1699818680567_update_user_status_rename_shadow_to_invited_1 = __webpack_require__(289);
const _1701096458822_add_partial_unique_index_for_email_and_platform_id_is_null_1 = __webpack_require__(290);
const _1707087022764_add_trigger_test_strategy_1 = __webpack_require__(291);
const _1709581196563_migrate_webhook_1 = __webpack_require__(292);
const _1716105958530_RemoveShowActivityLog_1 = __webpack_require__(293);
const _1716725027424_AddDurationForRuns_1 = __webpack_require__(294);
const _1690195839899_InitialSql3Migration_1 = __webpack_require__(409);
const _1691706020626_add_app_connection_type_to_top_level_1 = __webpack_require__(410);
const _1692056190942_AddTagsToRunSqlite_1 = __webpack_require__(411);
const _1692958076906_AddStepFileSqlite_1 = __webpack_require__(412);
const _1693402376520_AddStatusToConnectionsSqlite_1 = __webpack_require__(413);
const _1693774053027_AddImageUrlAndTitleToUser_1 = __webpack_require__(414);
const _1694695212159_file_type_compression_1 = __webpack_require__(415);
const _1696016228398_add_piece_type_and_package_type_to_piece_metadata_1 = __webpack_require__(416);
const _1696029443045_AddChatBotSqlite_1 = __webpack_require__(417);
const _1696956123632_add_archive_id_to_piece_metadata_1 = __webpack_require__(418);
const _1698078715730_add_platform_to_project_1 = __webpack_require__(419);
const _1698323327318_AddTerminationReason_1 = __webpack_require__(420);
const _1698857968495_AddExternalIdSqlite_1 = __webpack_require__(421);
const _1700147448410_AddPlatformIdToUserSqlite_1 = __webpack_require__(422);
const _1700524446967_AddPlatformIdToPieceMetadataSqlite_1 = __webpack_require__(423);
const _1701808264444_AddPlatformIdToFileSqlite_1 = __webpack_require__(424);
const _1702412280963_remove_flow_instance_sqlite_1 = __webpack_require__(425);
const _1703713027818_UpdateStatusInUserSqlite_1 = __webpack_require__(426);
const _1703713475755_RenameAppNameToPieceNameSqlite_1 = __webpack_require__(427);
const _1703768553820_AddVerifiedAndChangeStatusSqlite_1 = __webpack_require__(428);
const _1707229986819_AddCategoriesToPieceMetadata_1 = __webpack_require__(429);
const _1708527446535_AddUniqueStoreConstraint_1 = __webpack_require__(430);
const _1709051625110_CreateDefaultPlaformSqlite_1 = __webpack_require__(431);
const _1709566629593_add_platform_foreign_key_to_project_sqlite_1 = __webpack_require__(432);
const _1710098009544_AddAuthorsToPieces_1 = __webpack_require__(433);
const _1710248182409_add_deleted_to_project_sqlite_1 = __webpack_require__(434);
const _1711412511624_AddMissingInputUiInfoSqlite_1 = __webpack_require__(435);
const _1711768479150_AddProjectUsageColumnToPieceSqlite_1 = __webpack_require__(436);
const _1712180673961_AddTagsToPiecesSqlite_1 = __webpack_require__(437);
const _1713222892743_RemoveUniqueEmailOnUser_1 = __webpack_require__(438);
const _1713271221154_AddPlatformRole_1 = __webpack_require__(439);
const _1713645171373_AddUniqueNameToFolderSqlite_1 = __webpack_require__(440);
const _1714137103728_AddFeatureFlagsToPlatform_1 = __webpack_require__(441);
const _1714900626443_AddIssueEntitySqlite_1 = __webpack_require__(442);
const _1717239613259_AddAlertsEntitySqlite_1 = __webpack_require__(443);
const _1717443603235_AddPremiumPiecesColumnSqlite_1 = __webpack_require__(444);
const _1717943564437_AddUserInvitationSqlite_1 = __webpack_require__(445);
const _1720100928449_AddWorkerMachineSqlite_1 = __webpack_require__(446);
const getSqliteDatabaseFilePath = () => {
    const apConfigDirectoryPath = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.CONFIG_PATH);
    (0, node_fs_1.mkdirSync)(apConfigDirectoryPath, { recursive: true });
    return node_path_1.default.resolve(node_path_1.default.join(apConfigDirectoryPath, 'database.sqlite'));
};
const getSqliteDatabaseInMemory = () => {
    return ':memory:';
};
const getSqliteDatabase = () => {
    const env = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT);
    if (env === shared_1.ApEnvironment.TESTING) {
        return getSqliteDatabaseInMemory();
    }
    return getSqliteDatabaseFilePath();
};
const getMigrations = () => {
    const communityMigrations = [
        _1690195839899_InitialSql3Migration_1.InitialSql3Migration1690195839899,
        _1691706020626_add_app_connection_type_to_top_level_1.AddAppConnectionTypeToTopLevel1691706020626,
        _1692056190942_AddTagsToRunSqlite_1.AddTagsToRunSqlite1692056190942,
        _1692958076906_AddStepFileSqlite_1.AddStepFileSqlite1692958076906,
        _1693402376520_AddStatusToConnectionsSqlite_1.AddStatusToConnectionsSqlite1693402376520,
        _1693774053027_AddImageUrlAndTitleToUser_1.AddImageUrlAndTitleToUser1693774053027,
        _1696029443045_AddChatBotSqlite_1.AddChatBotSqlite1696029443045,
        _1694695212159_file_type_compression_1.FileTypeCompression1694695212159,
        _1696016228398_add_piece_type_and_package_type_to_piece_metadata_1.AddPieceTypeAndPackageTypeToPieceMetadata1696016228398,
        _1696245170061_add_piece_type_and_package_type_to_flow_version_1.AddPieceTypeAndPackageTypeToFlowVersion1696245170061,
        _1696956123632_add_archive_id_to_piece_metadata_1.AddArchiveIdToPieceMetadata1696956123632,
        _1697969398200_store_code_inside_flow_1.StoreCodeInsideFlow1697969398200,
        _1698078715730_add_platform_to_project_1.AddPlatformToProject1698078715730,
        _1698323327318_AddTerminationReason_1.AddTerminationReasonSqlite1698323327318,
        _1698857968495_AddExternalIdSqlite_1.AddExternalIdSqlite1698857968495,
        _1699818680567_update_user_status_rename_shadow_to_invited_1.UpdateUserStatusRenameShadowToInvited1699818680567,
        _1700147448410_AddPlatformIdToUserSqlite_1.AddPlatformIdToUserSqlite1700147448410,
        _1700524446967_AddPlatformIdToPieceMetadataSqlite_1.AddPlatformIdToPieceMetadataSqlite1700524446967,
        _1701096458822_add_partial_unique_index_for_email_and_platform_id_is_null_1.AddPartialUniqueIndexForEmailAndPlatformIdIsNull1701096458822,
        _1701808264444_AddPlatformIdToFileSqlite_1.AddPlatformIdToFileSqlite1701808264444,
        _1702412280963_remove_flow_instance_sqlite_1.RemoveFlowInstanceSqlite1702412280963,
        _1703713027818_UpdateStatusInUserSqlite_1.UpdateStatusInUserSqlite1703713027818,
        _1703713475755_RenameAppNameToPieceNameSqlite_1.RenameAppNameToPieceNameSqlite1703713475755,
        _1703768553820_AddVerifiedAndChangeStatusSqlite_1.AddVerifiedAndChangeStatusSqlite1703768553820,
        _1707087022764_add_trigger_test_strategy_1.AddTriggerTestStrategy1707087022764,
        _1707229986819_AddCategoriesToPieceMetadata_1.AddCategoriesToPieceMetadata1707229986819,
        _1708527446535_AddUniqueStoreConstraint_1.AddUniqueStoreConstraint1708527446535,
        _1709051625110_CreateDefaultPlaformSqlite_1.CreateDefaultPlaformSqlite1709051625110,
        _1709581196563_migrate_webhook_1.MigrateWebhook1709581196563,
        _1709566629593_add_platform_foreign_key_to_project_sqlite_1.AddPlatformForeignKeyToProjectSqlite1709566629593,
        _1710098009544_AddAuthorsToPieces_1.AddAuthorsToPieces1710098009544,
        _1710248182409_add_deleted_to_project_sqlite_1.AddDeletedToProjectSqlite1710248182409,
        _1711412511624_AddMissingInputUiInfoSqlite_1.AddMissingInputUiInfoSqlite1711412511624,
        _1711768479150_AddProjectUsageColumnToPieceSqlite_1.AddProjectUsageColumnToPieceSqlite1711768479150,
        _1712180673961_AddTagsToPiecesSqlite_1.AddTagsToPiecesSqlite1712180673961,
        _1713222892743_RemoveUniqueEmailOnUser_1.RemoveUniqueEmailOnUser1713222892743,
        _1713271221154_AddPlatformRole_1.AddPlatformRole1713271221154,
        _1713645171373_AddUniqueNameToFolderSqlite_1.AddUniqueNameToFolderSqlite1713645171373,
        _1714137103728_AddFeatureFlagsToPlatform_1.AddFeatureFlagsToPlatform1714137103728,
        _1714900626443_AddIssueEntitySqlite_1.AddIssueEntitySqlite1714900626443,
        _1716105958530_RemoveShowActivityLog_1.RemoveShowActivityLog1716105958530,
        _1716725027424_AddDurationForRuns_1.AddDurationForRuns1716725027424,
        _1717239613259_AddAlertsEntitySqlite_1.AddAlertsEntitySqlite1717239613259,
        _1717943564437_AddUserInvitationSqlite_1.AddUserInvitationSqlite1717943564437,
        _1717443603235_AddPremiumPiecesColumnSqlite_1.AddPremiumPiecesColumnSqlite1717443603235,
        _1720100928449_AddWorkerMachineSqlite_1.AddWorkerMachineSqlite1720100928449,
    ];
    const edition = server_shared_1.system.getEdition();
    if (edition !== shared_1.ApEdition.COMMUNITY) {
        throw new Error(`Edition ${edition} not supported in sqlite3 mode`);
    }
    return communityMigrations;
};
const getMigrationConfig = () => {
    const env = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT);
    if (env === shared_1.ApEnvironment.TESTING) {
        return {};
    }
    return {
        migrationsRun: true,
        migrationsTransactionMode: 'each',
        migrations: getMigrations(),
    };
};
const createSqlLiteDataSource = () => {
    const migrationConfig = getMigrationConfig();
    return new typeorm_1.DataSource(Object.assign(Object.assign({ type: 'sqlite', database: getSqliteDatabase() }, migrationConfig), database_connection_1.commonProperties));
};
exports.createSqlLiteDataSource = createSqlLiteDataSource;


/***/ }),
/* 408 */
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),
/* 409 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InitialSql3Migration1690195839899 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class InitialSql3Migration1690195839899 {
    constructor() {
        this.name = 'InitialSql3Migration1690195839899';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info(`Running migration ${this.name}`);
            yield queryRunner.query('CREATE TABLE "trigger_event" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "projectId" varchar(21) NOT NULL, "sourceName" varchar NOT NULL, "payload" text)');
            yield queryRunner.query('CREATE INDEX "idx_trigger_event_flow_id" ON "trigger_event" ("flowId") ');
            yield queryRunner.query('CREATE TABLE "flow_instance" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "status" varchar NOT NULL, "schedule" text, CONSTRAINT "REL_cb897f5e48cc3cba1418966326" UNIQUE ("flowId"), CONSTRAINT "REL_ec72f514c21734fb7a08797d75" UNIQUE ("flowVersionId"))');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_flow_instance_project_id_flow_id" ON "flow_instance" ("projectId", "flowId") ');
            yield queryRunner.query('CREATE TABLE "app_event_routing" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "identifierValue" varchar NOT NULL, "event" varchar NOT NULL)');
            yield queryRunner.query('CREATE INDEX "idx_app_event_routing_flow_id" ON "app_event_routing" ("flowId") ');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_event_project_id_appName_identifier_value_event" ON "app_event_routing" ("appName", "projectId", "identifierValue", "event") ');
            yield queryRunner.query('CREATE TABLE "file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21), "data" blob NOT NULL)');
            yield queryRunner.query('CREATE TABLE "flag" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "value" text NOT NULL)');
            yield queryRunner.query('CREATE TABLE "flow" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "folderId" varchar(21))');
            yield queryRunner.query('CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId") ');
            yield queryRunner.query('CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId") ');
            yield queryRunner.query('CREATE TABLE "flow_version" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "displayName" varchar NOT NULL, "trigger" text, "updatedBy" varchar, "valid" boolean NOT NULL, "state" varchar NOT NULL)');
            yield queryRunner.query('CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId") ');
            yield queryRunner.query('CREATE TABLE "flow_run" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "environment" varchar, "flowDisplayName" varchar NOT NULL, "logsFileId" varchar(21), "status" varchar NOT NULL, "tasks" integer, "startTime" datetime NOT NULL, "finishTime" datetime, "pauseMetadata" text)');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE TABLE "project" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "ownerId" varchar(21) NOT NULL, "displayName" varchar NOT NULL, "notifyStatus" varchar NOT NULL)');
            yield queryRunner.query('CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId") ');
            yield queryRunner.query('CREATE TABLE "store-entry" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "key" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text)');
            yield queryRunner.query('CREATE TABLE "user" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "email" varchar NOT NULL, "firstName" varchar NOT NULL, "lastName" varchar NOT NULL, "password" varchar NOT NULL, "status" varchar NOT NULL, "trackEvents" boolean, "newsLetter" boolean, CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email"))');
            yield queryRunner.query('CREATE TABLE "app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL)');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
            yield queryRunner.query('CREATE TABLE "webhook_simulation" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "projectId" varchar(21) NOT NULL)');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_webhook_simulation_flow_id" ON "webhook_simulation" ("flowId") ');
            yield queryRunner.query('CREATE TABLE "folder" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "displayName" varchar NOT NULL, "projectId" varchar(21) NOT NULL)');
            yield queryRunner.query('CREATE INDEX "idx_folder_project_id" ON "folder" ("projectId") ');
            yield queryRunner.query('CREATE TABLE "piece_metadata" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "displayName" varchar NOT NULL, "logoUrl" varchar NOT NULL, "description" varchar, "projectId" varchar, "version" varchar NOT NULL, "minimumSupportedRelease" varchar NOT NULL, "maximumSupportedRelease" varchar NOT NULL, "auth" text, "actions" text NOT NULL, "triggers" text NOT NULL)');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId") ');
            yield queryRunner.query('DROP INDEX "idx_trigger_event_flow_id"');
            yield queryRunner.query('CREATE TABLE "temporary_trigger_event" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "projectId" varchar(21) NOT NULL, "sourceName" varchar NOT NULL, "payload" text, CONSTRAINT "fk_trigger_event_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION, CONSTRAINT "fk_trigger_event_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_trigger_event"("id", "created", "updated", "flowId", "projectId", "sourceName", "payload") SELECT "id", "created", "updated", "flowId", "projectId", "sourceName", "payload" FROM "trigger_event"');
            yield queryRunner.query('DROP TABLE "trigger_event"');
            yield queryRunner.query('ALTER TABLE "temporary_trigger_event" RENAME TO "trigger_event"');
            yield queryRunner.query('CREATE INDEX "idx_trigger_event_flow_id" ON "trigger_event" ("flowId") ');
            yield queryRunner.query('DROP INDEX "idx_flow_instance_project_id_flow_id"');
            yield queryRunner.query('CREATE TABLE "temporary_flow_instance" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "status" varchar NOT NULL, "schedule" text, CONSTRAINT "REL_cb897f5e48cc3cba1418966326" UNIQUE ("flowId"), CONSTRAINT "REL_ec72f514c21734fb7a08797d75" UNIQUE ("flowVersionId"), CONSTRAINT "fk_flow_instance_flow" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION, CONSTRAINT "fk_flow_instance_flow_version" FOREIGN KEY ("flowVersionId") REFERENCES "flow_version" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_flow_instance"("id", "created", "updated", "projectId", "flowId", "flowVersionId", "status", "schedule") SELECT "id", "created", "updated", "projectId", "flowId", "flowVersionId", "status", "schedule" FROM "flow_instance"');
            yield queryRunner.query('DROP TABLE "flow_instance"');
            yield queryRunner.query('ALTER TABLE "temporary_flow_instance" RENAME TO "flow_instance"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_flow_instance_project_id_flow_id" ON "flow_instance" ("projectId", "flowId") ');
            yield queryRunner.query('CREATE TABLE "temporary_file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21), "data" blob NOT NULL, CONSTRAINT "fk_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_file"("id", "created", "updated", "projectId", "data") SELECT "id", "created", "updated", "projectId", "data" FROM "file"');
            yield queryRunner.query('DROP TABLE "file"');
            yield queryRunner.query('ALTER TABLE "temporary_file" RENAME TO "file"');
            yield queryRunner.query('DROP INDEX "idx_flow_project_id"');
            yield queryRunner.query('DROP INDEX "idx_flow_folder_id"');
            yield queryRunner.query('CREATE TABLE "temporary_flow" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "folderId" varchar(21), CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_flow"("id", "created", "updated", "projectId", "folderId") SELECT "id", "created", "updated", "projectId", "folderId" FROM "flow"');
            yield queryRunner.query('DROP TABLE "flow"');
            yield queryRunner.query('ALTER TABLE "temporary_flow" RENAME TO "flow"');
            yield queryRunner.query('CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId") ');
            yield queryRunner.query('CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId") ');
            yield queryRunner.query('DROP INDEX "idx_flow_version_flow_id"');
            yield queryRunner.query('CREATE TABLE "temporary_flow_version" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "displayName" varchar NOT NULL, "trigger" text, "updatedBy" varchar, "valid" boolean NOT NULL, "state" varchar NOT NULL, CONSTRAINT "fk_updated_by_user_flow" FOREIGN KEY ("updatedBy") REFERENCES "user" ("id") ON DELETE CASCADE ON UPDATE NO ACTION, CONSTRAINT "fk_flow_version_flow" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_flow_version"("id", "created", "updated", "flowId", "displayName", "trigger", "updatedBy", "valid", "state") SELECT "id", "created", "updated", "flowId", "displayName", "trigger", "updatedBy", "valid", "state" FROM "flow_version"');
            yield queryRunner.query('DROP TABLE "flow_version"');
            yield queryRunner.query('ALTER TABLE "temporary_flow_version" RENAME TO "flow_version"');
            yield queryRunner.query('CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId") ');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_status_created_desc"');
            yield queryRunner.query('CREATE TABLE "temporary_flow_run" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "environment" varchar, "flowDisplayName" varchar NOT NULL, "logsFileId" varchar(21), "status" varchar NOT NULL, "tasks" integer, "startTime" datetime NOT NULL, "finishTime" datetime, "pauseMetadata" text, CONSTRAINT "fk_flow_run_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION, CONSTRAINT "fk_flow_run_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_flow_run"("id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata") SELECT "id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata" FROM "flow_run"');
            yield queryRunner.query('DROP TABLE "flow_run"');
            yield queryRunner.query('ALTER TABLE "temporary_flow_run" RENAME TO "flow_run"');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "status", "created") ');
            yield queryRunner.query('DROP INDEX "idx_project_owner_id"');
            yield queryRunner.query('CREATE TABLE "temporary_project" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "ownerId" varchar(21) NOT NULL, "displayName" varchar NOT NULL, "notifyStatus" varchar NOT NULL, CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_project"("id", "created", "updated", "ownerId", "displayName", "notifyStatus") SELECT "id", "created", "updated", "ownerId", "displayName", "notifyStatus" FROM "project"');
            yield queryRunner.query('DROP TABLE "project"');
            yield queryRunner.query('ALTER TABLE "temporary_project" RENAME TO "project"');
            yield queryRunner.query('CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId") ');
            yield queryRunner.query('DROP INDEX "idx_app_connection_project_id_and_name"');
            yield queryRunner.query('CREATE TABLE "temporary_app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL, CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_app_connection"("id", "created", "updated", "name", "appName", "projectId", "value") SELECT "id", "created", "updated", "name", "appName", "projectId", "value" FROM "app_connection"');
            yield queryRunner.query('DROP TABLE "app_connection"');
            yield queryRunner.query('ALTER TABLE "temporary_app_connection" RENAME TO "app_connection"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
            yield queryRunner.query('DROP INDEX "idx_folder_project_id"');
            yield queryRunner.query('CREATE TABLE "temporary_folder" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "displayName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, CONSTRAINT "fk_folder_project" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_folder"("id", "created", "updated", "displayName", "projectId") SELECT "id", "created", "updated", "displayName", "projectId" FROM "folder"');
            yield queryRunner.query('DROP TABLE "folder"');
            yield queryRunner.query('ALTER TABLE "temporary_folder" RENAME TO "folder"');
            yield queryRunner.query('CREATE INDEX "idx_folder_project_id" ON "folder" ("projectId") ');
            yield queryRunner.query('DROP INDEX "idx_piece_metadata_name_project_id_version"');
            yield queryRunner.query('CREATE TABLE "temporary_piece_metadata" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "displayName" varchar NOT NULL, "logoUrl" varchar NOT NULL, "description" varchar, "projectId" varchar, "version" varchar NOT NULL, "minimumSupportedRelease" varchar NOT NULL, "maximumSupportedRelease" varchar NOT NULL, "auth" text, "actions" text NOT NULL, "triggers" text NOT NULL, CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_piece_metadata"("id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers") SELECT "id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers" FROM "piece_metadata"');
            yield queryRunner.query('DROP TABLE "piece_metadata"');
            yield queryRunner.query('ALTER TABLE "temporary_piece_metadata" RENAME TO "piece_metadata"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId") ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "idx_piece_metadata_name_project_id_version"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" RENAME TO "temporary_piece_metadata"');
            yield queryRunner.query('CREATE TABLE "piece_metadata" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "displayName" varchar NOT NULL, "logoUrl" varchar NOT NULL, "description" varchar, "projectId" varchar, "version" varchar NOT NULL, "minimumSupportedRelease" varchar NOT NULL, "maximumSupportedRelease" varchar NOT NULL, "auth" text, "actions" text NOT NULL, "triggers" text NOT NULL)');
            yield queryRunner.query('INSERT INTO "piece_metadata"("id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers") SELECT "id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers" FROM "temporary_piece_metadata"');
            yield queryRunner.query('DROP TABLE "temporary_piece_metadata"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId") ');
            yield queryRunner.query('DROP INDEX "idx_folder_project_id"');
            yield queryRunner.query('ALTER TABLE "folder" RENAME TO "temporary_folder"');
            yield queryRunner.query('CREATE TABLE "folder" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "displayName" varchar NOT NULL, "projectId" varchar(21) NOT NULL)');
            yield queryRunner.query('INSERT INTO "folder"("id", "created", "updated", "displayName", "projectId") SELECT "id", "created", "updated", "displayName", "projectId" FROM "temporary_folder"');
            yield queryRunner.query('DROP TABLE "temporary_folder"');
            yield queryRunner.query('CREATE INDEX "idx_folder_project_id" ON "folder" ("projectId") ');
            yield queryRunner.query('DROP INDEX "idx_app_connection_project_id_and_name"');
            yield queryRunner.query('ALTER TABLE "app_connection" RENAME TO "temporary_app_connection"');
            yield queryRunner.query('CREATE TABLE "app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL)');
            yield queryRunner.query('INSERT INTO "app_connection"("id", "created", "updated", "name", "appName", "projectId", "value") SELECT "id", "created", "updated", "name", "appName", "projectId", "value" FROM "temporary_app_connection"');
            yield queryRunner.query('DROP TABLE "temporary_app_connection"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
            yield queryRunner.query('DROP INDEX "idx_project_owner_id"');
            yield queryRunner.query('ALTER TABLE "project" RENAME TO "temporary_project"');
            yield queryRunner.query('CREATE TABLE "project" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "ownerId" varchar(21) NOT NULL, "displayName" varchar NOT NULL, "notifyStatus" varchar NOT NULL)');
            yield queryRunner.query('INSERT INTO "project"("id", "created", "updated", "ownerId", "displayName", "notifyStatus") SELECT "id", "created", "updated", "ownerId", "displayName", "notifyStatus" FROM "temporary_project"');
            yield queryRunner.query('DROP TABLE "temporary_project"');
            yield queryRunner.query('CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId") ');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_created_desc"');
            yield queryRunner.query('ALTER TABLE "flow_run" RENAME TO "temporary_flow_run"');
            yield queryRunner.query('CREATE TABLE "flow_run" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "environment" varchar, "flowDisplayName" varchar NOT NULL, "logsFileId" varchar(21), "status" varchar NOT NULL, "tasks" integer, "startTime" datetime NOT NULL, "finishTime" datetime, "pauseMetadata" text)');
            yield queryRunner.query('INSERT INTO "flow_run"("id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata") SELECT "id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata" FROM "temporary_flow_run"');
            yield queryRunner.query('DROP TABLE "temporary_flow_run"');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created") ');
            yield queryRunner.query('DROP INDEX "idx_flow_version_flow_id"');
            yield queryRunner.query('ALTER TABLE "flow_version" RENAME TO "temporary_flow_version"');
            yield queryRunner.query('CREATE TABLE "flow_version" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "displayName" varchar NOT NULL, "trigger" text, "updatedBy" varchar, "valid" boolean NOT NULL, "state" varchar NOT NULL)');
            yield queryRunner.query('INSERT INTO "flow_version"("id", "created", "updated", "flowId", "displayName", "trigger", "updatedBy", "valid", "state") SELECT "id", "created", "updated", "flowId", "displayName", "trigger", "updatedBy", "valid", "state" FROM "temporary_flow_version"');
            yield queryRunner.query('DROP TABLE "temporary_flow_version"');
            yield queryRunner.query('CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId") ');
            yield queryRunner.query('DROP INDEX "idx_flow_folder_id"');
            yield queryRunner.query('DROP INDEX "idx_flow_project_id"');
            yield queryRunner.query('ALTER TABLE "flow" RENAME TO "temporary_flow"');
            yield queryRunner.query('CREATE TABLE "flow" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "folderId" varchar(21))');
            yield queryRunner.query('INSERT INTO "flow"("id", "created", "updated", "projectId", "folderId") SELECT "id", "created", "updated", "projectId", "folderId" FROM "temporary_flow"');
            yield queryRunner.query('DROP TABLE "temporary_flow"');
            yield queryRunner.query('CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId") ');
            yield queryRunner.query('CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId") ');
            yield queryRunner.query('ALTER TABLE "file" RENAME TO "temporary_file"');
            yield queryRunner.query('CREATE TABLE "file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21), "data" blob NOT NULL)');
            yield queryRunner.query('INSERT INTO "file"("id", "created", "updated", "projectId", "data") SELECT "id", "created", "updated", "projectId", "data" FROM "temporary_file"');
            yield queryRunner.query('DROP TABLE "temporary_file"');
            yield queryRunner.query('DROP INDEX "idx_flow_instance_project_id_flow_id"');
            yield queryRunner.query('ALTER TABLE "flow_instance" RENAME TO "temporary_flow_instance"');
            yield queryRunner.query('CREATE TABLE "flow_instance" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "status" varchar NOT NULL, "schedule" text, CONSTRAINT "REL_cb897f5e48cc3cba1418966326" UNIQUE ("flowId"), CONSTRAINT "REL_ec72f514c21734fb7a08797d75" UNIQUE ("flowVersionId"))');
            yield queryRunner.query('INSERT INTO "flow_instance"("id", "created", "updated", "projectId", "flowId", "flowVersionId", "status", "schedule") SELECT "id", "created", "updated", "projectId", "flowId", "flowVersionId", "status", "schedule" FROM "temporary_flow_instance"');
            yield queryRunner.query('DROP TABLE "temporary_flow_instance"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_flow_instance_project_id_flow_id" ON "flow_instance" ("projectId", "flowId") ');
            yield queryRunner.query('DROP INDEX "idx_trigger_event_flow_id"');
            yield queryRunner.query('ALTER TABLE "trigger_event" RENAME TO "temporary_trigger_event"');
            yield queryRunner.query('CREATE TABLE "trigger_event" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "projectId" varchar(21) NOT NULL, "sourceName" varchar NOT NULL, "payload" text)');
            yield queryRunner.query('INSERT INTO "trigger_event"("id", "created", "updated", "flowId", "projectId", "sourceName", "payload") SELECT "id", "created", "updated", "flowId", "projectId", "sourceName", "payload" FROM "temporary_trigger_event"');
            yield queryRunner.query('DROP TABLE "temporary_trigger_event"');
            yield queryRunner.query('CREATE INDEX "idx_trigger_event_flow_id" ON "trigger_event" ("flowId") ');
            yield queryRunner.query('DROP INDEX "idx_piece_metadata_name_project_id_version"');
            yield queryRunner.query('DROP TABLE "piece_metadata"');
            yield queryRunner.query('DROP INDEX "idx_folder_project_id"');
            yield queryRunner.query('DROP TABLE "folder"');
            yield queryRunner.query('DROP INDEX "idx_webhook_simulation_flow_id"');
            yield queryRunner.query('DROP TABLE "webhook_simulation"');
            yield queryRunner.query('DROP INDEX "idx_app_connection_project_id_and_name"');
            yield queryRunner.query('DROP TABLE "app_connection"');
            yield queryRunner.query('DROP TABLE "user"');
            yield queryRunner.query('DROP TABLE "store-entry"');
            yield queryRunner.query('DROP INDEX "idx_project_owner_id"');
            yield queryRunner.query('DROP TABLE "project"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_created_desc"');
            yield queryRunner.query('DROP TABLE "flow_run"');
            yield queryRunner.query('DROP INDEX "idx_flow_version_flow_id"');
            yield queryRunner.query('DROP TABLE "flow_version"');
            yield queryRunner.query('DROP INDEX "idx_flow_folder_id"');
            yield queryRunner.query('DROP INDEX "idx_flow_project_id"');
            yield queryRunner.query('DROP TABLE "flow"');
            yield queryRunner.query('DROP TABLE "flag"');
            yield queryRunner.query('DROP TABLE "file"');
            yield queryRunner.query('DROP INDEX "idx_app_event_project_id_appName_identifier_value_event"');
            yield queryRunner.query('DROP INDEX "idx_app_event_routing_flow_id"');
            yield queryRunner.query('DROP TABLE "app_event_routing"');
            yield queryRunner.query('DROP INDEX "idx_flow_instance_project_id_flow_id"');
            yield queryRunner.query('DROP TABLE "flow_instance"');
            yield queryRunner.query('DROP INDEX "idx_trigger_event_flow_id"');
            yield queryRunner.query('DROP TABLE "trigger_event"');
        });
    }
}
exports.InitialSql3Migration1690195839899 = InitialSql3Migration1690195839899;


/***/ }),
/* 410 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAppConnectionTypeToTopLevel1691706020626 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const encryption_1 = __webpack_require__(299);
class AddAppConnectionTypeToTopLevel1691706020626 {
    constructor() {
        this.name = 'AddAppConnectionTypeToTopLevel1691706020626';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691706020626 up');
            yield queryRunner.query('DROP INDEX "idx_app_connection_project_id_and_name"');
            yield queryRunner.query('CREATE TABLE "temporary_app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL, "type" varchar, CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_app_connection"("id", "created", "updated", "name", "appName", "projectId", "value") SELECT "id", "created", "updated", "name", "appName", "projectId", "value" FROM "app_connection"');
            yield queryRunner.query('DROP TABLE "app_connection"');
            yield queryRunner.query('ALTER TABLE "temporary_app_connection" RENAME TO "app_connection"');
            const connections = yield queryRunner.query('SELECT * FROM app_connection');
            for (const currentConnection of connections) {
                try {
                    const connectionValue = encryption_1.encryptUtils.decryptObject(JSON.parse(currentConnection.value));
                    yield queryRunner.query(`UPDATE "app_connection" SET "type" = '${connectionValue.type}' WHERE id = '${currentConnection.id}'`);
                }
                catch (e) {
                    server_shared_1.logger.error(e);
                }
            }
            yield queryRunner.query('CREATE TABLE "temporary_app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL, "type" varchar NOT NULL, CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_app_connection"("id", "created", "updated", "name", "appName", "projectId", "value", "type") SELECT "id", "created", "updated", "name", "appName", "projectId", "value", "type" FROM "app_connection"');
            yield queryRunner.query('DROP TABLE "app_connection"');
            yield queryRunner.query('ALTER TABLE "temporary_app_connection" RENAME TO "app_connection"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691706020626 finished');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691706020626 down');
            yield queryRunner.query('DROP INDEX "idx_app_connection_project_id_and_name"');
            yield queryRunner.query('ALTER TABLE "app_connection" RENAME TO "temporary_app_connection"');
            yield queryRunner.query('CREATE TABLE "app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL, CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "app_connection"("id", "created", "updated", "name", "appName", "projectId", "value") SELECT "id", "created", "updated", "name", "appName", "projectId", "value" FROM "temporary_app_connection"');
            yield queryRunner.query('DROP TABLE "temporary_app_connection"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
            server_shared_1.logger.info('AddAppConnectionTypeToTopLevel1691706020626 finished');
        });
    }
}
exports.AddAppConnectionTypeToTopLevel1691706020626 = AddAppConnectionTypeToTopLevel1691706020626;


/***/ }),
/* 411 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTagsToRunSqlite1692056190942 = void 0;
const tslib_1 = __webpack_require__(1);
class AddTagsToRunSqlite1692056190942 {
    constructor() {
        this.name = 'AddTagsToRunSqlite1692056190942';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield migrationRan('AddTagsToRunSqlite31692056190942', queryRunner)) {
                return;
            }
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_created_desc"');
            yield queryRunner.query('CREATE TABLE "temporary_flow_run" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "environment" varchar, "flowDisplayName" varchar NOT NULL, "logsFileId" varchar(21), "status" varchar NOT NULL, "tasks" integer, "startTime" datetime NOT NULL, "finishTime" datetime, "pauseMetadata" text, "tags" text, CONSTRAINT "fk_flow_run_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION, CONSTRAINT "fk_flow_run_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_flow_run"("id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata") SELECT "id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata" FROM "flow_run"');
            yield queryRunner.query('DROP TABLE "flow_run"');
            yield queryRunner.query('ALTER TABLE "temporary_flow_run" RENAME TO "flow_run"');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created") ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_environment_status_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_created_desc"');
            yield queryRunner.query('DROP INDEX "idx_run_project_id_flow_id_environment_status_created_desc"');
            yield queryRunner.query('ALTER TABLE "flow_run" RENAME TO "temporary_flow_run"');
            yield queryRunner.query('CREATE TABLE "flow_run" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21) NOT NULL, "flowId" varchar(21) NOT NULL, "flowVersionId" varchar(21) NOT NULL, "environment" varchar, "flowDisplayName" varchar NOT NULL, "logsFileId" varchar(21), "status" varchar NOT NULL, "tasks" integer, "startTime" datetime NOT NULL, "finishTime" datetime, "pauseMetadata" text, CONSTRAINT "fk_flow_run_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION, CONSTRAINT "fk_flow_run_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "flow_run"("id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata") SELECT "id", "created", "updated", "projectId", "flowId", "flowVersionId", "environment", "flowDisplayName", "logsFileId", "status", "tasks", "startTime", "finishTime", "pauseMetadata" FROM "temporary_flow_run"');
            yield queryRunner.query('DROP TABLE "temporary_flow_run"');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created") ');
            yield queryRunner.query('CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "status", "created") ');
        });
    }
}
exports.AddTagsToRunSqlite1692056190942 = AddTagsToRunSqlite1692056190942;
function migrationRan(migration, queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = yield queryRunner.query('SELECT * from migrations where name = ?', [migration]);
        return result.length > 0;
    });
}


/***/ }),
/* 412 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddStepFileSqlite1692958076906 = void 0;
const tslib_1 = __webpack_require__(1);
class AddStepFileSqlite1692958076906 {
    constructor() {
        this.name = 'AddStepFileSqlite1692958076906';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield migrationRan('AddStepFileSqlite31692958076906', queryRunner)) {
                return;
            }
            yield queryRunner.query('CREATE TABLE "step_file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "projectId" varchar(21) NOT NULL, "name" varchar NOT NULL, "size" integer NOT NULL, "stepName" varchar NOT NULL, "data" blob NOT NULL)');
            yield queryRunner.query('CREATE UNIQUE INDEX "step_file_project_id_flow_id_step_name_name" ON "step_file" ("projectId", "flowId", "stepName", "name") ');
            yield queryRunner.query('DROP INDEX "step_file_project_id_flow_id_step_name_name"');
            yield queryRunner.query('CREATE TABLE "temporary_step_file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "projectId" varchar(21) NOT NULL, "name" varchar NOT NULL, "size" integer NOT NULL, "stepName" varchar NOT NULL, "data" blob NOT NULL, CONSTRAINT "fk_step_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION, CONSTRAINT "fk_step_file_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_step_file"("id", "created", "updated", "flowId", "projectId", "name", "size", "stepName", "data") SELECT "id", "created", "updated", "flowId", "projectId", "name", "size", "stepName", "data" FROM "step_file"');
            yield queryRunner.query('DROP TABLE "step_file"');
            yield queryRunner.query('ALTER TABLE "temporary_step_file" RENAME TO "step_file"');
            yield queryRunner.query('CREATE UNIQUE INDEX "step_file_project_id_flow_id_step_name_name" ON "step_file" ("projectId", "flowId", "stepName", "name") ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "step_file_project_id_flow_id_step_name_name"');
            yield queryRunner.query('ALTER TABLE "step_file" RENAME TO "temporary_step_file"');
            yield queryRunner.query('CREATE TABLE "step_file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "flowId" varchar(21) NOT NULL, "projectId" varchar(21) NOT NULL, "name" varchar NOT NULL, "size" integer NOT NULL, "stepName" varchar NOT NULL, "data" blob NOT NULL)');
            yield queryRunner.query('INSERT INTO "step_file"("id", "created", "updated", "flowId", "projectId", "name", "size", "stepName", "data") SELECT "id", "created", "updated", "flowId", "projectId", "name", "size", "stepName", "data" FROM "temporary_step_file"');
            yield queryRunner.query('DROP TABLE "temporary_step_file"');
            yield queryRunner.query('CREATE UNIQUE INDEX "step_file_project_id_flow_id_step_name_name" ON "step_file" ("projectId", "flowId", "stepName", "name") ');
            yield queryRunner.query('DROP INDEX "step_file_project_id_flow_id_step_name_name"');
            yield queryRunner.query('DROP TABLE "step_file"');
        });
    }
}
exports.AddStepFileSqlite1692958076906 = AddStepFileSqlite1692958076906;
function migrationRan(migration, queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = yield queryRunner.query('SELECT * from migrations where name = ?', [migration]);
        return result.length > 0;
    });
}


/***/ }),
/* 413 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddStatusToConnectionsSqlite1693402376520 = void 0;
const tslib_1 = __webpack_require__(1);
class AddStatusToConnectionsSqlite1693402376520 {
    constructor() {
        this.name = 'AddStatusToConnectionsSqlite1693402376520';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield migrationRan('AddStatusToConnectionsSqlite31693402376520', queryRunner)) {
                return;
            }
            yield queryRunner.query('DROP INDEX "idx_app_connection_project_id_and_name"');
            yield queryRunner.query('CREATE TABLE "temporary_app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL, "type" varchar NOT NULL, "status" varchar NOT NULL DEFAULT (\'ACTIVE\'), CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_app_connection"("id", "created", "updated", "name", "appName", "projectId", "value", "type") SELECT "id", "created", "updated", "name", "appName", "projectId", "value", "type" FROM "app_connection"');
            yield queryRunner.query('DROP TABLE "app_connection"');
            yield queryRunner.query('ALTER TABLE "temporary_app_connection" RENAME TO "app_connection"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "idx_app_connection_project_id_and_name"');
            yield queryRunner.query('ALTER TABLE "app_connection" RENAME TO "temporary_app_connection"');
            yield queryRunner.query('CREATE TABLE "app_connection" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "appName" varchar NOT NULL, "projectId" varchar(21) NOT NULL, "value" text NOT NULL, "type" varchar NOT NULL, CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "app_connection"("id", "created", "updated", "name", "appName", "projectId", "value", "type") SELECT "id", "created", "updated", "name", "appName", "projectId", "value", "type" FROM "temporary_app_connection"');
            yield queryRunner.query('DROP TABLE "temporary_app_connection"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name") ');
        });
    }
}
exports.AddStatusToConnectionsSqlite1693402376520 = AddStatusToConnectionsSqlite1693402376520;
function migrationRan(migration, queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = yield queryRunner.query('SELECT * from migrations where name = ?', [migration]);
        return result.length > 0;
    });
}


/***/ }),
/* 414 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddImageUrlAndTitleToUser1693774053027 = void 0;
const tslib_1 = __webpack_require__(1);
class AddImageUrlAndTitleToUser1693774053027 {
    constructor() {
        this.name = 'AddImageUrlAndTitleToUser1693774053027';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('CREATE TABLE "temporary_user" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "email" varchar NOT NULL, "firstName" varchar NOT NULL, "lastName" varchar NOT NULL, "password" varchar NOT NULL, "status" varchar NOT NULL, "trackEvents" boolean, "newsLetter" boolean, "imageUrl" varchar, "title" varchar, CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email"))');
            yield queryRunner.query('INSERT INTO "temporary_user"("id", "created", "updated", "email", "firstName", "lastName", "password", "status", "trackEvents", "newsLetter") SELECT "id", "created", "updated", "email", "firstName", "lastName", "password", "status", "trackEvents", "newsLetter" FROM "user"');
            yield queryRunner.query('DROP TABLE "user"');
            yield queryRunner.query('ALTER TABLE "temporary_user" RENAME TO "user"');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "user" RENAME TO "temporary_user"');
            yield queryRunner.query('CREATE TABLE "user" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "email" varchar NOT NULL, "firstName" varchar NOT NULL, "lastName" varchar NOT NULL, "password" varchar NOT NULL, "status" varchar NOT NULL, "trackEvents" boolean, "newsLetter" boolean, CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email"))');
            yield queryRunner.query('INSERT INTO "user"("id", "created", "updated", "email", "firstName", "lastName", "password", "status", "trackEvents", "newsLetter") SELECT "id", "created", "updated", "email", "firstName", "lastName", "password", "status", "trackEvents", "newsLetter" FROM "temporary_user"');
            yield queryRunner.query('DROP TABLE "temporary_user"');
        });
    }
}
exports.AddImageUrlAndTitleToUser1693774053027 = AddImageUrlAndTitleToUser1693774053027;


/***/ }),
/* 415 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileTypeCompression1694695212159 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class FileTypeCompression1694695212159 {
    constructor() {
        this.name = 'FileTypeCompression1694695212159';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('CREATE TABLE "temporary_file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21), "data" blob NOT NULL, "type" varchar NOT NULL DEFAULT (\'UNKNOWN\'), "compression" varchar NOT NULL DEFAULT (\'NONE\'), CONSTRAINT "fk_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_file"("id", "created", "updated", "projectId", "data") SELECT "id", "created", "updated", "projectId", "data" FROM "file"');
            yield queryRunner.query('DROP TABLE "file"');
            yield queryRunner.query('ALTER TABLE "temporary_file" RENAME TO "file"');
            server_shared_1.logger.info('[FileTypeCompression1694695212159] up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "file" RENAME TO "temporary_file"');
            yield queryRunner.query('CREATE TABLE "file" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "projectId" varchar(21), "data" blob NOT NULL, CONSTRAINT "fk_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "file"("id", "created", "updated", "projectId", "data") SELECT "id", "created", "updated", "projectId", "data" FROM "temporary_file"');
            yield queryRunner.query('DROP TABLE "temporary_file"');
            server_shared_1.logger.info('[FileTypeCompression1694695212159] down');
        });
    }
}
exports.FileTypeCompression1694695212159 = FileTypeCompression1694695212159;


/***/ }),
/* 416 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPieceTypeAndPackageTypeToPieceMetadata1696016228398 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPieceTypeAndPackageTypeToPieceMetadata1696016228398 {
    constructor() {
        this.name = 'AddPieceTypeAndPackageTypeToPieceMetadata1696016228398';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('CREATE TABLE "temporary_piece_metadata" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "displayName" varchar NOT NULL, "logoUrl" varchar NOT NULL, "description" varchar, "projectId" varchar, "version" varchar NOT NULL, "minimumSupportedRelease" varchar NOT NULL, "maximumSupportedRelease" varchar NOT NULL, "auth" text, "actions" text NOT NULL, "triggers" text NOT NULL, "pieceType" varchar, "packageType" varchar, CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_piece_metadata"("id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers") SELECT "id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers" FROM "piece_metadata"');
            yield queryRunner.query('DROP INDEX "idx_piece_metadata_name_project_id_version"');
            yield queryRunner.query('DROP TABLE "piece_metadata"');
            yield queryRunner.query('UPDATE "temporary_piece_metadata" SET "pieceType" = \'OFFICIAL\' WHERE "projectId" IS NULL');
            yield queryRunner.query('UPDATE "temporary_piece_metadata" SET "pieceType" = \'CUSTOM\' WHERE "projectId" IS NOT NULL');
            yield queryRunner.query('UPDATE "temporary_piece_metadata" SET "packageType" = \'REGISTRY\'');
            yield queryRunner.query('CREATE TABLE "temporary_piece_metadata_two" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "displayName" varchar NOT NULL, "logoUrl" varchar NOT NULL, "description" varchar, "projectId" varchar, "version" varchar NOT NULL, "minimumSupportedRelease" varchar NOT NULL, "maximumSupportedRelease" varchar NOT NULL, "auth" text, "actions" text NOT NULL, "triggers" text NOT NULL, "pieceType" varchar NOT NULL, "packageType" varchar NOT NULL, CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_piece_metadata_two"("id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers", "pieceType", "packageType") SELECT "id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers", "pieceType", "packageType" FROM "temporary_piece_metadata"');
            yield queryRunner.query('DROP TABLE "temporary_piece_metadata"');
            yield queryRunner.query('ALTER TABLE "temporary_piece_metadata_two" RENAME TO "piece_metadata"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId") ');
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToPieceMetadata1696016228398: up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('DROP INDEX "idx_piece_metadata_name_project_id_version"');
            yield queryRunner.query('ALTER TABLE "piece_metadata" RENAME TO "temporary_piece_metadata"');
            yield queryRunner.query('CREATE TABLE "piece_metadata" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "name" varchar NOT NULL, "displayName" varchar NOT NULL, "logoUrl" varchar NOT NULL, "description" varchar, "projectId" varchar, "version" varchar NOT NULL, "minimumSupportedRelease" varchar NOT NULL, "maximumSupportedRelease" varchar NOT NULL, "auth" text, "actions" text NOT NULL, "triggers" text NOT NULL, CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "piece_metadata"("id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers") SELECT "id", "created", "updated", "name", "displayName", "logoUrl", "description", "projectId", "version", "minimumSupportedRelease", "maximumSupportedRelease", "auth", "actions", "triggers" FROM "temporary_piece_metadata"');
            yield queryRunner.query('DROP TABLE "temporary_piece_metadata"');
            yield queryRunner.query('CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId") ');
            server_shared_1.logger.info('AddPieceTypeAndPackageTypeToPieceMetadata1696016228398: down');
        });
    }
}
exports.AddPieceTypeAndPackageTypeToPieceMetadata1696016228398 = AddPieceTypeAndPackageTypeToPieceMetadata1696016228398;


/***/ }),
/* 417 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddChatBotSqlite1696029443045 = void 0;
const tslib_1 = __webpack_require__(1);
class AddChatBotSqlite1696029443045 {
    constructor() {
        this.name = 'AddChatBotSqlite1696029443045';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield migrationRan('AddChatBotSqlite31696029443045', queryRunner)) {
                return;
            }
            yield queryRunner.query('CREATE TABLE "chatbot" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "type" varchar NOT NULL, "displayName" varchar NOT NULL, "projectId" varchar NOT NULL, "connectionId" varchar, "visibilityStatus" varchar NOT NULL, "dataSources" text NOT NULL, "prompt" varchar)');
            yield queryRunner.query('CREATE TABLE "temporary_chatbot" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "type" varchar NOT NULL, "displayName" varchar NOT NULL, "projectId" varchar NOT NULL, "connectionId" varchar, "visibilityStatus" varchar NOT NULL, "dataSources" text NOT NULL, "prompt" varchar, CONSTRAINT "FK_d2f5f245c27541cd70f13f169eb" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT "FK_13f7ad52cefa43433864732c384" FOREIGN KEY ("connectionId") REFERENCES "app_connection" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION)');
            yield queryRunner.query('INSERT INTO "temporary_chatbot"("id", "created", "updated", "type", "displayName", "projectId", "connectionId", "visibilityStatus", "dataSources", "prompt") SELECT "id", "created", "updated", "type", "displayName", "projectId", "connectionId", "visibilityStatus", "dataSources", "prompt" FROM "chatbot"');
            yield queryRunner.query('DROP TABLE "chatbot"');
            yield queryRunner.query('ALTER TABLE "temporary_chatbot" RENAME TO "chatbot"');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query('ALTER TABLE "chatbot" RENAME TO "temporary_chatbot"');
            yield queryRunner.query('CREATE TABLE "chatbot" ("id" varchar(21) PRIMARY KEY NOT NULL, "created" datetime NOT NULL DEFAULT (datetime(\'now\')), "updated" datetime NOT NULL DEFAULT (datetime(\'now\')), "type" varchar NOT NULL, "displayName" varchar NOT NULL, "projectId" varchar NOT NULL, "connectionId" varchar, "visibilityStatus" varchar NOT NULL, "dataSources" text NOT NULL, "prompt" varchar)');
            yield queryRunner.query('INSERT INTO "chatbot"("id", "created", "updated", "type", "displayName", "projectId", "connectionId", "visibilityStatus", "dataSources", "prompt") SELECT "id", "created", "updated", "type", "displayName", "projectId", "connectionId", "visibilityStatus", "dataSources", "prompt" FROM "temporary_chatbot"');
            yield queryRunner.query('DROP TABLE "temporary_chatbot"');
            yield queryRunner.query('DROP TABLE "chatbot"');
        });
    }
}
exports.AddChatBotSqlite1696029443045 = AddChatBotSqlite1696029443045;
function migrationRan(migration, queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = yield queryRunner.query('SELECT * from migrations where name = ?', [migration]);
        return result.length > 0;
    });
}


/***/ }),
/* 418 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddArchiveIdToPieceMetadata1696956123632 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddArchiveIdToPieceMetadata1696956123632 {
    constructor() {
        this.name = 'AddArchiveIdToPieceMetadata1696956123632';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType"
            FROM "piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "piece_metadata"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_piece_metadata"
                RENAME TO "piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId"
            FROM "piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "piece_metadata"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_piece_metadata"
                RENAME TO "piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            server_shared_1.logger.info('AddArchiveIdToPieceMetadata1696956123632: up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
                RENAME TO "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE TABLE "piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId"
            FROM "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
                RENAME TO "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE TABLE "piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType"
            FROM "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            server_shared_1.logger.info('AddArchiveIdToPieceMetadata1696956123632: down');
        });
    }
}
exports.AddArchiveIdToPieceMetadata1696956123632 = AddArchiveIdToPieceMetadata1696956123632;


/***/ }),
/* 419 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformToProject1698078715730 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPlatformToProject1698078715730 {
    constructor() {
        this.name = 'AddPlatformToProject1698078715730';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "type" varchar NOT NULL DEFAULT ('STANDALONE'),
                "platformId" varchar(21),
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus"
            FROM "project"
        `);
            yield queryRunner.query(`
            DROP TABLE "project"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_project"
                RENAME TO "project"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            server_shared_1.logger.info('AddPlatformToProject1698078715730 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
                RENAME TO "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE TABLE "project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus"
            FROM "temporary_project"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            server_shared_1.logger.info('AddPlatformToProject1698078715730 down');
        });
    }
}
exports.AddPlatformToProject1698078715730 = AddPlatformToProject1698078715730;


/***/ }),
/* 420 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTerminationReasonSqlite1698323327318 = void 0;
const tslib_1 = __webpack_require__(1);
class AddTerminationReasonSqlite1698323327318 {
    constructor() {
        this.name = 'AddTerminationReasonSqlite1698323327318';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield migrationRan('AddTerminationReasonSqlite31698323327318', queryRunner)) {
                return;
            }
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_environment_created_desc"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_environment_status_created_desc"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_flow_id_environment_created_desc"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_flow_id_environment_status_created_desc"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_flow_run" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "flowId" varchar(21) NOT NULL,
                "flowVersionId" varchar(21) NOT NULL,
                "environment" varchar,
                "flowDisplayName" varchar NOT NULL,
                "logsFileId" varchar(21),
                "status" varchar NOT NULL,
                "tasks" integer,
                "startTime" datetime NOT NULL,
                "finishTime" datetime,
                "pauseMetadata" text,
                "tags" text,
                "terminationReason" varchar CHECK("terminationReason" IN ('STOPPED_BY_HOOK')),
                CONSTRAINT "fk_flow_run_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_run_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_flow_run"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "flowId",
                    "flowVersionId",
                    "environment",
                    "flowDisplayName",
                    "logsFileId",
                    "status",
                    "tasks",
                    "startTime",
                    "finishTime",
                    "pauseMetadata",
                    "tags"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "flowId",
                "flowVersionId",
                "environment",
                "flowDisplayName",
                "logsFileId",
                "status",
                "tasks",
                "startTime",
                "finishTime",
                "pauseMetadata",
                "tags"
            FROM "flow_run"
        `);
            yield queryRunner.query(`
            DROP TABLE "flow_run"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_flow_run"
                RENAME TO "flow_run"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" (
                "projectId",
                "flowId",
                "environment",
                "status",
                "created"
            )
        `);
            yield queryRunner.query(`
        UPDATE "flow_run"
        SET "status" = 'SUCCEEDED',
            "terminationReason" = 'STOPPED_BY_HOOK'
        WHERE "status" = 'STOPPED'
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
        UPDATE "flow_run"
        SET "status" = 'STOPPED',
            "terminationReason" = null
        WHERE "status" = 'SUCCEEDED' AND "terminationReason" = 'STOPPED_BY_HOOK'
    `);
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_flow_id_environment_status_created_desc"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_flow_id_environment_created_desc"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_environment_status_created_desc"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_run_project_id_environment_created_desc"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_run"
                RENAME TO "temporary_flow_run"
        `);
            yield queryRunner.query(`
            CREATE TABLE "flow_run" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "flowId" varchar(21) NOT NULL,
                "flowVersionId" varchar(21) NOT NULL,
                "environment" varchar,
                "flowDisplayName" varchar NOT NULL,
                "logsFileId" varchar(21),
                "status" varchar NOT NULL,
                "tasks" integer,
                "startTime" datetime NOT NULL,
                "finishTime" datetime,
                "pauseMetadata" text,
                "tags" text,
                CONSTRAINT "fk_flow_run_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_run_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "flow_run"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "flowId",
                    "flowVersionId",
                    "environment",
                    "flowDisplayName",
                    "logsFileId",
                    "status",
                    "tasks",
                    "startTime",
                    "finishTime",
                    "pauseMetadata",
                    "tags"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "flowId",
                "flowVersionId",
                "environment",
                "flowDisplayName",
                "logsFileId",
                "status",
                "tasks",
                "startTime",
                "finishTime",
                "pauseMetadata",
                "tags"
            FROM "temporary_flow_run"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_flow_run"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_flow_id_environment_status_created_desc" ON "flow_run" (
                "projectId",
                "flowId",
                "environment",
                "status",
                "created"
            )
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_flow_id_environment_created_desc" ON "flow_run" ("projectId", "flowId", "environment", "created")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_environment_status_created_desc" ON "flow_run" ("projectId", "environment", "status", "created")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_run_project_id_environment_created_desc" ON "flow_run" ("projectId", "environment", "created")
        `);
        });
    }
}
exports.AddTerminationReasonSqlite1698323327318 = AddTerminationReasonSqlite1698323327318;
function migrationRan(migration, queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = yield queryRunner.query('SELECT * from migrations where name = ?', [migration]);
        return result.length > 0;
    });
}


/***/ }),
/* 421 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddExternalIdSqlite1698857968495 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddExternalIdSqlite1698857968495 {
    constructor() {
        this.name = 'AddExternalIdSqlite1698857968495';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('AddExternalIdSqlite1698857968495 up');
            if (yield migrationRan('AddExternalIdSqlite31698857968495', queryRunner)) {
                server_shared_1.logger.info('AddExternalIdSqlite1698857968495 already ran');
                return;
            }
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "type" varchar NOT NULL DEFAULT ('STANDALONE'),
                "platformId" varchar(21),
                "externalId" varchar,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "type",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "type",
                "platformId"
            FROM "project"
        `);
            yield queryRunner.query(`
            DROP TABLE "project"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_project"
                RENAME TO "project"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_external_id" ON "user" ("externalId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
                RENAME TO "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE TABLE "project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "type" varchar NOT NULL DEFAULT ('STANDALONE'),
                "platformId" varchar(21),
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "type",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "type",
                "platformId"
            FROM "temporary_project"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
        });
    }
}
exports.AddExternalIdSqlite1698857968495 = AddExternalIdSqlite1698857968495;
function migrationRan(migration, queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = yield queryRunner.query('SELECT * from migrations where name = ?', [migration]);
        return result.length > 0;
    });
}


/***/ }),
/* 422 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformIdToUserSqlite1700147448410 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPlatformIdToUserSqlite1700147448410 {
    constructor() {
        this.name = 'AddPlatformIdToUserSqlite1700147448410';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_external_id" ON "user" ("externalId")
        `);
        });
    }
}
exports.AddPlatformIdToUserSqlite1700147448410 = AddPlatformIdToUserSqlite1700147448410;


/***/ }),
/* 423 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformIdToPieceMetadataSqlite1700524446967 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPlatformIdToPieceMetadataSqlite1700524446967 {
    constructor() {
        this.name = 'AddPlatformIdToPieceMetadataSqlite1700524446967';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                "platformId" varchar,
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId"
            FROM "piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "piece_metadata"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_piece_metadata"
                RENAME TO "piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
                RENAME TO "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE TABLE "piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId"
            FROM "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
        });
    }
}
exports.AddPlatformIdToPieceMetadataSqlite1700524446967 = AddPlatformIdToPieceMetadataSqlite1700524446967;


/***/ }),
/* 424 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformIdToFileSqlite1701808264444 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPlatformIdToFileSqlite1701808264444 {
    constructor() {
        this.name = 'AddPlatformIdToFileSqlite1701808264444';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_file" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21),
                "data" blob NOT NULL,
                "type" varchar NOT NULL DEFAULT ('UNKNOWN'),
                "compression" varchar NOT NULL DEFAULT ('NONE'),
                "platformId" varchar(21),
                CONSTRAINT "fk_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_file"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "data",
                    "type",
                    "compression"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "data",
                "type",
                "compression"
            FROM "file"
        `);
            yield queryRunner.query(`
            DROP TABLE "file"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_file"
                RENAME TO "file"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            ALTER TABLE "file"
                RENAME TO "temporary_file"
        `);
            yield queryRunner.query(`
            CREATE TABLE "file" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21),
                "data" blob NOT NULL,
                "type" varchar NOT NULL DEFAULT ('UNKNOWN'),
                "compression" varchar NOT NULL DEFAULT ('NONE'),
                CONSTRAINT "fk_file_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "file"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "data",
                    "type",
                    "compression"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "data",
                "type",
                "compression"
            FROM "temporary_file"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_file"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
        });
    }
}
exports.AddPlatformIdToFileSqlite1701808264444 = AddPlatformIdToFileSqlite1701808264444;


/***/ }),
/* 425 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveFlowInstanceSqlite1702412280963 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class RemoveFlowInstanceSqlite1702412280963 {
    constructor() {
        this.name = 'RemoveFlowInstanceSqlite1702412280963';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                "status" varchar CHECK("status" IN ('ENABLED', 'DISABLED')) NOT NULL DEFAULT ('DISABLED'),
                "schedule" text,
                "publishedVersionId" varchar(21),
                CONSTRAINT "UQ_15375936ad7b8c5dc3f50783a22" UNIQUE ("publishedVersionId"),
                CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId"
            FROM "flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "flow"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_flow"
                RENAME TO "flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            UPDATE "flow"
            SET "status" = "flow_instance"."status",
                "schedule" = "flow_instance"."schedule",
                "publishedVersionId" = "flow_instance"."flowVersionId"
            FROM "flow_instance"
            WHERE "flow"."id" = "flow_instance"."flowId"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_instance"
            RENAME TO "DELETED_flow_instance"
        `);
            server_shared_1.logger.info('RemoveFlowInstanceSqlite1702412280963 up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "DELETED_flow_instance"
            RENAME TO "flow_instance"
        `);
            yield queryRunner.query(`
            UPDATE "flow_instance"
            SET "status" = "flow"."status",
                "schedule" = "flow"."schedule",
                "flowVersionId" = "flow"."publishedVersionId"
            FROM "flow"
            WHERE "flow_instance"."flowId" = "flow"."id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
                RENAME TO "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE TABLE "flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId"
            FROM "temporary_flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            server_shared_1.logger.info('RemoveFlowInstanceSqlite1702412280963 down');
        });
    }
}
exports.RemoveFlowInstanceSqlite1702412280963 = RemoveFlowInstanceSqlite1702412280963;


/***/ }),
/* 426 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateStatusInUserSqlite1703713027818 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class UpdateStatusInUserSqlite1703713027818 {
    constructor() {
        this.name = 'UpdateStatusInUserSqlite1703713027818';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('UpdateStatusInUserSqlite1703713027818 up');
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                "status" varchar CHECK("status" IN ('ENABLED', 'DISABLED')) NOT NULL DEFAULT ('DISABLED'),
                "schedule" text,
                "publishedVersionId" varchar(21),
                CONSTRAINT "UQ_15375936ad7b8c5dc3f50783a22" UNIQUE ("publishedVersionId"),
                CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION,
                    CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId",
                    "status",
                    "schedule",
                    "publishedVersionId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId",
                "status",
                "schedule",
                "publishedVersionId"
            FROM "flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "flow"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_flow"
                RENAME TO "flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
                RENAME TO "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE TABLE "flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                "status" varchar CHECK("status" IN ('ENABLED', 'DISABLED')) NOT NULL DEFAULT ('DISABLED'),
                "schedule" text,
                "publishedVersionId" varchar(21),
                CONSTRAINT "UQ_15375936ad7b8c5dc3f50783a22" UNIQUE ("publishedVersionId"),
                CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION,
                    CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId",
                    "status",
                    "schedule",
                    "publishedVersionId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId",
                "status",
                "schedule",
                "publishedVersionId"
            FROM "temporary_flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
}
exports.UpdateStatusInUserSqlite1703713027818 = UpdateStatusInUserSqlite1703713027818;


/***/ }),
/* 427 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameAppNameToPieceNameSqlite1703713475755 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class RenameAppNameToPieceNameSqlite1703713475755 {
    constructor() {
        this.name = 'RenameAppNameToPieceNameSqlite1703713475755';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('RenameAppNameToPieceNameSqlite1703713475755 up');
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_app_connection_project_id_and_name"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_app_connection" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "pieceName" varchar NOT NULL,
                "projectId" varchar(21) NOT NULL,
                "value" text NOT NULL,
                "type" varchar NOT NULL,
                "status" varchar NOT NULL DEFAULT ('ACTIVE'),
                CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_app_connection"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "pieceName",
                    "projectId",
                    "value",
                    "type",
                    "status"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "appName",
                "projectId",
                "value",
                "type",
                "status"
            FROM "app_connection"
        `);
            yield queryRunner.query(`
            DROP TABLE "app_connection"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_app_connection"
                RENAME TO "app_connection"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                "status" varchar CHECK("status" IN ('ENABLED', 'DISABLED')) NOT NULL DEFAULT ('DISABLED'),
                "schedule" text,
                "publishedVersionId" varchar(21),
                CONSTRAINT "UQ_15375936ad7b8c5dc3f50783a22" UNIQUE ("publishedVersionId"),
                CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION,
                    CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId",
                    "status",
                    "schedule",
                    "publishedVersionId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId",
                "status",
                "schedule",
                "publishedVersionId"
            FROM "flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "flow"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_flow"
                RENAME TO "flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
                RENAME TO "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE TABLE "flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                "status" varchar CHECK("status" IN ('ENABLED', 'DISABLED')) NOT NULL DEFAULT ('DISABLED'),
                "schedule" text,
                "publishedVersionId" varchar(21),
                CONSTRAINT "UQ_15375936ad7b8c5dc3f50783a22" UNIQUE ("publishedVersionId"),
                CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION,
                    CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId",
                    "status",
                    "schedule",
                    "publishedVersionId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId",
                "status",
                "schedule",
                "publishedVersionId"
            FROM "temporary_flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_app_connection_project_id_and_name"
        `);
            yield queryRunner.query(`
            ALTER TABLE "app_connection"
                RENAME TO "temporary_app_connection"
        `);
            yield queryRunner.query(`
            CREATE TABLE "app_connection" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "appName" varchar NOT NULL,
                "projectId" varchar(21) NOT NULL,
                "value" text NOT NULL,
                "type" varchar NOT NULL,
                "status" varchar NOT NULL DEFAULT ('ACTIVE'),
                CONSTRAINT "fk_app_connection_app_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "app_connection"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "appName",
                    "projectId",
                    "value",
                    "type",
                    "status"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "pieceName",
                "projectId",
                "value",
                "type",
                "status"
            FROM "temporary_app_connection"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_app_connection"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_app_connection_project_id_and_name" ON "app_connection" ("projectId", "name")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
}
exports.RenameAppNameToPieceNameSqlite1703713475755 = RenameAppNameToPieceNameSqlite1703713475755;


/***/ }),
/* 428 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddVerifiedAndChangeStatusSqlite1703768553820 = void 0;
const tslib_1 = __webpack_require__(1);
class AddVerifiedAndChangeStatusSqlite1703768553820 {
    constructor() {
        this.name = 'AddVerifiedAndChangeStatusSqlite1703768553820';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            UPDATE "user" SET "status" = 'ACTIVE', "verified" = true
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                "status" varchar CHECK("status" IN ('ENABLED', 'DISABLED')) NOT NULL DEFAULT ('DISABLED'),
                "schedule" text,
                "publishedVersionId" varchar(21),
                CONSTRAINT "UQ_15375936ad7b8c5dc3f50783a22" UNIQUE ("publishedVersionId"),
                CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION,
                    CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId",
                    "status",
                    "schedule",
                    "publishedVersionId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId",
                "status",
                "schedule",
                "publishedVersionId"
            FROM "flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "flow"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_flow"
                RENAME TO "flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            UPDATE "user" SET "status" = 'VERIFIED', "verified" = false
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_folder_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_project_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow"
                RENAME TO "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE TABLE "flow" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "folderId" varchar(21),
                "status" varchar CHECK("status" IN ('ENABLED', 'DISABLED')) NOT NULL DEFAULT ('DISABLED'),
                "schedule" text,
                "publishedVersionId" varchar(21),
                CONSTRAINT "UQ_15375936ad7b8c5dc3f50783a22" UNIQUE ("publishedVersionId"),
                CONSTRAINT "fk_flow_published_version" FOREIGN KEY ("publishedVersionId") REFERENCES "flow_version" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION,
                CONSTRAINT "fk_flow_folder_id" FOREIGN KEY ("folderId") REFERENCES "folder" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION,
                    CONSTRAINT "fk_flow_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "flow"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "folderId",
                    "status",
                    "schedule",
                    "publishedVersionId"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "folderId",
                "status",
                "schedule",
                "publishedVersionId"
            FROM "temporary_flow"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_flow"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_folder_id" ON "flow" ("folderId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_project_id" ON "flow" ("projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
}
exports.AddVerifiedAndChangeStatusSqlite1703768553820 = AddVerifiedAndChangeStatusSqlite1703768553820;


/***/ }),
/* 429 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddCategoriesToPieceMetadata1707229986819 = void 0;
const tslib_1 = __webpack_require__(1);
class AddCategoriesToPieceMetadata1707229986819 {
    constructor() {
        this.name = 'AddCategoriesToPieceMetadata1707229986819';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                "platformId" varchar,
                "categories" text,
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId",
                "platformId"
            FROM "piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "piece_metadata"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_piece_metadata"
                RENAME TO "piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
                RENAME TO "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE TABLE "piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                "platformId" varchar,
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId",
                    "platformId"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId",
                "platformId"
            FROM "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
}
exports.AddCategoriesToPieceMetadata1707229986819 = AddCategoriesToPieceMetadata1707229986819;


/***/ }),
/* 430 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUniqueStoreConstraint1708527446535 = void 0;
const tslib_1 = __webpack_require__(1);
class AddUniqueStoreConstraint1708527446535 {
    constructor() {
        this.name = 'AddUniqueStoreConstraint1708527446535';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
        DELETE FROM "store-entry" AS se WHERE ("se"."projectId", "se"."key", "se"."created") NOT IN (SELECT "projectId", "key", MAX("created") FROM "store-entry" GROUP BY "projectId", "key");
    `);
            yield queryRunner.query(`
            DELETE FROM "store-entry"
            WHERE LENGTH("key") > 128
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_store-entry" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "key" varchar(128) NOT NULL,
                "projectId" varchar(21) NOT NULL,
                "value" text
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_store-entry"(
                    "id",
                    "created",
                    "updated",
                    "key",
                    "projectId",
                    "value"
                )
            SELECT "id",
                "created",
                "updated",
                "key",
                "projectId",
                "value"
            FROM "store-entry"
        `);
            yield queryRunner.query(`
            DROP TABLE "store-entry"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_store-entry"
                RENAME TO "store-entry"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_store-entry" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "key" varchar(128) NOT NULL,
                "projectId" varchar(21) NOT NULL,
                "value" text,
                CONSTRAINT "UQ_6f251cc141de0a8d84d7a4ac17d" UNIQUE ("projectId", "key")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_store-entry"(
                    "id",
                    "created",
                    "updated",
                    "key",
                    "projectId",
                    "value"
                )
            SELECT "id",
                "created",
                "updated",
                "key",
                "projectId",
                "value"
            FROM "store-entry"
        `);
            yield queryRunner.query(`
            DROP TABLE "store-entry"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_store-entry"
                RENAME TO "store-entry"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "store-entry"
                RENAME TO "temporary_store-entry"
        `);
            yield queryRunner.query(`
            CREATE TABLE "store-entry" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "key" varchar(128) NOT NULL,
                "projectId" varchar(21) NOT NULL,
                "value" text
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "store-entry"(
                    "id",
                    "created",
                    "updated",
                    "key",
                    "projectId",
                    "value"
                )
            SELECT "id",
                "created",
                "updated",
                "key",
                "projectId",
                "value"
            FROM "temporary_store-entry"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_store-entry"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            ALTER TABLE "store-entry"
                RENAME TO "temporary_store-entry"
        `);
            yield queryRunner.query(`
            CREATE TABLE "store-entry" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "key" varchar NOT NULL,
                "projectId" varchar(21) NOT NULL,
                "value" text
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "store-entry"(
                    "id",
                    "created",
                    "updated",
                    "key",
                    "projectId",
                    "value"
                )
            SELECT "id",
                "created",
                "updated",
                "key",
                "projectId",
                "value"
            FROM "temporary_store-entry"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_store-entry"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
}
exports.AddUniqueStoreConstraint1708527446535 = AddUniqueStoreConstraint1708527446535;


/***/ }),
/* 431 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateDefaultPlaformSqlite1709051625110 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
class CreateDefaultPlaformSqlite1709051625110 {
    constructor() {
        this.name = 'CreateDefaultPlaformSqlite1709051625110';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId")
            )
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield migrateProjects(queryRunner);
            yield queryRunner.query(`
            CREATE TABLE "temporary_project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "platformId" varchar(21),
                "externalId" varchar,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "platformId",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "platformId",
                "externalId"
            FROM "project"
        `);
            yield queryRunner.query(`
            DROP TABLE "project"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_project"
                RENAME TO "project"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "showActivityLog"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "showActivityLog"
            FROM "platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_platform"
                RENAME TO "platform"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform"
                RENAME TO "temporary_platform"
        `);
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "showActivityLog"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "showActivityLog"
            FROM "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
                RENAME TO "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE TABLE "project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "type" varchar NOT NULL DEFAULT ('STANDALONE'),
                "platformId" varchar(21),
                "externalId" varchar,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "platformId",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "platformId",
                "externalId"
            FROM "temporary_project"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
}
exports.CreateDefaultPlaformSqlite1709051625110 = CreateDefaultPlaformSqlite1709051625110;
function migrateProjects(queryRunner) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        server_shared_1.logger.info('CreateDefaultPlatform1705967115116 up');
        const standaloneProjects = yield queryRunner.query('select * from project where "platformId" is null;');
        server_shared_1.logger.info(`Found ${standaloneProjects.length} standalone projects`);
        for (const project of standaloneProjects) {
            const ownerId = project.ownerId;
            const platformId = (0, shared_1.apId)();
            yield queryRunner.query(`
        INSERT INTO "platform" (
            "id",
            "created",
            "updated",
            "ownerId",
            "name",
            "primaryColor",
            "logoIconUrl",
            "fullLogoUrl",
            "favIconUrl",
            "filteredPieceNames",
            "filteredPieceBehavior",
            "smtpHost",
            "smtpPort",
            "smtpUser",
            "smtpPassword",
            "smtpSenderEmail",
            "smtpUseSSL",
            "privacyPolicyUrl",
            "termsOfServiceUrl",
            "showPoweredBy",
            "cloudAuthEnabled",
            "defaultLocale",
            "embeddingEnabled",
            "gitSyncEnabled",
            "allowedAuthDomains",
            "enforceAllowedAuthDomains",
            "ssoEnabled",
            "federatedAuthProviders",
            "emailAuthEnabled",
            "auditLogEnabled",
            "showActivityLog"
        )
        VALUES (
            '${platformId}',
            current_timestamp,
            current_timestamp,
            '${ownerId}',
            'Activepieces',
            '#6e41e2',
            'https://cdn.activepieces.com/brand/logo.svg',
            'https://cdn.activepieces.com/brand/full-logo.png',
            'https://cdn.activepieces.com/brand/favicon.ico',
            '',
            'BLOCKED',
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            0,
            1,
            'en',
            0,
            0,
            '',
            0,
            0,
            '{}',
            1,
            0,
            0
        );
    `);
            yield queryRunner.query(`update "project" set "platformId" = '${platformId}' where "id" = '${project.id}'`);
            yield queryRunner.query(`update "user" set "platformId" = '${platformId}' where "id" = '${ownerId}'`);
        }
        server_shared_1.logger.info('CreateDefaultPlatform1705967115116 up done');
    });
}


/***/ }),
/* 432 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformForeignKeyToProjectSqlite1709566629593 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddPlatformForeignKeyToProjectSqlite1709566629593 {
    constructor() {
        this.name = 'AddPlatformForeignKeyToProjectSqlite1709566629593';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "platformId" varchar(21) NOT NULL,
                "externalId" varchar,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION,
                CONSTRAINT "fk_project_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "platformId",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "platformId",
                "externalId"
            FROM "project"
        `);
            yield queryRunner.query(`
            DROP TABLE "project"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_project"
                RENAME TO "project"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
                RENAME TO "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE TABLE "project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "platformId" varchar(21),
                "externalId" varchar,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "platformId",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "platformId",
                "externalId"
            FROM "temporary_project"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddPlatformForeignKeyToProjectSqlite1709566629593 = AddPlatformForeignKeyToProjectSqlite1709566629593;


/***/ }),
/* 433 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAuthorsToPieces1710098009544 = void 0;
const tslib_1 = __webpack_require__(1);
class AddAuthorsToPieces1710098009544 {
    constructor() {
        this.name = 'AddAuthorsToPieces1710098009544';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                "platformId" varchar,
                "categories" text,
                "authors" text NOT NULL,
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
        INSERT INTO "temporary_piece_metadata"(
            "id",
            "created",
            "updated",
            "name",
            "displayName",
            "logoUrl",
            "description",
            "projectId",
            "version",
            "minimumSupportedRelease",
            "maximumSupportedRelease",
            "auth",
            "actions",
            "triggers",
            "pieceType",
            "packageType",
            "archiveId",
            "platformId",
            "categories",
            "authors"
        )
        SELECT "id",
            "created",
            "updated",
            "name",
            "displayName",
            "logoUrl",
            "description",
            "projectId",
            "version",
            "minimumSupportedRelease",
            "maximumSupportedRelease",
            "auth",
            "actions",
            "triggers",
            "pieceType",
            "packageType",
            "archiveId",
            "platformId",
            "categories",
            '[]' AS "authors"
            FROM "piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "piece_metadata"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_piece_metadata"
                RENAME TO "piece_metadata"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
        DROP INDEX "idx_piece_metadata_name_project_id_version"
    `);
            yield queryRunner.query(`
        ALTER TABLE "piece_metadata"
            RENAME TO "temporary_piece_metadata"
    `);
            yield queryRunner.query(`
            CREATE TABLE "piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                "platformId" varchar,
                "categories" text,
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId",
                    "platformId",
                    "categories"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId",
                "platformId",
                "categories"
            FROM "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
        });
    }
}
exports.AddAuthorsToPieces1710098009544 = AddAuthorsToPieces1710098009544;


/***/ }),
/* 434 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddDeletedToProjectSqlite1710248182409 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddDeletedToProjectSqlite1710248182409 {
    constructor() {
        this.name = 'AddDeletedToProjectSqlite1710248182409';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "platformId" varchar(21) NOT NULL,
                "externalId" varchar,
                "deleted" datetime,
                CONSTRAINT "fk_project_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "platformId",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "platformId",
                "externalId"
            FROM "project"
        `);
            yield queryRunner.query(`
            DROP TABLE "project"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_project"
                RENAME TO "project"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            server_shared_1.logger.info({ name: this.name }, 'up');
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_project_owner_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_project_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "project"
                RENAME TO "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE TABLE "project" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "notifyStatus" varchar NOT NULL,
                "platformId" varchar(21) NOT NULL,
                "externalId" varchar,
                CONSTRAINT "fk_project_platform_id" FOREIGN KEY ("platformId") REFERENCES "platform" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT,
                CONSTRAINT "fk_project_owner_id" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "project"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "displayName",
                    "notifyStatus",
                    "platformId",
                    "externalId"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "displayName",
                "notifyStatus",
                "platformId",
                "externalId"
            FROM "temporary_project"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_project"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_project_owner_id" ON "project" ("ownerId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_project_platform_id_external_id" ON "project" ("platformId", "externalId")
        `);
            server_shared_1.logger.info({ name: this.name }, 'down');
        });
    }
}
exports.AddDeletedToProjectSqlite1710248182409 = AddDeletedToProjectSqlite1710248182409;


/***/ }),
/* 435 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddMissingInputUiInfoSqlite1711412511624 = void 0;
const tslib_1 = __webpack_require__(1);
class AddMissingInputUiInfoSqlite1711412511624 {
    constructor() {
        this.name = 'AddMissingInputUiInfoSqlite1711412511624';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
        UPDATE flow_version 
        SET trigger = json_set(trigger, '$.settings.inputUiInfo', '{}') 
        WHERE json_extract(trigger, '$.settings.inputUiInfo') IS NULL;
    `);
        });
    }
    down(_queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // No down migration needed
        });
    }
}
exports.AddMissingInputUiInfoSqlite1711412511624 = AddMissingInputUiInfoSqlite1711412511624;


/***/ }),
/* 436 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddProjectUsageColumnToPieceSqlite1711768479150 = void 0;
const tslib_1 = __webpack_require__(1);
class AddProjectUsageColumnToPieceSqlite1711768479150 {
    constructor() {
        this.name = 'AddProjectUsageColumnToPieceSqlite1711768479150';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
        CREATE TABLE "temporary_piece_metadata" (
            "id" varchar(21) PRIMARY KEY NOT NULL,
            "created" datetime NOT NULL DEFAULT (datetime('now')),
            "updated" datetime NOT NULL DEFAULT (datetime('now')),
            "name" varchar NOT NULL,
            "displayName" varchar NOT NULL,
            "logoUrl" varchar NOT NULL,
            "description" varchar,
            "projectId" varchar,
            "version" varchar NOT NULL,
            "minimumSupportedRelease" varchar NOT NULL,
            "maximumSupportedRelease" varchar NOT NULL,
            "auth" text,
            "actions" text NOT NULL,
            "triggers" text NOT NULL,
            "pieceType" varchar NOT NULL,
            "packageType" varchar NOT NULL,
            "archiveId" varchar(21),
            "platformId" varchar,
            "categories" text,
            "authors" text NOT NULL,
            "projectUsage" integer NOT NULL DEFAULT (0),
            CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
            CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
            CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
        )
    `);
            yield queryRunner.query(`
        INSERT INTO "temporary_piece_metadata"(
                "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId",
                "platformId",
                "categories",
                "authors"
            )
        SELECT "id",
            "created",
            "updated",
            "name",
            "displayName",
            "logoUrl",
            "description",
            "projectId",
            "version",
            "minimumSupportedRelease",
            "maximumSupportedRelease",
            "auth",
            "actions",
            "triggers",
            "pieceType",
            "packageType",
            "archiveId",
            "platformId",
            "categories",
            "authors"
        FROM "piece_metadata"
    `);
            yield queryRunner.query(`
        DROP TABLE "piece_metadata"
    `);
            yield queryRunner.query(`
        ALTER TABLE "temporary_piece_metadata"
            RENAME TO "piece_metadata"
    `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_piece_metadata_name_project_id_version" ON "piece_metadata" ("name", "version", "projectId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_piece_metadata_name_project_id_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "piece_metadata"
                RENAME TO "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            CREATE TABLE "piece_metadata" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "name" varchar NOT NULL,
                "displayName" varchar NOT NULL,
                "logoUrl" varchar NOT NULL,
                "description" varchar,
                "projectId" varchar,
                "version" varchar NOT NULL,
                "minimumSupportedRelease" varchar NOT NULL,
                "maximumSupportedRelease" varchar NOT NULL,
                "auth" text,
                "actions" text NOT NULL,
                "triggers" text NOT NULL,
                "pieceType" varchar NOT NULL,
                "packageType" varchar NOT NULL,
                "archiveId" varchar(21),
                "platformId" varchar,
                "categories" text,
                "authors" text NOT NULL,
                CONSTRAINT "UQ_0f9b96e2f69449fb836dfeae559" UNIQUE ("archiveId"),
                CONSTRAINT "fk_piece_metadata_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_piece_metadata_file" FOREIGN KEY ("archiveId") REFERENCES "file" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "piece_metadata"(
                    "id",
                    "created",
                    "updated",
                    "name",
                    "displayName",
                    "logoUrl",
                    "description",
                    "projectId",
                    "version",
                    "minimumSupportedRelease",
                    "maximumSupportedRelease",
                    "auth",
                    "actions",
                    "triggers",
                    "pieceType",
                    "packageType",
                    "archiveId",
                    "platformId",
                    "categories",
                    "authors"
                )
            SELECT "id",
                "created",
                "updated",
                "name",
                "displayName",
                "logoUrl",
                "description",
                "projectId",
                "version",
                "minimumSupportedRelease",
                "maximumSupportedRelease",
                "auth",
                "actions",
                "triggers",
                "pieceType",
                "packageType",
                "archiveId",
                "platformId",
                "categories",
                "authors"
            FROM "temporary_piece_metadata"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_piece_metadata"
        `);
        });
    }
}
exports.AddProjectUsageColumnToPieceSqlite1711768479150 = AddProjectUsageColumnToPieceSqlite1711768479150;


/***/ }),
/* 437 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTagsToPiecesSqlite1712180673961 = void 0;
const tslib_1 = __webpack_require__(1);
class AddTagsToPiecesSqlite1712180673961 {
    constructor() {
        this.name = 'AddTagsToPiecesSqlite1712180673961';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "tag" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "platformId" varchar NOT NULL,
                "name" varchar NOT NULL,
                CONSTRAINT "UQ_0aaf8e30187e0b89ebc9c4764ba" UNIQUE ("platformId", "name")
            )
        `);
            yield queryRunner.query(`
            CREATE TABLE "piece_tag" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "platformId" varchar NOT NULL,
                "pieceName" varchar NOT NULL,
                "tagId" varchar NOT NULL,
                CONSTRAINT "UQ_84a810ed305b758e07fa57f604a" UNIQUE ("tagId", "pieceName"),
                CONSTRAINT "FK_6ee5c7cca2b33700e400ea2703e" FOREIGN KEY ("tagId") REFERENCES "tag" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION,
                CONSTRAINT "FK_5f483919deb37416ff32594918a" FOREIGN KEY ("platformId") REFERENCES "platform" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            CREATE INDEX "tag_platformId" ON "piece_tag" ("platformId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "tag_platformId"
        `);
            yield queryRunner.query(`
            DROP TABLE "piece_tag"
        `);
            yield queryRunner.query(`
            DROP TABLE "tag"
        `);
        });
    }
}
exports.AddTagsToPiecesSqlite1712180673961 = AddTagsToPiecesSqlite1712180673961;


/***/ }),
/* 438 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveUniqueEmailOnUser1713222892743 = void 0;
const tslib_1 = __webpack_require__(1);
class RemoveUniqueEmailOnUser1713222892743 {
    constructor() {
        this.name = 'RemoveUniqueEmailOnUser1713222892743';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_flow_version_flow_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_flow_version" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "flowId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "trigger" text,
                "updatedBy" varchar,
                "valid" boolean NOT NULL,
                "state" varchar NOT NULL,
                CONSTRAINT "fk_flow_version_flow" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_flow_version"(
                    "id",
                    "created",
                    "updated",
                    "flowId",
                    "displayName",
                    "trigger",
                    "updatedBy",
                    "valid",
                    "state"
                )
            SELECT "id",
                "created",
                "updated",
                "flowId",
                "displayName",
                "trigger",
                "updatedBy",
                "valid",
                "state"
            FROM "flow_version"
        `);
            yield queryRunner.query(`
            DROP TABLE "flow_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_flow_version"
                RENAME TO "flow_version"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_partial_unique_email_platform_id_is_null"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_version_flow_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_flow_version" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "flowId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "trigger" text,
                "updatedBy" varchar,
                "valid" boolean NOT NULL,
                "state" varchar NOT NULL,
                CONSTRAINT "fk_flow_version_flow" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_updated_by_user_flow" FOREIGN KEY ("updatedBy") REFERENCES "user" ("id") ON DELETE
                SET NULL ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_flow_version"(
                    "id",
                    "created",
                    "updated",
                    "flowId",
                    "displayName",
                    "trigger",
                    "updatedBy",
                    "valid",
                    "state"
                )
            SELECT "id",
                "created",
                "updated",
                "flowId",
                "displayName",
                "trigger",
                "updatedBy",
                "valid",
                "state"
            FROM "flow_version"
        `);
            yield queryRunner.query(`
            DROP TABLE "flow_version"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_flow_version"
                RENAME TO "flow_version"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId")
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_tag" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "platformId" varchar NOT NULL,
                "name" varchar NOT NULL,
                CONSTRAINT "UQ_0aaf8e30187e0b89ebc9c4764ba" UNIQUE ("platformId", "name"),
                CONSTRAINT "FK_9dec09e187398715b7f1e32a6cb" FOREIGN KEY ("platformId") REFERENCES "platform" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_tag"("id", "created", "updated", "platformId", "name")
            SELECT "id",
                "created",
                "updated",
                "platformId",
                "name"
            FROM "tag"
        `);
            yield queryRunner.query(`
            DROP TABLE "tag"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_tag"
                RENAME TO "tag"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "tag"
                RENAME TO "temporary_tag"
        `);
            yield queryRunner.query(`
            CREATE TABLE "tag" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "platformId" varchar NOT NULL,
                "name" varchar NOT NULL,
                CONSTRAINT "UQ_0aaf8e30187e0b89ebc9c4764ba" UNIQUE ("platformId", "name")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "tag"("id", "created", "updated", "platformId", "name")
            SELECT "id",
                "created",
                "updated",
                "platformId",
                "name"
            FROM "temporary_tag"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_tag"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_version_flow_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_version"
                RENAME TO "temporary_flow_version"
        `);
            yield queryRunner.query(`
            CREATE TABLE "flow_version" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "flowId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "trigger" text,
                "updatedBy" varchar,
                "valid" boolean NOT NULL,
                "state" varchar NOT NULL,
                CONSTRAINT "fk_flow_version_flow" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "flow_version"(
                    "id",
                    "created",
                    "updated",
                    "flowId",
                    "displayName",
                    "trigger",
                    "updatedBy",
                    "valid",
                    "state"
                )
            SELECT "id",
                "created",
                "updated",
                "flowId",
                "displayName",
                "trigger",
                "updatedBy",
                "valid",
                "state"
            FROM "temporary_flow_version"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_flow_version"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL,
                CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "imageUrl",
                    "title",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "imageUrl",
                "title",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_partial_unique_email_platform_id_is_null" ON "user" ("email")
            WHERE "platformId" IS NULL
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_flow_version_flow_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "flow_version"
                RENAME TO "temporary_flow_version"
        `);
            yield queryRunner.query(`
            CREATE TABLE "flow_version" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "flowId" varchar(21) NOT NULL,
                "displayName" varchar NOT NULL,
                "trigger" text,
                "updatedBy" varchar,
                "valid" boolean NOT NULL,
                "state" varchar NOT NULL,
                CONSTRAINT "fk_flow_version_flow" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_updated_by_user_flow" FOREIGN KEY ("updatedBy") REFERENCES "user" ("id") ON DELETE CASCADE ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "flow_version"(
                    "id",
                    "created",
                    "updated",
                    "flowId",
                    "displayName",
                    "trigger",
                    "updatedBy",
                    "valid",
                    "state"
                )
            SELECT "id",
                "created",
                "updated",
                "flowId",
                "displayName",
                "trigger",
                "updatedBy",
                "valid",
                "state"
            FROM "temporary_flow_version"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_flow_version"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_flow_version_flow_id" ON "flow_version" ("flowId")
        `);
        });
    }
}
exports.RemoveUniqueEmailOnUser1713222892743 = RemoveUniqueEmailOnUser1713222892743;


/***/ }),
/* 439 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPlatformRole1713271221154 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPlatformRole1713271221154 {
    constructor() {
        this.name = 'AddPlatformRole1713271221154';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "externalId",
                "platformId",
                "verified"
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_user" (
            "id" varchar(21) PRIMARY KEY NOT NULL,
            "created" datetime NOT NULL DEFAULT (datetime('now')),
            "updated" datetime NOT NULL DEFAULT (datetime('now')),
            "email" varchar NOT NULL,
            "firstName" varchar NOT NULL,
            "lastName" varchar NOT NULL,
            "password" varchar NOT NULL,
            "status" varchar NOT NULL,
            "trackEvents" boolean,
            "newsLetter" boolean,
            "externalId" varchar,
            "platformId" varchar,
            "verified" boolean NOT NULL,
            "platformRole" varchar NOT NULL
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_user"(
                "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "externalId",
                "platformId",
                "verified",
                "platformRole"
            )
            SELECT "id",
            "created",
            "updated",
            "email",
            "firstName",
            "lastName",
            "password",
            "status",
            "trackEvents",
            "newsLetter",
            "externalId",
            "platformId",
            "verified",
            'MEMBER'
            FROM "user"
        `);
            yield queryRunner.query(`
            DROP TABLE "user"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_user"
                RENAME TO "user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            UPDATE "user"
            SET "platformRole" = 'ADMIN'
            WHERE "id" IN (
                SELECT "ownerId"
                FROM "platform"
            )
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_external_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_user_platform_id_email"
        `);
            yield queryRunner.query(`
            ALTER TABLE "user"
                RENAME TO "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE TABLE "user" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "email" varchar NOT NULL,
                "firstName" varchar NOT NULL,
                "lastName" varchar NOT NULL,
                "password" varchar NOT NULL,
                "status" varchar NOT NULL,
                "trackEvents" boolean,
                "newsLetter" boolean,
                "imageUrl" varchar,
                "title" varchar,
                "externalId" varchar,
                "platformId" varchar,
                "verified" boolean NOT NULL
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "user"(
                    "id",
                    "created",
                    "updated",
                    "email",
                    "firstName",
                    "lastName",
                    "password",
                    "status",
                    "trackEvents",
                    "newsLetter",
                    "externalId",
                    "platformId",
                    "verified"
                )
            SELECT "id",
                "created",
                "updated",
                "email",
                "firstName",
                "lastName",
                "password",
                "status",
                "trackEvents",
                "newsLetter",
                "externalId",
                "platformId",
                "verified"
            FROM "temporary_user"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_user"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_external_id" ON "user" ("platformId", "externalId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_platform_id_email" ON "user" ("platformId", "email")
        `);
        });
    }
}
exports.AddPlatformRole1713271221154 = AddPlatformRole1713271221154;


/***/ }),
/* 440 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUniqueNameToFolderSqlite1713645171373 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
class AddUniqueNameToFolderSqlite1713645171373 {
    constructor() {
        this.name = 'AddUniqueNameToFolderSqlite1713645171373';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info({ name: this.name }, 'Up');
            yield queryRunner.query(`
            DELETE FROM "folder"
            WHERE ("projectId", LOWER("displayName")) IN (
            SELECT "projectId", LOWER("displayName")
            FROM "folder"
            GROUP BY "projectId", LOWER("displayName")
            HAVING COUNT(*) > 1
            )
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_folder_project_id"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_folder_project_id_display_name" ON "folder" ("projectId", "displayName")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_folder_project_id_display_name"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_folder_project_id" ON "folder" ("projectId")
        `);
        });
    }
}
exports.AddUniqueNameToFolderSqlite1713645171373 = AddUniqueNameToFolderSqlite1713645171373;


/***/ }),
/* 441 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddFeatureFlagsToPlatform1714137103728 = void 0;
const tslib_1 = __webpack_require__(1);
class AddFeatureFlagsToPlatform1714137103728 {
    constructor() {
        this.name = 'AddFeatureFlagsToPlatform1714137103728';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "temporary_platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                "customAppearanceEnabled" boolean NOT NULL,
                "manageProjectsEnabled" boolean NOT NULL,
                "managePiecesEnabled" boolean NOT NULL,
                "manageTemplatesEnabled" boolean NOT NULL,
                "apiKeysEnabled" boolean NOT NULL,
                "projectRolesEnabled" boolean NOT NULL,
                "customDomainsEnabled" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_platform"(
                "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "showActivityLog",
                "customAppearanceEnabled",
                "manageProjectsEnabled",
                "managePiecesEnabled",
                "manageTemplatesEnabled",
                "apiKeysEnabled",
                "projectRolesEnabled",
                "customDomainsEnabled"
            )
            SELECT "id",
            "created",
            "updated",
            "ownerId",
            "name",
            "primaryColor",
            "logoIconUrl",
            "fullLogoUrl",
            "favIconUrl",
            "smtpHost",
            "smtpPort",
            "smtpUser",
            "smtpPassword",
            "smtpSenderEmail",
            "smtpUseSSL",
            "privacyPolicyUrl",
            "termsOfServiceUrl",
            "showPoweredBy",
            "cloudAuthEnabled",
            "embeddingEnabled",
            "filteredPieceNames",
            "filteredPieceBehavior",
            "gitSyncEnabled",
            "defaultLocale",
            "allowedAuthDomains",
            "enforceAllowedAuthDomains",
            "ssoEnabled",
            "emailAuthEnabled",
            "federatedAuthProviders",
            "auditLogEnabled",
            "showActivityLog",
            false,
            false,
            false,
            false,
            false,
            false,
            false
            FROM "platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_platform"
                RENAME TO "platform"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform"
                RENAME TO "temporary_platform"
        `);
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "showActivityLog"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "showActivityLog"
            FROM "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_platform"
        `);
        });
    }
}
exports.AddFeatureFlagsToPlatform1714137103728 = AddFeatureFlagsToPlatform1714137103728;


/***/ }),
/* 442 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddIssueEntitySqlite1714900626443 = void 0;
const tslib_1 = __webpack_require__(1);
class AddIssueEntitySqlite1714900626443 {
    constructor() {
        this.name = 'AddIssueEntitySqlite1714900626443';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "issue" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "flowId" varchar(21) NOT NULL,
                "status" varchar CHECK("status" IN ('ONGOING', 'RESOLEVED')) NOT NULL,
                "count" integer NOT NULL,
                "lastOccurrence" datetime NOT NULL,
                CONSTRAINT "REL_6c7309a7ac3112d264f5d7b49f" UNIQUE ("flowId")
            )
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_issue_flow_id" ON "issue" ("flowId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_issue_project_id_flow_id" ON "issue" ("projectId", "flowId")
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                "customAppearanceEnabled" boolean NOT NULL,
                "manageProjectsEnabled" boolean NOT NULL,
                "managePiecesEnabled" boolean NOT NULL,
                "manageTemplatesEnabled" boolean NOT NULL,
                "apiKeysEnabled" boolean NOT NULL,
                "projectRolesEnabled" boolean NOT NULL,
                "customDomainsEnabled" boolean NOT NULL,
                "flowIssuesEnabled" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_platform"(
                "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "showActivityLog",
                "customAppearanceEnabled",
                "manageProjectsEnabled",
                "managePiecesEnabled",
                "manageTemplatesEnabled",
                "apiKeysEnabled",
                "projectRolesEnabled",
                "customDomainsEnabled",
                "flowIssuesEnabled"
            )
            SELECT "id",
            "created",
            "updated",
            "ownerId",
            "name",
            "primaryColor",
            "logoIconUrl",
            "fullLogoUrl",
            "favIconUrl",
            "smtpHost",
            "smtpPort",
            "smtpUser",
            "smtpPassword",
            "smtpSenderEmail",
            "smtpUseSSL",
            "privacyPolicyUrl",
            "termsOfServiceUrl",
            "showPoweredBy",
            "cloudAuthEnabled",
            "embeddingEnabled",
            "filteredPieceNames",
            "filteredPieceBehavior",
            "gitSyncEnabled",
            "defaultLocale",
            "allowedAuthDomains",
            "enforceAllowedAuthDomains",
            "ssoEnabled",
            "emailAuthEnabled",
            "federatedAuthProviders",
            "auditLogEnabled",
            "showActivityLog",
            "customAppearanceEnabled",
            "manageProjectsEnabled",
            "managePiecesEnabled",
            "manageTemplatesEnabled",
            "apiKeysEnabled",
            "projectRolesEnabled",
            "customDomainsEnabled",
            false
            FROM "platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_platform"
                RENAME TO "platform"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_issue_flow_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_issue_project_id_flow_id"
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_issue" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "flowId" varchar(21) NOT NULL,
                "status" varchar CHECK("status" IN ('ONGOING', 'RESOLEVED')) NOT NULL,
                "count" integer NOT NULL,
                "lastOccurrence" datetime NOT NULL,
                CONSTRAINT "REL_6c7309a7ac3112d264f5d7b49f" UNIQUE ("flowId"),
                CONSTRAINT "fk_issue_flow_id" FOREIGN KEY ("flowId") REFERENCES "flow" ("id") ON DELETE CASCADE ON UPDATE NO ACTION,
                CONSTRAINT "fk_issue_project_id" FOREIGN KEY ("projectId") REFERENCES "project" ("id") ON DELETE CASCADE ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_issue"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "flowId",
                    "status",
                    "count",
                    "lastOccurrence"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "flowId",
                "status",
                "count",
                "lastOccurrence"
            FROM "issue"
        `);
            yield queryRunner.query(`
            DROP TABLE "issue"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_issue"
                RENAME TO "issue"
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_issue_flow_id" ON "issue" ("flowId")
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_issue_project_id_flow_id" ON "issue" ("projectId", "flowId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_issue_project_id_flow_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_issue_flow_id"
        `);
            yield queryRunner.query(`
            ALTER TABLE "issue"
                RENAME TO "temporary_issue"
        `);
            yield queryRunner.query(`
            CREATE TABLE "issue" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "flowId" varchar(21) NOT NULL,
                "status" varchar CHECK("status" IN ('ONGOING', 'RESOLEVED')) NOT NULL,
                "count" integer NOT NULL,
                "lastOccurrence" datetime NOT NULL,
                CONSTRAINT "REL_6c7309a7ac3112d264f5d7b49f" UNIQUE ("flowId")
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "issue"(
                    "id",
                    "created",
                    "updated",
                    "projectId",
                    "flowId",
                    "status",
                    "count",
                    "lastOccurrence"
                )
            SELECT "id",
                "created",
                "updated",
                "projectId",
                "flowId",
                "status",
                "count",
                "lastOccurrence"
            FROM "temporary_issue"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_issue"
        `);
            yield queryRunner.query(`
            CREATE INDEX "idx_issue_project_id_flow_id" ON "issue" ("projectId", "flowId")
        `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_issue_flow_id" ON "issue" ("flowId")
        `);
            yield queryRunner.query(`
            ALTER TABLE "platform"
                RENAME TO "temporary_platform"
        `);
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "showActivityLog" boolean NOT NULL,
                "customAppearanceEnabled" boolean NOT NULL,
                "manageProjectsEnabled" boolean NOT NULL,
                "managePiecesEnabled" boolean NOT NULL,
                "manageTemplatesEnabled" boolean NOT NULL,
                "apiKeysEnabled" boolean NOT NULL,
                "projectRolesEnabled" boolean NOT NULL,
                "customDomainsEnabled" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "showActivityLog",
                    "customAppearanceEnabled",
                    "manageProjectsEnabled",
                    "managePiecesEnabled",
                    "manageTemplatesEnabled",
                    "apiKeysEnabled",
                    "projectRolesEnabled",
                    "customDomainsEnabled"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "showActivityLog",
                "customAppearanceEnabled",
                "manageProjectsEnabled",
                "managePiecesEnabled",
                "manageTemplatesEnabled",
                "apiKeysEnabled",
                "projectRolesEnabled",
                "customDomainsEnabled"
            FROM "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_issue_project_id_flow_id"
        `);
            yield queryRunner.query(`
            DROP INDEX "idx_issue_flow_id"
        `);
            yield queryRunner.query(`
            DROP TABLE "issue"
        `);
        });
    }
}
exports.AddIssueEntitySqlite1714900626443 = AddIssueEntitySqlite1714900626443;


/***/ }),
/* 443 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddAlertsEntitySqlite1717239613259 = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
class AddAlertsEntitySqlite1717239613259 {
    constructor() {
        this.name = 'AddAlertsEntitySqlite1717239613259';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info('CreateAlerts1680986182074 Migrated up');
            yield queryRunner.query(`
            CREATE TABLE "alert" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "projectId" varchar(21) NOT NULL,
                "channel" varchar NOT NULL,
                "receiver" varchar NOT NULL
            )
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "customAppearanceEnabled" boolean NOT NULL,
                "manageProjectsEnabled" boolean NOT NULL,
                "managePiecesEnabled" boolean NOT NULL,
                "manageTemplatesEnabled" boolean NOT NULL,
                "apiKeysEnabled" boolean NOT NULL,
                "projectRolesEnabled" boolean NOT NULL,
                "customDomainsEnabled" boolean NOT NULL,
                "flowIssuesEnabled" boolean NOT NULL,
                "alertsEnabled" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "customAppearanceEnabled",
                    "manageProjectsEnabled",
                    "managePiecesEnabled",
                    "manageTemplatesEnabled",
                    "apiKeysEnabled",
                    "projectRolesEnabled",
                    "customDomainsEnabled",
                    "flowIssuesEnabled",
                    "alertsEnabled"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "customAppearanceEnabled",
                "manageProjectsEnabled",
                "managePiecesEnabled",
                "manageTemplatesEnabled",
                "apiKeysEnabled",
                "projectRolesEnabled",
                "customDomainsEnabled",
                "flowIssuesEnabled",
                false
            FROM "platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_platform"
                RENAME TO "platform"
        `);
            const projects = yield queryRunner.query(`
        SELECT p."id" AS "projectId", u."email" AS "receiver"
        FROM "project" p
        INNER JOIN "user" u ON u."id" = p."ownerId"
    `);
            let countAlerts = 0;
            const alertsToInsert = projects.map((project) => {
                const alertId = (0, shared_1.apId)();
                countAlerts++;
                return queryRunner.query('INSERT INTO "alert" ("id", "created", "updated", "projectId", "channel", "receiver") VALUES (?, datetime(\'now\'), datetime(\'now\'), ?, \'EMAIL\', ?)', [alertId, project.projectId, project.receiver]);
            });
            yield Promise.all(alertsToInsert);
            server_shared_1.logger.info(`CreateAlerts1717239613259 Migrated ${countAlerts} alerts`);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform"
                RENAME TO "temporary_platform"
        `);
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "customAppearanceEnabled" boolean NOT NULL,
                "manageProjectsEnabled" boolean NOT NULL,
                "managePiecesEnabled" boolean NOT NULL,
                "manageTemplatesEnabled" boolean NOT NULL,
                "apiKeysEnabled" boolean NOT NULL,
                "projectRolesEnabled" boolean NOT NULL,
                "customDomainsEnabled" boolean NOT NULL,
                "flowIssuesEnabled" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "customAppearanceEnabled",
                    "manageProjectsEnabled",
                    "managePiecesEnabled",
                    "manageTemplatesEnabled",
                    "apiKeysEnabled",
                    "projectRolesEnabled",
                    "customDomainsEnabled",
                    "flowIssuesEnabled"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "customAppearanceEnabled",
                "manageProjectsEnabled",
                "managePiecesEnabled",
                "manageTemplatesEnabled",
                "apiKeysEnabled",
                "projectRolesEnabled",
                "customDomainsEnabled",
                "flowIssuesEnabled"
            FROM "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "alert"
        `);
        });
    }
}
exports.AddAlertsEntitySqlite1717239613259 = AddAlertsEntitySqlite1717239613259;


/***/ }),
/* 444 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddPremiumPiecesColumnSqlite1717443603235 = void 0;
const tslib_1 = __webpack_require__(1);
class AddPremiumPiecesColumnSqlite1717443603235 {
    constructor() {
        this.name = 'AddPremiumPiecesColumnSqlite1717443603235';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "temporary_platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "customAppearanceEnabled" boolean NOT NULL,
                "manageProjectsEnabled" boolean NOT NULL,
                "managePiecesEnabled" boolean NOT NULL,
                "manageTemplatesEnabled" boolean NOT NULL,
                "apiKeysEnabled" boolean NOT NULL,
                "projectRolesEnabled" boolean NOT NULL,
                "customDomainsEnabled" boolean NOT NULL,
                "flowIssuesEnabled" boolean NOT NULL,
                "alertsEnabled" boolean NOT NULL,
                "premiumPieces" text NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "customAppearanceEnabled",
                    "manageProjectsEnabled",
                    "managePiecesEnabled",
                    "manageTemplatesEnabled",
                    "apiKeysEnabled",
                    "projectRolesEnabled",
                    "customDomainsEnabled",
                    "flowIssuesEnabled",
                    "alertsEnabled",
                    "premiumPieces"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "customAppearanceEnabled",
                "manageProjectsEnabled",
                "managePiecesEnabled",
                "manageTemplatesEnabled",
                "apiKeysEnabled",
                "projectRolesEnabled",
                "customDomainsEnabled",
                "flowIssuesEnabled",
                "alertsEnabled",
                '{}'
            FROM "platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "platform"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_platform"
                RENAME TO "platform"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "platform"
                RENAME TO "temporary_platform"
        `);
            yield queryRunner.query(`
            CREATE TABLE "platform" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "ownerId" varchar(21) NOT NULL,
                "name" varchar NOT NULL,
                "primaryColor" varchar NOT NULL,
                "logoIconUrl" varchar NOT NULL,
                "fullLogoUrl" varchar NOT NULL,
                "favIconUrl" varchar NOT NULL,
                "smtpHost" varchar,
                "smtpPort" integer,
                "smtpUser" varchar,
                "smtpPassword" varchar,
                "smtpSenderEmail" varchar,
                "smtpUseSSL" boolean,
                "privacyPolicyUrl" varchar,
                "termsOfServiceUrl" varchar,
                "showPoweredBy" boolean NOT NULL,
                "cloudAuthEnabled" boolean NOT NULL DEFAULT (1),
                "embeddingEnabled" boolean NOT NULL DEFAULT (1),
                "filteredPieceNames" text NOT NULL,
                "filteredPieceBehavior" varchar CHECK(
                    "filteredPieceBehavior" IN ('ALLOWED', 'BLOCKED')
                ) NOT NULL,
                "gitSyncEnabled" boolean NOT NULL,
                "defaultLocale" varchar CHECK(
                    "defaultLocale" IN (
                        'nl',
                        'en',
                        'de',
                        'it',
                        'fr',
                        'bg',
                        'uk',
                        'hu',
                        'es',
                        'ja',
                        'id',
                        'vi',
                        'zh',
                        'pt'
                    )
                ),
                "allowedAuthDomains" text NOT NULL,
                "enforceAllowedAuthDomains" boolean NOT NULL,
                "ssoEnabled" boolean NOT NULL,
                "emailAuthEnabled" boolean NOT NULL,
                "federatedAuthProviders" text NOT NULL,
                "auditLogEnabled" boolean NOT NULL,
                "customAppearanceEnabled" boolean NOT NULL,
                "manageProjectsEnabled" boolean NOT NULL,
                "managePiecesEnabled" boolean NOT NULL,
                "manageTemplatesEnabled" boolean NOT NULL,
                "apiKeysEnabled" boolean NOT NULL,
                "projectRolesEnabled" boolean NOT NULL,
                "customDomainsEnabled" boolean NOT NULL,
                "flowIssuesEnabled" boolean NOT NULL,
                "alertsEnabled" boolean NOT NULL,
                CONSTRAINT "REL_94d6fd6494f0322c6f0e099141" UNIQUE ("ownerId"),
                CONSTRAINT "fk_platform_user" FOREIGN KEY ("ownerId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE RESTRICT
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "platform"(
                    "id",
                    "created",
                    "updated",
                    "ownerId",
                    "name",
                    "primaryColor",
                    "logoIconUrl",
                    "fullLogoUrl",
                    "favIconUrl",
                    "smtpHost",
                    "smtpPort",
                    "smtpUser",
                    "smtpPassword",
                    "smtpSenderEmail",
                    "smtpUseSSL",
                    "privacyPolicyUrl",
                    "termsOfServiceUrl",
                    "showPoweredBy",
                    "cloudAuthEnabled",
                    "embeddingEnabled",
                    "filteredPieceNames",
                    "filteredPieceBehavior",
                    "gitSyncEnabled",
                    "defaultLocale",
                    "allowedAuthDomains",
                    "enforceAllowedAuthDomains",
                    "ssoEnabled",
                    "emailAuthEnabled",
                    "federatedAuthProviders",
                    "auditLogEnabled",
                    "customAppearanceEnabled",
                    "manageProjectsEnabled",
                    "managePiecesEnabled",
                    "manageTemplatesEnabled",
                    "apiKeysEnabled",
                    "projectRolesEnabled",
                    "customDomainsEnabled",
                    "flowIssuesEnabled",
                    "alertsEnabled"
                )
            SELECT "id",
                "created",
                "updated",
                "ownerId",
                "name",
                "primaryColor",
                "logoIconUrl",
                "fullLogoUrl",
                "favIconUrl",
                "smtpHost",
                "smtpPort",
                "smtpUser",
                "smtpPassword",
                "smtpSenderEmail",
                "smtpUseSSL",
                "privacyPolicyUrl",
                "termsOfServiceUrl",
                "showPoweredBy",
                "cloudAuthEnabled",
                "embeddingEnabled",
                "filteredPieceNames",
                "filteredPieceBehavior",
                "gitSyncEnabled",
                "defaultLocale",
                "allowedAuthDomains",
                "enforceAllowedAuthDomains",
                "ssoEnabled",
                "emailAuthEnabled",
                "federatedAuthProviders",
                "auditLogEnabled",
                "customAppearanceEnabled",
                "manageProjectsEnabled",
                "managePiecesEnabled",
                "manageTemplatesEnabled",
                "apiKeysEnabled",
                "projectRolesEnabled",
                "customDomainsEnabled",
                "flowIssuesEnabled",
                "alertsEnabled"
            FROM "temporary_platform"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_platform"
        `);
        });
    }
}
exports.AddPremiumPiecesColumnSqlite1717443603235 = AddPremiumPiecesColumnSqlite1717443603235;


/***/ }),
/* 445 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddUserInvitationSqlite1717943564437 = void 0;
const tslib_1 = __webpack_require__(1);
class AddUserInvitationSqlite1717943564437 {
    constructor() {
        this.name = 'AddUserInvitationSqlite1717943564437';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
        CREATE TABLE "user_invitation" (
            "id" varchar(21) PRIMARY KEY NOT NULL,
            "created" datetime NOT NULL DEFAULT (datetime('now')),
            "updated" datetime NOT NULL DEFAULT (datetime('now')),
            "platformId" varchar NOT NULL,
            "type" varchar NOT NULL,
            "platformRole" varchar,
            "projectId" varchar,
            "projectRole" varchar,
            "status" varchar NOT NULL,
            "email" varchar NOT NULL
        )
    `);
            yield queryRunner.query(`
            CREATE UNIQUE INDEX "idx_user_invitation_email_platform_project" ON "user_invitation" ("email", "platformId", "projectId")
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            DROP INDEX "idx_user_invitation_email_platform_project"
        `);
            yield queryRunner.query(`
            DROP TABLE "user_invitation"
        `);
        });
    }
}
exports.AddUserInvitationSqlite1717943564437 = AddUserInvitationSqlite1717943564437;


/***/ }),
/* 446 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddWorkerMachineSqlite1720100928449 = void 0;
const tslib_1 = __webpack_require__(1);
class AddWorkerMachineSqlite1720100928449 {
    constructor() {
        this.name = 'AddWorkerMachineSqlite1720100928449';
    }
    up(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            CREATE TABLE "worker_machine" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "platformId" varchar(21),
                "type" varchar NOT NULL,
                "information" text NOT NULL
            )
        `);
            yield queryRunner.query(`
            CREATE TABLE "temporary_worker_machine" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "platformId" varchar(21),
                "type" varchar NOT NULL,
                "information" text NOT NULL,
                CONSTRAINT "FK_7f3c83a5162a2de787dc62bf519" FOREIGN KEY ("platformId") REFERENCES "platform" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "temporary_worker_machine"(
                    "id",
                    "created",
                    "updated",
                    "platformId",
                    "type",
                    "information"
                )
            SELECT "id",
                "created",
                "updated",
                "platformId",
                "type",
                "information"
            FROM "worker_machine"
        `);
            yield queryRunner.query(`
            DROP TABLE "worker_machine"
        `);
            yield queryRunner.query(`
            ALTER TABLE "temporary_worker_machine"
                RENAME TO "worker_machine"
        `);
        });
    }
    down(queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield queryRunner.query(`
            ALTER TABLE "worker_machine"
                RENAME TO "temporary_worker_machine"
        `);
            yield queryRunner.query(`
            CREATE TABLE "worker_machine" (
                "id" varchar(21) PRIMARY KEY NOT NULL,
                "created" datetime NOT NULL DEFAULT (datetime('now')),
                "updated" datetime NOT NULL DEFAULT (datetime('now')),
                "platformId" varchar(21),
                "type" varchar NOT NULL,
                "information" text NOT NULL
            )
        `);
            yield queryRunner.query(`
            INSERT INTO "worker_machine"(
                    "id",
                    "created",
                    "updated",
                    "platformId",
                    "type",
                    "information"
                )
            SELECT "id",
                "created",
                "updated",
                "platformId",
                "type",
                "information"
            FROM "temporary_worker_machine"
        `);
            yield queryRunner.query(`
            DROP TABLE "temporary_worker_machine"
        `);
            yield queryRunner.query(`
            DROP TABLE "worker_machine"
        `);
        });
    }
}
exports.AddWorkerMachineSqlite1720100928449 = AddWorkerMachineSqlite1720100928449;


/***/ }),
/* 447 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FastDbPieceMetadataService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const semver_1 = tslib_1.__importDefault(__webpack_require__(74));
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const project_service_1 = __webpack_require__(448);
const piece_tag_service_1 = __webpack_require__(450);
const piece_metadata_entity_1 = __webpack_require__(255);
const local_piece_cache_1 = __webpack_require__(455);
const hooks_1 = __webpack_require__(456);
const _1 = __webpack_require__(222);
const repo = (0, repo_factory_1.repoFactory)(piece_metadata_entity_1.PieceMetadataEntity);
const FastDbPieceMetadataService = () => {
    return {
        list(params) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const originalPieces = yield findAllPiecesVersionsSortedByNameAscVersionDesc(params);
                const uniquePieces = new Set(originalPieces.map((piece) => piece.name));
                const latestVersionOfEachPiece = Array.from(uniquePieces).map((name) => {
                    const result = originalPieces.find((piece) => piece.name === name);
                    const usageCount = originalPieces.filter((piece) => piece.name === name).reduce((acc, piece) => {
                        return acc + piece.projectUsage;
                    }, 0);
                    (0, shared_1.assertNotNullOrUndefined)(result, 'piece_metadata_not_found');
                    return Object.assign(Object.assign({}, result), { projectUsage: usageCount });
                });
                const piecesWithTags = yield enrichTags(params.platformId, latestVersionOfEachPiece, params.includeTags);
                const filteredPieces = yield hooks_1.pieceMetadataServiceHooks.get().filterPieces(Object.assign(Object.assign({}, params), { pieces: piecesWithTags, suggestionType: params.suggestionType }));
                return (0, _1.toPieceMetadataModelSummary)(filteredPieces, piecesWithTags, params.suggestionType);
            });
        },
        getOrThrow(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, version, name }) {
                let platformId = undefined;
                if (!(0, shared_1.isNil)(projectId)) {
                    // TODO: this might be database intensive, consider caching, passing platform id from caller cause major changes
                    // Don't use GetOneOrThrow Anonymous Token generates random string for project id
                    const project = yield project_service_1.projectService.getOne(projectId);
                    platformId = project === null || project === void 0 ? void 0 : project.platformId;
                }
                const versionToSearch = findNextExcludedVersion(version);
                const originalPieces = yield findAllPiecesVersionsSortedByNameAscVersionDesc({ projectId, platformId, release: undefined });
                const piece = originalPieces.find((piece) => {
                    const strictlyLessThan = ((0, shared_1.isNil)(versionToSearch) || (semver_1.default.compare(piece.version, versionToSearch.nextExcludedVersion) < 0
                        && semver_1.default.compare(piece.version, versionToSearch.baseVersion) >= 0));
                    return piece.name === name && strictlyLessThan;
                });
                if ((0, shared_1.isNil)(piece)) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                        params: {
                            message: `piece_metadata_not_found projectId=${projectId}`,
                        },
                    });
                }
                return piece;
            });
        },
        getVersions(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ name, projectId, release, platformId }) {
                const pieces = yield findAllPiecesVersionsSortedByNameAscVersionDesc({ projectId, platformId, release });
                return pieces.filter(p => p.name === name).reverse()
                    .reduce((record, pieceMetadata) => {
                    record[pieceMetadata.version] = {};
                    return record;
                }, {});
            });
        },
        delete(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, id }) {
                const existingMetadata = yield repo().findOneBy({
                    id,
                    projectId: projectId !== null && projectId !== void 0 ? projectId : (0, typeorm_1.IsNull)(),
                });
                if ((0, shared_1.isNil)(existingMetadata)) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                        params: {
                            message: `piece_metadata_not_found id=${id}`,
                        },
                    });
                }
                yield repo().delete({
                    id,
                    projectId: projectId !== null && projectId !== void 0 ? projectId : (0, typeorm_1.IsNull)(),
                });
            });
        },
        updateUsage(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, usage }) {
                const existingMetadata = yield repo().findOneByOrFail({
                    id,
                });
                yield repo().update(id, {
                    projectUsage: usage,
                    updated: existingMetadata.updated,
                    created: existingMetadata.created,
                });
            });
        },
        getExactPieceVersion(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ name, version, projectId }) {
                const isExactVersion = shared_1.EXACT_VERSION_PATTERN.test(version);
                if (isExactVersion) {
                    return version;
                }
                const pieceMetadata = yield this.getOrThrow({
                    projectId,
                    name,
                    version,
                });
                return pieceMetadata.version;
            });
        },
        create(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ pieceMetadata, projectId, platformId, packageType, pieceType, archiveId, }) {
                const existingMetadata = yield repo().findOneBy({
                    name: pieceMetadata.name,
                    version: pieceMetadata.version,
                    projectId: projectId !== null && projectId !== void 0 ? projectId : (0, typeorm_1.IsNull)(),
                    platformId: platformId !== null && platformId !== void 0 ? platformId : (0, typeorm_1.IsNull)(),
                });
                if (!(0, shared_1.isNil)(existingMetadata)) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.VALIDATION,
                        params: {
                            message: `piece_metadata_already_exists name=${pieceMetadata.name} version=${pieceMetadata.version} projectId=${projectId}`,
                        },
                    });
                }
                const createdDate = yield findOldestCreataDate({
                    name: pieceMetadata.name,
                    projectId,
                    platformId,
                });
                return repo().save(Object.assign({ id: (0, shared_1.apId)(), projectId,
                    packageType,
                    pieceType,
                    archiveId,
                    platformId, created: createdDate }, pieceMetadata));
            });
        },
    };
};
exports.FastDbPieceMetadataService = FastDbPieceMetadataService;
const findOldestCreataDate = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ name, projectId, platformId }) {
    var _b;
    const piece = yield repo().findOne({
        where: {
            name,
            projectId: projectId !== null && projectId !== void 0 ? projectId : (0, typeorm_1.IsNull)(),
            platformId: platformId !== null && platformId !== void 0 ? platformId : (0, typeorm_1.IsNull)(),
        },
        order: {
            created: 'ASC',
        },
    });
    return (_b = piece === null || piece === void 0 ? void 0 : piece.created) !== null && _b !== void 0 ? _b : (0, dayjs_1.default)().toISOString();
});
const enrichTags = (platformId, pieces, includeTags) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (!includeTags || (0, shared_1.isNil)(platformId)) {
        return pieces;
    }
    const tags = yield piece_tag_service_1.pieceTagService.findByPlatform(platformId);
    return pieces.map((piece) => {
        var _a;
        return Object.assign(Object.assign({}, piece), { tags: (_a = tags[piece.name]) !== null && _a !== void 0 ? _a : [] });
    });
});
const findNextExcludedVersion = (version) => {
    if (version === null || version === void 0 ? void 0 : version.startsWith('^')) {
        const baseVersion = version.substring(1);
        return {
            baseVersion,
            nextExcludedVersion: increaseMajorVersion(baseVersion),
        };
    }
    if (version === null || version === void 0 ? void 0 : version.startsWith('~')) {
        const baseVersion = version.substring(1);
        return {
            baseVersion,
            nextExcludedVersion: increaseMinorVersion(baseVersion),
        };
    }
    if ((0, shared_1.isNil)(version)) {
        return undefined;
    }
    return {
        baseVersion: version,
        nextExcludedVersion: increasePatchVersion(version),
    };
};
const increasePatchVersion = (version) => {
    const incrementedVersion = semver_1.default.inc(version, 'patch');
    if ((0, shared_1.isNil)(incrementedVersion)) {
        throw new Error(`Failed to increase patch version ${version}`);
    }
    return incrementedVersion;
};
const increaseMinorVersion = (version) => {
    const incrementedVersion = semver_1.default.inc(version, 'minor');
    if ((0, shared_1.isNil)(incrementedVersion)) {
        throw new Error(`Failed to increase minor version ${version}`);
    }
    return incrementedVersion;
};
const increaseMajorVersion = (version) => {
    const incrementedVersion = semver_1.default.inc(version, 'major');
    if ((0, shared_1.isNil)(incrementedVersion)) {
        throw new Error(`Failed to increase major version ${version}`);
    }
    return incrementedVersion;
};
function findAllPiecesVersionsSortedByNameAscVersionDesc(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, platformId, release }) {
        const piece = (yield local_piece_cache_1.localPieceCache.getSortedbyNameAscThenVersionDesc()).filter((piece) => {
            return isOfficialPiece(piece) || isProjectPiece(projectId, piece) || isPlatformPiece(platformId, piece);
        }).filter((piece) => isSupportedRelease(release, piece));
        return piece;
    });
}
function isSupportedRelease(release, piece) {
    if ((0, shared_1.isNil)(release)) {
        return true;
    }
    if (!(0, shared_1.isNil)(piece.maximumSupportedRelease) && semver_1.default.compare(release, piece.maximumSupportedRelease) == 1) {
        return false;
    }
    if (!(0, shared_1.isNil)(piece.minimumSupportedRelease) && semver_1.default.compare(release, piece.minimumSupportedRelease) == -1) {
        return false;
    }
    return true;
}
function isOfficialPiece(piece) {
    return piece.pieceType === shared_1.PieceType.OFFICIAL && (0, shared_1.isNil)(piece.projectId) && (0, shared_1.isNil)(piece.platformId);
}
function isProjectPiece(projectId, piece) {
    if ((0, shared_1.isNil)(projectId)) {
        return false;
    }
    return piece.projectId === projectId && piece.pieceType === shared_1.PieceType.CUSTOM;
}
function isPlatformPiece(platformId, piece) {
    if ((0, shared_1.isNil)(platformId)) {
        return false;
    }
    return piece.platformId === platformId && (0, shared_1.isNil)(piece.projectId) && piece.pieceType === shared_1.PieceType.CUSTOM;
}


/***/ }),
/* 448 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const project_entity_1 = __webpack_require__(257);
const project_hooks_1 = __webpack_require__(449);
const repo = (0, repo_factory_1.repoFactory)(project_entity_1.ProjectEntity);
exports.projectService = {
    create(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const newProject = Object.assign(Object.assign({ id: (0, shared_1.apId)() }, params), { notifyStatus: shared_1.NotificationStatus.ALWAYS });
            const savedProject = yield repo().save(newProject);
            (0, server_shared_1.rejectedPromiseHandler)(project_hooks_1.projectHooks.getHooks().postCreate(savedProject));
            return savedProject;
        });
    },
    getOne(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, shared_1.isNil)(projectId)) {
                return null;
            }
            return repo().findOneBy({
                id: projectId,
                deleted: (0, typeorm_1.IsNull)(),
            });
        });
    },
    update(projectId, request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield repo().update({
                id: projectId,
                deleted: (0, typeorm_1.IsNull)(),
            }, Object.assign(Object.assign({}, (0, shared_1.spreadIfDefined)('displayName', request.displayName)), (0, shared_1.spreadIfDefined)('notifyStatus', request.notifyStatus)));
            return this.getOneOrThrow(projectId);
        });
    },
    getOneOrThrow(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const project = yield this.getOne(projectId);
            if ((0, shared_1.isNil)(project)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityId: projectId,
                        entityType: 'project',
                    },
                });
            }
            return project;
        });
    },
    getOneForUser(user) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            (0, shared_1.assertNotNullOrUndefined)(user.platformId, 'user.platformId');
            switch (user.platformRole) {
                case shared_1.PlatformRole.ADMIN: {
                    return repo().findOneBy({
                        platformId: user.platformId,
                        deleted: (0, typeorm_1.IsNull)(),
                    });
                }
                case shared_1.PlatformRole.MEMBER: {
                    return repo().findOneBy({
                        ownerId: user.id,
                        platformId: user.platformId,
                        deleted: (0, typeorm_1.IsNull)(),
                    });
                }
            }
        });
    },
    getUserProjectOrThrow(ownerId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const project = yield repo().findOneBy({
                ownerId,
                deleted: (0, typeorm_1.IsNull)(),
            });
            if ((0, shared_1.isNil)(project)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityType: 'project',
                        message: `userId=${ownerId}`,
                    },
                });
            }
            return project;
        });
    },
    addProjectToPlatform(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, platformId }) {
            const query = {
                id: projectId,
                deleted: (0, typeorm_1.IsNull)(),
            };
            const update = {
                platformId,
            };
            yield repo().update(query, update);
        });
    },
    getByPlatformIdAndExternalId(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, externalId, }) {
            return repo().findOneBy({
                platformId,
                externalId,
                deleted: (0, typeorm_1.IsNull)(),
            });
        });
    },
};


/***/ }),
/* 449 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectHooks = void 0;
const tslib_1 = __webpack_require__(1);
const emptyHooks = {
    postCreate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // DO NOTHING
        });
    },
};
let hooks = emptyHooks;
exports.projectHooks = {
    setHooks(newHooks) {
        hooks = newHooks;
    },
    getHooks() {
        return hooks;
    },
};


/***/ }),
/* 450 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieceTagService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const tag_service_1 = __webpack_require__(451);
const piece_tag_entity_1 = __webpack_require__(259);
const pieceTagsRepo = (0, repo_factory_1.repoFactory)(piece_tag_entity_1.PieceTagEntity);
exports.pieceTagService = {
    set(platformId, pieceName, tags) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tagIds = yield Promise.all(tags.map(tag => tag_service_1.tagService.upsert(platformId, tag).then(tag => tag.id)));
            yield pieceTagsRepo().delete({ pieceName, platformId });
            yield pieceTagsRepo().upsert(tagIds.map(tagId => ({ id: (0, shared_1.apId)(), tagId, pieceName, platformId })), ['tagId', 'pieceName']);
        });
    },
    findByPlatform(platformId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pieceTags = yield pieceTagsRepo().findBy({ platformId });
            const tagIds = Array.from(new Set(pieceTags.map(pieceTag => pieceTag.tagId)));
            const tags = yield tag_service_1.tagService.findNamesByIds(tagIds);
            return pieceTags.reduce((acc, pieceTag) => {
                acc[pieceTag.pieceName] = acc[pieceTag.pieceName] || [];
                acc[pieceTag.pieceName].push(tags[pieceTag.tagId]);
                return acc;
            }, {});
        });
    },
    findByPlatformAndTags(platformId, pieceTags) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tagIds = yield tag_service_1.tagService.convertIdsToNames(platformId, pieceTags);
            const pieceTagEntities = yield pieceTagsRepo().findBy({
                platformId,
                tagId: (0, typeorm_1.In)(tagIds),
            });
            return pieceTagEntities.map(pieceTag => pieceTag.pieceName);
        });
    },
};


/***/ }),
/* 451 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tagService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const tag_entity_1 = __webpack_require__(260);
const repo = (0, repo_factory_1.repoFactory)(tag_entity_1.TagEntity);
exports.tagService = {
    convertIdsToNames(platformId, names) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tagEntities = yield repo().findBy({
                platformId,
                name: (0, typeorm_1.In)(names),
            });
            return tagEntities.map(tag => tag.id);
        });
    },
    findNamesByIds(tagIds) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tagEntities = yield repo().findBy({
                id: (0, typeorm_1.In)(tagIds),
            });
            return tagEntities.reduce((acc, tag) => {
                acc[tag.id] = tag.name;
                return acc;
            }, {});
        });
    },
    upsert(platformId, name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const clonedName = name.trim().toLocaleLowerCase();
            const existingTag = yield repo().findOneBy({ name: clonedName, platformId });
            if (existingTag) {
                return existingTag;
            }
            yield repo().upsert({ id: (0, shared_1.apId)(), name: clonedName, platformId }, ['name', 'platformId']);
            return repo().findOneByOrFail({ name: clonedName, platformId });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, request }) {
            var _b, _c;
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor((_b = request.cursor) !== null && _b !== void 0 ? _b : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: tag_entity_1.TagEntity,
                query: {
                    limit: (_c = request.limit) !== null && _c !== void 0 ? _c : 10,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const { data, cursor } = yield paginator.paginate(repo().createQueryBuilder().where({ platformId }));
            return pagination_utils_1.paginationHelper.createPage(data, cursor);
        });
    },
};


/***/ }),
/* 452 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.buildPaginator = void 0;
const tslib_1 = __webpack_require__(1);
const paginator_1 = tslib_1.__importDefault(__webpack_require__(453));
function buildPaginator(options) {
    const { entity, query = {}, alias = entity.options.name.toLowerCase(), } = options;
    const paginator = new paginator_1.default(entity);
    paginator.setAlias(alias);
    if (query.afterCursor) {
        paginator.setAfterCursor(query.afterCursor);
    }
    if (query.beforeCursor) {
        paginator.setBeforeCursor(query.beforeCursor);
    }
    if (query.limit) {
        paginator.setLimit(query.limit);
    }
    if (query.order) {
        paginator.setOrder(query.order);
    }
    return paginator;
}
exports.buildPaginator = buildPaginator;


/***/ }),
/* 453 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Order = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const typeorm_1 = __webpack_require__(226);
const pagination_utils_1 = __webpack_require__(454);
var Order;
(function (Order) {
    Order["ASC"] = "ASC";
    Order["DESC"] = "DESC";
})(Order || (exports.Order = Order = {}));
const PAGINATION_KEY = 'created';
class Paginator {
    constructor(entity) {
        this.entity = entity;
        this.afterCursor = null;
        this.beforeCursor = null;
        this.nextAfterCursor = null;
        this.nextBeforeCursor = null;
        this.alias = this.entity.options.name;
        this.limit = 100;
        this.order = Order.DESC;
    }
    setAlias(alias) {
        this.alias = alias;
    }
    setAfterCursor(cursor) {
        this.afterCursor = cursor;
    }
    setBeforeCursor(cursor) {
        this.beforeCursor = cursor;
    }
    setLimit(limit) {
        this.limit = limit;
    }
    setOrder(order) {
        this.order = order;
    }
    paginate(builder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const entities = yield this.appendPagingQuery(builder).getMany();
            const hasMore = entities.length > this.limit;
            if (hasMore) {
                entities.splice(entities.length - 1, 1);
            }
            if (entities.length === 0) {
                return this.toPagingResult(entities);
            }
            if (!this.hasAfterCursor() && this.hasBeforeCursor()) {
                entities.reverse();
            }
            if (this.hasBeforeCursor() || hasMore) {
                this.nextAfterCursor = this.encode(entities[entities.length - 1]);
            }
            if (this.hasAfterCursor() || (hasMore && this.hasBeforeCursor())) {
                this.nextBeforeCursor = this.encode(entities[0]);
            }
            return this.toPagingResult(entities);
        });
    }
    getCursor() {
        return {
            afterCursor: this.nextAfterCursor,
            beforeCursor: this.nextBeforeCursor,
        };
    }
    appendPagingQuery(builder) {
        const cursors = {};
        const clonedBuilder = new typeorm_1.SelectQueryBuilder(builder);
        if (this.hasAfterCursor()) {
            Object.assign(cursors, this.decode(this.afterCursor));
        }
        else if (this.hasBeforeCursor()) {
            Object.assign(cursors, this.decode(this.beforeCursor));
        }
        if (Object.keys(cursors).length > 0) {
            clonedBuilder.andWhere(new typeorm_1.Brackets((where) => this.buildCursorQuery(where, cursors)));
        }
        clonedBuilder.take(this.limit + 1);
        for (const [key, value] of Object.entries(this.buildOrder())) {
            clonedBuilder.addOrderBy(key, value);
        }
        return clonedBuilder;
    }
    buildCursorQuery(where, cursors) {
        const dbType = server_shared_1.system.get(server_shared_1.AppSystemProp.DB_TYPE);
        const operator = this.getOperator();
        let queryString;
        if (dbType === server_shared_1.DatabaseType.SQLITE3) {
            queryString = `strftime('%s', ${this.alias}.${PAGINATION_KEY}) ${operator} strftime('%s', :${PAGINATION_KEY})`;
        }
        else if (dbType === server_shared_1.DatabaseType.POSTGRES) {
            queryString = `DATE_TRUNC('second', ${this.alias}.${PAGINATION_KEY}) ${operator} DATE_TRUNC('second', :${PAGINATION_KEY}::timestamp)`;
        }
        else {
            throw new Error('Unsupported database type');
        }
        where.orWhere(queryString, cursors);
    }
    getOperator() {
        if (this.hasAfterCursor()) {
            return this.order === Order.ASC ? '>' : '<';
        }
        if (this.hasBeforeCursor()) {
            return this.order === Order.ASC ? '<' : '>';
        }
        return '=';
    }
    buildOrder() {
        let { order } = this;
        if (!this.hasAfterCursor() && this.hasBeforeCursor()) {
            order = this.flipOrder(order);
        }
        const orderByCondition = {};
        orderByCondition[`${this.alias}.${PAGINATION_KEY}`] = order;
        return orderByCondition;
    }
    hasAfterCursor() {
        return this.afterCursor !== null;
    }
    hasBeforeCursor() {
        return this.beforeCursor !== null;
    }
    encode(entity) {
        const type = this.getEntityPropertyType(PAGINATION_KEY);
        const value = (0, pagination_utils_1.encodeByType)(type, entity[PAGINATION_KEY]);
        const payload = `${PAGINATION_KEY}:${value}`;
        return (0, pagination_utils_1.btoa)(payload);
    }
    decode(cursor) {
        const cursors = {};
        const columns = (0, pagination_utils_1.atob)(cursor).split(',');
        columns.forEach((column) => {
            const [key, raw] = column.split(':');
            const type = this.getEntityPropertyType(key);
            const value = (0, pagination_utils_1.decodeByType)(type, raw);
            cursors[key] = value;
        });
        return cursors;
    }
    getEntityPropertyType(key) {
        const col = this.entity.options.columns[key];
        if (col === undefined) {
            throw new Error('entity property not found ' + key);
        }
        return col.type.toString();
    }
    flipOrder(order) {
        return order === Order.ASC ? Order.DESC : Order.ASC;
    }
    toPagingResult(entities) {
        return {
            data: entities,
            cursor: this.getCursor(),
        };
    }
}
exports["default"] = Paginator;


/***/ }),
/* 454 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.paginationHelper = exports.decodeByType = exports.encodeByType = exports.btoa = exports.atob = void 0;
const tslib_1 = __webpack_require__(1);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
function atob(value) {
    return Buffer.from(value, 'base64').toString();
}
exports.atob = atob;
function btoa(value) {
    return Buffer.from(value).toString('base64');
}
exports.btoa = btoa;
function encodeByType(type, value) {
    if (value === null)
        return null;
    switch (type) {
        case 'timestamp with time zone':
        case 'datetime':
        case 'date': {
            return (0, dayjs_1.default)(value)
                .valueOf()
                .toString();
        }
        case 'number': {
            return `${value}`;
        }
        case 'string': {
            return encodeURIComponent(value);
        }
        case 'object': {
            /**
       * if reflection type is Object, check whether an object is a date.
       * see: https://github.com/rbuckton/reflect-metadata/issues/84
       */
            if (typeof value.getTime === 'function') {
                return value.getTime().toString();
            }
            break;
        }
        default:
            break;
    }
    throw new Error(`unknown type in cursor: [${type}]${value}`);
}
exports.encodeByType = encodeByType;
function decodeByType(type, value) {
    switch (type) {
        case 'object':
        case 'timestamp with time zone':
        case 'datetime':
        case 'date': {
            const timestamp = parseInt(value, 10);
            if (Number.isNaN(timestamp)) {
                throw new Error('date column in cursor should be a valid timestamp');
            }
            return new Date(timestamp).toISOString();
        }
        case 'number': {
            const num = parseFloat(value);
            if (Number.isNaN(num)) {
                throw new Error('number column in cursor should be a valid number');
            }
            return num;
        }
        case 'string': {
            return decodeURIComponent(value);
        }
        default: {
            throw new Error(`unknown type in cursor: [${type}]${value}`);
        }
    }
}
exports.decodeByType = decodeByType;
const decode = (str) => Buffer.from(str, 'base64').toString('binary');
const encode = (str) => Buffer.from(str, 'binary').toString('base64');
function encodeNextCursor(cursor) {
    if (cursor === null) {
        return null;
    }
    return encode('next_' + cursor);
}
function encodePreviousCursor(cursor) {
    if (cursor === null) {
        return null;
    }
    return encode('prev_' + cursor);
}
exports.paginationHelper = {
    createPage(data, cursor) {
        return {
            next: encodeNextCursor(cursor === null || cursor === void 0 ? void 0 : cursor.afterCursor),
            previous: encodePreviousCursor(cursor === null || cursor === void 0 ? void 0 : cursor.beforeCursor),
            data,
        };
    },
    decodeCursor(encodedCursor) {
        if (encodedCursor === null || encodedCursor === undefined) {
            return {
                nextCursor: undefined,
                previousCursor: undefined,
            };
        }
        const decodedRawCursor = decode(encodedCursor);
        const isNext = decodedRawCursor.startsWith('next_');
        const cursor = decodedRawCursor.split('_')[1];
        return {
            nextCursor: isNext ? cursor : undefined,
            previousCursor: isNext ? undefined : cursor,
        };
    },
};


/***/ }),
/* 455 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.localPieceCache = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const async_mutex_1 = __webpack_require__(4);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const semver_1 = tslib_1.__importDefault(__webpack_require__(74));
const repo_factory_1 = __webpack_require__(224);
const piece_metadata_entity_1 = __webpack_require__(255);
let cache = [];
const repo = (0, repo_factory_1.repoFactory)(piece_metadata_entity_1.PieceMetadataEntity);
const lock = new async_mutex_1.Mutex();
exports.localPieceCache = {
    getSortedbyNameAscThenVersionDesc() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const updatedRequired = yield requireUpdate();
            if (!updatedRequired) {
                return cache;
            }
            server_shared_1.logger.info({ time: (0, dayjs_1.default)().toISOString(), file: 'localPieceCache' }, 'Syncing pieces');
            cache = yield executeWithLock(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const updatedRequiredSecondCheck = yield requireUpdate();
                if (!updatedRequiredSecondCheck) {
                    return cache;
                }
                server_shared_1.logger.info('Syncing pieces from database');
                const result = yield repo().find();
                return result.sort((a, b) => {
                    if (a.name !== b.name) {
                        return a.name.localeCompare(b.name);
                    }
                    return semver_1.default.rcompare(a.version, b.version);
                });
            }));
            return cache;
        });
    },
};
function requireUpdate() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const newestState = yield repo().createQueryBuilder().select('MAX(updated)', 'recentUpdate').addSelect('count(*)', 'count').getRawOne();
        if ((0, shared_1.isNil)(newestState)) {
            return false;
        }
        const newestInCache = cache.reduce((acc, piece) => {
            return Math.max((0, dayjs_1.default)(piece.updated).unix(), acc);
        }, 0);
        return (0, dayjs_1.default)(newestState.recentUpdate).unix() !== newestInCache || Number(newestState.count) !== cache.length;
    });
}
const executeWithLock = (methodToExecute) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const releaseLock = yield lock.acquire();
    try {
        return yield methodToExecute();
    }
    finally {
        releaseLock();
    }
});


/***/ }),
/* 456 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieceMetadataServiceHooks = exports.defaultPieceHooks = void 0;
const tslib_1 = __webpack_require__(1);
const piece_filtering_1 = __webpack_require__(457);
const piece_sorting_1 = __webpack_require__(466);
exports.defaultPieceHooks = {
    filterPieces(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const sortedPieces = (0, piece_sorting_1.sortAndOrderPieces)(params.sortBy, params.orderBy, params.pieces);
            const userBasedPieces = yield (0, piece_filtering_1.filterPiecesBasedUser)({
                categories: params.categories,
                searchQuery: params.searchQuery,
                pieces: sortedPieces,
                platformId: params.platformId,
                suggestionType: params.suggestionType,
            });
            const platformEmbeddedBasedPieces = (0, piece_filtering_1.filterPiecesBasedOnEmbedding)({
                platformId: params.platformId,
                pieces: userBasedPieces,
            });
            return platformEmbeddedBasedPieces;
        });
    },
};
let hooks = exports.defaultPieceHooks;
exports.pieceMetadataServiceHooks = {
    set(newHooks) {
        hooks = newHooks;
    },
    get() {
        return hooks;
    },
};


/***/ }),
/* 457 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.filterPiecesBasedOnEmbedding = exports.filterPiecesBasedUser = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const fuse_js_1 = tslib_1.__importDefault(__webpack_require__(458));
const platform_service_1 = __webpack_require__(459);
const pieceFilterKeys = [{
        name: 'displayName',
        weight: 3,
    }, {
        name: 'description',
        weight: 1,
    }];
const suggestionLimit = 3;
const filterPiecesBasedUser = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ searchQuery, pieces, categories, suggestionType, platformId, }) {
    return filterPiecesBasedOnFeatures(platformId, filterBasedOnCategories({
        categories,
        pieces: filterBasedOnSearchQuery({ searchQuery, pieces, suggestionType }),
    }));
});
exports.filterPiecesBasedUser = filterPiecesBasedUser;
const filterPiecesBasedOnEmbedding = (_b) => tslib_1.__awaiter(void 0, [_b], void 0, function* ({ platformId, pieces, }) {
    if ((0, shared_1.isNil)(platformId)) {
        return pieces;
    }
    const platform = yield platform_service_1.platformService.getOne(platformId);
    if ((0, shared_1.isNil)(platform)) {
        return pieces;
    }
    if (!platform.embeddingEnabled) {
        return pieces;
    }
    const isEnterprisePremiumPiece = (piece) => { var _a; return (_a = piece.categories) === null || _a === void 0 ? void 0 : _a.includes(shared_1.PieceCategory.PREMIUM); };
    const isPieceEnabledForPlatform = (piece) => isEnterprisePremiumPiece(piece) && platform.premiumPieces.includes(piece.name);
    return pieces.filter(piece => !isEnterprisePremiumPiece(piece) || isPieceEnabledForPlatform(piece));
});
exports.filterPiecesBasedOnEmbedding = filterPiecesBasedOnEmbedding;
function filterPiecesBasedOnFeatures(platformId, pieces) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if ((0, shared_1.isNil)(platformId)) {
            return pieces;
        }
        return pieces;
    });
}
const filterBasedOnSearchQuery = ({ searchQuery, pieces, suggestionType, }) => {
    if (!searchQuery) {
        return pieces;
    }
    const putActionsAndTriggersInAnArray = pieces.map((piece) => {
        const actions = Object.values(piece.actions);
        const triggers = Object.values(piece.triggers);
        return Object.assign(Object.assign({}, piece), { actions: suggestionType === shared_1.SuggestionType.ACTION || suggestionType === shared_1.SuggestionType.ACTION_AND_TRIGGER ? actions : [], triggers: suggestionType === shared_1.SuggestionType.TRIGGER || suggestionType === shared_1.SuggestionType.ACTION_AND_TRIGGER ? triggers : [] });
    });
    const pieceWithTriggersAndActionsFilterKeys = [
        ...pieceFilterKeys,
        'actions.displayName',
        'actions.description',
        'triggers.displayName',
        'triggers.description',
    ];
    const fuse = new fuse_js_1.default(putActionsAndTriggersInAnArray, {
        isCaseSensitive: false,
        shouldSort: true,
        keys: pieceWithTriggersAndActionsFilterKeys,
        threshold: 0.2,
    });
    return fuse
        .search(searchQuery)
        .map(({ item }) => {
        const suggestedActions = searchForSuggestion(item.actions, searchQuery);
        const suggestedTriggers = searchForSuggestion(item.triggers, searchQuery);
        return Object.assign(Object.assign({}, item), { actions: suggestedActions, triggers: suggestedTriggers });
    });
};
const filterBasedOnCategories = ({ categories, pieces, }) => {
    if (!categories) {
        return pieces;
    }
    return pieces.filter((p) => {
        return categories.some((item) => { var _a; return ((_a = p.categories) !== null && _a !== void 0 ? _a : []).includes(item); });
    });
};
function searchForSuggestion(actions, searchQuery) {
    const nestedFuse = new fuse_js_1.default(actions, {
        isCaseSensitive: false,
        shouldSort: true,
        keys: ['displayName', 'description'],
        threshold: 0.2,
    });
    const suggestions = nestedFuse.search(searchQuery, { limit: suggestionLimit }).map(({ item }) => item);
    return suggestions.reduce((filteredSuggestions, suggestion) => {
        filteredSuggestions[suggestion.name] = suggestion;
        return filteredSuggestions;
    }, {});
}


/***/ }),
/* 458 */
/***/ ((module) => {

module.exports = require("fuse.js");

/***/ }),
/* 459 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const theme_1 = __webpack_require__(460);
const user_service_1 = __webpack_require__(462);
const platform_entity_1 = __webpack_require__(256);
const repo = (0, repo_factory_1.repoFactory)(platform_entity_1.PlatformEntity);
exports.platformService = {
    hasAnyPlatforms() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const count = yield repo().count();
            return count > 0;
        });
    },
    create(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { ownerId, name, primaryColor, logoIconUrl, fullLogoUrl, favIconUrl, } = params;
            const newPlatform = {
                id: (0, shared_1.apId)(),
                ownerId,
                name,
                primaryColor: primaryColor !== null && primaryColor !== void 0 ? primaryColor : theme_1.defaultTheme.colors.primary.default,
                logoIconUrl: logoIconUrl !== null && logoIconUrl !== void 0 ? logoIconUrl : theme_1.defaultTheme.logos.logoIconUrl,
                fullLogoUrl: fullLogoUrl !== null && fullLogoUrl !== void 0 ? fullLogoUrl : theme_1.defaultTheme.logos.fullLogoUrl,
                favIconUrl: favIconUrl !== null && favIconUrl !== void 0 ? favIconUrl : theme_1.defaultTheme.logos.favIconUrl,
                embeddingEnabled: false,
                defaultLocale: shared_1.LocalesEnum.ENGLISH,
                emailAuthEnabled: true,
                auditLogEnabled: false,
                filteredPieceNames: [],
                enforceAllowedAuthDomains: false,
                allowedAuthDomains: [],
                filteredPieceBehavior: shared_1.FilteredPieceBehavior.BLOCKED,
                showPoweredBy: false,
                ssoEnabled: false,
                federatedAuthProviders: {},
                cloudAuthEnabled: true,
                flowIssuesEnabled: false,
                gitSyncEnabled: false,
                managePiecesEnabled: false,
                manageTemplatesEnabled: false,
                manageProjectsEnabled: false,
                projectRolesEnabled: false,
                customDomainsEnabled: false,
                apiKeysEnabled: false,
                customAppearanceEnabled: false,
                alertsEnabled: false,
                premiumPieces: [],
            };
            const savedPlatform = yield repo().save(newPlatform);
            yield user_service_1.userService.addOwnerToPlatform({
                id: ownerId,
                platformId: savedPlatform.id,
            });
            return savedPlatform;
        });
    },
    getOldestPlatform() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return repo().findOne({
                where: {},
                order: {
                    created: 'ASC',
                },
            });
        });
    },
    update(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const platform = yield this.getOneOrThrow(params.id);
            const updatedPlatform = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, platform), (0, shared_1.spreadIfDefined)('name', params.name)), (0, shared_1.spreadIfDefined)('auditLogEnabled', params.auditLogEnabled)), (0, shared_1.spreadIfDefined)('primaryColor', params.primaryColor)), (0, shared_1.spreadIfDefined)('logoIconUrl', params.logoIconUrl)), (0, shared_1.spreadIfDefined)('fullLogoUrl', params.fullLogoUrl)), (0, shared_1.spreadIfDefined)('favIconUrl', params.favIconUrl)), (0, shared_1.spreadIfDefined)('filteredPieceNames', params.filteredPieceNames)), (0, shared_1.spreadIfDefined)('filteredPieceBehavior', params.filteredPieceBehavior)), (0, shared_1.spreadIfDefined)('smtpHost', params.smtpHost)), (0, shared_1.spreadIfDefined)('smtpPort', params.smtpPort)), (0, shared_1.spreadIfDefined)('federatedAuthProviders', params.federatedAuthProviders)), (0, shared_1.spreadIfDefined)('smtpUser', params.smtpUser)), (0, shared_1.spreadIfDefined)('smtpPassword', params.smtpPassword)), (0, shared_1.spreadIfDefined)('smtpSenderEmail', params.smtpSenderEmail)), (0, shared_1.spreadIfDefined)('smtpUseSSL', params.smtpUseSSL)), (0, shared_1.spreadIfDefined)('cloudAuthEnabled', params.cloudAuthEnabled)), (0, shared_1.spreadIfDefined)('defaultLocale', params.defaultLocale)), (0, shared_1.spreadIfDefined)('showPoweredBy', params.showPoweredBy)), (0, shared_1.spreadIfDefined)('gitSyncEnabled', params.gitSyncEnabled)), (0, shared_1.spreadIfDefined)('embeddingEnabled', params.embeddingEnabled)), (0, shared_1.spreadIfDefined)('ssoEnabled', params.ssoEnabled)), (0, shared_1.spreadIfDefined)('emailAuthEnabled', params.emailAuthEnabled)), (0, shared_1.spreadIfDefined)('enforceAllowedAuthDomains', params.enforceAllowedAuthDomains)), (0, shared_1.spreadIfDefined)('flowIssuesEnabled', params.flowIssuesEnabled)), (0, shared_1.spreadIfDefined)('allowedAuthDomains', params.allowedAuthDomains)), (0, shared_1.spreadIfDefined)('manageProjectsEnabled', params.manageProjectsEnabled)), (0, shared_1.spreadIfDefined)('managePiecesEnabled', params.managePiecesEnabled)), (0, shared_1.spreadIfDefined)('manageTemplatesEnabled', params.manageTemplatesEnabled)), (0, shared_1.spreadIfDefined)('apiKeysEnabled', params.apiKeysEnabled)), (0, shared_1.spreadIfDefined)('projectRolesEnabled', params.projectRolesEnabled)), (0, shared_1.spreadIfDefined)('customDomainsEnabled', params.customDomainsEnabled)), (0, shared_1.spreadIfDefined)('customAppearanceEnabled', params.customAppearanceEnabled)), (0, shared_1.spreadIfDefined)('alertsEnabled', params.alertsEnabled)), (0, shared_1.spreadIfDefined)('premiumPieces', params.premiumPieces));
            return repo().save(updatedPlatform);
        });
    },
    getOneOrThrow(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const platform = yield repo().findOneBy({
                id,
            });
            if ((0, shared_1.isNil)(platform)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityId: id,
                        entityType: 'Platform',
                        message: 'Platform not found',
                    },
                });
            }
            return Object.assign({}, platform);
        });
    },
    getOne(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return repo().findOneBy({
                id,
            });
        });
    },
};


/***/ }),
/* 460 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultTheme = exports.generateTheme = void 0;
const tslib_1 = __webpack_require__(1);
const tinycolor2_1 = tslib_1.__importDefault(__webpack_require__(461));
function generateColors(hex) {
    const baseLight = (0, tinycolor2_1.default)('#ffffff');
    const baseDark = (0, tinycolor2_1.default)(hex).toHex();
    const baseTriad = (0, tinycolor2_1.default)(hex).tetrad();
    return {
        '50': tinycolor2_1.default.mix(baseLight, hex, 12).toHexString(),
        '100': tinycolor2_1.default.mix(baseLight, hex, 30).toHexString(),
        '200': tinycolor2_1.default.mix(baseLight, hex, 50).toHexString(),
        '300': tinycolor2_1.default.mix(baseLight, hex, 70).toHexString(),
        '400': tinycolor2_1.default.mix(baseLight, hex, 85).toHexString(),
        '500': tinycolor2_1.default.mix(baseLight, hex, 100).toHexString(),
        '600': tinycolor2_1.default.mix(baseDark, hex, 87).toHexString(),
        '700': tinycolor2_1.default.mix(baseDark, hex, 70).toHexString(),
        '800': tinycolor2_1.default.mix(baseDark, hex, 54).toHexString(),
        '900': tinycolor2_1.default.mix(baseDark, hex, 25).toHexString(),
        A100: tinycolor2_1.default
            .mix(baseDark, baseTriad[3], 15)
            .saturate(80)
            .lighten(65)
            .toHexString(),
        A200: tinycolor2_1.default
            .mix(baseDark, baseTriad[3], 15)
            .saturate(80)
            .lighten(55)
            .toHexString(),
        A400: tinycolor2_1.default
            .mix(baseDark, baseTriad[3], 15)
            .saturate(100)
            .lighten(45)
            .toHexString(),
        A700: tinycolor2_1.default
            .mix(baseDark, baseTriad[3], 15)
            .saturate(100)
            .lighten(40)
            .toHexString(),
        contrast: {
            '50': '#000000',
            '100': '#000000',
            '200': '#000000',
            '300': '#000000',
            '400': '#ffffff',
            '500': '#ffffff',
            '600': '#ffffff',
            '700': '#ffffff',
            '800': '#ffffff',
            '900': '#ffffff',
            A100: '#000000',
            A200: '#000000',
            A400: '#000000',
            A700: '#000000',
        },
    };
}
function generateColorVariations(defaultColor) {
    const defaultColorObj = (0, tinycolor2_1.default)(defaultColor);
    const darkColor = defaultColorObj.clone().darken(2);
    const baseLight = (0, tinycolor2_1.default)('#ffffff');
    const lightColor = tinycolor2_1.default
        .mix(baseLight, defaultColorObj.toHex(), 12)
        .toHexString();
    const mediumColor = defaultColorObj.clone().lighten(26);
    return {
        default: defaultColorObj.toHexString(),
        dark: darkColor.toHexString(),
        light: lightColor,
        medium: mediumColor.toHexString(),
    };
}
function generateSelectionColor(defaultColor) {
    const defaultColorObj = (0, tinycolor2_1.default)(defaultColor);
    const lightColor = defaultColorObj.lighten(8);
    return lightColor.toHexString();
}
function generateTheme({ primaryColor, fullLogoUrl, favIconUrl, logoIconUrl, websiteName, }) {
    return {
        websiteName,
        colors: {
            avatar: '#515151',
            'blue-link': '#1890ff',
            danger: '#f94949',
            primary: generateColorVariations(primaryColor),
            warn: {
                default: '#f78a3b',
                light: '#fff6e4',
                dark: '#cc8805',
            },
            success: {
                default: '#14ae5c',
                light: '#3cad71',
            },
            selection: generateSelectionColor(primaryColor),
        },
        logos: {
            fullLogoUrl,
            favIconUrl,
            logoIconUrl,
        },
        materialPrimaryPalette: generateColors(primaryColor),
        materialWarnPalette: {
            '50': '#fee5e5',
            '100': '#fcbebe',
            '200': '#fa9393',
            '300': '#f76767',
            '400': '#f64747',
            '500': '#f42626',
            '600': '#f32222',
            '700': '#f11c1c',
            '800': '#ef1717',
            '900': '#ec0d0d',
            'A100': '#ffffff',
            'A200': '#ffe4e4',
            'A400': '#ffb1b1',
            'A700': '#ff9797',
            contrast: {
                '50': '#000000',
                '100': '#000000',
                '200': '#000000',
                '300': '#000000',
                '400': '#000000',
                '500': '#ffffff',
                '600': '#ffffff',
                '700': '#ffffff',
                '800': '#ffffff',
                '900': '#ffffff',
                A100: '#000000',
                A200: '#000000',
                A400: '#000000',
                A700: '#000000',
            },
        },
    };
}
exports.generateTheme = generateTheme;
exports.defaultTheme = generateTheme({
    primaryColor: '#6e41e2',
    websiteName: 'Activepieces',
    fullLogoUrl: 'https://cdn.activepieces.com/brand/full-logo.png',
    favIconUrl: 'https://cdn.activepieces.com/brand/favicon.ico',
    logoIconUrl: 'https://cdn.activepieces.com/brand/logo.svg',
});


/***/ }),
/* 461 */
/***/ ((module) => {

module.exports = require("tinycolor2");

/***/ }),
/* 462 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.userService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const typeorm_1 = __webpack_require__(226);
const password_hasher_1 = __webpack_require__(463);
const repo_factory_1 = __webpack_require__(224);
const user_entity_1 = __webpack_require__(261);
const repo = (0, repo_factory_1.repoFactory)(user_entity_1.UserEntity);
exports.userService = {
    create(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const hashedPassword = yield password_hasher_1.passwordHasher.hash(params.password);
            const user = Object.assign(Object.assign({ id: (0, shared_1.apId)() }, params), { platformRole: params.platformRole, status: shared_1.UserStatus.ACTIVE, password: hashedPassword });
            return repo().save(user);
        });
    },
    update(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, status, platformId, platformRole }) {
            const updateResult = yield repo().update({
                id,
                platformId,
            }, Object.assign(Object.assign({}, (0, shared_1.spreadIfDefined)('status', status)), (0, shared_1.spreadIfDefined)('platformRole', platformRole)));
            if (updateResult.affected !== 1) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityType: 'user',
                        entityId: id,
                    },
                });
            }
            return repo().findOneByOrFail({
                id,
                platformId,
            });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId }) {
            const users = yield repo().findBy({
                platformId,
            });
            return {
                data: users,
                next: null,
                previous: null,
            };
        });
    },
    verify(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            const user = yield repo().findOneByOrFail({ id });
            if (user.verified) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.AUTHORIZATION,
                    params: {
                        message: 'User is already verified',
                    },
                });
            }
            return repo().save(Object.assign(Object.assign({}, user), { verified: true }));
        });
    },
    get(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            return repo().findOneBy({ id });
        });
    },
    getOneOrFail(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            return repo().findOneByOrFail({ id });
        });
    },
    getMetaInfo(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            const user = yield this.get({ id });
            if ((0, shared_1.isNil)(user)) {
                return null;
            }
            return {
                id: user.id,
                email: user.email,
                platformId: user.platformId,
                firstName: user.firstName,
                platformRole: user.platformRole,
                lastName: user.lastName,
            };
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, platformId }) {
            yield repo().delete({
                id,
                platformId,
            });
        });
    },
    getUsersByEmail(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email }) {
            return repo()
                .createQueryBuilder()
                .andWhere('LOWER(email) = LOWER(:email)', { email })
                .getMany();
        });
    },
    getByPlatformAndEmail(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, email, }) {
            const platformWhereQuery = platformId
                ? { platformId }
                : { platformId: (0, typeorm_1.IsNull)() };
            return repo()
                .createQueryBuilder()
                .where(platformWhereQuery)
                .andWhere('LOWER(email) = LOWER(:email)', { email })
                .getOne();
        });
    },
    getByPlatformAndExternalId(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, externalId, }) {
            return repo().findOneBy({
                platformId,
                externalId,
            });
        });
    },
    updatePassword(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, newPassword, }) {
            const hashedPassword = yield password_hasher_1.passwordHasher.hash(newPassword);
            yield repo().update(id, {
                updated: (0, dayjs_1.default)().toISOString(),
                password: hashedPassword,
            });
        });
    },
    addOwnerToPlatform(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, platformId, }) {
            yield repo().update(id, {
                updated: (0, dayjs_1.default)().toISOString(),
                platformRole: shared_1.PlatformRole.ADMIN,
                platformId,
            });
        });
    },
};


/***/ }),
/* 463 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.passwordHasher = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const bcrypt_1 = tslib_1.__importDefault(__webpack_require__(464));
const firebase_scrypt_1 = __webpack_require__(465);
const SALT_ROUNDS = 10;
const SCRYPT_SEPARATOR = '~';
exports.passwordHasher = {
    hash: (plainTextPassword) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return bcrypt_1.default.hash(plainTextPassword, SALT_ROUNDS);
    }),
    compare: (plainTextPassword, hashedPassword) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        (0, shared_1.assertNotNullOrUndefined)(plainTextPassword, 'plainTextPassword');
        (0, shared_1.assertNotNullOrUndefined)(hashedPassword, 'hashedPassword');
        if (isBcryptHash(hashedPassword)) {
            return bcrypt_1.default.compare(plainTextPassword, hashedPassword);
        }
        if (isScrypt(hashedPassword)) {
            const salt = hashedPassword.split(SCRYPT_SEPARATOR)[1];
            const rawHashedPassword = hashedPassword
                .split(SCRYPT_SEPARATOR)[0]
                .substring('$scrypt$'.length);
            return compareScrypt(plainTextPassword, salt, rawHashedPassword);
        }
        return false;
    }),
};
function compareScrypt(password, salt, hashedPassword) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const firebaseParameter = JSON.parse(server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.FIREBASE_HASH_PARAMETERS));
        const firebaseScrypt = new firebase_scrypt_1.FirebaseScrypt(firebaseParameter);
        return firebaseScrypt.verify(password, salt, hashedPassword);
    });
}
function isBcryptHash(hash) {
    return hash.startsWith('$2');
}
function isScrypt(hash) {
    return hash.startsWith('$scrypt$');
}


/***/ }),
/* 464 */
/***/ ((module) => {

module.exports = require("bcrypt");

/***/ }),
/* 465 */
/***/ ((module) => {

module.exports = require("firebase-scrypt");

/***/ }),
/* 466 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sortAndOrderPieces = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const sortAndOrderPieces = (sortBy, orderBy, pieces) => {
    const sortByDefault = sortBy !== null && sortBy !== void 0 ? sortBy : shared_1.PieceSortBy.NAME;
    const orderByDefault = orderBy !== null && orderBy !== void 0 ? orderBy : shared_1.PieceOrderBy.ASC;
    const sortedPiece = sortPieces(sortByDefault, pieces);
    return reverseIfDesc(orderByDefault, sortedPiece);
};
exports.sortAndOrderPieces = sortAndOrderPieces;
const sortPieces = (sortBy, pieces) => {
    const sortByDefault = sortBy !== null && sortBy !== void 0 ? sortBy : shared_1.PieceSortBy.NAME;
    switch (sortByDefault) {
        case shared_1.PieceSortBy.POPULARITY: {
            return sortByPopularity(pieces);
        }
        case shared_1.PieceSortBy.NAME: {
            return sortByName(pieces);
        }
        case shared_1.PieceSortBy.UPDATED: {
            return sortByUpdated(pieces);
        }
        case shared_1.PieceSortBy.CREATED: {
            return sortByCreated(pieces);
        }
    }
};
const reverseIfDesc = (orderBy, pieces) => {
    if (orderBy === shared_1.PieceOrderBy.ASC) {
        return pieces;
    }
    return pieces.reverse();
};
const sortByPopularity = (pieces) => {
    return pieces.sort((a, b) => a.projectUsage - b.projectUsage);
};
const sortByName = (pieces) => {
    return pieces.sort((a, b) => a.displayName.toLocaleLowerCase().localeCompare(b.displayName.toLocaleLowerCase()));
};
const sortByCreated = (pieces) => {
    return pieces.sort((a, b) => (0, dayjs_1.default)(a.created).unix() - (0, dayjs_1.default)(b.created).unix());
};
const sortByUpdated = (pieces) => {
    return pieces.sort((a, b) => (0, dayjs_1.default)(a.updated).unix() - (0, dayjs_1.default)(b.updated).unix());
};


/***/ }),
/* 467 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilePieceMetadataService = void 0;
const tslib_1 = __webpack_require__(1);
const node_path_1 = __webpack_require__(112);
const node_process_1 = __webpack_require__(113);
const import_fresh_webpack_1 = tslib_1.__importDefault(__webpack_require__(468));
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const nanoid_1 = __webpack_require__(24);
const hooks_1 = __webpack_require__(456);
const _1 = __webpack_require__(222);
const loadPiecesMetadata = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const pieces = yield findAllPieces();
    return pieces.sort((a, b) => a.displayName.toUpperCase().localeCompare(b.displayName.toUpperCase()));
});
function findAllPieces() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const pieces = yield loadPiecesFromFolder((0, node_path_1.resolve)((0, node_process_1.cwd)(), 'dist', 'packages', 'pieces'));
        const enterprisePieces = server_shared_1.system.getEdition() === shared_1.ApEdition.ENTERPRISE ? yield loadPiecesFromFolder((0, node_path_1.resolve)((0, node_process_1.cwd)(), 'dist', 'packages', 'ee', 'pieces')) : [];
        return [...pieces, ...enterprisePieces];
    });
}
function loadPiecesFromFolder(folderPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const paths = yield server_shared_1.filePiecesUtils.findAllPiecesFolder(folderPath);
            const pieces = yield Promise.all(paths.map((p) => loadPieceFromFolder(p)));
            return pieces.filter((p) => p !== null);
        }
        catch (e) {
            const err = e;
            server_shared_1.logger.warn({ name: 'FilePieceMetadataService#loadPiecesFromFolder', message: err.message, stack: err.stack });
            return [];
        }
    });
}
function loadPieceFromFolder(folderPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const packageJson = (0, import_fresh_webpack_1.default)((0, node_path_1.join)(folderPath, 'package.json'));
            const module = (0, import_fresh_webpack_1.default)((0, node_path_1.join)(folderPath, 'src', 'index'));
            const { name: pieceName, version: pieceVersion } = packageJson;
            const piece = (0, shared_1.extractPieceFromModule)({
                module,
                pieceName,
                pieceVersion,
            });
            return Object.assign(Object.assign({}, piece.metadata()), { name: pieceName, version: pieceVersion, authors: piece.authors, directoryPath: folderPath });
        }
        catch (ex) {
            server_shared_1.logger.warn({ name: 'FilePieceMetadataService#loadPieceFromFolder', message: ex }, 'Failed to load piece from folder');
            server_shared_1.exceptionHandler.handle(ex);
        }
        return null;
    });
}
const FilePieceMetadataService = () => {
    return {
        list(params) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { projectId } = params;
                const originalPiecesMetadata = (yield loadPiecesMetadata()).map((p) => {
                    return Object.assign(Object.assign({ id: (0, nanoid_1.nanoid)() }, p), { projectUsage: 0, pieceType: shared_1.PieceType.OFFICIAL, packageType: shared_1.PackageType.REGISTRY, created: new Date().toISOString(), updated: new Date().toISOString() });
                });
                const pieces = yield hooks_1.pieceMetadataServiceHooks.get().filterPieces(Object.assign(Object.assign({}, params), { pieces: originalPiecesMetadata, suggestionType: params.suggestionType }));
                const filteredPieces = pieces.map((p) => toPieceMetadataModel({
                    pieceMetadata: p,
                    projectId,
                }));
                return (0, _1.toPieceMetadataModelSummary)(filteredPieces, originalPiecesMetadata, params.suggestionType);
            });
        },
        updateUsage() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                throw new Error('Updating pieces is not supported in development mode');
            });
        },
        getVersions(params) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const piecesMetadata = yield loadPiecesMetadata();
                const pieceMetadata = piecesMetadata.find((p) => p.name === params.name);
                return (pieceMetadata === null || pieceMetadata === void 0 ? void 0 : pieceMetadata.version) ? { [pieceMetadata.version]: {} } : {};
            });
        },
        getOrThrow(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ name, version, projectId, }) {
                const piecesMetadata = yield loadPiecesMetadata();
                const pieceMetadata = piecesMetadata.find((p) => p.name === name);
                if ((0, shared_1.isNil)(pieceMetadata)) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.PIECE_NOT_FOUND,
                        params: {
                            pieceName: name,
                            pieceVersion: version,
                            message: 'Pieces is not found in file system',
                        },
                    });
                }
                return toPieceMetadataModel({
                    pieceMetadata,
                    projectId,
                });
            });
        },
        delete() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                throw new Error('Deleting pieces is not supported in development mode');
            });
        },
        create() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                throw new Error('Creating pieces is not supported in development mode');
            });
        },
        getExactPieceVersion(_a) {
            return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, name, version }) {
                const isExactVersion = shared_1.EXACT_VERSION_PATTERN.test(version);
                if (isExactVersion) {
                    return version;
                }
                const pieceMetadata = yield this.getOrThrow({
                    projectId,
                    name,
                    version,
                });
                return pieceMetadata.version;
            });
        },
    };
};
exports.FilePieceMetadataService = FilePieceMetadataService;
const toPieceMetadataModel = ({ pieceMetadata, projectId, }) => {
    return {
        name: pieceMetadata.name,
        displayName: pieceMetadata.displayName,
        description: pieceMetadata.description,
        logoUrl: pieceMetadata.logoUrl,
        version: pieceMetadata.version,
        auth: pieceMetadata.auth,
        projectUsage: 0,
        minimumSupportedRelease: pieceMetadata.minimumSupportedRelease,
        maximumSupportedRelease: pieceMetadata.maximumSupportedRelease,
        actions: pieceMetadata.actions,
        authors: pieceMetadata.authors,
        categories: pieceMetadata.categories,
        triggers: pieceMetadata.triggers,
        directoryPath: pieceMetadata.directoryPath,
        projectId,
        packageType: shared_1.PackageType.REGISTRY,
        pieceType: shared_1.PieceType.OFFICIAL,
    };
};


/***/ }),
/* 468 */
/***/ ((module) => {

module.exports = require("@activepieces/import-fresh-webpack");

/***/ }),
/* 469 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appConnectionModule = void 0;
const tslib_1 = __webpack_require__(1);
const authorization_1 = __webpack_require__(470);
const app_connection_worker_controller_1 = __webpack_require__(471);
const app_connection_controller_1 = __webpack_require__(516);
const appConnectionModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    yield app.register(app_connection_controller_1.appConnectionController, {
        prefix: '/v1/app-connections',
    });
    yield app.register(app_connection_worker_controller_1.appConnectionWorkerController, {
        prefix: '/v1/worker/app-connections',
    });
});
exports.appConnectionModule = appConnectionModule;


/***/ }),
/* 470 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.entitiesMustBeOwnedByCurrentProject = exports.extractResourceName = exports.allowWorkersOnly = void 0;
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
// TODO REMOVE
const allowWorkersOnly = (request, _res, done) => {
    if (request.principal.type !== shared_1.PrincipalType.ENGINE) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.AUTHORIZATION,
            params: {},
        });
    }
    done();
};
exports.allowWorkersOnly = allowWorkersOnly;
function extractResourceName(url) {
    const urlPath = url.split('?')[0];
    const resourceRegex = /\/v1\/(.+?)(\/|$)/;
    const resourceMatch = urlPath.match(resourceRegex);
    const resource = resourceMatch ? resourceMatch[1] : undefined;
    return resource;
}
exports.extractResourceName = extractResourceName;
/**
 * Throws an authz error if response entities contain a `projectId` property and
 * the `projectId` property value does not match the principal's `projectId`.
 * Otherwise, does nothing.
 */
const entitiesMustBeOwnedByCurrentProject = (request, _response, payload, done) => {
    server_shared_1.logger.trace({ payload, principal: request.principal, route: request.routeConfig }, 'entitiesMustBeOwnedByCurrentProject');
    if ((0, shared_1.isObject)(payload)) {
        const principalProjectId = request.principal.projectId;
        let verdict = 'ALLOW';
        if ('projectId' in payload) {
            if (payload.projectId !== principalProjectId) {
                verdict = 'DENY';
            }
        }
        else if ('data' in payload && Array.isArray(payload.data)) {
            const someEntityNotOwnedByCurrentProject = payload.data.some((entity) => {
                return 'projectId' in entity && entity.projectId !== principalProjectId;
            });
            if (someEntityNotOwnedByCurrentProject) {
                verdict = 'DENY';
            }
        }
        if (verdict === 'DENY') {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHORIZATION,
                params: {
                    message: 'not owned by current project',
                },
            });
        }
    }
    done();
};
exports.entitiesMustBeOwnedByCurrentProject = entitiesMustBeOwnedByCurrentProject;


/***/ }),
/* 471 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appConnectionWorkerController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const authorization_1 = __webpack_require__(470);
const app_connection_service_1 = __webpack_require__(473);
const appConnectionWorkerController = (app, _opts, done) => {
    app.addHook('preHandler', authorization_1.allowWorkersOnly);
    app.get('/:connectionName', GetAppConnectionRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const appConnection = yield app_connection_service_1.appConnectionService.getOne({
            projectId: request.principal.projectId,
            name: request.params.connectionName,
        });
        if ((0, shared_1.isNil)(appConnection)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                params: {
                    entityId: `connectionName=${request.params.connectionName}`,
                    entityType: 'AppConnection',
                },
            });
        }
        return appConnection;
    }));
    done();
};
exports.appConnectionWorkerController = appConnectionWorkerController;
const GetAppConnectionRequest = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            connectionName: type_provider_typebox_1.Type.String(),
        }),
    },
};


/***/ }),
/* 472 */
/***/ ((module) => {

module.exports = require("@fastify/type-provider-typebox");

/***/ }),
/* 473 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appConnectionService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const server_worker_1 = __webpack_require__(474);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const encryption_1 = __webpack_require__(299);
const engine_helper_1 = __webpack_require__(508);
const lock_1 = __webpack_require__(512);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const piece_metadata_service_1 = __webpack_require__(222);
const app_connection_entity_1 = __webpack_require__(227);
const oauth2_1 = __webpack_require__(218);
const oauth2_util_1 = __webpack_require__(221);
const repo = (0, repo_factory_1.repoFactory)(app_connection_entity_1.AppConnectionEntity);
exports.appConnectionService = {
    validateConnectionName(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ connectionName, projectId }) {
            //test regex on connection name
            const regex = new RegExp(`^${shared_1.connectionNameRegex}$`);
            if (!regex.test(connectionName)) {
                return {
                    isValid: false,
                    error: 'Connection name is invalid',
                };
            }
            const connection = yield repo().findOneBy({ name: connectionName, projectId });
            const isValid = (0, shared_1.isNil)(connection);
            return {
                isValid,
                error: isValid ? undefined : 'Connection name already exists',
            };
        });
    },
    upsert(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const { projectId, request } = params;
            const validatedConnectionValue = yield validateConnectionValue({
                connection: request,
                projectId,
            });
            const encryptedConnectionValue = encryption_1.encryptUtils.encryptObject(Object.assign(Object.assign({}, validatedConnectionValue), request.value));
            const existingConnection = yield repo().findOneBy({
                name: request.name,
                projectId,
            });
            const connection = Object.assign(Object.assign({}, request), { status: shared_1.AppConnectionStatus.ACTIVE, value: encryptedConnectionValue, id: (_a = existingConnection === null || existingConnection === void 0 ? void 0 : existingConnection.id) !== null && _a !== void 0 ? _a : (0, shared_1.apId)(), projectId });
            yield repo().upsert(connection, ['name', 'projectId']);
            const updatedConnection = yield repo().findOneByOrFail({
                name: request.name,
                projectId,
            });
            return decryptConnection(updatedConnection);
        });
    },
    getOne(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, name, }) {
            const encryptedAppConnection = yield repo().findOneBy({
                projectId,
                name,
            });
            if ((0, shared_1.isNil)(encryptedAppConnection)) {
                return encryptedAppConnection;
            }
            const appConnection = decryptConnection(encryptedAppConnection);
            if (!needRefresh(appConnection)) {
                return oauth2_util_1.oauth2Util.removeRefreshTokenAndClientSecret(appConnection);
            }
            const refreshedConnection = yield lockAndRefreshConnection({ projectId, name });
            if ((0, shared_1.isNil)(refreshedConnection)) {
                return null;
            }
            return oauth2_util_1.oauth2Util.removeRefreshTokenAndClientSecret(refreshedConnection);
        });
    },
    getOneOrThrow(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const connectionById = yield repo().findOneBy({
                id: params.id,
                projectId: params.projectId,
            });
            if ((0, shared_1.isNil)(connectionById)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityType: 'AppConnection',
                        entityId: params.id,
                    },
                });
            }
            return (yield this.getOne({
                projectId: params.projectId,
                name: connectionById.name,
            }));
        });
    },
    delete(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield repo().delete(params);
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, pieceName, cursorRequest, name, limit, }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: app_connection_entity_1.AppConnectionEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const querySelector = {
                projectId,
            };
            if (!(0, shared_1.isNil)(pieceName)) {
                querySelector.pieceName = (0, typeorm_1.Equal)(pieceName);
            }
            if (!(0, shared_1.isNil)(name)) {
                querySelector.name = (0, typeorm_1.ILike)(`%${name}%`);
            }
            const queryBuilder = repo()
                .createQueryBuilder('app_connection')
                .where(querySelector);
            const { data, cursor } = yield paginator.paginate(queryBuilder);
            const promises = [];
            data.forEach((encryptedConnection) => {
                const apConnection = decryptConnection(encryptedConnection);
                promises.push(new Promise((resolve) => {
                    return resolve(apConnection);
                }));
            });
            const refreshConnections = yield Promise.all(promises);
            return pagination_utils_1.paginationHelper.createPage(refreshConnections, cursor);
        });
    },
    countByProject(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId }) {
            return repo().countBy({ projectId });
        });
    },
};
const validateConnectionValue = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { connection, projectId } = params;
    switch (connection.value.type) {
        case shared_1.AppConnectionType.PLATFORM_OAUTH2: {
            const tokenUrl = yield oauth2_util_1.oauth2Util.getOAuth2TokenUrl({
                projectId,
                pieceName: connection.pieceName,
                props: connection.value.props,
            });
            return oauth2_1.oauth2Handler[connection.value.type].claim({
                projectId,
                pieceName: connection.pieceName,
                request: {
                    grantType: shared_1.OAuth2GrantType.AUTHORIZATION_CODE,
                    code: connection.value.code,
                    tokenUrl,
                    clientId: connection.value.client_id,
                    props: connection.value.props,
                    authorizationMethod: connection.value.authorization_method,
                    codeVerifier: connection.value.code_challenge,
                    redirectUrl: connection.value.redirect_url,
                },
            });
        }
        case shared_1.AppConnectionType.CLOUD_OAUTH2: {
            const tokenUrl = yield oauth2_util_1.oauth2Util.getOAuth2TokenUrl({
                projectId,
                pieceName: connection.pieceName,
                props: connection.value.props,
            });
            return oauth2_1.oauth2Handler[connection.value.type].claim({
                projectId,
                pieceName: connection.pieceName,
                request: {
                    tokenUrl,
                    grantType: shared_1.OAuth2GrantType.AUTHORIZATION_CODE,
                    code: connection.value.code,
                    props: connection.value.props,
                    clientId: connection.value.client_id,
                    authorizationMethod: connection.value.authorization_method,
                    codeVerifier: connection.value.code_challenge,
                },
            });
        }
        case shared_1.AppConnectionType.OAUTH2: {
            const tokenUrl = yield oauth2_util_1.oauth2Util.getOAuth2TokenUrl({
                projectId,
                pieceName: connection.pieceName,
                props: connection.value.props,
            });
            return oauth2_1.oauth2Handler[connection.value.type].claim({
                projectId,
                pieceName: connection.pieceName,
                request: {
                    tokenUrl,
                    code: connection.value.code,
                    clientId: connection.value.client_id,
                    props: connection.value.props,
                    grantType: connection.value.grant_type,
                    redirectUrl: connection.value.redirect_url,
                    clientSecret: connection.value.client_secret,
                    authorizationMethod: connection.value.authorization_method,
                    codeVerifier: connection.value.code_challenge,
                },
            });
        }
        case shared_1.AppConnectionType.CUSTOM_AUTH:
        case shared_1.AppConnectionType.BASIC_AUTH:
        case shared_1.AppConnectionType.SECRET_TEXT:
            yield engineValidateAuth({
                pieceName: connection.pieceName,
                projectId,
                auth: connection.value,
            });
    }
    return connection.value;
});
function decryptConnection(encryptedConnection) {
    const value = encryption_1.encryptUtils.decryptObject(encryptedConnection.value);
    const connection = Object.assign(Object.assign({}, encryptedConnection), { value });
    return connection;
}
const engineValidateAuth = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const environment = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT);
    if (environment === shared_1.ApEnvironment.TESTING) {
        return;
    }
    const { pieceName, auth, projectId } = params;
    const pieceMetadata = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
        name: pieceName,
        projectId,
        version: undefined,
    });
    const engineToken = yield (0, engine_helper_1.generateEngineToken)({
        projectId,
    });
    const engineResponse = yield server_worker_1.engineRunner.executeValidateAuth(engineToken, {
        piece: yield (0, piece_metadata_service_1.getPiecePackage)(projectId, {
            pieceName,
            pieceVersion: pieceMetadata.version,
            pieceType: pieceMetadata.pieceType,
            packageType: pieceMetadata.packageType,
        }),
        auth,
        projectId,
    });
    if (engineResponse.status !== shared_1.EngineResponseStatus.OK) {
        server_shared_1.logger.error(engineResponse, '[AppConnectionService#engineValidateAuth] engineResponse');
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.ENGINE_OPERATION_FAILURE,
            params: {
                message: 'Failed to run engine validate auth',
                context: engineResponse,
            },
        });
    }
    const validateAuthResult = engineResponse.result;
    if (!validateAuthResult.valid) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_APP_CONNECTION,
            params: {
                error: validateAuthResult.error,
            },
        });
    }
});
/**
 * We should make sure this is accessed only once, as a race condition could occur where the token needs to be
 * refreshed and it gets accessed at the same time, which could result in the wrong request saving incorrect data.
 */
function lockAndRefreshConnection(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, name, }) {
        const refreshLock = yield (0, lock_1.acquireLock)({
            key: `${projectId}_${name}`,
            timeout: 20000,
        });
        let appConnection = null;
        try {
            const encryptedAppConnection = yield repo().findOneBy({
                projectId,
                name,
            });
            if ((0, shared_1.isNil)(encryptedAppConnection)) {
                return encryptedAppConnection;
            }
            appConnection = decryptConnection(encryptedAppConnection);
            if (!needRefresh(appConnection)) {
                return appConnection;
            }
            const refreshedAppConnection = yield refresh(appConnection);
            yield repo().update(refreshedAppConnection.id, {
                status: shared_1.AppConnectionStatus.ACTIVE,
                value: encryption_1.encryptUtils.encryptObject(refreshedAppConnection.value),
            });
            return refreshedAppConnection;
        }
        catch (e) {
            server_shared_1.exceptionHandler.handle(e);
            if (!(0, shared_1.isNil)(appConnection) && oauth2_util_1.oauth2Util.isUserError(e)) {
                appConnection.status = shared_1.AppConnectionStatus.ERROR;
                yield repo().update(appConnection.id, {
                    status: appConnection.status,
                    updated: (0, dayjs_1.default)().toISOString(),
                });
            }
        }
        finally {
            yield refreshLock.release();
        }
        return appConnection;
    });
}
function needRefresh(connection) {
    if (connection.status === shared_1.AppConnectionStatus.ERROR) {
        return false;
    }
    switch (connection.value.type) {
        case shared_1.AppConnectionType.PLATFORM_OAUTH2:
        case shared_1.AppConnectionType.CLOUD_OAUTH2:
        case shared_1.AppConnectionType.OAUTH2:
            return oauth2_util_1.oauth2Util.isExpired(connection.value);
        default:
            return false;
    }
}
function refresh(connection) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (connection.value.type) {
            case shared_1.AppConnectionType.PLATFORM_OAUTH2:
                connection.value = yield oauth2_1.oauth2Handler[connection.value.type].refresh({
                    pieceName: connection.pieceName,
                    projectId: connection.projectId,
                    connectionValue: connection.value,
                });
                break;
            case shared_1.AppConnectionType.CLOUD_OAUTH2:
                connection.value = yield oauth2_1.oauth2Handler[connection.value.type].refresh({
                    pieceName: connection.pieceName,
                    projectId: connection.projectId,
                    connectionValue: connection.value,
                });
                break;
            case shared_1.AppConnectionType.OAUTH2:
                connection.value = yield oauth2_1.oauth2Handler[connection.value.type].refresh({
                    pieceName: connection.pieceName,
                    projectId: connection.projectId,
                    connectionValue: connection.value,
                });
                break;
            default:
                break;
        }
        return connection;
    });
}


/***/ }),
/* 474 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.engineRunner = void 0;
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(475), exports);
var engine_1 = __webpack_require__(477);
Object.defineProperty(exports, "engineRunner", ({ enumerable: true, get: function () { return engine_1.engineRunner; } }));
tslib_1.__exportStar(__webpack_require__(504), exports);
tslib_1.__exportStar(__webpack_require__(479), exports);
tslib_1.__exportStar(__webpack_require__(505), exports);


/***/ }),
/* 475 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.engineRunnerUtils = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const chalk_1 = tslib_1.__importDefault(__webpack_require__(476));
exports.engineRunnerUtils = {
    readResults(sandboxResponse) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            sandboxResponse.standardOutput.split('\n').forEach((f) => {
                if (f.trim().length > 0)
                    server_shared_1.logger.debug({}, chalk_1.default.yellow(f));
            });
            sandboxResponse.standardError.split('\n').forEach((f) => {
                if (f.trim().length > 0)
                    server_shared_1.logger.debug({}, chalk_1.default.red(f));
            });
            if (sandboxResponse.verdict === shared_1.EngineResponseStatus.TIMEOUT) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.EXECUTION_TIMEOUT,
                    params: {},
                });
            }
            const result = tryParseJson(sandboxResponse.output);
            const response = {
                status: sandboxResponse.verdict,
                result: result,
                standardError: sandboxResponse.standardError,
                standardOutput: sandboxResponse.standardOutput,
            };
            server_shared_1.logger.trace(response, '[EngineHelper#response] response');
            return response;
        });
    },
};
function tryParseJson(value) {
    try {
        return JSON.parse(value);
    }
    catch (e) {
        return value;
    }
}


/***/ }),
/* 476 */
/***/ ((module) => {

module.exports = require("chalk");

/***/ }),
/* 477 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.engineRunner = void 0;
const server_shared_1 = __webpack_require__(2);
const isolate_engine_runner_1 = __webpack_require__(478);
const thread_engine_runner_1 = __webpack_require__(501);
const executionMode = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.EXECUTION_MODE);
exports.engineRunner = executionMode === server_shared_1.ExecutionMode.UNSANDBOXED ? thread_engine_runner_1.threadEngineRunner : isolate_engine_runner_1.isolateEngineRunner;


/***/ }),
/* 478 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isolateEngineRunner = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = tslib_1.__importDefault(__webpack_require__(111));
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const webhook_utils_1 = __webpack_require__(479);
const engine_runner_1 = __webpack_require__(475);
const flow_enginer_util_1 = __webpack_require__(487);
const sandbox_cache_key_1 = __webpack_require__(488);
const sandbox_provisioner_1 = __webpack_require__(489);
exports.isolateEngineRunner = {
    executeFlow(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const input = Object.assign(Object.assign({}, operation), { engineToken, publicUrl: yield server_shared_1.networkUtls.getPublicUrl(), internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl() });
            const sandbox = yield prepareFlowSandbox(engineToken, operation.runEnvironment, operation.flowVersion);
            return execute(shared_1.EngineOperationType.EXECUTE_FLOW, sandbox, input);
        });
    },
    extractPieceMetadata(operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ operation }, '[EngineHelper#extractPieceMetadata]');
            const sandbox = yield sandbox_provisioner_1.sandboxProvisioner.provision({
                type: sandbox_cache_key_1.SandBoxCacheType.NONE,
                pieces: [operation],
            });
            return execute(shared_1.EngineOperationType.EXTRACT_PIECE_METADATA, sandbox, operation);
        });
    },
    executeTrigger(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ hookType: operation.hookType, projectId: operation.projectId }, '[EngineHelper#executeTrigger]');
            const triggerPiece = yield flow_enginer_util_1.pieceEngineUtil.getTriggerPiece(engineToken, operation.flowVersion);
            const lockedVersion = yield flow_enginer_util_1.pieceEngineUtil.lockPieceInFlowVersion({
                engineToken,
                stepName: operation.flowVersion.trigger.name,
                flowVersion: operation.flowVersion,
            });
            const sandbox = yield sandbox_provisioner_1.sandboxProvisioner.provision({
                type: sandbox_cache_key_1.SandBoxCacheType.PIECE,
                pieceName: triggerPiece.pieceName,
                pieceVersion: triggerPiece.pieceVersion,
                pieces: [triggerPiece],
            });
            const input = {
                projectId: operation.projectId,
                hookType: operation.hookType,
                webhookUrl: operation.webhookUrl,
                triggerPayload: operation.triggerPayload,
                flowVersion: lockedVersion,
                appWebhookUrl: yield webhook_utils_1.webhookUtils.getAppWebhookUrl({
                    appName: triggerPiece.pieceName,
                }),
                publicUrl: yield server_shared_1.networkUtls.getPublicUrl(),
                internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(),
                webhookSecret: yield server_shared_1.webhookSecretsUtils.getWebhookSecret(lockedVersion),
                engineToken,
            };
            return execute(shared_1.EngineOperationType.EXECUTE_TRIGGER_HOOK, sandbox, input);
        });
    },
    executeProp(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { piece } = operation;
            const lockedPiece = yield flow_enginer_util_1.pieceEngineUtil.getExactPieceVersion(engineToken, piece);
            const sandbox = yield sandbox_provisioner_1.sandboxProvisioner.provision({
                type: sandbox_cache_key_1.SandBoxCacheType.PIECE,
                pieceName: lockedPiece.pieceName,
                pieceVersion: lockedPiece.pieceVersion,
                pieces: [lockedPiece],
            });
            const input = Object.assign(Object.assign({}, operation), { publicUrl: yield server_shared_1.networkUtls.getPublicUrl(), internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(), engineToken });
            return execute(shared_1.EngineOperationType.EXECUTE_PROPERTY, sandbox, input);
        });
    },
    executeValidateAuth(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { piece } = operation;
            const lockedPiece = yield flow_enginer_util_1.pieceEngineUtil.getExactPieceVersion(engineToken, piece);
            const sandbox = yield sandbox_provisioner_1.sandboxProvisioner.provision({
                type: sandbox_cache_key_1.SandBoxCacheType.PIECE,
                pieceName: lockedPiece.pieceName,
                pieceVersion: lockedPiece.pieceVersion,
                pieces: [lockedPiece],
            });
            const input = Object.assign(Object.assign({}, operation), { publicUrl: yield server_shared_1.networkUtls.getPublicUrl(), internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(), engineToken });
            return execute(shared_1.EngineOperationType.EXECUTE_VALIDATE_AUTH, sandbox, input);
        });
    },
    executeAction(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const step = shared_1.flowHelper.getStep(operation.flowVersion, operation.stepName);
            (0, shared_1.assertNotNullOrUndefined)(step, 'Step not found');
            const lockedFlowVersion = yield flow_enginer_util_1.pieceEngineUtil.lockPieceInFlowVersion({
                engineToken,
                flowVersion: operation.flowVersion,
                stepName: operation.stepName,
            });
            const sandbox = yield getSandboxForAction(engineToken, lockedFlowVersion.id, lockedFlowVersion.state, lockedFlowVersion.flowId, step);
            const input = {
                flowVersion: lockedFlowVersion,
                stepName: operation.stepName,
                projectId: operation.projectId,
                publicUrl: yield server_shared_1.networkUtls.getPublicUrl(),
                internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(),
                engineToken,
            };
            return execute(shared_1.EngineOperationType.EXECUTE_STEP, sandbox, input);
        });
    },
};
const execute = (operationType, sandbox, input) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        server_shared_1.logger.trace({ operationType, sandboxId: sandbox.boxId }, '[EngineHelper#execute]');
        const sandboxPath = sandbox.getSandboxFolderPath();
        yield promises_1.default.writeFile(`${sandboxPath}/input.json`, JSON.stringify(input));
        const sandboxResponse = yield sandbox.runOperation(operationType, input);
        return yield engine_runner_1.engineRunnerUtils.readResults(sandboxResponse);
    }
    finally {
        yield sandbox_provisioner_1.sandboxProvisioner.release({ sandbox });
    }
});
function prepareFlowSandbox(engineToken, runEnvironment, flowVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const pieces = yield flow_enginer_util_1.pieceEngineUtil.extractFlowPieces({
            flowVersion,
            engineToken,
        });
        const codeSteps = flow_enginer_util_1.pieceEngineUtil.getCodeSteps(flowVersion);
        switch (runEnvironment) {
            case shared_1.RunEnvironment.PRODUCTION:
                return sandbox_provisioner_1.sandboxProvisioner.provision({
                    type: sandbox_cache_key_1.SandBoxCacheType.FLOW,
                    flowVersionId: flowVersion.id,
                    pieces,
                    codeSteps,
                });
            case shared_1.RunEnvironment.TESTING:
                return sandbox_provisioner_1.sandboxProvisioner.provision({
                    type: sandbox_cache_key_1.SandBoxCacheType.NONE,
                    pieces,
                    codeSteps,
                });
        }
    });
}
function getSandboxForAction(engineToken, flowVersionId, flowVersionState, flowId, action) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (action.type) {
            case shared_1.ActionType.PIECE: {
                const { pieceName, pieceVersion } = action.settings;
                return sandbox_provisioner_1.sandboxProvisioner.provision({
                    type: sandbox_cache_key_1.SandBoxCacheType.PIECE,
                    pieceName,
                    pieceVersion,
                    pieces: [yield flow_enginer_util_1.pieceEngineUtil.getExactPieceForStep(engineToken, action)],
                });
            }
            case shared_1.ActionType.CODE: {
                return sandbox_provisioner_1.sandboxProvisioner.provision({
                    type: sandbox_cache_key_1.SandBoxCacheType.CODE,
                    flowId,
                    name: action.name,
                    sourceCodeHash: server_shared_1.hashUtils.hashObject(action.settings.sourceCode),
                    codeSteps: [
                        {
                            name: action.name,
                            flowVersionId,
                            flowVersionState,
                            sourceCode: action.settings.sourceCode,
                        },
                    ],
                });
            }
            case shared_1.ActionType.BRANCH:
            case shared_1.ActionType.LOOP_ON_ITEMS:
                return sandbox_provisioner_1.sandboxProvisioner.provision({
                    type: sandbox_cache_key_1.SandBoxCacheType.NONE,
                });
        }
    });
}


/***/ }),
/* 479 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookUtils = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const server_api_service_1 = __webpack_require__(480);
const trigger_consumer_1 = __webpack_require__(483);
exports.webhookUtils = {
    getWebhookPrefix() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return `${yield server_shared_1.networkUtls.getPublicUrl()}v1/webhooks`;
        });
    },
    getAppWebhookUrl(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ appName, }) {
            const frontendUrl = yield server_shared_1.networkUtls.getPublicUrl();
            return `${frontendUrl}v1/app-events/${appName}`;
        });
    },
    getWebhookUrl(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowId, simulate, }) {
            const suffix = simulate ? '/test' : '';
            const webhookPrefix = yield this.getWebhookPrefix();
            return `${webhookPrefix}/${flowId}${suffix}`;
        });
    },
    extractPayloadAndSave(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowVersion, payload, projectId, engineToken, workerToken }) {
            const payloads = yield trigger_consumer_1.triggerConsumer.extractPayloads(engineToken, {
                projectId,
                flowVersion,
                payload,
                simulate: false,
            });
            (0, server_shared_1.rejectedPromiseHandler)((0, server_api_service_1.workerApiService)(workerToken).savePayloadsAsSampleData({
                flowId: flowVersion.flowId,
                projectId,
                payloads,
            }));
            return payloads;
        });
    },
    handshake(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ populatedFlow, payload, engineToken, }) {
            server_shared_1.logger.info(`[WebhookService#handshake] flowId=${populatedFlow.id}`);
            const { projectId } = populatedFlow;
            const response = yield trigger_consumer_1.triggerConsumer.tryHandshake(engineToken, {
                engineToken,
                projectId,
                flowVersion: populatedFlow.version,
                payload,
            });
            if (response !== null) {
                server_shared_1.logger.info(`[WebhookService#handshake] condition met, handshake executed, response:
            ${JSON.stringify(response, null, 2)}`);
            }
            return response;
        });
    },
};


/***/ }),
/* 480 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.engineApiService = exports.workerApiService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const axios_1 = tslib_1.__importStar(__webpack_require__(198));
const http_status_codes_1 = __webpack_require__(481);
const heartbeat_1 = __webpack_require__(482);
const removeTrailingSlash = (url) => {
    return url.endsWith('/') ? url.slice(0, -1) : url;
};
const apiUrl = removeTrailingSlash(server_shared_1.networkUtls.getInternalApiUrl());
const workerApiService = (workerToken) => {
    const client = axios_1.default.create({
        baseURL: apiUrl,
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${workerToken}`,
        },
    });
    return {
        heartbeat() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const request = yield heartbeat_1.heartbeat.getSystemInfo();
                yield client.post('/v1/worker-machines/heartbeat', request);
            });
        },
        poll(queueName) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const request = {
                        queueName,
                    };
                    const response = yield client.get('/v1/workers/poll', {
                        params: request,
                    });
                    return response.data;
                }
                catch (error) {
                    server_shared_1.logger.trace({
                        message: JSON.stringify(error),
                    }, 'Connection refused, retrying in 2 seconds');
                    yield new Promise((resolve) => setTimeout(resolve, 2000));
                    return null;
                }
            });
        },
        resumeRun(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield client.post('/v1/workers/resume-run', request);
            });
        },
        deleteWebhookSimulation(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield client.post('/v1/workers/delete-webhook-simulation', request);
            });
        },
        savePayloadsAsSampleData(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return client.post('/v1/workers/save-payloads', request);
            });
        },
        startRuns(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return (yield client.post('/v1/workers/submit-payloads', request)).data;
            });
        },
        sendWebhookUpdate(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield client.post('/v1/workers/send-webhook-update', request);
            });
        },
    };
};
exports.workerApiService = workerApiService;
const engineApiService = (engineToken) => {
    const client = axios_1.default.create({
        baseURL: apiUrl,
        headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${engineToken}`,
        },
    });
    return {
        getFile(fileId) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const response = yield client.get(`/v1/engine/files/${fileId}`, {
                    responseType: 'arraybuffer',
                });
                return response.data;
            });
        },
        updateJobStatus(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield client.post('/v1/engine/update-job', request);
            });
        },
        getRun(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const response = yield client.get('/v1/engine/runs/' + request.runId, {});
                return response.data;
            });
        },
        updateRunStatus(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield client.post('/v1/engine/update-run', request);
            });
        },
        removeStaleFlow(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield client.post('/v1/engine/remove-stable-job', request);
            });
        },
        getPiece(name, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return (yield client.get(`/v1/pieces/${encodeURIComponent(name)}`, {
                    params: options,
                })).data;
            });
        },
        checkTaskLimit() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const edition = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.EDITION);
                if (edition === shared_1.ApEdition.COMMUNITY) {
                    return;
                }
                try {
                    yield client.get('/v1/engine/check-task-limit');
                }
                catch (error) {
                    if ((0, axios_1.isAxiosError)(error) && error.response && error.response.status === http_status_codes_1.StatusCodes.PAYMENT_REQUIRED) {
                        throw new shared_1.ActivepiecesError({
                            code: shared_1.ErrorCode.QUOTA_EXCEEDED,
                            params: {
                                metric: 'tasks',
                            },
                        });
                    }
                    server_shared_1.exceptionHandler.handle(error);
                }
            });
        },
        getFlowWithExactPieces(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield client.get('/v1/engine/flows', {
                        params: request,
                    });
                    return response.data;
                }
                catch (error) {
                    if ((0, axios_1.isAxiosError)(error) && error.response && error.response.status === 404) {
                        return null;
                    }
                    throw error;
                }
            });
        },
    };
};
exports.engineApiService = engineApiService;


/***/ }),
/* 481 */
/***/ ((module) => {

module.exports = require("http-status-codes");

/***/ }),
/* 482 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.heartbeat = void 0;
const tslib_1 = __webpack_require__(1);
const os_1 = tslib_1.__importDefault(__webpack_require__(107));
const server_shared_1 = __webpack_require__(2);
function getSystemInfo() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const totalRamInBytes = os_1.default.totalmem();
        const freeRamInBytes = os_1.default.freemem();
        const ramInBytes = totalRamInBytes - freeRamInBytes;
        const ramUsage = (ramInBytes / totalRamInBytes) * 100;
        const cpus = os_1.default.cpus();
        const cpuUsage = cpus.reduce((acc, cpu) => {
            const total = Object.values(cpu.times).reduce((acc, time) => acc + time, 0);
            const idle = cpu.times.idle;
            return acc + (1 - idle / total);
        }, 0) / cpus.length * 100;
        const ip = (yield server_shared_1.networkUtls.getPublicIp()).ip;
        return {
            cpuUsagePercentage: cpuUsage,
            ramUsagePercentage: ramUsage,
            totalAvailableRamInBytes: totalRamInBytes,
            ip,
        };
    });
}
exports.heartbeat = {
    getSystemInfo,
};


/***/ }),
/* 483 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.triggerConsumer = void 0;
const extract_trigger_payload_hooks_1 = __webpack_require__(484);
const handshake_trigger_hook_1 = __webpack_require__(485);
const renew_trigger_hook_1 = __webpack_require__(486);
exports.triggerConsumer = {
    renewWebhook: renew_trigger_hook_1.renewWebhook,
    extractPayloads: extract_trigger_payload_hooks_1.extractPayloads,
    tryHandshake: handshake_trigger_hook_1.tryHandshake,
};


/***/ }),
/* 484 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extractPayloads = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const engine_1 = __webpack_require__(477);
const webhook_utils_1 = __webpack_require__(479);
function extractPayloads(engineToken, params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { payload, flowVersion, projectId, simulate } = params;
        try {
            const { result } = yield engine_1.engineRunner.executeTrigger(engineToken, {
                hookType: shared_1.TriggerHookType.RUN,
                flowVersion,
                triggerPayload: payload,
                webhookUrl: yield webhook_utils_1.webhookUtils.getWebhookUrl({
                    flowId: flowVersion.flowId,
                    simulate,
                }),
                projectId,
            });
            if (!(0, shared_1.isNil)(result) && result.success && Array.isArray(result.output)) {
                return result.output;
            }
            else {
                server_shared_1.logger.error({
                    result,
                    pieceName: params.flowVersion.trigger.settings.pieceName,
                    pieceVersion: params.flowVersion.trigger.settings.pieceVersion,
                    flowId: flowVersion.flowId,
                }, 'Failed to execute trigger');
                return [];
            }
        }
        catch (e) {
            const isTimeoutError = e instanceof shared_1.ActivepiecesError && e.error.code === shared_1.ErrorCode.EXECUTION_TIMEOUT;
            if (isTimeoutError) {
                server_shared_1.logger.error({
                    name: 'extractPayloads',
                    pieceName: params.flowVersion.trigger.settings.pieceName,
                    pieceVersion: params.flowVersion.trigger.settings.pieceVersion,
                    flowId: flowVersion.flowId,
                }, 'Failed to execute trigger due to timeout');
                // TODO add error handling which is notify the user and disable the trigger
                return [];
            }
            throw e;
        }
    });
}
exports.extractPayloads = extractPayloads;


/***/ }),
/* 485 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tryHandshake = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const server_api_service_1 = __webpack_require__(480);
const engine_1 = __webpack_require__(477);
const webhook_utils_1 = __webpack_require__(479);
function tryHandshake(engineToken, params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        const { payload, flowVersion, projectId } = params;
        const settings = flowVersion.trigger.settings;
        const pieceMetadata = yield (0, server_api_service_1.engineApiService)(engineToken).getPiece(settings.pieceName, {
            version: settings.pieceVersion,
        });
        const handshakeConfig = (_b = (_a = pieceMetadata.triggers) === null || _a === void 0 ? void 0 : _a[settings.triggerName]) === null || _b === void 0 ? void 0 : _b.handshakeConfiguration;
        if ((0, shared_1.isNil)(handshakeConfig)) {
            return null;
        }
        const strategy = (_c = handshakeConfig.strategy) !== null && _c !== void 0 ? _c : pieces_framework_1.WebhookHandshakeStrategy.NONE;
        switch (strategy) {
            case pieces_framework_1.WebhookHandshakeStrategy.HEADER_PRESENT: {
                if (handshakeConfig.paramName &&
                    handshakeConfig.paramName.toLowerCase() in payload.headers) {
                    return executeHandshake({
                        engineToken: params.engineToken,
                        flowVersion,
                        projectId,
                        payload,
                    });
                }
                break;
            }
            case pieces_framework_1.WebhookHandshakeStrategy.QUERY_PRESENT: {
                if (handshakeConfig.paramName &&
                    handshakeConfig.paramName in payload.queryParams) {
                    return executeHandshake({
                        engineToken: params.engineToken,
                        flowVersion,
                        projectId,
                        payload,
                    });
                }
                break;
            }
            case pieces_framework_1.WebhookHandshakeStrategy.BODY_PARAM_PRESENT: {
                if (handshakeConfig.paramName &&
                    typeof payload.body === 'object' &&
                    payload.body !== null &&
                    handshakeConfig.paramName in payload.body) {
                    return executeHandshake({
                        engineToken: params.engineToken,
                        flowVersion,
                        projectId,
                        payload,
                    });
                }
                break;
            }
            default:
                break;
        }
        return null;
    });
}
exports.tryHandshake = tryHandshake;
function executeHandshake(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { flowVersion, projectId, payload } = params;
        const { result } = yield engine_1.engineRunner.executeTrigger(params.engineToken, {
            hookType: shared_1.TriggerHookType.HANDSHAKE,
            flowVersion,
            triggerPayload: payload,
            webhookUrl: yield webhook_utils_1.webhookUtils.getWebhookUrl({
                flowId: flowVersion.flowId,
                simulate: false,
            }),
            projectId,
        });
        if (!result.success || result.response === undefined) {
            return {
                status: 500,
                body: {
                    error: 'Failed to execute handshake',
                },
            };
        }
        return result.response;
    });
}


/***/ }),
/* 486 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.renewWebhook = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const engine_1 = __webpack_require__(477);
const webhook_utils_1 = __webpack_require__(479);
function renewWebhook(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { flowVersion, projectId, simulate } = params;
        yield engine_1.engineRunner.executeTrigger(params.engineToken, {
            hookType: shared_1.TriggerHookType.RENEW,
            flowVersion,
            webhookUrl: yield webhook_utils_1.webhookUtils.getWebhookUrl({
                flowId: flowVersion.flowId,
                simulate,
            }),
            projectId,
        });
    });
}
exports.renewWebhook = renewWebhook;


/***/ }),
/* 487 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieceEngineUtil = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const server_api_service_1 = __webpack_require__(480);
exports.pieceEngineUtil = {
    getCodeSteps(flowVersion) {
        const steps = shared_1.flowHelper.getAllSteps(flowVersion.trigger);
        return steps.filter((step) => step.type === shared_1.ActionType.CODE).map((step) => {
            const codeAction = step;
            return {
                name: codeAction.name,
                flowVersionId: flowVersion.id,
                flowVersionState: flowVersion.state,
                sourceCode: codeAction.settings.sourceCode,
            };
        });
    },
    extractFlowPieces(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowVersion, engineToken, }) {
            const steps = shared_1.flowHelper.getAllSteps(flowVersion.trigger);
            const pieces = steps.filter((step) => step.type === shared_1.TriggerType.PIECE || step.type === shared_1.ActionType.PIECE).map((step) => {
                const { packageType, pieceType, pieceName, pieceVersion } = step.settings;
                return exports.pieceEngineUtil.getExactPieceVersion(engineToken, {
                    packageType,
                    pieceType,
                    pieceName,
                    pieceVersion,
                });
            });
            return Promise.all(pieces);
        });
    },
    getTriggerPiece(engineToken, flowVersion) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            (0, shared_1.assertEqual)(flowVersion.trigger.type, shared_1.TriggerType.PIECE, 'trigger.type', 'PIECE');
            const { trigger } = flowVersion;
            return this.getExactPieceForStep(engineToken, trigger);
        });
    },
    getExactPieceVersion(engineToken, piece) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { pieceName, pieceVersion, pieceType, packageType } = piece;
            switch (packageType) {
                case shared_1.PackageType.ARCHIVE: {
                    const pieceMetadata = yield (0, server_api_service_1.engineApiService)(engineToken).getPiece(pieceName, {
                        version: pieceVersion,
                    });
                    const archive = yield (0, server_api_service_1.engineApiService)(engineToken).getFile(pieceMetadata.archiveId);
                    return {
                        packageType,
                        pieceType,
                        pieceName,
                        pieceVersion: pieceMetadata.version,
                        archiveId: pieceMetadata.archiveId,
                        archive,
                    };
                }
                case shared_1.PackageType.REGISTRY: {
                    const exactVersion = shared_1.EXACT_VERSION_PATTERN.test(pieceVersion);
                    const version = exactVersion ? pieceVersion : (yield (0, server_api_service_1.engineApiService)(engineToken).getPiece(pieceName, {
                        version: pieceVersion,
                    })).version;
                    return {
                        packageType,
                        pieceType,
                        pieceName,
                        pieceVersion: version,
                    };
                }
            }
        });
    },
    getExactPieceForStep(engineToken, step) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pieceSettings = step.settings;
            const { pieceName, pieceVersion, pieceType, packageType } = pieceSettings;
            return this.getExactPieceVersion(engineToken, {
                pieceName,
                pieceVersion,
                pieceType,
                packageType,
            });
        });
    },
    lockPieceInFlowVersion(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ engineToken, flowVersion, stepName, }) {
            return shared_1.flowHelper.transferFlowAsync(flowVersion, (step) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (step.name !== stepName) {
                    return step;
                }
                if (step.type === shared_1.TriggerType.PIECE) {
                    const piece = yield exports.pieceEngineUtil.getExactPieceForStep(engineToken, step);
                    return Object.assign(Object.assign({}, step), { settings: Object.assign(Object.assign({}, step.settings), { pieceVersion: piece.pieceVersion }) });
                }
                if (step.type === shared_1.ActionType.PIECE) {
                    const piece = yield exports.pieceEngineUtil.getExactPieceForStep(engineToken, step);
                    return Object.assign(Object.assign({}, step), { settings: Object.assign(Object.assign({}, step.settings), { pieceVersion: piece.pieceVersion }) });
                }
                return step;
            }));
        });
    },
};


/***/ }),
/* 488 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extractProvisionCacheKey = exports.SandBoxCacheType = void 0;
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
var SandBoxCacheType;
(function (SandBoxCacheType) {
    SandBoxCacheType["CODE"] = "CODE";
    SandBoxCacheType["FLOW"] = "FLOW";
    SandBoxCacheType["NONE"] = "NONE";
    SandBoxCacheType["PIECE"] = "PIECE";
})(SandBoxCacheType || (exports.SandBoxCacheType = SandBoxCacheType = {}));
const extractProvisionCacheKey = (params) => {
    server_shared_1.logger.debug({ type: params.type }, '[SandboxProvisioner#extractCacheKey]');
    switch (params.type) {
        case SandBoxCacheType.CODE:
            return extractCodeCacheKey(params);
        case SandBoxCacheType.FLOW:
            return extractFlowCacheKey(params);
        case SandBoxCacheType.NONE:
            return extractNoneCacheKey(params);
        case SandBoxCacheType.PIECE:
            return extractPieceCacheKey(params);
    }
};
exports.extractProvisionCacheKey = extractProvisionCacheKey;
const extractCodeCacheKey = ({ sourceCodeHash, name, flowId, }) => {
    return `CODE-sourceCodeHash-${sourceCodeHash}-name-${name}-flowId-${flowId}`;
};
const extractFlowCacheKey = ({ flowVersionId, }) => {
    return `FLOW-flowVersionId-${flowVersionId}`;
};
const extractNoneCacheKey = (_params) => {
    return `NONE-apId-${(0, shared_1.apId)()}`;
};
const extractPieceCacheKey = ({ pieceName, pieceVersion, }) => {
    return `PIECE-pieceName-${pieceName}-pieceVersion-${pieceVersion}`;
};


/***/ }),
/* 489 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sandboxProvisioner = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const sandbox_cache_pool_1 = __webpack_require__(490);
const sandbox_manager_1 = __webpack_require__(499);
exports.sandboxProvisioner = {
    provision(_a) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var { pieces = [], codeSteps = [] } = _a, cacheInfo = tslib_1.__rest(_a, ["pieces", "codeSteps"]);
            try {
                const cachedSandbox = yield sandbox_cache_pool_1.sandboxCachePool.findOrCreate(cacheInfo);
                yield cachedSandbox.prepare({
                    pieces,
                    codeSteps,
                });
                const sandbox = yield sandbox_manager_1.sandboxManager.allocate(cachedSandbox.key);
                yield sandbox.assignCache({
                    cacheKey: cachedSandbox.key,
                    cachePath: cachedSandbox.path(),
                });
                return sandbox;
            }
            catch (error) {
                const contextKey = '[SandboxProvisioner#provision]';
                const contextValue = { pieces, codeSteps, cacheInfo };
                const enrichedError = (0, server_shared_1.enrichErrorContext)({
                    error,
                    key: contextKey,
                    value: contextValue,
                });
                throw enrichedError;
            }
        });
    },
    release(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ sandbox }) {
            server_shared_1.logger.debug({ boxId: sandbox.boxId, cacheKey: sandbox.cacheKey }, '[SandboxProvisioner#release]');
            yield sandbox_manager_1.sandboxManager.release(sandbox.boxId);
            if (sandbox.cacheKey) {
                yield sandbox_cache_pool_1.sandboxCachePool.release({
                    key: sandbox.cacheKey,
                });
            }
        });
    },
};


/***/ }),
/* 490 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sandboxCachePool = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const async_mutex_1 = __webpack_require__(4);
const sandbox_cache_key_1 = __webpack_require__(488);
const cached_sandbox_1 = __webpack_require__(491);
const CACHED_SANDBOX_LIMIT = 1000;
const cachedSandboxes = new Map();
const lock = new async_mutex_1.Mutex();
const sandboxKeyCachePool = {
    findOrCreate(cacheInfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug(cacheInfo, '[SandboxCachePool#get]');
            const key = (0, sandbox_cache_key_1.extractProvisionCacheKey)(cacheInfo);
            const cachedSandbox = yield lock.runExclusive(() => {
                const cachedSandbox = cachedSandboxes.get(key);
                if (cachedSandbox) {
                    return cachedSandbox;
                }
                if (cachedSandboxes.size >= CACHED_SANDBOX_LIMIT) {
                    deleteOldestNotInUseOrThrow();
                }
                return createCachedSandbox({ key });
            });
            yield cachedSandbox.init();
            return cachedSandbox;
        });
    },
    release(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ key }) {
            const cachedSandbox = getOrThrow({ key });
            yield cachedSandbox.decrementActiveSandboxCount();
        });
    },
};
const sandboxNoCachePool = {
    findOrCreate(_cacheInfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return sandboxKeyCachePool.findOrCreate({
                type: sandbox_cache_key_1.SandBoxCacheType.NONE,
            });
        });
    },
    release(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ key }) {
            return sandboxKeyCachePool.release({ key });
        });
    },
};
exports.sandboxCachePool = server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT) === shared_1.ApEnvironment.DEVELOPMENT ? sandboxNoCachePool : sandboxKeyCachePool;
const getOrThrow = ({ key }) => {
    const cachedSandbox = cachedSandboxes.get(key);
    if ((0, shared_1.isNil)(cachedSandbox)) {
        throw new Error(`[SandboxCachePool#getOrThrow] sandbox not found key=${key}`);
    }
    return cachedSandbox;
};
const createCachedSandbox = ({ key }) => {
    const newCachedSandBox = new cached_sandbox_1.CachedSandbox({
        key,
    });
    cachedSandboxes.set(key, newCachedSandBox);
    return newCachedSandBox;
};
const deleteOldestNotInUseOrThrow = () => {
    let oldestNotInUseCachedSandbox = null;
    for (const cachedSandbox of cachedSandboxes.values()) {
        if (!cachedSandbox.isInUse()) {
            if ((0, shared_1.isNil)(oldestNotInUseCachedSandbox)) {
                oldestNotInUseCachedSandbox = cachedSandbox;
                continue;
            }
            if (cachedSandbox.lastUsedAt().isBefore(oldestNotInUseCachedSandbox.lastUsedAt())) {
                oldestNotInUseCachedSandbox = cachedSandbox;
            }
        }
    }
    if ((0, shared_1.isNil)(oldestNotInUseCachedSandbox)) {
        throw new Error('[SandboxCachePool#getOldestNotInUseOrThrow] all sandboxes are in use');
    }
    cachedSandboxes.delete(oldestNotInUseCachedSandbox.key);
};


/***/ }),
/* 491 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CachedSandbox = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(111);
const node_path_1 = __webpack_require__(112);
const server_shared_1 = __webpack_require__(2);
const async_mutex_1 = __webpack_require__(4);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const piece_manager_1 = __webpack_require__(492);
const code_builder_1 = __webpack_require__(496);
const engine_installer_1 = __webpack_require__(497);
const cached_sandbox_state_1 = __webpack_require__(498);
class CachedSandbox {
    constructor({ key }) {
        this.lock = new async_mutex_1.Mutex();
        this._state = cached_sandbox_state_1.CachedSandboxState.CREATED;
        this._activeSandboxCount = 0;
        this._lastUsedAt = (0, dayjs_1.default)();
        server_shared_1.logger.debug({ key }, '[CachedSandbox#ctor]');
        this.key = key;
    }
    path() {
        return `${CachedSandbox.CACHE_PATH}/sandbox/${this.key}`;
    }
    lastUsedAt() {
        return this._lastUsedAt;
    }
    isInUse() {
        return this._activeSandboxCount > 0;
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ key: this.key, state: this._state, activeSandboxes: this._activeSandboxCount }, '[CachedSandbox#init]');
            yield this.lock.runExclusive(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this._state !== cached_sandbox_state_1.CachedSandboxState.CREATED) {
                    return;
                }
                yield this.deletePathIfExists();
                yield (0, promises_1.mkdir)(this.path(), { recursive: true });
                this._state = cached_sandbox_state_1.CachedSandboxState.INITIALIZED;
            }));
        });
    }
    prepare(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ pieces, codeSteps = [] }) {
            server_shared_1.logger.debug({ key: this.key, state: this._state, activeSandboxes: this._activeSandboxCount }, '[CachedSandbox#prepare]');
            try {
                yield this.lock.runExclusive(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    const notInitialized = this._state === cached_sandbox_state_1.CachedSandboxState.CREATED;
                    if (notInitialized) {
                        throw new Error(`[CachedSandbox#prepare] not initialized, Key=${this.key} state=${this._state}`);
                    }
                    this._activeSandboxCount += 1;
                    this._lastUsedAt = (0, dayjs_1.default)();
                    const alreadyPrepared = this._state !== cached_sandbox_state_1.CachedSandboxState.INITIALIZED;
                    if (alreadyPrepared) {
                        return;
                    }
                    yield server_shared_1.packageManager.init({ path: this.path() });
                    yield piece_manager_1.pieceManager.install({
                        projectPath: this.path(),
                        pieces,
                    });
                    yield engine_installer_1.engineInstaller.install({
                        path: this.path(),
                    });
                    yield this.buildCodeArchives(codeSteps);
                    this._state = cached_sandbox_state_1.CachedSandboxState.READY;
                }));
            }
            catch (error) {
                const contextKey = '[CachedSandbox#prepare]';
                const contextValue = {
                    args: { pieces, codeSteps },
                    state: this._state,
                    activeSandboxes: this._activeSandboxCount,
                    key: this.key,
                    lastUsedAt: this.lastUsedAt(),
                    isInUse: this.isInUse(),
                    path: this.path(),
                };
                const enrichedError = (0, server_shared_1.enrichErrorContext)({
                    error,
                    key: contextKey,
                    value: contextValue,
                });
                throw enrichedError;
            }
        });
    }
    decrementActiveSandboxCount() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ key: this.key, state: this._state, activeSandboxes: this._activeSandboxCount }, '[CachedSandbox#decrementActiveSandboxCount]');
            yield this.lock.runExclusive(() => {
                if (this._activeSandboxCount === 0) {
                    return;
                }
                this._activeSandboxCount -= 1;
            });
        });
    }
    deletePathIfExists() {
        return (0, promises_1.rm)(this.path(), { recursive: true, force: true });
    }
    buildCodeArchives(codeArchives) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const buildJobs = codeArchives.map((archive) => code_builder_1.codeBuilder.processCodeStep({
                sourceCodeId: archive.name,
                sourceCode: archive.sourceCode,
                flowVersionId: archive.flowVersionId,
                buildPath: this.path(),
            }));
            yield Promise.all(buildJobs);
        });
    }
}
exports.CachedSandbox = CachedSandbox;
CachedSandbox.CACHE_PATH = (_a = server_shared_1.system.get(server_shared_1.SharedSystemProp.CACHE_PATH)) !== null && _a !== void 0 ? _a : (0, node_path_1.resolve)('dist', 'cache');


/***/ }),
/* 492 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieceManager = void 0;
const server_shared_1 = __webpack_require__(2);
const local_piece_manager_1 = __webpack_require__(493);
const registry_piece_manager_1 = __webpack_require__(495);
const source = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.PIECES_SOURCE);
const getPieceManager = () => {
    const pieceManagerVariant = {
        [server_shared_1.PiecesSource.FILE]: local_piece_manager_1.LocalPieceManager,
        [server_shared_1.PiecesSource.CLOUD_AND_DB]: registry_piece_manager_1.RegistryPieceManager,
        [server_shared_1.PiecesSource.DB]: registry_piece_manager_1.RegistryPieceManager,
    };
    return new pieceManagerVariant[source]();
};
exports.pieceManager = getPieceManager();


/***/ }),
/* 493 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalPieceManager = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(111);
const node_path_1 = __webpack_require__(112);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const piece_manager_1 = __webpack_require__(494);
class LocalPieceManager extends piece_manager_1.PieceManager {
    installDependencies(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug(params, '[linkDependencies] params');
            const { projectPath, pieces } = params;
            const basePath = (0, node_path_1.resolve)(__dirname.split(`${node_path_1.sep}dist`)[0]);
            const baseLinkPath = (0, node_path_1.join)(basePath, 'dist', 'packages', 'pieces', 'community');
            const frameworkPackages = {
                '@activepieces/pieces-common': `link:${baseLinkPath}/common`,
                '@activepieces/pieces-framework': `link:${baseLinkPath}/framework`,
                '@activepieces/shared': `link:${basePath}/dist/packages/shared`,
            };
            yield linkFrameworkPackages(projectPath, baseLinkPath, frameworkPackages);
            for (const piece of pieces) {
                (0, shared_1.assertEqual)(piece.packageType, shared_1.PackageType.REGISTRY, 'packageType', `Piece ${piece.pieceName} is not of type REGISTRY`);
                const directoryPath = yield server_shared_1.filePiecesUtils.findDirectoryByPackageName(piece.pieceName);
                (0, shared_1.assertNotNullOrUndefined)(directoryPath, `directoryPath for ${piece.pieceName} is null or undefined`);
                yield updatePackageJson(directoryPath, frameworkPackages);
                yield server_shared_1.packageManager.link({
                    packageName: piece.pieceName,
                    path: projectPath,
                    linkPath: directoryPath,
                });
            }
        });
    }
}
exports.LocalPieceManager = LocalPieceManager;
const linkFrameworkPackages = (projectPath, baseLinkPath, frameworkPackages) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield updatePackageJson((0, node_path_1.join)(baseLinkPath, 'framework'), frameworkPackages);
    yield server_shared_1.packageManager.link({
        packageName: '@activepieces/pieces-framework',
        path: projectPath,
        linkPath: `${baseLinkPath}/framework`,
    });
    yield updatePackageJson((0, node_path_1.join)(baseLinkPath, 'common'), frameworkPackages);
    yield server_shared_1.packageManager.link({
        packageName: '@activepieces/pieces-common',
        path: projectPath,
        linkPath: `${baseLinkPath}/common`,
    });
});
const updatePackageJson = (directoryPath, frameworkPackages) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const packageJsonForPiece = (0, node_path_1.join)(directoryPath, 'package.json');
    const packageJson = yield (0, promises_1.readFile)(packageJsonForPiece, 'utf-8').then(JSON.parse);
    for (const [key, value] of Object.entries(frameworkPackages)) {
        if (packageJson.dependencies &&
            Object.keys(packageJson.dependencies).includes(key)) {
            packageJson.dependencies[key] = value;
        }
    }
    yield (0, promises_1.writeFile)(packageJsonForPiece, JSON.stringify(packageJson, null, 2));
});


/***/ }),
/* 494 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieceManager = exports.PACKAGE_ARCHIVE_PATH = void 0;
const tslib_1 = __webpack_require__(1);
const node_path_1 = __webpack_require__(112);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
exports.PACKAGE_ARCHIVE_PATH = (0, node_path_1.resolve)(server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.PACKAGE_ARCHIVE_PATH));
class PieceManager {
    install(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectPath, pieces }) {
            try {
                if ((0, shared_1.isEmpty)(pieces)) {
                    return;
                }
                const uniquePieces = this.removeDuplicatedPieces(pieces);
                yield this.installDependencies({
                    projectPath,
                    pieces: uniquePieces,
                });
            }
            catch (error) {
                const contextKey = '[PieceManager#install]';
                const contextValue = { projectPath, pieces };
                const enrichedError = (0, server_shared_1.enrichErrorContext)({
                    error,
                    key: contextKey,
                    value: contextValue,
                });
                throw enrichedError;
            }
        });
    }
    pieceToDependency(piece) {
        const packageAlias = (0, shared_1.getPackageAliasForPiece)({
            pieceName: piece.pieceName,
            pieceVersion: piece.pieceVersion,
        });
        const packageSpec = getPackageSpecForPiece(exports.PACKAGE_ARCHIVE_PATH, piece);
        return {
            alias: packageAlias,
            spec: packageSpec,
        };
    }
    removeDuplicatedPieces(pieces) {
        return pieces.filter((piece, index, self) => index ===
            self.findIndex((p) => p.pieceName === piece.pieceName &&
                p.pieceVersion === piece.pieceVersion));
    }
}
exports.PieceManager = PieceManager;
const getPackageSpecForPiece = (packageArchivePath, params) => {
    const { packageType, pieceName, pieceVersion } = params;
    switch (packageType) {
        case shared_1.PackageType.REGISTRY: {
            return `npm:${pieceName}@${pieceVersion}`;
        }
        case shared_1.PackageType.ARCHIVE: {
            const archivePath = (0, shared_1.getPackageArchivePathForPiece)({
                archiveId: params.archiveId,
                archivePath: packageArchivePath,
            });
            return `file:${archivePath}`;
        }
    }
};


/***/ }),
/* 495 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RegistryPieceManager = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(111);
const node_path_1 = __webpack_require__(112);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const piece_manager_1 = __webpack_require__(494);
class RegistryPieceManager extends piece_manager_1.PieceManager {
    installDependencies(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectPath, pieces, }) {
            yield this.savePackageArchivesToDiskIfNotCached(pieces);
            const enrichedDependencies = yield Promise.all(pieces.map((piece) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const pkg = this.pieceToDependency(piece);
                const fExists = yield (0, server_shared_1.fileExists)((0, node_path_1.join)(projectPath, 'node_modules', pkg.alias));
                return { pkg, fExists };
            })));
            const dependencies = enrichedDependencies.filter(({ fExists }) => !fExists).map(({ pkg }) => pkg);
            if (dependencies.length === 0) {
                return;
            }
            yield server_shared_1.packageManager.add({
                path: projectPath,
                dependencies,
            });
        });
    }
    savePackageArchivesToDiskIfNotCached(pieces) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const packages = yield this.getUncachedArchivePackages(pieces);
            const saveToDiskJobs = packages.map((piece) => this.getArchiveAndSaveToDisk(piece));
            yield Promise.all(saveToDiskJobs);
        });
    }
    getUncachedArchivePackages(pieces) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const packages = [];
            for (const piece of pieces) {
                if (piece.packageType !== shared_1.PackageType.ARCHIVE) {
                    continue;
                }
                const archivePath = (0, shared_1.getPackageArchivePathForPiece)({
                    archiveId: piece.archiveId,
                    archivePath: piece_manager_1.PACKAGE_ARCHIVE_PATH,
                });
                if (yield (0, server_shared_1.fileExists)(archivePath)) {
                    continue;
                }
                packages.push(piece);
            }
            return packages;
        });
    }
    getArchiveAndSaveToDisk(piece) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const archiveId = piece.archiveId;
            const archivePath = (0, shared_1.getPackageArchivePathForPiece)({
                archiveId,
                archivePath: piece_manager_1.PACKAGE_ARCHIVE_PATH,
            });
            yield (0, promises_1.mkdir)((0, node_path_1.dirname)(archivePath), { recursive: true });
            yield (0, promises_1.writeFile)(archivePath, piece.archive);
        });
    }
}
exports.RegistryPieceManager = RegistryPieceManager;


/***/ }),
/* 496 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codeBuilder = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = tslib_1.__importDefault(__webpack_require__(111));
const server_shared_1 = __webpack_require__(2);
const TS_CONFIG_CONTENT = `
{
    "extends": "@tsconfig/node18/tsconfig.json",
    "compilerOptions": {
        "lib": ["es2022", "dom"],
        "skipLibCheck": true,
        "noUnusedLocals": false,
        "noUnusedParameters": false,
        "strict": false,
        "strictPropertyInitialization": false,
        "strictNullChecks": false,
        "strictFunctionTypes": false,
        "strictBindCallApply": false,
        "noImplicitAny": false,
        "noImplicitThis": false,
        "noImplicitReturns": false,
        "noFallthroughCasesInSwitch": false
    }
}
`;
const INVALID_ARTIFACT_TEMPLATE_PATH = './packages/server/api/src/assets/invalid-code.js';
const INVALID_ARTIFACT_ERROR_PLACEHOLDER = '${ERROR_MESSAGE}';
exports.codeBuilder = {
    buildPath({ sourceCodeId, flowVersionId, buildPath, }) {
        return `${buildPath}/codes/${flowVersionId}/${sourceCodeId}`;
    },
    processCodeStep(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ sourceCode, sourceCodeId, flowVersionId, buildPath, }) {
            const codePath = exports.codeBuilder.buildPath({
                sourceCodeId,
                flowVersionId,
                buildPath,
            });
            server_shared_1.logger.debug({
                name: 'CodeBuilder#processCodeStep',
                sourceCode,
                sourceCodeId,
                codePath,
            });
            try {
                const { code, packageJson } = sourceCode;
                yield createBuildDirectory(codePath);
                yield installDependencies({
                    path: codePath,
                    packageJson,
                });
                yield compileCode({
                    path: codePath,
                    code,
                });
            }
            catch (error) {
                server_shared_1.logger.error({ name: 'CodeBuilder#processCodeStep', codePath, error });
                yield handleCompilationError({
                    codePath,
                    error: error,
                });
            }
        });
    },
};
const createBuildDirectory = (path) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const fsExists = yield (0, server_shared_1.fileExists)(path);
    if (fsExists) {
        yield promises_1.default.rm(path, { recursive: true });
    }
    yield promises_1.default.mkdir(path, { recursive: true });
});
const installDependencies = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ path, packageJson, }) {
    yield promises_1.default.writeFile(`${path}/package.json`, packageJson, 'utf8');
    const dependencies = [
        {
            alias: '@tsconfig/node18',
            spec: '1.0.0',
        },
        {
            alias: '@types/node',
            spec: '18.17.1',
        },
        {
            alias: 'typescript',
            spec: '4.8.4',
        },
    ];
    yield server_shared_1.packageManager.add({
        path,
        dependencies,
    });
});
const compileCode = (_b) => tslib_1.__awaiter(void 0, [_b], void 0, function* ({ path, code, }) {
    yield promises_1.default.writeFile(`${path}/tsconfig.json`, TS_CONFIG_CONTENT, 'utf8');
    yield promises_1.default.writeFile(`${path}/index.ts`, code, 'utf8');
    yield server_shared_1.packageManager.exec({
        path,
        command: 'tsc',
    });
});
const handleCompilationError = (_c) => tslib_1.__awaiter(void 0, [_c], void 0, function* ({ codePath, error, }) {
    var _d;
    const invalidArtifactTemplate = yield promises_1.default.readFile(INVALID_ARTIFACT_TEMPLATE_PATH, 'utf8');
    const errorMessage = `Compilation Error:\n${(_d = JSON.stringify(error)) !== null && _d !== void 0 ? _d : 'error building code'}`;
    const invalidArtifactContent = invalidArtifactTemplate.replace(INVALID_ARTIFACT_ERROR_PLACEHOLDER, JSON.stringify(errorMessage));
    yield promises_1.default.writeFile(`${codePath}/index.js`, invalidArtifactContent, 'utf8');
});


/***/ }),
/* 497 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.engineInstaller = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(111);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const engineExecutablePath = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENGINE_EXECUTABLE_PATH);
/**
 * Installs the engine executable to the given path
 */
exports.engineInstaller = {
    install(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ path }) {
            server_shared_1.logger.debug({ path }, '[engineInstaller#install]');
            const isDev = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT) === shared_1.ApEnvironment.DEVELOPMENT;
            const engineFileExists = yield (0, server_shared_1.fileExists)(`${path}/main.js`);
            if (!engineFileExists || isDev) {
                yield (0, promises_1.copyFile)(engineExecutablePath, `${path}/main.js`);
            }
            const engineMapFileExists = yield (0, server_shared_1.fileExists)(`${path}/main.js.map`);
            if (!engineMapFileExists || isDev) {
                yield (0, promises_1.copyFile)(`${engineExecutablePath}.map`, `${path}/main.js.map`);
            }
        });
    },
};


/***/ }),
/* 498 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CachedSandboxState = void 0;
var CachedSandboxState;
(function (CachedSandboxState) {
    /**
     * Sandbox object was created
     */
    CachedSandboxState["CREATED"] = "CREATED";
    /**
     * Init method was called on sandbox
     */
    CachedSandboxState["INITIALIZED"] = "INITIALIZED";
    /**
     * Dependencies, pieces, engine were installed on the sandbox, and it's ready to serve requests
     */
    CachedSandboxState["READY"] = "READY";
})(CachedSandboxState || (exports.CachedSandboxState = CachedSandboxState = {}));


/***/ }),
/* 499 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sandboxManager = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const async_mutex_1 = __webpack_require__(4);
const isolate_sandbox_1 = __webpack_require__(500);
const SANDBOX_LIMIT = 1000;
const sandboxes = new Array(SANDBOX_LIMIT)
    .fill(null)
    .map((_, i) => new isolate_sandbox_1.IsolateSandbox({ boxId: i }));
const lock = new async_mutex_1.Mutex();
exports.sandboxManager = {
    allocate(cacheKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ cacheKey }, '[SandboxManager#allocate]');
            const sandbox = yield executeWithLock(() => {
                const sandbox = findSandbox(cacheKey);
                if ((0, shared_1.isNil)(sandbox)) {
                    throw new Error('[SandboxManager#allocate] all sandboxes are in-use');
                }
                sandbox.inUse = true;
                return sandbox;
            });
            try {
                yield sandbox.cleanUp();
                return sandbox;
            }
            catch (e) {
                server_shared_1.logger.error(e, '[SandboxManager#allocate]');
                yield this.release(sandbox.boxId);
                throw e;
            }
        });
    },
    release(sandboxId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ boxId: sandboxId }, '[SandboxManager#release]');
            yield executeWithLock(() => {
                const sandbox = sandboxes[sandboxId];
                if ((0, shared_1.isNil)(sandbox)) {
                    throw new Error(`[SandboxManager#release] sandbox not found id=${sandboxId}`);
                }
                sandbox.inUse = false;
            });
        });
    },
};
const executeWithLock = (methodToExecute) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const releaseLock = yield lock.acquire();
    try {
        return methodToExecute();
    }
    finally {
        releaseLock();
    }
});
function findSandbox(cacheKey) {
    const sandboxByKey = sandboxes.find(f => f.cacheKey === cacheKey && !f.inUse);
    if (!(0, shared_1.isNil)(sandboxByKey)) {
        return sandboxByKey;
    }
    const uncachedSandbox = sandboxes.find(f => !f.inUse && (0, shared_1.isNil)(f.cacheKey));
    if (!(0, shared_1.isNil)(uncachedSandbox)) {
        return uncachedSandbox;
    }
    return sandboxes.find(f => !f.inUse);
}


/***/ }),
/* 500 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IsolateSandbox = void 0;
const tslib_1 = __webpack_require__(1);
const node_child_process_1 = __webpack_require__(130);
const promises_1 = __webpack_require__(111);
const node_path_1 = tslib_1.__importDefault(__webpack_require__(112));
const node_process_1 = tslib_1.__importStar(__webpack_require__(113));
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const getIsolateExecutableName = () => {
    var _a;
    const defaultName = 'isolate';
    const executableNameMap = {
        arm: 'isolate-arm',
        arm64: 'isolate-arm',
    };
    return (_a = executableNameMap[node_process_1.arch]) !== null && _a !== void 0 ? _a : defaultName;
};
class IsolateSandbox {
    constructor(params) {
        this.inUse = false;
        this.boxId = params.boxId;
    }
    get cacheKey() {
        return this._cacheKey;
    }
    cleanUp() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ boxId: this.boxId }, '[IsolateSandbox#recreate]');
            yield IsolateSandbox.runIsolate(`--box-id=${this.boxId} --cleanup`);
            yield IsolateSandbox.runIsolate(`--box-id=${this.boxId} --init`);
        });
    }
    runOperation(operationType, _operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metaFile = this.getSandboxFilePath('meta.txt');
            let timeInSeconds;
            let output;
            let verdict;
            try {
                const timeout = (0, server_shared_1.getEngineTimeout)(operationType);
                const dirsToBindArgs = this.getDirsToBindArgs();
                const propagatedEnvVars = Object.entries(this.getEnvironmentVariables()).map(([key, value]) => `--env=${key}='${value}'`);
                const fullCommand = [
                    ...dirsToBindArgs,
                    '--share-net',
                    `--box-id=${this.boxId}`,
                    '--processes',
                    `--wall-time=${timeout}`,
                    `--meta=${metaFile}`,
                    '--stdout=_standardOutput.txt',
                    '--stderr=_standardError.txt',
                    '--run',
                    ...propagatedEnvVars,
                    IsolateSandbox.nodeExecutablePath,
                    `${IsolateSandbox.cacheBindPath}/main.js`,
                    operationType,
                ].join(' ');
                yield IsolateSandbox.runIsolate(fullCommand);
                const engineResponse = yield this.parseFunctionOutput();
                output = engineResponse.response;
                verdict = engineResponse.status;
                const metaResult = yield this.parseMetaFile();
                timeInSeconds = Number.parseFloat(metaResult['time']);
            }
            catch (e) {
                const metaResult = yield this.parseMetaFile();
                timeInSeconds = Number.parseFloat(metaResult['time']);
                verdict = metaResult['status'] == 'TO' ? shared_1.EngineResponseStatus.TIMEOUT : shared_1.EngineResponseStatus.ERROR;
                verdict =
                    metaResult['status'] == 'TO'
                        ? shared_1.EngineResponseStatus.TIMEOUT
                        : shared_1.EngineResponseStatus.ERROR;
            }
            const result = {
                timeInSeconds,
                verdict,
                output,
                standardOutput: yield (0, promises_1.readFile)(this.getSandboxFilePath('_standardOutput.txt'), { encoding: 'utf-8' }),
                standardError: yield (0, promises_1.readFile)(this.getSandboxFilePath('_standardError.txt'), { encoding: 'utf-8' }),
            };
            server_shared_1.logger.trace(result, '[IsolateSandbox#runCommandLine] result');
            return result;
        });
    }
    getSandboxFolderPath() {
        return `/var/local/lib/isolate/${this.boxId}/box`;
    }
    getSandboxFilePath(subFile) {
        return `${this.getSandboxFolderPath()}/${subFile}`;
    }
    assignCache(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ cacheKey, cachePath, }) {
            server_shared_1.logger.debug({ boxId: this.boxId, cacheKey, cachePath }, '[IsolateSandbox#assignCache]');
            this._cacheKey = cacheKey;
            this._cachePath = cachePath;
        });
    }
    parseMetaFile() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metaFile = this.getSandboxFilePath('meta.txt');
            const lines = (yield (0, promises_1.readFile)(metaFile, { encoding: 'utf-8' })).split('\n');
            const result = {};
            lines.forEach((line) => {
                const parts = line.split(':');
                result[parts[0]] = parts[1];
            });
            return result;
        });
    }
    parseFunctionOutput() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const outputFile = this.getSandboxFilePath('output.json');
            if (!(yield (0, server_shared_1.fileExists)(outputFile))) {
                throw new Error(`Output file not found in ${outputFile}`);
            }
            const output = JSON.parse(yield (0, promises_1.readFile)(outputFile, { encoding: 'utf-8' }));
            server_shared_1.logger.trace(output, '[Sandbox#parseFunctionOutput] output');
            return output;
        });
    }
    static runIsolate(cmd) {
        const currentDir = (0, node_process_1.cwd)();
        const fullCmd = `${currentDir}/packages/server/api/src/assets/${this.isolateExecutableName} ${cmd}`;
        return new Promise((resolve, reject) => {
            (0, node_child_process_1.exec)(fullCmd, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                    return;
                }
                if (stderr) {
                    resolve(stderr);
                    return;
                }
                resolve(stdout);
            });
        });
    }
    getEnvironmentVariables() {
        const allowedEnvVariables = server_shared_1.system.getList(server_shared_1.SharedSystemProp.SANDBOX_PROPAGATED_ENV_VARS);
        const propagatedEnvVars = Object.fromEntries(allowedEnvVariables.map((envVar) => [envVar, node_process_1.default.env[envVar]]));
        return Object.assign(Object.assign({}, propagatedEnvVars), { HOME: '/tmp/', NODE_OPTIONS: '--enable-source-maps', AP_CODE_SANDBOX_TYPE: server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.CODE_SANDBOX_TYPE), AP_PIECES_SOURCE: server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.PIECES_SOURCE), AP_BASE_CODE_DIRECTORY: `${IsolateSandbox.cacheBindPath}/codes` });
    }
    /**
   * Creates the arguments for the isolate command to bind the required directories
   */
    getDirsToBindArgs() {
        const etcDir = node_path_1.default.resolve('./packages/server/api/src/assets/etc/');
        const cachePath = this._cachePath;
        (0, shared_1.assertNotNullOrUndefined)(cachePath, 'cachePath');
        const dirsToBind = [
            '--dir=/usr/bin/',
            `--dir=/etc/=${etcDir}`,
            `--dir=${IsolateSandbox.cacheBindPath}=${node_path_1.default.resolve(cachePath)}`,
        ];
        const piecesSource = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.PIECES_SOURCE);
        if (piecesSource === server_shared_1.PiecesSource.FILE) {
            const basePath = node_path_1.default.resolve(__dirname.split('/dist')[0]);
            dirsToBind.push(`--dir=${node_path_1.default.join(basePath, '.pnpm')}=/${node_path_1.default.join(basePath, '.pnpm')}:maybe`, `--dir=${node_path_1.default.join(basePath, 'dist')}=/${node_path_1.default.join(basePath, 'dist')}:maybe`, `--dir=${node_path_1.default.join(basePath, 'node_modules')}=/${node_path_1.default.join(basePath, 'node_modules')}:maybe`);
        }
        return dirsToBind;
    }
}
exports.IsolateSandbox = IsolateSandbox;
IsolateSandbox.nodeExecutablePath = node_process_1.default.execPath;
IsolateSandbox.isolateExecutableName = getIsolateExecutableName();
IsolateSandbox.cacheBindPath = '/root';


/***/ }),
/* 501 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.threadEngineRunner = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(128);
const path_1 = tslib_1.__importDefault(__webpack_require__(108));
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const piece_manager_1 = __webpack_require__(492);
const code_builder_1 = __webpack_require__(496);
const engine_installer_1 = __webpack_require__(497);
const webhook_utils_1 = __webpack_require__(479);
const engine_runner_1 = __webpack_require__(475);
const flow_enginer_util_1 = __webpack_require__(487);
const worker_1 = __webpack_require__(502);
const memoryLimit = Math.floor((Number(server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.SANDBOX_MEMORY_LIMIT)) / 1024));
const sandboxPath = path_1.default.resolve('cache');
const enginePath = path_1.default.join(sandboxPath, 'main.js');
// TODO seperate this to a config file from flow worker concurrency as execute step is different operation
const workerConcurrency = Math.max(5, (_a = server_shared_1.system.getNumber(server_shared_1.WorkerSystemProps.FLOW_WORKER_CONCURRENCY)) !== null && _a !== void 0 ? _a : 10);
let engineWorkers;
exports.threadEngineRunner = {
    executeFlow(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({
                flowVersion: operation.flowVersion.id,
                projectId: operation.projectId,
            }, '[threadEngineRunner#executeFlow]');
            yield prepareFlowSandbox(engineToken, operation.flowVersion);
            const input = Object.assign(Object.assign({}, operation), { engineToken, publicUrl: yield server_shared_1.networkUtls.getPublicUrl(), internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl() });
            return execute(input, shared_1.EngineOperationType.EXECUTE_FLOW);
        });
    },
    executeTrigger(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({
                hookType: operation.hookType,
                projectId: operation.projectId,
            }, '[threadEngineRunner#executeTrigger]');
            const triggerPiece = yield flow_enginer_util_1.pieceEngineUtil.getTriggerPiece(engineToken, operation.flowVersion);
            const lockedVersion = yield flow_enginer_util_1.pieceEngineUtil.lockPieceInFlowVersion({
                engineToken,
                stepName: operation.flowVersion.trigger.name,
                flowVersion: operation.flowVersion,
            });
            const input = {
                projectId: operation.projectId,
                hookType: operation.hookType,
                webhookUrl: operation.webhookUrl,
                triggerPayload: operation.triggerPayload,
                flowVersion: lockedVersion,
                appWebhookUrl: yield webhook_utils_1.webhookUtils.getAppWebhookUrl({
                    appName: triggerPiece.pieceName,
                }),
                publicUrl: yield server_shared_1.networkUtls.getPublicUrl(),
                internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(),
                webhookSecret: yield server_shared_1.webhookSecretsUtils.getWebhookSecret(lockedVersion),
                engineToken,
            };
            yield prepareSandbox([triggerPiece], []);
            return execute(input, shared_1.EngineOperationType.EXECUTE_TRIGGER_HOOK);
        });
    },
    extractPieceMetadata(operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ operation }, '[threadEngineRunner#extractPieceMetadata]');
            yield prepareSandbox([operation], []);
            return execute(operation, shared_1.EngineOperationType.EXTRACT_PIECE_METADATA);
        });
    },
    executeValidateAuth(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({ operation }, '[threadEngineRunner#executeValidateAuth]');
            const { piece } = operation;
            const lockedPiece = yield flow_enginer_util_1.pieceEngineUtil.getExactPieceVersion(engineToken, piece);
            yield prepareSandbox([lockedPiece], []);
            const input = Object.assign(Object.assign({}, operation), { publicUrl: yield server_shared_1.networkUtls.getPublicUrl(), internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(), engineToken });
            return execute(input, shared_1.EngineOperationType.EXECUTE_VALIDATE_AUTH);
        });
    },
    executeAction(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({
                stepName: operation.stepName,
                flowVersion: operation.flowVersion,
            }, '[threadEngineRunner#executeAction]');
            const step = shared_1.flowHelper.getStep(operation.flowVersion, operation.stepName);
            (0, shared_1.assertNotNullOrUndefined)(step, 'Step not found');
            switch (step.type) {
                case shared_1.ActionType.PIECE: {
                    const lockedPiece = yield flow_enginer_util_1.pieceEngineUtil.getExactPieceForStep(engineToken, step);
                    yield prepareSandbox([lockedPiece], []);
                    break;
                }
                case shared_1.ActionType.CODE: {
                    const codes = flow_enginer_util_1.pieceEngineUtil.getCodeSteps(operation.flowVersion).filter((code) => code.name === operation.stepName);
                    yield prepareSandbox([], codes);
                    break;
                }
                case shared_1.ActionType.BRANCH:
                case shared_1.ActionType.LOOP_ON_ITEMS:
                    break;
            }
            const lockedFlowVersion = yield flow_enginer_util_1.pieceEngineUtil.lockPieceInFlowVersion({
                engineToken,
                flowVersion: operation.flowVersion,
                stepName: operation.stepName,
            });
            const input = {
                flowVersion: lockedFlowVersion,
                stepName: operation.stepName,
                projectId: operation.projectId,
                publicUrl: yield server_shared_1.networkUtls.getPublicUrl(),
                internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(),
                engineToken,
            };
            return execute(input, shared_1.EngineOperationType.EXECUTE_STEP);
        });
    },
    executeProp(engineToken, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({
                piece: operation.piece,
                propertyName: operation.propertyName,
                stepName: operation.stepName,
                flowVersion: operation.flowVersion,
            }, '[threadEngineRunner#executeProp]');
            const { piece } = operation;
            const lockedPiece = yield flow_enginer_util_1.pieceEngineUtil.getExactPieceVersion(engineToken, piece);
            yield prepareSandbox([lockedPiece], []);
            const input = Object.assign(Object.assign({}, operation), { publicUrl: yield server_shared_1.networkUtls.getPublicUrl(), internalApiUrl: server_shared_1.networkUtls.getInternalApiUrl(), engineToken });
            return execute(input, shared_1.EngineOperationType.EXECUTE_PROPERTY);
        });
    },
};
function prepareFlowSandbox(engineToken, flowVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const pieces = yield flow_enginer_util_1.pieceEngineUtil.extractFlowPieces({
            flowVersion,
            engineToken,
        });
        const codes = flow_enginer_util_1.pieceEngineUtil.getCodeSteps(flowVersion);
        yield prepareSandbox(pieces, codes);
    });
}
function execute(operation, operationType) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const startTime = Date.now();
        if ((0, shared_1.isNil)(engineWorkers)) {
            engineWorkers = new worker_1.EngineWorker(workerConcurrency, enginePath, {
                env: getEnvironmentVariables(),
                resourceLimits: {
                    maxOldGenerationSizeMb: memoryLimit,
                    maxYoungGenerationSizeMb: memoryLimit,
                    stackSizeMb: memoryLimit,
                },
            });
        }
        const { engine, stdError, stdOut } = yield engineWorkers.executeTask(operationType, operation);
        return engine_runner_1.engineRunnerUtils.readResults({
            timeInSeconds: (Date.now() - startTime) / 1000,
            verdict: engine.status,
            output: engine.response,
            standardOutput: stdOut,
            standardError: stdError,
        });
    });
}
function prepareSandbox(pieces, codeSteps) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const lock = yield server_shared_1.memoryLock.acquire(sandboxPath);
        try {
            yield (0, promises_1.mkdir)(sandboxPath, { recursive: true });
            const buildJobs = codeSteps.map((archive) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const indexPath = path_1.default.join(code_builder_1.codeBuilder.buildPath({
                    buildPath: sandboxPath,
                    sourceCodeId: archive.name,
                    flowVersionId: archive.flowVersionId,
                }), 'index.js');
                const fExists = yield (0, server_shared_1.fileExists)(indexPath);
                if (fExists && archive.flowVersionState === shared_1.FlowVersionState.LOCKED) {
                    return new Promise((resolve) => resolve());
                }
                return prepareCode(archive, sandboxPath);
            }));
            yield Promise.all(buildJobs);
            server_shared_1.logger.info({
                sandboxPath,
            }, 'Running flow in sandbox');
            yield server_shared_1.packageManager.init({
                path: sandboxPath,
            });
            const installationTimestamp = (0, dayjs_1.default)().valueOf();
            yield piece_manager_1.pieceManager.install({
                projectPath: sandboxPath,
                pieces,
            });
            server_shared_1.logger.info({
                timeTook: (0, dayjs_1.default)().valueOf() - installationTimestamp,
                pieces,
                sandboxPath,
            }, 'Installing pieces in sandbox');
            server_shared_1.logger.info({
                path: sandboxPath,
            }, 'Installing engine in sandbox');
            yield engine_installer_1.engineInstaller.install({
                path: sandboxPath,
            });
        }
        finally {
            yield lock.release();
        }
    });
}
function prepareCode(artifact, sandboxPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield code_builder_1.codeBuilder.processCodeStep({
            sourceCodeId: artifact.name,
            sourceCode: artifact.sourceCode,
            flowVersionId: artifact.flowVersionId,
            buildPath: sandboxPath,
        });
    });
}
function getEnvironmentVariables() {
    const allowedEnvVariables = server_shared_1.system.getList(server_shared_1.SharedSystemProp.SANDBOX_PROPAGATED_ENV_VARS);
    const propagatedEnvVars = Object.fromEntries(allowedEnvVariables.map((envVar) => [envVar, process.env[envVar]]));
    return Object.assign(Object.assign({}, propagatedEnvVars), { NODE_OPTIONS: '--enable-source-maps', AP_CODE_SANDBOX_TYPE: server_shared_1.system.get(server_shared_1.SharedSystemProp.CODE_SANDBOX_TYPE), AP_PIECES_SOURCE: server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.PIECES_SOURCE), AP_BASE_CODE_DIRECTORY: `${sandboxPath}/codes` });
}


/***/ }),
/* 502 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EngineWorker = void 0;
const tslib_1 = __webpack_require__(1);
const worker_threads_1 = __webpack_require__(503);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
class EngineWorker {
    constructor(maxWorkers, enginePath, engineOptions) {
        this.enginePath = enginePath;
        this.engineOptions = engineOptions;
        this.workers = [];
        this.availableWorkerIndexes = [];
        this.lock = new server_shared_1.ApSemaphore(maxWorkers);
        // Create the initial workers
        for (let i = 0; i < maxWorkers; i++) {
            this.workers.push(new worker_threads_1.Worker(enginePath, engineOptions));
            this.availableWorkerIndexes.push(i);
        }
    }
    executeTask(operationType, operation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug({
                operationType,
                operation,
            }, 'Executing operation');
            yield this.lock.acquire();
            const workerIndex = this.availableWorkerIndexes.pop();
            server_shared_1.logger.debug({
                workerIndex,
            }, 'Acquired worker');
            (0, shared_1.assertNotNullOrUndefined)(workerIndex, 'Worker index should not be undefined');
            const worker = this.workers[workerIndex];
            const environment = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT);
            const timeout = (0, server_shared_1.getEngineTimeout)(operationType);
            try {
                const result = yield new Promise((resolve, reject) => {
                    let stdError = '';
                    let stdOut = '';
                    // eslint-disable-next-line @typescript-eslint/no-misused-promises
                    const timeoutWorker = setTimeout(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        resolve({
                            engine: {
                                status: shared_1.EngineResponseStatus.TIMEOUT,
                                response: {},
                            },
                            stdError: '',
                            stdOut: '',
                        });
                        yield worker.terminate();
                    }), timeout * 1000);
                    worker.on('message', (m) => {
                        if (m.type === 'result') {
                            cleanUp(worker, timeoutWorker);
                            resolve({
                                engine: m.message,
                                stdOut,
                                stdError,
                            });
                        }
                        else if (m.type === 'stdout') {
                            stdOut += m.message;
                        }
                        else if (m.type === 'stderr') {
                            stdError += m.message;
                        }
                    });
                    worker.on('error', () => {
                        cleanUp(worker, timeoutWorker);
                        this.workers[workerIndex] = new worker_threads_1.Worker(this.enginePath, this.engineOptions);
                        reject({ status: shared_1.EngineResponseStatus.ERROR, response: {} });
                    });
                    worker.on('exit', () => {
                        server_shared_1.logger.error({
                            stdError,
                            stdOut,
                            workerIndex,
                        }, 'Worker exited');
                        cleanUp(worker, timeoutWorker);
                        this.workers[workerIndex] = new worker_threads_1.Worker(this.enginePath, this.engineOptions);
                    });
                    worker.postMessage({ operation, operationType });
                });
                return result;
            }
            finally {
                if (environment === shared_1.ApEnvironment.DEVELOPMENT) {
                    server_shared_1.logger.debug({
                        workerIndex,
                    }, 'Removing worker in development mode to avoid caching issues');
                    (0, server_shared_1.rejectedPromiseHandler)(worker.terminate());
                    this.workers[workerIndex] = new worker_threads_1.Worker(this.enginePath, this.engineOptions);
                }
                server_shared_1.logger.debug({
                    workerIndex,
                }, 'Releasing worker');
                this.availableWorkerIndexes.push(workerIndex);
                this.lock.release();
            }
        });
    }
}
exports.EngineWorker = EngineWorker;
function cleanUp(worker, timeout) {
    worker.removeAllListeners('exit');
    worker.removeAllListeners('error');
    worker.removeAllListeners('message');
    clearTimeout(timeout);
}


/***/ }),
/* 503 */
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),
/* 504 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowJobExecutor = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const server_api_service_1 = __webpack_require__(480);
const engine_1 = __webpack_require__(477);
function prepareInput(flowVersion, jobData, engineToken) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        switch (jobData.executionType) {
            case shared_1.ExecutionType.BEGIN:
                return {
                    flowVersion,
                    flowRunId: jobData.runId,
                    projectId: jobData.projectId,
                    serverHandlerId: jobData.synchronousHandlerId,
                    triggerPayload: jobData.payload,
                    executionType: shared_1.ExecutionType.BEGIN,
                    runEnvironment: jobData.environment,
                    httpRequestId: (_a = jobData.httpRequestId) !== null && _a !== void 0 ? _a : null,
                    progressUpdateType: jobData.progressUpdateType,
                };
            case shared_1.ExecutionType.RESUME: {
                const flowRun = yield (0, server_api_service_1.engineApiService)(engineToken).getRun({
                    runId: jobData.runId,
                });
                return {
                    flowVersion,
                    flowRunId: jobData.runId,
                    projectId: jobData.projectId,
                    serverHandlerId: jobData.synchronousHandlerId,
                    tasks: (_b = flowRun.tasks) !== null && _b !== void 0 ? _b : 0,
                    executionType: shared_1.ExecutionType.RESUME,
                    steps: flowRun.steps,
                    runEnvironment: jobData.environment,
                    httpRequestId: (_c = jobData.httpRequestId) !== null && _c !== void 0 ? _c : null,
                    resumePayload: jobData.payload,
                    progressUpdateType: jobData.progressUpdateType,
                };
            }
        }
    });
}
function executeFlow(jobData, engineToken) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        try {
            const flow = yield (0, server_api_service_1.engineApiService)(engineToken).getFlowWithExactPieces({
                versionId: jobData.flowVersionId,
                type: shared_1.GetFlowVersionForWorkerRequestType.EXACT,
            });
            if ((0, shared_1.isNil)(flow)) {
                return;
            }
            yield (0, server_api_service_1.engineApiService)(engineToken).checkTaskLimit();
            const input = yield prepareInput(flow.version, jobData, engineToken);
            const { result } = yield engine_1.engineRunner.executeFlow(engineToken, input);
            if (result.status === shared_1.FlowRunStatus.INTERNAL_ERROR) {
                yield handleInternalError(jobData, engineToken, new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENGINE_OPERATION_FAILURE,
                    params: {
                        message: (_b = (_a = result.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : 'internal error',
                    },
                }));
            }
        }
        catch (e) {
            const isQuotaExceededError = e instanceof shared_1.ActivepiecesError && e.error.code === shared_1.ErrorCode.QUOTA_EXCEEDED;
            const isTimeoutError = e instanceof shared_1.ActivepiecesError && e.error.code === shared_1.ErrorCode.EXECUTION_TIMEOUT;
            if (isQuotaExceededError) {
                yield handleQuotaExceededError(jobData, engineToken);
            }
            else if (isTimeoutError) {
                yield handleTimeoutError(jobData, engineToken);
            }
            else {
                yield handleInternalError(jobData, engineToken, e);
            }
        }
    });
}
function handleQuotaExceededError(jobData, engineToken) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield (0, server_api_service_1.engineApiService)(engineToken).updateRunStatus({
            runDetails: {
                steps: {},
                duration: 0,
                status: shared_1.FlowRunStatus.QUOTA_EXCEEDED,
                tasks: 0,
                tags: [],
            },
            httpRequestId: jobData.httpRequestId,
            progressUpdateType: jobData.progressUpdateType,
            workerHandlerId: jobData.synchronousHandlerId,
            runId: jobData.runId,
        });
    });
}
function handleTimeoutError(jobData, engineToken) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield (0, server_api_service_1.engineApiService)(engineToken).updateRunStatus({
            runDetails: {
                steps: {},
                duration: 0,
                status: shared_1.FlowRunStatus.TIMEOUT,
                tasks: 0,
                tags: [],
            },
            httpRequestId: jobData.httpRequestId,
            progressUpdateType: jobData.progressUpdateType,
            workerHandlerId: jobData.synchronousHandlerId,
            runId: jobData.runId,
        });
    });
}
function handleInternalError(jobData, engineToken, e) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield (0, server_api_service_1.engineApiService)(engineToken).updateRunStatus({
            runDetails: {
                steps: {},
                duration: 0,
                status: shared_1.FlowRunStatus.INTERNAL_ERROR,
                tasks: 0,
                tags: [],
            },
            httpRequestId: jobData.httpRequestId,
            progressUpdateType: jobData.progressUpdateType,
            workerHandlerId: jobData.synchronousHandlerId,
            runId: jobData.runId,
        });
        throwErrorToRetry(e);
    });
}
function throwErrorToRetry(error) {
    server_shared_1.exceptionHandler.handle(error);
    throw error;
}
exports.flowJobExecutor = {
    executeFlow,
};


/***/ }),
/* 505 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowWorker = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const server_api_service_1 = __webpack_require__(480);
const flow_job_executor_1 = __webpack_require__(504);
const repeating_job_executor_1 = __webpack_require__(506);
const webhook_job_executor_1 = __webpack_require__(507);
const WORKER_CONCURRENCY = (_a = server_shared_1.system.getNumber(server_shared_1.WorkerSystemProps.FLOW_WORKER_CONCURRENCY)) !== null && _a !== void 0 ? _a : 10;
let closed = true;
let workerToken;
let heartbeatInterval;
exports.flowWorker = {
    init(generatedToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            closed = false;
            workerToken = generatedToken;
            heartbeatInterval = setInterval(() => {
                (0, server_shared_1.rejectedPromiseHandler)((0, server_api_service_1.workerApiService)(workerToken).heartbeat());
            }, 15000);
        });
    },
    start() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (WORKER_CONCURRENCY === 0) {
                return;
            }
            for (const queueName of Object.values(server_shared_1.QueueName)) {
                for (let i = 0; i < WORKER_CONCURRENCY; i++) {
                    (0, server_shared_1.rejectedPromiseHandler)(run(queueName));
                }
            }
        });
    },
    close() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            closed = true;
            clearTimeout(heartbeatInterval);
        });
    },
};
function run(queueName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        while (!closed) {
            let engineToken;
            try {
                const job = yield (0, server_api_service_1.workerApiService)(workerToken).poll(queueName);
                if ((0, shared_1.isNil)(job)) {
                    continue;
                }
                const { data, engineToken: jobEngineToken } = job;
                engineToken = jobEngineToken;
                yield consumeJob(queueName, data, engineToken);
                yield (0, server_api_service_1.engineApiService)(engineToken).updateJobStatus({
                    status: server_shared_1.JobStatus.COMPLETED,
                    queueName,
                });
            }
            catch (e) {
                server_shared_1.exceptionHandler.handle(e);
                if (engineToken) {
                    (0, server_shared_1.rejectedPromiseHandler)((0, server_api_service_1.engineApiService)(engineToken).updateJobStatus({
                        status: server_shared_1.JobStatus.FAILED,
                        queueName,
                        message: (_a = e === null || e === void 0 ? void 0 : e.message) !== null && _a !== void 0 ? _a : 'Unknown error',
                    }));
                }
            }
        }
    });
}
function consumeJob(queueName, jobData, engineToken) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (queueName) {
            case server_shared_1.QueueName.ONE_TIME:
                yield flow_job_executor_1.flowJobExecutor.executeFlow(jobData, engineToken);
                break;
            case server_shared_1.QueueName.SCHEDULED:
                yield repeating_job_executor_1.repeatingJobExecutor.executeRepeatingJob({
                    data: jobData,
                    engineToken,
                    workerToken,
                });
                break;
            case server_shared_1.QueueName.WEBHOOK: {
                yield webhook_job_executor_1.webhookExecutor.consumeWebhook(jobData, engineToken, workerToken);
                break;
            }
        }
    });
}


/***/ }),
/* 506 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.repeatingJobExecutor = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const server_api_service_1 = __webpack_require__(480);
const trigger_consumer_1 = __webpack_require__(483);
exports.repeatingJobExecutor = {
    executeRepeatingJob,
};
function executeRepeatingJob(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ data, engineToken, workerToken }) {
        var _b;
        const { flowVersionId, jobType } = data;
        const populatedFlow = yield (0, server_api_service_1.engineApiService)(engineToken).getFlowWithExactPieces({
            versionId: flowVersionId,
            type: shared_1.GetFlowVersionForWorkerRequestType.EXACT,
        });
        const flowVersion = (_b = populatedFlow === null || populatedFlow === void 0 ? void 0 : populatedFlow.version) !== null && _b !== void 0 ? _b : null;
        const isStale = yield isStaleFlowVersion(populatedFlow, jobType);
        if (isStale) {
            server_shared_1.logger.info({
                message: '[FlowQueueConsumer#executeRepeatingJob]',
                flowVersionId,
                publishedVersionId: populatedFlow === null || populatedFlow === void 0 ? void 0 : populatedFlow.publishedVersionId,
            }, 'removing stale flow');
            yield (0, server_api_service_1.engineApiService)(engineToken).removeStaleFlow({
                flowId: populatedFlow === null || populatedFlow === void 0 ? void 0 : populatedFlow.id,
                flowVersionId,
            });
            return;
        }
        (0, shared_1.assertNotNullOrUndefined)(flowVersion, 'flowVersion');
        switch (data.jobType) {
            case server_shared_1.RepeatableJobType.EXECUTE_TRIGGER:
                yield consumePieceTrigger(data, flowVersion, engineToken, workerToken);
                break;
            case server_shared_1.RepeatableJobType.DELAYED_FLOW:
                yield consumeDelayedJob(data, workerToken);
                break;
            case server_shared_1.RepeatableJobType.RENEW_WEBHOOK:
                yield consumeRenewWebhookJob(data, flowVersion, engineToken);
                break;
        }
    });
}
const isStaleFlowVersion = (flow, jobType) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if ((0, shared_1.isNil)(flow)) {
        return true;
    }
    return [server_shared_1.RepeatableJobType.EXECUTE_TRIGGER, server_shared_1.RepeatableJobType.RENEW_WEBHOOK].includes(jobType) && flow.publishedVersionId !== flow.version.id;
});
const consumePieceTrigger = (data, flowVersion, engineToken, workerToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const payloads = yield trigger_consumer_1.triggerConsumer.extractPayloads(engineToken, {
        projectId: data.projectId,
        flowVersion,
        payload: {},
        simulate: false,
    });
    yield (0, server_api_service_1.workerApiService)(workerToken).startRuns({
        flowVersionId: data.flowVersionId,
        progressUpdateType: shared_1.ProgressUpdateType.NONE,
        projectId: data.projectId,
        payloads,
    });
});
const consumeRenewWebhookJob = (data, flowVersion, engineToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    server_shared_1.logger.info(`[FlowQueueConsumer#consumeRenewWebhookJob] flowVersionId=${data.flowVersionId}`);
    yield trigger_consumer_1.triggerConsumer.renewWebhook({
        engineToken,
        flowVersion,
        projectId: data.projectId,
        simulate: false,
    });
});
const consumeDelayedJob = (data, workerToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    server_shared_1.logger.info(`[FlowQueueConsumer#consumeDelayedJob] flowRunId=${data.runId}`);
    yield (0, server_api_service_1.workerApiService)(workerToken).resumeRun(data);
});


/***/ }),
/* 507 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookExecutor = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const server_api_service_1 = __webpack_require__(480);
const webhook_utils_1 = __webpack_require__(479);
exports.webhookExecutor = {
    consumeWebhook(data, engineToken, workerToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const { flowId, payload, simulate } = data;
            const populatedFlow = yield (0, server_api_service_1.engineApiService)(engineToken).getFlowWithExactPieces({
                flowId,
                type: simulate ? shared_1.GetFlowVersionForWorkerRequestType.LATEST : shared_1.GetFlowVersionForWorkerRequestType.LOCKED,
            });
            if ((0, shared_1.isNil)(populatedFlow)) {
                yield stopAndReply(workerToken, data, {
                    status: http_status_codes_1.StatusCodes.GONE,
                    body: {},
                    headers: {},
                });
                return;
            }
            const handshakeResponse = yield webhook_utils_1.webhookUtils.handshake({
                engineToken,
                populatedFlow,
                payload,
            });
            if (!(0, shared_1.isNil)(handshakeResponse)) {
                yield stopAndReply(workerToken, data, {
                    status: handshakeResponse.status,
                    headers: (_a = handshakeResponse.headers) !== null && _a !== void 0 ? _a : {},
                    body: handshakeResponse.body,
                });
                return;
            }
            if (populatedFlow.status !== shared_1.FlowStatus.ENABLED && !simulate) {
                yield stopAndReply(workerToken, data, {
                    status: http_status_codes_1.StatusCodes.NOT_FOUND,
                    body: {},
                    headers: {},
                });
                return;
            }
            const filteredPayloads = yield webhook_utils_1.webhookUtils.extractPayloadAndSave({
                engineToken,
                workerToken,
                flowVersion: populatedFlow.version,
                payload,
                projectId: populatedFlow.projectId,
            });
            if (simulate) {
                yield (0, server_api_service_1.workerApiService)(workerToken).deleteWebhookSimulation({
                    flowId: populatedFlow.id,
                    projectId: populatedFlow.projectId,
                });
                yield stopAndReply(workerToken, data, {
                    status: http_status_codes_1.StatusCodes.OK,
                    body: {},
                    headers: {},
                });
                return;
            }
            const runs = yield (0, server_api_service_1.workerApiService)(workerToken).startRuns({
                flowVersionId: populatedFlow.version.id,
                projectId: populatedFlow.projectId,
                progressUpdateType: !(0, shared_1.isNil)(data.synchronousHandlerId) ? shared_1.ProgressUpdateType.WEBHOOK_RESPONSE : shared_1.ProgressUpdateType.NONE,
                synchronousHandlerId: (_b = data.synchronousHandlerId) !== null && _b !== void 0 ? _b : undefined,
                httpRequestId: data.requestId,
                payloads: filteredPayloads,
            });
            if ((0, shared_1.isNil)(runs) || runs.length === 0 || (0, shared_1.isNil)(runs[0])) {
                yield stopAndReply(workerToken, data, {
                    status: http_status_codes_1.StatusCodes.NOT_FOUND,
                    body: {},
                    headers: {},
                });
                return;
            }
        });
    },
};
function stopAndReply(workerToken, data, response) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if ((0, shared_1.isNil)(data.synchronousHandlerId)) {
            return;
        }
        yield (0, server_api_service_1.workerApiService)(workerToken).sendWebhookUpdate({
            workerServerId: data.synchronousHandlerId,
            requestId: data.requestId,
            response,
        });
    });
}


/***/ }),
/* 508 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateEngineToken = void 0;
const shared_1 = __webpack_require__(8);
const access_token_manager_1 = __webpack_require__(509);
const generateEngineToken = ({ jobId, projectId, }) => {
    return access_token_manager_1.accessTokenManager.generateToken({
        id: jobId !== null && jobId !== void 0 ? jobId : (0, shared_1.apId)(),
        type: shared_1.PrincipalType.ENGINE,
        projectId,
        // TODO NOW remove this hack
        platform: {
            id: (0, shared_1.apId)(),
        },
    });
};
exports.generateEngineToken = generateEngineToken;


/***/ }),
/* 509 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.accessTokenManager = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const jwt_utils_1 = __webpack_require__(510);
exports.accessTokenManager = {
    generateToken(principal_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (principal, expiresInSeconds = 7 * 30 * 24 * 60 * 60) {
            const secret = yield jwt_utils_1.jwtUtils.getJwtSecret();
            return jwt_utils_1.jwtUtils.sign({
                payload: principal,
                key: secret,
                expiresInSeconds,
            });
        });
    },
    generateWorkerToken(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ type, platformId }) {
            const workerPrincipal = {
                id: (0, shared_1.apId)(),
                type: shared_1.PrincipalType.WORKER,
                platform: (0, shared_1.isNil)(platformId) ? null : {
                    id: platformId,
                },
                worker: {
                    type,
                },
            };
            const secret = yield jwt_utils_1.jwtUtils.getJwtSecret();
            return jwt_utils_1.jwtUtils.sign({
                payload: workerPrincipal,
                key: secret,
                expiresInSeconds: dayjs_1.default.duration(100, 'year').asSeconds(),
            });
        });
    },
    extractPrincipal(token) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const secret = yield jwt_utils_1.jwtUtils.getJwtSecret();
            try {
                const decoded = yield jwt_utils_1.jwtUtils.decodeAndVerify({
                    jwt: token,
                    key: secret,
                });
                (0, shared_1.assertNotNullOrUndefined)(decoded.type, 'decoded.type');
                return decoded;
            }
            catch (e) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_BEARER_TOKEN,
                    params: {
                        message: 'invalid access token',
                    },
                });
            }
        });
    },
};


/***/ }),
/* 510 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.jwtUtils = exports.JwtSignAlgorithm = void 0;
const tslib_1 = __webpack_require__(1);
const crypto_1 = __webpack_require__(6);
const util_1 = __webpack_require__(300);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const jsonwebtoken_1 = tslib_1.__importDefault(__webpack_require__(511));
const local_store_1 = __webpack_require__(301);
var JwtSignAlgorithm;
(function (JwtSignAlgorithm) {
    JwtSignAlgorithm["HS256"] = "HS256";
    JwtSignAlgorithm["RS256"] = "RS256";
})(JwtSignAlgorithm || (exports.JwtSignAlgorithm = JwtSignAlgorithm = {}));
const ONE_WEEK = 7 * 24 * 3600;
const KEY_ID = '1';
const ISSUER = 'activepieces';
const ALGORITHM = JwtSignAlgorithm.HS256;
let secret = null;
const queueMode = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
const getSecret = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (secret !== null) {
        return secret;
    }
    secret = (_a = server_shared_1.system.get(server_shared_1.AppSystemProp.JWT_SECRET)) !== null && _a !== void 0 ? _a : null;
    if (queueMode === server_shared_1.QueueMode.MEMORY) {
        if ((0, shared_1.isNil)(secret)) {
            secret = yield getSecretFromStore();
        }
        if ((0, shared_1.isNil)(secret)) {
            secret = yield generateAndStoreSecret();
        }
    }
    if ((0, shared_1.isNil)(secret)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.SYSTEM_PROP_INVALID,
            params: {
                prop: server_shared_1.AppSystemProp.JWT_SECRET,
            },
        }, `System property AP_${server_shared_1.AppSystemProp.JWT_SECRET} must be defined`);
    }
    return secret;
});
const getSecretFromStore = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return local_store_1.localFileStore.load(server_shared_1.AppSystemProp.JWT_SECRET);
});
const generateAndStoreSecret = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const secretLengthInBytes = 32;
    const secretBuffer = yield (0, util_1.promisify)(crypto_1.randomBytes)(secretLengthInBytes);
    const secret = secretBuffer.toString('base64');
    yield local_store_1.localFileStore.save(server_shared_1.AppSystemProp.JWT_SECRET, secret);
    return secret;
});
exports.jwtUtils = {
    sign(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ payload, key, expiresInSeconds = ONE_WEEK, keyId = KEY_ID, algorithm = ALGORITHM, }) {
            const signOptions = {
                algorithm,
                keyid: keyId,
                expiresIn: expiresInSeconds,
                issuer: ISSUER,
            };
            return new Promise((resolve, reject) => {
                jsonwebtoken_1.default.sign(payload, key, signOptions, (err, token) => {
                    if (err) {
                        return reject(err);
                    }
                    if ((0, shared_1.isNil)(token)) {
                        return reject(new shared_1.ActivepiecesError({
                            code: shared_1.ErrorCode.INVALID_BEARER_TOKEN,
                            params: {},
                        }));
                    }
                    return resolve(token);
                });
            });
        });
    },
    getJwtSecret: getSecret,
    decodeAndVerify(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ jwt, key, algorithm = ALGORITHM, issuer = ISSUER, audience, }) {
            const verifyOptions = Object.assign(Object.assign({ algorithms: [algorithm] }, (0, shared_1.spreadIfDefined)('issuer', issuer)), (0, shared_1.spreadIfDefined)('audience', audience));
            return new Promise((resolve, reject) => {
                jsonwebtoken_1.default.verify(jwt, key, verifyOptions, (err, payload) => {
                    if (err) {
                        return reject(err);
                    }
                    return resolve(payload);
                });
            });
        });
    },
    decode({ jwt }) {
        const decodeOptions = {
            complete: true,
        };
        return jsonwebtoken_1.default.decode(jwt, decodeOptions);
    },
};


/***/ }),
/* 511 */
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),
/* 512 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.acquireLock = exports.initializeLock = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const redlock_1 = tslib_1.__importDefault(__webpack_require__(513));
const redis_connection_1 = __webpack_require__(514);
let redLock;
let redisConnection;
const queueMode = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
const initializeLock = () => {
    switch (queueMode) {
        case server_shared_1.QueueMode.REDIS: {
            redisConnection = (0, redis_connection_1.createRedisClient)();
            redLock = new redlock_1.default([redisConnection], {
                driftFactor: 0.01,
                retryCount: 30,
                retryDelay: 2000,
                retryJitter: 200,
                automaticExtensionThreshold: 500,
            });
            break;
        }
        case server_shared_1.QueueMode.MEMORY: {
            break;
        }
    }
};
exports.initializeLock = initializeLock;
const acquireRedisLock = (key, timeout) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        return yield redLock.acquire([key], timeout, {
            retryCount: Math.ceil(timeout / 2000) * 2,
            retryDelay: 2000,
        });
    }
    catch (e) {
        server_shared_1.exceptionHandler.handle(e);
        throw e;
    }
});
const acquireLock = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ key, timeout = 3000, }) {
    switch (queueMode) {
        case server_shared_1.QueueMode.REDIS:
            return acquireRedisLock(key, timeout);
        case server_shared_1.QueueMode.MEMORY:
            return server_shared_1.memoryLock.acquire(key, timeout);
        default:
            throw new Error(`Unknown queue mode: ${queueMode}`);
    }
});
exports.acquireLock = acquireLock;


/***/ }),
/* 513 */
/***/ ((module) => {

module.exports = require("redlock");

/***/ }),
/* 514 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a, _b;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRedisConnection = exports.createRedisClient = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const ioredis_1 = tslib_1.__importDefault(__webpack_require__(515));
const url = server_shared_1.system.get(server_shared_1.AppSystemProp.REDIS_URL);
const username = server_shared_1.system.get(server_shared_1.AppSystemProp.REDIS_USER);
const password = server_shared_1.system.get(server_shared_1.AppSystemProp.REDIS_PASSWORD);
const useSsl = (_a = server_shared_1.system.getBoolean(server_shared_1.AppSystemProp.REDIS_USE_SSL)) !== null && _a !== void 0 ? _a : false;
const db = (_b = server_shared_1.system.getNumber(server_shared_1.AppSystemProp.REDIS_DB)) !== null && _b !== void 0 ? _b : 0;
const createRedisClient = (params) => {
    const config = Object.assign({ maxRetriesPerRequest: null }, params);
    if (url) {
        return new ioredis_1.default(url, Object.assign({}, config));
    }
    const host = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.REDIS_HOST);
    const serializedPort = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.REDIS_PORT);
    const port = Number.parseInt(serializedPort, 10);
    return new ioredis_1.default(Object.assign(Object.assign({}, config), { host,
        port,
        username,
        password,
        db, tls: useSsl ? {} : undefined }));
};
exports.createRedisClient = createRedisClient;
exports.getRedisConnection = (() => {
    let redis = null;
    return () => {
        if (!(0, shared_1.isNil)(redis)) {
            return redis;
        }
        redis = (0, exports.createRedisClient)();
        return redis;
    };
})();


/***/ }),
/* 515 */
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),
/* 516 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appConnectionController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const application_events_1 = __webpack_require__(517);
const app_connection_service_1 = __webpack_require__(473);
const appConnectionController = (app, _opts, done) => {
    app.post('/', UpsertAppConnectionRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const appConnection = yield app_connection_service_1.appConnectionService.upsert({
            projectId: request.principal.projectId,
            request: request.body,
        });
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.CONNECTION_UPSERTED,
            data: {
                connection: appConnection,
            },
        });
        yield reply
            .status(http_status_codes_1.StatusCodes.CREATED)
            .send(removeSensitiveData(appConnection));
    }));
    app.get('/', ListAppConnectionsRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { name, pieceName, cursor, limit } = request.query;
        const appConnections = yield app_connection_service_1.appConnectionService.list({
            pieceName,
            name,
            projectId: request.principal.projectId,
            cursorRequest: cursor !== null && cursor !== void 0 ? cursor : null,
            limit: limit !== null && limit !== void 0 ? limit : DEFAULT_PAGE_SIZE,
        });
        const appConnectionsWithoutSensitiveData = Object.assign(Object.assign({}, appConnections), { data: appConnections.data.map(removeSensitiveData) });
        return appConnectionsWithoutSensitiveData;
    }));
    app.post('/validate-connection-name', ValidateConnectionNameRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const result = yield app_connection_service_1.appConnectionService.validateConnectionName({
            projectId: request.principal.projectId,
            connectionName: request.body.connectionName,
        });
        if (result.error) {
            return reply.status(http_status_codes_1.StatusCodes.BAD_REQUEST).send(result);
        }
        return result;
    })),
        app.delete('/:id', DeleteAppConnectionRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const connection = yield app_connection_service_1.appConnectionService.getOneOrThrow({
                id: request.params.id,
                projectId: request.principal.projectId,
            });
            application_events_1.eventsHooks.get().sendUserEvent(request, {
                action: ee_shared_1.ApplicationEventName.CONNECTION_DELETED,
                data: {
                    connection,
                },
            });
            yield app_connection_service_1.appConnectionService.delete({
                id: request.params.id,
                projectId: request.principal.projectId,
            });
            yield reply.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
        }));
    done();
};
exports.appConnectionController = appConnectionController;
const DEFAULT_PAGE_SIZE = 10;
const removeSensitiveData = (appConnection) => {
    const { value: _ } = appConnection, appConnectionWithoutSensitiveData = tslib_1.__rest(appConnection, ["value"]);
    return appConnectionWithoutSensitiveData;
};
const UpsertAppConnectionRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.WRITE_APP_CONNECTION,
    },
    schema: {
        tags: ['app-connections'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        description: 'Upsert an app connection based on the app name',
        body: shared_1.UpsertAppConnectionRequestBody,
        Response: {
            [http_status_codes_1.StatusCodes.CREATED]: shared_1.AppConnectionWithoutSensitiveData,
        },
    },
};
const ListAppConnectionsRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.READ_APP_CONNECTION,
    },
    schema: {
        tags: ['app-connections'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        querystring: shared_1.ListAppConnectionsRequestQuery,
        description: 'List app connections',
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.AppConnectionWithoutSensitiveData),
        },
    },
};
const ValidateConnectionNameRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.READ_APP_CONNECTION,
    },
    schema: {
        tags: ['app-connections'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        body: shared_1.ValidateConnectionNameRequestBody,
        description: 'Validate app connection name',
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.ValidateConnectionNameResponse,
            [http_status_codes_1.StatusCodes.BAD_REQUEST]: shared_1.ValidateConnectionNameResponse,
        },
    },
};
const DeleteAppConnectionRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.WRITE_APP_CONNECTION,
    },
    schema: {
        tags: ['app-connections'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        description: 'Delete an app connection',
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        response: {
            [http_status_codes_1.StatusCodes.NO_CONTENT]: type_provider_typebox_1.Type.Undefined(),
        },
    },
};


/***/ }),
/* 517 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.eventsHooks = exports.AuditEventParam = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const typebox_1 = __webpack_require__(10);
exports.AuditEventParam = typebox_1.Type.Pick(typebox_1.Type.Union([
    ee_shared_1.ConnectionEvent,
    ee_shared_1.FlowCreatedEvent,
    ee_shared_1.FlowDeletedEvent,
    ee_shared_1.FlowUpdatedEvent,
    ee_shared_1.AuthenticationEvent,
    ee_shared_1.FolderEvent,
    ee_shared_1.SignUpEvent,
    ee_shared_1.SigningKeyEvent,
    ee_shared_1.FlowRunEvent,
]), ['data', 'action']);
let hooks = {
    sendUserEvent(_request, _params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return;
        });
    },
    sendWorkerEvent(_params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return;
        });
    },
};
exports.eventsHooks = {
    set(newHooks) {
        hooks = newHooks;
    },
    get() {
        return hooks;
    },
};


/***/ }),
/* 518 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appEventRoutingController = exports.appEventRoutingModule = void 0;
const tslib_1 = __webpack_require__(1);
const piece_facebook_leads_1 = __webpack_require__(519);
const piece_intercom_1 = __webpack_require__(541);
const piece_slack_1 = __webpack_require__(548);
const piece_square_1 = __webpack_require__(570);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const queue_1 = __webpack_require__(572);
const app_event_routing_service_1 = __webpack_require__(588);
const appWebhooks = {
    slack: piece_slack_1.slack,
    square: piece_square_1.square,
    'facebook-leads': piece_facebook_leads_1.facebookLeads,
    intercom: piece_intercom_1.intercom,
};
const pieceNames = {
    slack: '@activepieces/piece-slack',
    square: '@activepieces/piece-square',
    'facebook-leads': '@activepieces/piece-facebook-leads',
    intercom: '@activepieces/piece-intercom',
};
const appEventRoutingModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(exports.appEventRoutingController, { prefix: '/v1/app-events' });
});
exports.appEventRoutingModule = appEventRoutingModule;
const appEventRoutingController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.all('/:pieceUrl', {
        config: {
            rawBody: true,
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        logLevel: 'silent',
    }, (request, requestReply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const pieceUrl = request.params.pieceUrl;
        const eventPayload = {
            headers: request.headers,
            body: request.body,
            rawBody: request.rawBody,
            method: request.method,
            queryParams: request.query,
        };
        const piece = appWebhooks[pieceUrl];
        if ((0, shared_1.isNil)(piece)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.PIECE_NOT_FOUND,
                params: {
                    pieceName: pieceUrl,
                    pieceVersion: 'latest',
                    message: 'Pieces is not found in app event routing',
                },
            });
        }
        const pieceName = pieceNames[pieceUrl];
        const { reply, event, identifierValue } = piece.events.parseAndReply({
            payload: eventPayload,
        });
        server_shared_1.logger.debug(`Received event ${event} with identifier ${identifierValue} in app ${pieceName}`);
        if (event && identifierValue) {
            const listeners = yield app_event_routing_service_1.appEventRoutingService.listListeners({
                appName: pieceName,
                event,
                identifierValue,
            });
            (0, server_shared_1.rejectedPromiseHandler)(Promise.all(listeners.map((listener) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const requestId = (0, shared_1.apId)();
                yield queue_1.flowQueue.add(null, {
                    id: requestId,
                    type: server_shared_1.JobType.WEBHOOK,
                    data: {
                        schemaVersion: server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION,
                        requestId,
                        synchronousHandlerId: null,
                        payload: eventPayload,
                        flowId: listener.flowId,
                        simulate: false,
                    },
                    priority: 'medium',
                });
            }))));
        }
        return requestReply
            .status(200)
            .headers((_a = reply === null || reply === void 0 ? void 0 : reply.headers) !== null && _a !== void 0 ? _a : {})
            .send((_b = reply === null || reply === void 0 ? void 0 : reply.body) !== null && _b !== void 0 ? _b : {});
    }));
});
exports.appEventRoutingController = appEventRoutingController;


/***/ }),
/* 519 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.facebookLeads = exports.facebookLeadsAuth = void 0;
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const new_lead_1 = __webpack_require__(520);
exports.facebookLeadsAuth = pieces_framework_1.PieceAuth.OAuth2({
    description: '',
    authUrl: 'https://graph.facebook.com/oauth/authorize',
    tokenUrl: 'https://graph.facebook.com/oauth/access_token',
    required: true,
    scope: [
        'pages_show_list',
        'pages_manage_ads',
        'leads_retrieval',
        'pages_manage_metadata',
    ],
});
exports.facebookLeads = (0, pieces_framework_1.createPiece)({
    displayName: 'Facebook Leads',
    description: 'Capture leads from Facebook',
    minimumSupportedRelease: '0.5.0',
    logoUrl: 'https://cdn.activepieces.com/pieces/facebook.png',
    authors: ["kishanprmr", "MoShizzle", "khaledmashaly", "abuaboud"],
    categories: [shared_1.PieceCategory.MARKETING],
    auth: exports.facebookLeadsAuth,
    actions: [],
    triggers: [new_lead_1.newLead],
    events: {
        parseAndReply: (context) => {
            const payload = context.payload;
            const payloadBody = payload.body;
            if (payload.queryParams['hub.verify_token'] == 'activepieces') {
                return {
                    reply: {
                        body: payload.queryParams['hub.challenge'],
                        headers: {},
                    },
                };
            }
            return {
                event: 'lead',
                identifierValue: payloadBody.entry[0].changes[0].value.page_id,
            };
        },
        verify: () => {
            // TODO IMPLEMENT VALIDATION AFTER APP VERIFICATION
            return true;
        },
    },
});


/***/ }),
/* 520 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.newLead = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const common_1 = __webpack_require__(521);
const __1 = __webpack_require__(519);
exports.newLead = (0, pieces_framework_1.createTrigger)({
    auth: __1.facebookLeadsAuth,
    name: 'new_lead',
    displayName: 'New Lead',
    description: 'Triggers when a new lead is created',
    type: pieces_framework_1.TriggerStrategy.APP_WEBHOOK,
    sampleData: {},
    props: {
        page: common_1.facebookLeadsCommon.page,
        form: common_1.facebookLeadsCommon.form,
    },
    onEnable(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const page = context.propsValue['page'];
            yield common_1.facebookLeadsCommon.subscribePageToApp(page.id, page.accessToken);
            context.app.createListeners({ events: ['lead'], identifierValue: page.id });
        });
    },
    onDisable() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            //
        });
    },
    //Return new lead
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let leadPings = [];
            const leads = [];
            const form = context.propsValue.form;
            const payloadBody = context.payload.body;
            if (form !== undefined && form !== '' && form !== null) {
                for (const lead of payloadBody.entry) {
                    if (form == lead.changes[0].value.form_id) {
                        leadPings.push(lead);
                    }
                }
            }
            else {
                leadPings = payloadBody.entry;
            }
            for (const lead of leadPings) {
                const leadData = yield common_1.facebookLeadsCommon.getLeadDetails(lead.changes[0].value.leadgen_id, context.auth.access_token);
                leads.push(leadData);
            }
            return [leads];
        });
    },
    test(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let form = context.propsValue.form;
            const page = context.propsValue.page;
            if (form == undefined || form == '' || form == null) {
                const forms = yield common_1.facebookLeadsCommon.getPageForms(page.id, page.accessToken);
                form = forms[0].id;
            }
            const data = yield common_1.facebookLeadsCommon.loadSampleData(form, context.auth.access_token);
            return [data.data];
        });
    },
});


/***/ }),
/* 521 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.facebookLeadsCommon = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const pieces_common_1 = __webpack_require__(522);
exports.facebookLeadsCommon = {
    baseUrl: 'https://graph.facebook.com',
    page: pieces_framework_1.Property.Dropdown({
        displayName: 'Page',
        required: true,
        refreshers: [],
        options: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ auth }) {
            if (!auth) {
                return {
                    disabled: true,
                    options: [],
                    placeholder: 'Connect your account',
                };
            }
            try {
                const authProp = auth;
                const pages = (yield exports.facebookLeadsCommon.getPages(authProp.access_token)).map((page) => {
                    return {
                        label: page.name,
                        value: {
                            id: page.id,
                            accessToken: page.access_token,
                        },
                    };
                });
                return {
                    options: pages,
                    placeholder: 'Choose a page',
                };
            }
            catch (e) {
                console.debug(e);
                return {
                    disabled: true,
                    options: [],
                    placeholder: 'Connect your account',
                };
            }
        }),
    }),
    form: pieces_framework_1.Property.Dropdown({
        displayName: 'Form',
        required: false,
        refreshers: ['page'],
        options: (_b) => tslib_1.__awaiter(void 0, [_b], void 0, function* ({ page }) {
            if (!page) {
                return {
                    disabled: true,
                    options: [],
                    placeholder: 'Choose a page',
                };
            }
            try {
                const modifiedPage = page;
                const forms = (yield exports.facebookLeadsCommon.getPageForms(modifiedPage.id, modifiedPage.accessToken)).map((form) => {
                    return {
                        label: form.name,
                        value: form.id,
                    };
                });
                forms.unshift({
                    label: 'All Forms (Default)',
                    value: undefined,
                });
                return {
                    options: forms,
                    placeholder: 'Choose a form',
                };
            }
            catch (e) {
                console.debug(e);
                return {
                    disabled: true,
                    options: [],
                    placeholder: 'Choose a page',
                };
            }
        }),
    }),
    subscribePageToApp: (pageId, accessToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const request = {
            method: pieces_common_1.HttpMethod.POST,
            url: `${exports.facebookLeadsCommon.baseUrl}/${pageId}/subscribed_apps`,
            body: {
                access_token: accessToken,
                subscribed_fields: ['leadgen'],
            },
        };
        yield pieces_common_1.httpClient.sendRequest(request);
    }),
    getPages: (accessToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const request = {
            method: pieces_common_1.HttpMethod.GET,
            url: `${exports.facebookLeadsCommon.baseUrl}/me/accounts`,
            queryParams: {
                access_token: accessToken,
            },
        };
        const response = yield pieces_common_1.httpClient.sendRequest(request);
        return response.body.data;
    }),
    getPageForms: (pageId, accessToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const request = {
            method: pieces_common_1.HttpMethod.GET,
            url: `${exports.facebookLeadsCommon.baseUrl}/${pageId}/leadgen_forms`,
            queryParams: {
                access_token: accessToken,
            },
        };
        const response = yield pieces_common_1.httpClient.sendRequest(request);
        return response.body.data;
    }),
    getLeadDetails: (leadId, accessToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield pieces_common_1.httpClient.sendRequest({
            method: pieces_common_1.HttpMethod.GET,
            url: `${exports.facebookLeadsCommon.baseUrl}/${leadId}`,
            queryParams: {
                access_token: accessToken,
            },
        });
        return response.body;
    }),
    loadSampleData: (formId, accessToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield pieces_common_1.httpClient.sendRequest({
            method: pieces_common_1.HttpMethod.GET,
            url: `${exports.facebookLeadsCommon.baseUrl}/${formId}/leads`,
            queryParams: {
                access_token: accessToken,
            },
        });
        return response.body;
    }),
};


/***/ }),
/* 522 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(523), exports);
tslib_1.__exportStar(__webpack_require__(524), exports);
tslib_1.__exportStar(__webpack_require__(525), exports);
tslib_1.__exportStar(__webpack_require__(540), exports);


/***/ }),
/* 523 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuthenticationType = void 0;
var AuthenticationType;
(function (AuthenticationType) {
    AuthenticationType["BEARER_TOKEN"] = "BEARER_TOKEN";
    AuthenticationType["BASIC"] = "BASIC";
})(AuthenticationType || (exports.AuthenticationType = AuthenticationType = {}));


/***/ }),
/* 524 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCustomApiCallAction = exports.getAccessTokenOrThrow = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const http_1 = __webpack_require__(525);
const shared_1 = __webpack_require__(8);
const getAccessTokenOrThrow = (auth) => {
    const accessToken = auth === null || auth === void 0 ? void 0 : auth.access_token;
    if (accessToken === undefined) {
        throw new Error("Invalid bearer token");
    }
    return accessToken;
};
exports.getAccessTokenOrThrow = getAccessTokenOrThrow;
function createCustomApiCallAction({ auth, baseUrl, authMapping, description, displayName, name }) {
    return (0, pieces_framework_1.createAction)({
        name: name ? name : 'custom_api_call',
        displayName: displayName ? displayName : 'Custom API Call',
        description: description ? description : 'Make a custom API call to a specific endpoint',
        auth: auth ? auth : undefined,
        requireAuth: auth ? true : false,
        props: {
            url: pieces_framework_1.Property.DynamicProperties({
                displayName: '',
                required: true,
                refreshers: [],
                props: (_a) => tslib_1.__awaiter(this, [_a], void 0, function* ({ auth }) {
                    return {
                        url: pieces_framework_1.Property.ShortText({
                            displayName: 'URL',
                            description: 'The full URL to use, including the base URL',
                            required: true,
                            defaultValue: baseUrl(auth)
                        })
                    };
                })
            }),
            method: pieces_framework_1.Property.StaticDropdown({
                displayName: 'Method',
                required: true,
                options: {
                    options: Object.values(http_1.HttpMethod).map(v => {
                        return {
                            label: v,
                            value: v,
                        };
                    })
                }
            }),
            headers: pieces_framework_1.Property.Object({
                displayName: 'Headers',
                description: 'Authorization headers are injected automatically from your connection.',
                required: true,
            }),
            queryParams: pieces_framework_1.Property.Object({
                displayName: 'Query Parameters',
                required: true,
            }),
            body: pieces_framework_1.Property.Json({
                displayName: 'Body',
                required: false,
            }),
            failsafe: pieces_framework_1.Property.Checkbox({
                displayName: 'No Error on Failure',
                required: false,
            }),
            timeout: pieces_framework_1.Property.Number({
                displayName: 'Timeout (in seconds)',
                required: false,
            }),
        },
        run: (context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { method, url, headers, queryParams, body, failsafe, timeout } = context.propsValue;
            (0, shared_1.assertNotNullOrUndefined)(method, 'Method');
            (0, shared_1.assertNotNullOrUndefined)(url, 'URL');
            let headersValue = headers;
            if (authMapping) {
                const headers = yield authMapping(context.auth);
                if (headers) {
                    headersValue = Object.assign(Object.assign({}, headersValue), headers);
                }
            }
            const request = {
                method,
                url: url['url'],
                headers: headersValue,
                queryParams: queryParams,
                timeout: timeout ? timeout * 1000 : 0,
            };
            if (body) {
                request.body = body;
            }
            try {
                return yield http_1.httpClient.sendRequest(request);
            }
            catch (error) {
                if (failsafe) {
                    return error.errorMessage();
                }
                throw error;
            }
        })
    });
}
exports.createCustomApiCallAction = createCustomApiCallAction;


/***/ }),
/* 525 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(526), exports);
tslib_1.__exportStar(__webpack_require__(529), exports);
tslib_1.__exportStar(__webpack_require__(527), exports);
tslib_1.__exportStar(__webpack_require__(533), exports);
tslib_1.__exportStar(__webpack_require__(532), exports);
tslib_1.__exportStar(__webpack_require__(528), exports);
tslib_1.__exportStar(__webpack_require__(534), exports);
tslib_1.__exportStar(__webpack_require__(535), exports);
tslib_1.__exportStar(__webpack_require__(536), exports);
tslib_1.__exportStar(__webpack_require__(537), exports);
tslib_1.__exportStar(__webpack_require__(538), exports);
tslib_1.__exportStar(__webpack_require__(530), exports);
tslib_1.__exportStar(__webpack_require__(539), exports);


/***/ }),
/* 526 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AxiosHttpClient = void 0;
const tslib_1 = __webpack_require__(1);
const axios_1 = tslib_1.__importDefault(__webpack_require__(198));
const delegating_authentication_converter_1 = __webpack_require__(527);
const base_http_client_1 = __webpack_require__(529);
const http_error_1 = __webpack_require__(532);
class AxiosHttpClient extends base_http_client_1.BaseHttpClient {
    constructor(baseUrl = '', authenticationConverter = new delegating_authentication_converter_1.DelegatingAuthenticationConverter()) {
        super(baseUrl, authenticationConverter);
    }
    sendRequest(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            try {
                process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';
                const { urlWithoutQueryParams, queryParams } = this.getUrl(request);
                const headers = this.getHeaders(request);
                const axiosRequestMethod = this.getAxiosRequestMethod(request.method);
                const timeout = request.timeout ? request.timeout : 0;
                for (const key in request.queryParams) {
                    queryParams.append(key, request.queryParams[key]);
                }
                const config = {
                    method: axiosRequestMethod,
                    url: urlWithoutQueryParams,
                    params: queryParams,
                    headers,
                    data: request.body,
                    timeout,
                };
                const response = yield axios_1.default.request(config);
                return {
                    status: response.status,
                    headers: response.headers,
                    body: response.data,
                };
            }
            catch (e) {
                console.error('[HttpClient#sendRequest] error:', e);
                if (axios_1.default.isAxiosError(e)) {
                    console.error('[HttpClient#sendRequest] error, responseStatus:', (_a = e.response) === null || _a === void 0 ? void 0 : _a.status);
                    console.error('[HttpClient#sendRequest] error, responseBody:', (_b = e.response) === null || _b === void 0 ? void 0 : _b.data);
                    throw new http_error_1.HttpError(request.body, e);
                }
                throw e;
            }
        });
    }
    getAxiosRequestMethod(httpMethod) {
        return httpMethod.toString();
    }
}
exports.AxiosHttpClient = AxiosHttpClient;


/***/ }),
/* 527 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DelegatingAuthenticationConverter = void 0;
const http_header_1 = __webpack_require__(528);
const authentication_1 = __webpack_require__(523);
class DelegatingAuthenticationConverter {
    constructor(bearerTokenConverter = new BearerTokenAuthenticationConverter(), basicTokenConverter = new BasicTokenAuthenticationConverter()) {
        this.converters = {
            [authentication_1.AuthenticationType.BEARER_TOKEN]: bearerTokenConverter,
            [authentication_1.AuthenticationType.BASIC]: basicTokenConverter,
        };
    }
    convert(authentication, headers) {
        const converter = this.converters[authentication.type];
        return converter.convert(authentication, headers);
    }
}
exports.DelegatingAuthenticationConverter = DelegatingAuthenticationConverter;
class BearerTokenAuthenticationConverter {
    convert(authentication, headers) {
        headers[http_header_1.HttpHeader.AUTHORIZATION] = `Bearer ${authentication.token}`;
        return headers;
    }
}
class BasicTokenAuthenticationConverter {
    convert(authentication, headers) {
        const credentials = `${authentication.username}:${authentication.password}`;
        const encoded = Buffer.from(credentials).toString('base64');
        headers[http_header_1.HttpHeader.AUTHORIZATION] = `Basic ${encoded}`;
        return headers;
    }
}


/***/ }),
/* 528 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpHeader = void 0;
var HttpHeader;
(function (HttpHeader) {
    HttpHeader["AUTHORIZATION"] = "Authorization";
    HttpHeader["ACCEPT"] = "Accept";
    HttpHeader["API_KEY"] = "Api-Key";
    HttpHeader["CONTENT_TYPE"] = "Content-Type";
})(HttpHeader || (exports.HttpHeader = HttpHeader = {}));


/***/ }),
/* 529 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseHttpClient = void 0;
const http_header_1 = __webpack_require__(528);
const media_type_1 = __webpack_require__(530);
const node_url_1 = __webpack_require__(531);
class BaseHttpClient {
    constructor(baseUrl, authenticationConverter) {
        this.baseUrl = baseUrl;
        this.authenticationConverter = authenticationConverter;
    }
    getUrl(request) {
        const url = new node_url_1.URL(`${this.baseUrl}${request.url}`);
        const urlWithoutQueryParams = `${url.origin}${url.pathname}`;
        const queryParams = new URLSearchParams();
        // Extract query parameters
        url.searchParams.forEach((value, key) => {
            queryParams.append(key, value);
        });
        return {
            urlWithoutQueryParams,
            queryParams,
        };
    }
    getHeaders(request) {
        var _a;
        let requestHeaders = {
            [http_header_1.HttpHeader.ACCEPT]: media_type_1.MediaType.APPLICATION_JSON,
        };
        if (request.authentication) {
            this.populateAuthentication(request.authentication, requestHeaders);
        }
        if (request.body) {
            switch ((_a = request.headers) === null || _a === void 0 ? void 0 : _a['Content-Type']) {
                case 'text/csv':
                    requestHeaders[http_header_1.HttpHeader.CONTENT_TYPE] = media_type_1.MediaType.TEXT_CSV;
                    break;
                default:
                    requestHeaders[http_header_1.HttpHeader.CONTENT_TYPE] = media_type_1.MediaType.APPLICATION_JSON;
                    break;
            }
        }
        if (request.headers) {
            requestHeaders = Object.assign(Object.assign({}, requestHeaders), request.headers);
        }
        return requestHeaders;
    }
    populateAuthentication(authentication, headers) {
        this.authenticationConverter.convert(authentication, headers);
    }
}
exports.BaseHttpClient = BaseHttpClient;


/***/ }),
/* 530 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MediaType = void 0;
var MediaType;
(function (MediaType) {
    MediaType["APPLICATION_JSON"] = "application/json";
    MediaType["TEXT_CSV"] = "text/csv";
})(MediaType || (exports.MediaType = MediaType = {}));


/***/ }),
/* 531 */
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),
/* 532 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpError = void 0;
class HttpError extends Error {
    constructor(_requestBody, _err) {
        var _a, _b;
        super(JSON.stringify({
            response: {
                status: ((_a = _err === null || _err === void 0 ? void 0 : _err.response) === null || _a === void 0 ? void 0 : _a.status) || 500,
                body: (_b = _err === null || _err === void 0 ? void 0 : _err.response) === null || _b === void 0 ? void 0 : _b.data,
            },
            request: {
                body: _requestBody,
            },
        }));
        this._requestBody = _requestBody;
        this._err = _err;
    }
    errorMessage() {
        var _a, _b, _c, _d;
        return {
            response: {
                status: ((_b = (_a = this._err) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.status) || 500,
                body: (_d = (_c = this._err) === null || _c === void 0 ? void 0 : _c.response) === null || _d === void 0 ? void 0 : _d.data,
            },
            request: {
                body: this._requestBody,
            },
        };
    }
    get response() {
        var _a, _b, _c, _d;
        return {
            status: ((_b = (_a = this._err) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.status) || 500,
            body: (_d = (_c = this._err) === null || _c === void 0 ? void 0 : _c.response) === null || _d === void 0 ? void 0 : _d.data,
        };
    }
    get request() {
        return {
            body: this._requestBody,
        };
    }
}
exports.HttpError = HttpError;


/***/ }),
/* 533 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.httpClient = void 0;
const axios_http_client_1 = __webpack_require__(526);
exports.httpClient = new axios_http_client_1.AxiosHttpClient();


/***/ }),
/* 534 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 535 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 536 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpMethod = void 0;
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["PATCH"] = "PATCH";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["DELETE"] = "DELETE";
    HttpMethod["HEAD"] = "HEAD";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {}));


/***/ }),
/* 537 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 538 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 539 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),
/* 540 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pollingHelper = exports.DedupeStrategy = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
var DedupeStrategy;
(function (DedupeStrategy) {
    DedupeStrategy[DedupeStrategy["TIMEBASED"] = 0] = "TIMEBASED";
    DedupeStrategy[DedupeStrategy["LAST_ITEM"] = 1] = "LAST_ITEM";
})(DedupeStrategy || (exports.DedupeStrategy = DedupeStrategy = {}));
exports.pollingHelper = {
    poll(polling_1, _a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (polling, { store, auth, propsValue, maxItemsToPoll, }) {
            var _b, _c;
            switch (polling.strategy) {
                case DedupeStrategy.TIMEBASED: {
                    const lastEpochMilliSeconds = (yield store.get('lastPoll'));
                    if ((0, shared_1.isNil)(lastEpochMilliSeconds)) {
                        throw new Error("lastPoll doesn't exist in the store.");
                    }
                    const items = yield polling.items({
                        store,
                        auth,
                        propsValue,
                        lastFetchEpochMS: lastEpochMilliSeconds,
                    });
                    const newLastEpochMilliSeconds = items.reduce((acc, item) => Math.max(acc, item.epochMilliSeconds), lastEpochMilliSeconds);
                    yield store.put('lastPoll', newLastEpochMilliSeconds);
                    return items
                        .filter((f) => f.epochMilliSeconds > lastEpochMilliSeconds)
                        .map((item) => item.data);
                }
                case DedupeStrategy.LAST_ITEM: {
                    const lastItemId = yield store.get('lastItem');
                    const items = yield polling.items({
                        store,
                        auth,
                        propsValue,
                        lastItemId,
                    });
                    const lastItemIndex = items.findIndex((f) => f.id === lastItemId);
                    let newItems = [];
                    if ((0, shared_1.isNil)(lastItemId) || lastItemIndex == -1) {
                        newItems = items !== null && items !== void 0 ? items : [];
                    }
                    else {
                        newItems = (_b = items === null || items === void 0 ? void 0 : items.slice(0, lastItemIndex)) !== null && _b !== void 0 ? _b : [];
                    }
                    // Sorted from newest to oldest
                    if (!(0, shared_1.isNil)(maxItemsToPoll)) {
                        // Get the last polling.maxItemsToPoll items
                        newItems = newItems.slice(-maxItemsToPoll);
                    }
                    const newLastItem = (_c = newItems === null || newItems === void 0 ? void 0 : newItems[0]) === null || _c === void 0 ? void 0 : _c.id;
                    if (!(0, shared_1.isNil)(newLastItem)) {
                        yield store.put('lastItem', newLastItem);
                    }
                    return newItems.map((item) => item.data);
                }
            }
        });
    },
    onEnable(polling_1, _a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (polling, { store, auth, propsValue, }) {
            var _b;
            switch (polling.strategy) {
                case DedupeStrategy.TIMEBASED: {
                    yield store.put('lastPoll', Date.now());
                    break;
                }
                case DedupeStrategy.LAST_ITEM: {
                    const items = yield polling.items({
                        store,
                        auth,
                        propsValue,
                        lastItemId: null,
                    });
                    const lastItemId = (_b = items === null || items === void 0 ? void 0 : items[0]) === null || _b === void 0 ? void 0 : _b.id;
                    if (!(0, shared_1.isNil)(lastItemId)) {
                        yield store.put('lastItem', lastItemId);
                    }
                    else {
                        yield store.delete('lastItem');
                    }
                    break;
                }
            }
        });
    },
    onDisable(polling, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            switch (polling.strategy) {
                case DedupeStrategy.TIMEBASED:
                case DedupeStrategy.LAST_ITEM:
                    return;
            }
        });
    },
    test(polling_1, _a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (polling, { auth, propsValue, store, }) {
            let items = [];
            switch (polling.strategy) {
                case DedupeStrategy.TIMEBASED: {
                    items = yield polling.items({
                        store,
                        auth,
                        propsValue,
                        lastFetchEpochMS: 0,
                    });
                    break;
                }
                case DedupeStrategy.LAST_ITEM: {
                    items = yield polling.items({
                        store,
                        auth,
                        propsValue,
                        lastItemId: null,
                    });
                    break;
                }
            }
            return getFirstFiveOrAll(items.map((item) => item.data));
        });
    },
};
function getFirstFiveOrAll(array) {
    if (array.length <= 5) {
        return array;
    }
    else {
        return array.slice(0, 5);
    }
}


/***/ }),
/* 541 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intercom = exports.intercomAuth = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_common_1 = __webpack_require__(522);
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const create_contact_action_1 = __webpack_require__(542);
const create_or_get_contact_action_1 = __webpack_require__(544);
const send_message_action_1 = __webpack_require__(545);
const node_crypto_1 = tslib_1.__importDefault(__webpack_require__(121));
const note_added_to_conversation_1 = __webpack_require__(546);
exports.intercomAuth = pieces_framework_1.PieceAuth.OAuth2({
    authUrl: 'https://app.intercom.com/oauth',
    tokenUrl: 'https://api.intercom.io/auth/eagle/token',
    required: true,
    scope: [],
});
exports.intercom = (0, pieces_framework_1.createPiece)({
    displayName: 'Intercom',
    description: 'Customer messaging platform for sales, marketing, and support',
    minimumSupportedRelease: '0.29.0', // introduction of new intercom APP_WEBHOOK
    logoUrl: 'https://cdn.activepieces.com/pieces/intercom.png',
    categories: [shared_1.PieceCategory.CUSTOMER_SUPPORT],
    auth: exports.intercomAuth,
    triggers: [note_added_to_conversation_1.noteAddedToConversation],
    authors: [
        'kishanprmr',
        'MoShizzle',
        'AbdulTheActivePiecer',
        'khaledmashaly',
        'abuaboud',
        'AdamSelene',
    ],
    actions: [
        create_or_get_contact_action_1.getOrCreateContact,
        create_contact_action_1.createContact,
        send_message_action_1.sendMessage,
        (0, pieces_common_1.createCustomApiCallAction)({
            baseUrl: () => 'https://api.intercom.io',
            auth: exports.intercomAuth,
            authMapping: (auth) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                return ({
                    Authorization: `Bearer ${auth.access_token}`,
                });
            }),
        }),
    ],
    events: {
        parseAndReply: ({ payload }) => {
            const payloadBody = payload.body;
            return {
                event: payloadBody.topic,
                identifierValue: payloadBody.app_id,
            };
        },
        verify: ({ payload, webhookSecret }) => {
            const signature = payload.headers['x-hub-signature'];
            const hmac = node_crypto_1.default.createHmac('sha1', webhookSecret);
            hmac.update(`${payload.rawBody}`);
            const computedSignature = `sha1=${hmac.digest('hex')}`;
            return signature === computedSignature;
        },
    },
});


/***/ }),
/* 542 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createContact = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const pieces_common_1 = __webpack_require__(522);
const common_1 = __webpack_require__(543);
const __1 = __webpack_require__(541);
var ContactRole;
(function (ContactRole) {
    ContactRole["USER"] = "user";
    ContactRole["LEAD"] = "lead";
})(ContactRole || (ContactRole = {}));
exports.createContact = (0, pieces_framework_1.createAction)({
    auth: __1.intercomAuth,
    description: 'Create a contact (ie. user or lead)',
    displayName: 'Create Contact',
    name: 'create_contact',
    props: {
        role: pieces_framework_1.Property.StaticDropdown({
            displayName: 'Role',
            required: true,
            options: {
                options: [
                    { label: 'User', value: ContactRole.USER },
                    { label: 'Lead', value: ContactRole.LEAD },
                ],
            },
            defaultValue: ContactRole.USER,
        }),
        email: pieces_framework_1.Property.ShortText({
            displayName: 'Email',
            required: true,
        }),
        external_id: pieces_framework_1.Property.ShortText({
            displayName: 'External Id',
            required: false,
        }),
        name: pieces_framework_1.Property.ShortText({
            displayName: 'Name',
            required: false,
        }),
        phone: pieces_framework_1.Property.ShortText({
            displayName: 'Phone',
            required: false,
        }),
        avatar: pieces_framework_1.Property.ShortText({
            displayName: 'Avatar Url',
            required: false,
            description: 'An image URL containing the avatar of a contact',
        }),
        custom_attributes: pieces_framework_1.Property.Object({
            displayName: 'Custom Attributes',
            required: false,
        }),
    },
    run: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const authentication = (0, pieces_common_1.getAccessTokenOrThrow)(context.auth);
        const response = yield pieces_common_1.httpClient.sendRequest({
            method: pieces_common_1.HttpMethod.POST,
            url: `https://api.intercom.io/contacts`,
            headers: common_1.intercomCommon.intercomHeaders,
            authentication: {
                type: pieces_common_1.AuthenticationType.BEARER_TOKEN,
                token: authentication,
            },
            body: {
                role: context.propsValue.role,
                external_id: context.propsValue.external_id,
                email: context.propsValue.email,
                name: context.propsValue.name,
                phone: context.propsValue.phone,
                avatar: context.propsValue.avatar,
                custom_attributes: context.propsValue.custom_attributes,
                signed_up_at: new Date(),
            },
        });
        return response.body;
    }),
});


/***/ }),
/* 543 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intercomCommon = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_common_1 = __webpack_require__(522);
exports.intercomCommon = {
    intercomHeaders: {
        'Intercom-Version': '2.8',
    },
    getContact: (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return (yield pieces_common_1.httpClient.sendRequest({
            method: pieces_common_1.HttpMethod.GET,
            url: `https://api.intercom.io/contacts/${req.userId}`,
            authentication: {
                type: pieces_common_1.AuthenticationType.BEARER_TOKEN,
                token: req.token,
            },
        })).body;
    }),
};


/***/ }),
/* 544 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOrCreateContact = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const pieces_common_1 = __webpack_require__(522);
const common_1 = __webpack_require__(543);
const __1 = __webpack_require__(541);
var ContactRole;
(function (ContactRole) {
    ContactRole["USER"] = "user";
    ContactRole["LEAD"] = "lead";
})(ContactRole || (ContactRole = {}));
exports.getOrCreateContact = (0, pieces_framework_1.createAction)({
    auth: __1.intercomAuth,
    description: "Get or create a contact (ie. user or lead) if it isn't found",
    displayName: 'Get or Create Contact',
    name: 'get_or_create_contact',
    props: {
        role: pieces_framework_1.Property.StaticDropdown({
            displayName: 'Role',
            required: true,
            options: {
                options: [
                    { label: 'User', value: ContactRole.USER },
                    { label: 'Lead', value: ContactRole.LEAD },
                ],
            },
            defaultValue: ContactRole.USER,
        }),
        email: pieces_framework_1.Property.ShortText({
            displayName: 'Email',
            required: true,
        }),
        external_id: pieces_framework_1.Property.ShortText({
            displayName: 'External Id',
            required: false,
        }),
        name: pieces_framework_1.Property.ShortText({
            displayName: 'Name',
            required: false,
        }),
        phone: pieces_framework_1.Property.ShortText({
            displayName: 'Phone',
            required: false,
        }),
        avatar: pieces_framework_1.Property.ShortText({
            displayName: 'Avatar Url',
            required: false,
            description: 'An image URL containing the avatar of a contact',
        }),
        custom_attributes: pieces_framework_1.Property.Object({
            displayName: 'Custom Attributes',
            required: false,
        }),
    },
    run: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const authentication = (0, pieces_common_1.getAccessTokenOrThrow)(context.auth);
        try {
            const response = yield pieces_common_1.httpClient.sendRequest({
                method: pieces_common_1.HttpMethod.POST,
                url: `https://api.intercom.io/contacts`,
                headers: common_1.intercomCommon.intercomHeaders,
                authentication: {
                    type: pieces_common_1.AuthenticationType.BEARER_TOKEN,
                    token: authentication,
                },
                body: {
                    role: context.propsValue.role,
                    external_id: context.propsValue.external_id,
                    email: context.propsValue.email,
                    name: context.propsValue.name,
                    phone: context.propsValue.phone,
                    avatar: context.propsValue.avatar,
                    custom_attributes: context.propsValue.custom_attributes,
                    signed_up_at: new Date(),
                },
            });
            return response.body;
        }
        catch (ex) {
            //check if it is failed because the user exists
            const response = JSON.parse(ex.message).response;
            if (response && response.body) {
                const errors = response.body['errors'];
                if (Array.isArray(errors) && errors[0]) {
                    const idFromErrorMessage = (_a = errors[0].message) === null || _a === void 0 ? void 0 : _a.split('id=')[1];
                    if (idFromErrorMessage) {
                        return common_1.intercomCommon.getContact({
                            userId: idFromErrorMessage,
                            token: authentication,
                        });
                    }
                }
            }
            throw ex;
        }
    }),
});


/***/ }),
/* 545 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sendMessage = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const pieces_common_1 = __webpack_require__(522);
const common_1 = __webpack_require__(543);
const __1 = __webpack_require__(541);
var MessageType;
(function (MessageType) {
    MessageType["EMAIL"] = "email";
    MessageType["IN_APP"] = "in_app";
})(MessageType || (MessageType = {}));
exports.sendMessage = (0, pieces_framework_1.createAction)({
    auth: __1.intercomAuth,
    description: 'Send a message to a contact (only allowed by admins)',
    displayName: 'Send Message',
    name: 'send_message',
    props: {
        message_type: pieces_framework_1.Property.StaticDropdown({
            displayName: 'Message Type',
            options: {
                options: [
                    { value: MessageType.EMAIL, label: 'Email' },
                    { value: MessageType.IN_APP, label: 'In App Chat' },
                ],
            },
            required: true,
            defaultValue: MessageType.EMAIL,
        }),
        email_required_fields: pieces_framework_1.Property.DynamicProperties({
            displayName: 'Email Required Fields',
            required: true,
            refreshers: ['message_type'],
            props: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ message_type }) {
                let fields = {};
                if (message_type === MessageType.EMAIL ||
                    !message_type) {
                    fields = {
                        subject: pieces_framework_1.Property.ShortText({
                            displayName: 'Subject',
                            required: true,
                            description: 'Email title',
                        }),
                        template: pieces_framework_1.Property.StaticDropdown({
                            displayName: 'Template',
                            options: {
                                options: [
                                    { label: 'Personal', value: 'personal' },
                                    { label: 'Plain', value: 'plain' },
                                ],
                            },
                            required: true,
                            defaultValue: 'personal',
                            description: 'Style of the email',
                        }),
                    };
                }
                return fields;
            }),
        }),
        from: pieces_framework_1.Property.Dropdown({
            displayName: 'From (Admin)',
            options: (_b) => tslib_1.__awaiter(void 0, [_b], void 0, function* ({ auth }) {
                if (!auth) {
                    return {
                        options: [],
                        disabled: true,
                        placeholder: 'Please connect your account first',
                    };
                }
                const accessToken = (0, pieces_common_1.getAccessTokenOrThrow)(auth);
                const request = pieces_common_1.httpClient.sendRequest({
                    method: pieces_common_1.HttpMethod.GET,
                    url: `https://api.intercom.io/admins`,
                    headers: common_1.intercomCommon.intercomHeaders,
                    authentication: {
                        type: pieces_common_1.AuthenticationType.BEARER_TOKEN,
                        token: accessToken,
                    },
                });
                const response = (yield request).body;
                return {
                    options: response.admins.map((c) => {
                        const res = { value: c.id, label: '' };
                        if (c.name) {
                            res.label = c.name;
                        }
                        else if (c.email) {
                            res.label = c.email;
                        }
                        else {
                            res.label = c.id;
                        }
                        return res;
                    }),
                };
            }),
            refreshers: [],
            required: true,
        }),
        to: pieces_framework_1.Property.Dropdown({
            displayName: 'To',
            options: (_c) => tslib_1.__awaiter(void 0, [_c], void 0, function* ({ auth }) {
                if (!auth) {
                    return {
                        options: [],
                        disabled: true,
                        placeholder: 'Please connect your account first',
                    };
                }
                const accessToken = (0, pieces_common_1.getAccessTokenOrThrow)(auth);
                const request = pieces_common_1.httpClient.sendRequest({
                    method: pieces_common_1.HttpMethod.GET,
                    url: `https://api.intercom.io/contacts`,
                    headers: common_1.intercomCommon.intercomHeaders,
                    authentication: {
                        type: pieces_common_1.AuthenticationType.BEARER_TOKEN,
                        token: accessToken,
                    },
                });
                const response = (yield request).body;
                return {
                    options: response.data.map((c) => {
                        const res = { value: c.id, label: '' };
                        if (c.name) {
                            res.label = c.name;
                        }
                        else if (c.email) {
                            res.label = c.email;
                        }
                        else {
                            res.label = c.id;
                        }
                        return res;
                    }),
                };
            }),
            refreshers: [],
            required: true,
        }),
        body: pieces_framework_1.Property.ShortText({
            displayName: 'Message Body',
            required: true,
        }),
        create_conversation_without_contact_reply: pieces_framework_1.Property.Checkbox({
            displayName: 'Create Conversation Without Contact Reply',
            description: 'Whether a conversation should be opened in the inbox for the message without the contact replying. Defaults to false if not provided.',
            required: false,
            defaultValue: false,
        }),
    },
    run: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const accessToken = context.auth.access_token;
        const user = yield common_1.intercomCommon.getContact({
            userId: context.propsValue.to,
            token: accessToken,
        });
        const response = yield pieces_common_1.httpClient.sendRequest({
            method: pieces_common_1.HttpMethod.POST,
            url: 'https://api.intercom.io/messages',
            authentication: {
                type: pieces_common_1.AuthenticationType.BEARER_TOKEN,
                token: accessToken,
            },
            headers: common_1.intercomCommon.intercomHeaders,
            body: {
                message_type: context.propsValue.message_type,
                from: {
                    id: context.propsValue.from,
                    role: 'admin',
                },
                to: {
                    id: context.propsValue.to,
                    role: user.role,
                },
                body: context.propsValue.body,
                template: context.propsValue.email_required_fields['template'],
                subject: context.propsValue.email_required_fields['subject'],
                create_conversation_without_contact_reply: context.propsValue.create_conversation_without_contact_reply,
            },
        });
        return response.body;
    }),
});


/***/ }),
/* 546 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.noteAddedToConversation = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const pieces_common_1 = __webpack_require__(522);
const string_strip_html_1 = __webpack_require__(547);
const __1 = __webpack_require__(541);
const common_1 = __webpack_require__(543);
exports.noteAddedToConversation = (0, pieces_framework_1.createTrigger)({
    // auth: check https://www.activepieces.com/docs/developers/piece-reference/authentication,
    name: 'noteAddedToConversation',
    displayName: 'Note added to conversation',
    description: 'Triggers when a note is added to a conversation',
    props: {
        keyword: pieces_framework_1.Property.ShortText({
            displayName: 'Keyword (optional)',
            required: false,
        }),
    },
    sampleData: {},
    auth: __1.intercomAuth,
    type: pieces_framework_1.TriggerStrategy.APP_WEBHOOK,
    onEnable(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield pieces_common_1.httpClient.sendRequest({
                url: 'https://api.intercom.io/me',
                method: pieces_common_1.HttpMethod.GET,
                headers: common_1.intercomCommon.intercomHeaders,
                authentication: {
                    type: pieces_common_1.AuthenticationType.BEARER_TOKEN,
                    token: (0, pieces_common_1.getAccessTokenOrThrow)(context.auth),
                },
            });
            context.app.createListeners({
                events: ['conversation.admin.noted'],
                identifierValue: response.body['app']['id_code'],
            });
        });
    },
    onDisable(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // implement webhook deletion logic
        });
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const keyword = context.propsValue.keyword;
            const payloadBody = context.payload.body;
            if (!keyword ||
                ((_b = (_a = payloadBody === null || payloadBody === void 0 ? void 0 : payloadBody.data) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.conversation_parts.conversation_parts.some((part) => (0, string_strip_html_1.stripHtml)(part.body).result.split(/\s/).some((word) => word === keyword)))) {
                return [payloadBody];
            }
            return [];
        });
    },
});


/***/ }),
/* 547 */
/***/ ((module) => {

module.exports = require("string-strip-html");

/***/ }),
/* 548 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.slack = exports.slackAuth = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_common_1 = __webpack_require__(522);
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const node_crypto_1 = tslib_1.__importDefault(__webpack_require__(121));
const request_action_direct_message_1 = __webpack_require__(549);
const request_action_message_1 = __webpack_require__(554);
const request_approval_direct_message_1 = __webpack_require__(555);
const request_approval_message_1 = __webpack_require__(556);
const send_direct_message_action_1 = __webpack_require__(557);
const send_message_action_1 = __webpack_require__(558);
const new_message_1 = __webpack_require__(559);
const new_reaction_added_1 = __webpack_require__(560);
const upload_file_1 = __webpack_require__(561);
const search_messages_1 = __webpack_require__(562);
const update_message_1 = __webpack_require__(563);
const find_user_by_email_1 = __webpack_require__(564);
const update_profile_1 = __webpack_require__(565);
const create_channel_1 = __webpack_require__(566);
const new_channel_1 = __webpack_require__(567);
const add_reaction_to_message_1 = __webpack_require__(568);
const get_channel_history_1 = __webpack_require__(569);
exports.slackAuth = pieces_framework_1.PieceAuth.OAuth2({
    description: '',
    authUrl: 'https://slack.com/oauth/v2/authorize?user_scope=search:read,users.profile:write',
    tokenUrl: 'https://slack.com/api/oauth.v2.access',
    required: true,
    scope: [
        'channels:read',
        'channels:manage',
        'channels:history',
        'chat:write',
        'groups:read',
        'groups:write',
        'reactions:read',
        'mpim:read',
        'mpim:write',
        'im:write',
        'users:read',
        'files:write',
        'files:read',
        'users:read.email',
        'reactions:write',
    ],
});
exports.slack = (0, pieces_framework_1.createPiece)({
    displayName: 'Slack',
    description: 'Channel-based messaging platform',
    minimumSupportedRelease: '0.20.0',
    logoUrl: 'https://cdn.activepieces.com/pieces/slack.png',
    categories: [shared_1.PieceCategory.COMMUNICATION],
    auth: exports.slackAuth,
    events: {
        parseAndReply: ({ payload }) => {
            var _a;
            const payloadBody = payload.body;
            if (payloadBody.challenge) {
                return {
                    reply: {
                        body: payloadBody['challenge'],
                        headers: {},
                    },
                };
            }
            return {
                event: (_a = payloadBody === null || payloadBody === void 0 ? void 0 : payloadBody.event) === null || _a === void 0 ? void 0 : _a.type,
                identifierValue: payloadBody.team_id,
            };
        },
        verify: ({ webhookSecret, payload }) => {
            // Construct the signature base string
            const timestamp = payload.headers['x-slack-request-timestamp'];
            const signature = payload.headers['x-slack-signature'];
            const signatureBaseString = `v0:${timestamp}:${payload.rawBody}`;
            const hmac = node_crypto_1.default.createHmac('sha256', webhookSecret);
            hmac.update(signatureBaseString);
            const computedSignature = `v0=${hmac.digest('hex')}`;
            return signature === computedSignature;
        },
    },
    authors: [
        'rita-gorokhod',
        'AdamSelene',
        'Abdallah-Alwarawreh',
        'kishanprmr',
        'MoShizzle',
        'AbdulTheActivePiecer',
        'khaledmashaly',
        'abuaboud',
    ],
    actions: [
        add_reaction_to_message_1.addRectionToMessageAction,
        send_direct_message_action_1.slackSendDirectMessageAction,
        send_message_action_1.slackSendMessageAction,
        request_approval_direct_message_1.requestApprovalDirectMessageAction,
        request_approval_message_1.requestSendApprovalMessageAction,
        request_action_direct_message_1.requestActionDirectMessageAction,
        request_action_message_1.requestActionMessageAction,
        upload_file_1.uploadFile,
        search_messages_1.searchMessages,
        find_user_by_email_1.findUserByEmailAction,
        update_message_1.updateMessage,
        create_channel_1.createChannelAction,
        update_profile_1.updateProfileAction,
        get_channel_history_1.getChannelHistory,
        (0, pieces_common_1.createCustomApiCallAction)({
            baseUrl: () => {
                return 'https://slack.com/api';
            },
            auth: exports.slackAuth,
            authMapping: (auth) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                return {
                    Authorization: `Bearer ${auth.access_token}`,
                };
            }),
        }),
    ],
    triggers: [new_message_1.newMessage, new_reaction_added_1.newReactionAdded, new_channel_1.channelCreated],
});


/***/ }),
/* 549 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestActionDirectMessageAction = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const __1 = __webpack_require__(548);
const shared_1 = __webpack_require__(8);
const props_1 = __webpack_require__(550);
const request_action_1 = __webpack_require__(552);
exports.requestActionDirectMessageAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'request_action_direct_message',
    displayName: 'Request Action from A User',
    description: 'Send a message to a user and wait until the user selects an action',
    props: {
        userId: props_1.userId,
        text: props_1.text,
        actions: props_1.actions,
        username: props_1.username,
        profilePicture: props_1.profilePicture,
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { userId } = context.propsValue;
            (0, shared_1.assertNotNullOrUndefined)(userId, 'userId');
            return yield (0, request_action_1.requestAction)(userId, context);
        });
    },
});


/***/ }),
/* 550 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.actions = exports.text = exports.userId = exports.blocks = exports.profilePicture = exports.username = exports.slackChannel = exports.slackInfo = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const web_api_1 = __webpack_require__(551);
exports.slackInfo = pieces_framework_1.Property.MarkDown({
    value: `
	Please make sure add the bot to the channel by following these steps:
	  1. Type /invite in the channel's chat.
	  2. Click on Add apps to this channel.
	  3. Search for and add the bot.
    
    **Note**: If you can't find the channel in the dropdown list (which fetches up to 2000 channels), please click on the **(X)** and type the name directly.
  `
});
const slackChannel = (required) => pieces_framework_1.Property.Dropdown({
    displayName: 'Channel',
    required,
    refreshers: [],
    options(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth }) {
            var _b;
            if (!auth) {
                return {
                    disabled: true,
                    placeholder: 'connect slack account',
                    options: [],
                };
            }
            const authentication = auth;
            const accessToken = authentication['access_token'];
            const client = new web_api_1.WebClient(accessToken);
            const channels = [];
            const CHANNELS_LIMIT = 2000;
            let cursor;
            do {
                const response = yield client.conversations.list({
                    types: 'public_channel,private_channel',
                    exclude_archived: true,
                    limit: 1000,
                    cursor,
                });
                if (response.channels) {
                    channels.push(...response.channels.map((channel) => {
                        return { label: channel.name || '', value: channel.id || '' };
                    }));
                }
                cursor = (_b = response.response_metadata) === null || _b === void 0 ? void 0 : _b.next_cursor;
            } while (cursor && channels.length < CHANNELS_LIMIT);
            return {
                disabled: false,
                placeholder: 'Select channel',
                options: channels,
            };
        });
    },
});
exports.slackChannel = slackChannel;
exports.username = pieces_framework_1.Property.ShortText({
    displayName: 'Username',
    description: 'The username of the bot',
    required: false,
});
exports.profilePicture = pieces_framework_1.Property.ShortText({
    displayName: 'Profile Picture',
    description: 'The profile picture of the bot',
    required: false,
});
exports.blocks = pieces_framework_1.Property.Json({
    displayName: 'Block Kit blocks',
    description: 'See https://api.slack.com/block-kit for specs',
    required: false,
});
exports.userId = pieces_framework_1.Property.Dropdown({
    displayName: 'User',
    required: true,
    refreshers: [],
    options(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth }) {
            var _b, e_1, _c, _d;
            if (!auth) {
                return {
                    disabled: true,
                    placeholder: 'connect slack account',
                    options: [],
                };
            }
            const accessToken = auth.access_token;
            const client = new web_api_1.WebClient(accessToken);
            const users = [];
            try {
                for (var _e = true, _f = tslib_1.__asyncValues(client.paginate('users.list', {
                    limit: 1000, // Only limits page size, not total number of results
                })), _g; _g = yield _f.next(), _b = _g.done, !_b; _e = true) {
                    _d = _g.value;
                    _e = false;
                    const page = _d;
                    const response = page;
                    if (response.members) {
                        users.push(...response.members
                            .filter((member) => !member.deleted)
                            .map((member) => {
                            return { label: member.name || '', value: member.id || '' };
                        }));
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_e && !_b && (_c = _f.return)) yield _c.call(_f);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return {
                disabled: false,
                placeholder: 'Select channel',
                options: users,
            };
        });
    },
});
exports.text = pieces_framework_1.Property.LongText({
    displayName: 'Message',
    required: true,
});
exports.actions = pieces_framework_1.Property.Array({
    displayName: 'Action Buttons',
    required: true,
});


/***/ }),
/* 551 */
/***/ ((module) => {

module.exports = require("@slack/web-api");

/***/ }),
/* 552 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestAction = void 0;
const tslib_1 = __webpack_require__(1);
const utils_1 = __webpack_require__(553);
const shared_1 = __webpack_require__(8);
const requestAction = (conversationId, context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { actions } = context.propsValue;
    (0, shared_1.assertNotNullOrUndefined)(actions, 'actions');
    if (!actions.length) {
        throw new Error(`Must have at least one button action`);
    }
    const actionTextToIds = actions.map((actionText) => {
        if (!actionText) {
            throw new Error(`Button text for the action cannot be empty`);
        }
        return {
            actionText,
            actionId: encodeURI(actionText),
        };
    });
    if (context.executionType === shared_1.ExecutionType.BEGIN) {
        context.run.pause({
            pauseMetadata: {
                type: shared_1.PauseType.WEBHOOK,
                actions: actionTextToIds.map((action) => action.actionId),
            },
        });
        const token = context.auth.access_token;
        const { text, username, profilePicture } = context.propsValue;
        (0, shared_1.assertNotNullOrUndefined)(token, 'token');
        (0, shared_1.assertNotNullOrUndefined)(text, 'text');
        const actionElements = actionTextToIds.map((action) => {
            const actionLink = context.generateResumeUrl({
                queryParams: { action: action.actionId },
            });
            return {
                type: 'button',
                text: {
                    type: 'plain_text',
                    text: action.actionText,
                },
                style: 'primary',
                url: actionLink,
            };
        });
        return yield (0, utils_1.slackSendMessage)({
            token,
            text: `${context.propsValue.text}`,
            username,
            profilePicture,
            blocks: [
                {
                    type: 'section',
                    text: {
                        type: 'mrkdwn',
                        text: `${context.propsValue.text}`,
                    },
                },
                {
                    type: 'actions',
                    block_id: 'actions',
                    elements: actionElements,
                },
            ],
            conversationId: conversationId,
        });
    }
    else {
        const payload = context.resumePayload;
        return {
            action: decodeURI(payload.action),
        };
    }
});
exports.requestAction = requestAction;


/***/ }),
/* 553 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.processMessageTimestamp = exports.slackSendMessage = void 0;
const tslib_1 = __webpack_require__(1);
const web_api_1 = __webpack_require__(551);
const slackSendMessage = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ text, conversationId, username, profilePicture, blocks, threadTs, token, file, }) {
    const client = new web_api_1.WebClient(token);
    if (file) {
        return yield client.files.uploadV2({
            channel_id: conversationId,
            initial_comment: text,
            thread_ts: threadTs,
            file_uploads: [
                {
                    file: file.data,
                    filename: file.filename,
                },
            ],
        });
    }
    else {
        return yield client.chat.postMessage({
            text,
            channel: conversationId,
            username,
            icon_url: profilePicture,
            blocks: blocks,
            thread_ts: threadTs,
        });
    }
});
exports.slackSendMessage = slackSendMessage;
function processMessageTimestamp(input) {
    // Regular expression to match a URL containing the timestamp
    const urlRegex = /\/p(\d+)(\d{6})$/;
    // Check if the input is a URL
    const urlMatch = input.match(urlRegex);
    if (urlMatch) {
        const timestamp = `${urlMatch[1]}.${urlMatch[2]}`;
        return timestamp;
    }
    // Check if the input is already in the desired format
    const timestampRegex = /^(\d+)\.(\d{6})$/;
    const timestampMatch = input.match(timestampRegex);
    if (timestampMatch) {
        return input;
    }
    return undefined;
}
exports.processMessageTimestamp = processMessageTimestamp;


/***/ }),
/* 554 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestActionMessageAction = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const __1 = __webpack_require__(548);
const shared_1 = __webpack_require__(8);
const props_1 = __webpack_require__(550);
const request_action_1 = __webpack_require__(552);
exports.requestActionMessageAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'request_action_message',
    displayName: 'Request Action in A Channel',
    description: 'Send a message in a channel and wait until an action is selected',
    props: {
        info: props_1.slackInfo,
        channel: (0, props_1.slackChannel)(true),
        text: props_1.text,
        actions: props_1.actions,
        username: props_1.username,
        profilePicture: props_1.profilePicture,
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { channel } = context.propsValue;
            (0, shared_1.assertNotNullOrUndefined)(channel, 'channel');
            return yield (0, request_action_1.requestAction)(channel, context);
        });
    },
});


/***/ }),
/* 555 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestApprovalDirectMessageAction = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const utils_1 = __webpack_require__(553);
const __1 = __webpack_require__(548);
const shared_1 = __webpack_require__(8);
const props_1 = __webpack_require__(550);
exports.requestApprovalDirectMessageAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'request_approval_direct_message',
    displayName: 'Request Approval from A User',
    description: 'Send approval message to a user and then wait until the message is approved or disapproved',
    props: {
        userId: props_1.userId,
        text: props_1.text,
        username: props_1.username,
        profilePicture: props_1.profilePicture,
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (context.executionType === shared_1.ExecutionType.BEGIN) {
                context.run.pause({
                    pauseMetadata: {
                        type: shared_1.PauseType.WEBHOOK,
                        response: {},
                    },
                });
                const token = context.auth.access_token;
                const { userId, username, profilePicture } = context.propsValue;
                (0, shared_1.assertNotNullOrUndefined)(token, 'token');
                (0, shared_1.assertNotNullOrUndefined)(props_1.text, 'text');
                (0, shared_1.assertNotNullOrUndefined)(userId, 'userId');
                const approvalLink = context.generateResumeUrl({
                    queryParams: { action: 'approve' },
                });
                const disapprovalLink = context.generateResumeUrl({
                    queryParams: { action: 'disapprove' },
                });
                return yield (0, utils_1.slackSendMessage)({
                    token,
                    text: `${context.propsValue.text}\n\nApprove: ${approvalLink}\n\nDisapprove: ${disapprovalLink}`,
                    username,
                    profilePicture,
                    blocks: [
                        {
                            type: 'section',
                            text: {
                                type: 'mrkdwn',
                                text: `${context.propsValue.text}`,
                            },
                        },
                        {
                            type: 'actions',
                            block_id: 'actions',
                            elements: [
                                {
                                    type: 'button',
                                    text: {
                                        type: 'plain_text',
                                        text: 'Approve',
                                    },
                                    style: 'primary',
                                    url: approvalLink,
                                },
                                {
                                    type: 'button',
                                    text: {
                                        type: 'plain_text',
                                        text: 'Disapprove',
                                    },
                                    style: 'danger',
                                    url: disapprovalLink,
                                },
                            ],
                        },
                    ],
                    conversationId: userId,
                });
            }
            else {
                return {
                    approved: context.resumePayload.queryParams['action'] === 'approve',
                };
            }
        });
    },
});


/***/ }),
/* 556 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestSendApprovalMessageAction = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const utils_1 = __webpack_require__(553);
const __1 = __webpack_require__(548);
const shared_1 = __webpack_require__(8);
const props_1 = __webpack_require__(550);
exports.requestSendApprovalMessageAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'request_approval_message',
    displayName: 'Request Approval in a Channel',
    description: 'Send approval message to a channel and then wait until the message is approved or disapproved',
    props: {
        info: props_1.slackInfo,
        channel: (0, props_1.slackChannel)(true),
        text: props_1.text,
        username: props_1.username,
        profilePicture: props_1.profilePicture,
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (context.executionType === shared_1.ExecutionType.BEGIN) {
                context.run.pause({
                    pauseMetadata: {
                        type: shared_1.PauseType.WEBHOOK,
                        response: {},
                    },
                });
                const token = context.auth.access_token;
                const { channel, username, profilePicture } = context.propsValue;
                (0, shared_1.assertNotNullOrUndefined)(token, 'token');
                (0, shared_1.assertNotNullOrUndefined)(props_1.text, 'text');
                (0, shared_1.assertNotNullOrUndefined)(channel, 'channel');
                const approvalLink = context.generateResumeUrl({
                    queryParams: { action: 'approve' },
                });
                const disapprovalLink = context.generateResumeUrl({
                    queryParams: { action: 'disapprove' },
                });
                return yield (0, utils_1.slackSendMessage)({
                    token,
                    text: `${context.propsValue.text}\n\nApprove: ${approvalLink}\n\nDisapprove: ${disapprovalLink}`,
                    username,
                    profilePicture,
                    blocks: [
                        {
                            type: 'section',
                            text: {
                                type: 'mrkdwn',
                                text: `${context.propsValue.text}`,
                            },
                        },
                        {
                            type: 'actions',
                            block_id: 'actions',
                            elements: [
                                {
                                    type: 'button',
                                    text: {
                                        type: 'plain_text',
                                        text: 'Approve',
                                    },
                                    style: 'primary',
                                    url: approvalLink,
                                },
                                {
                                    type: 'button',
                                    text: {
                                        type: 'plain_text',
                                        text: 'Disapprove',
                                    },
                                    style: 'danger',
                                    url: disapprovalLink,
                                },
                            ],
                        },
                    ],
                    conversationId: channel,
                });
            }
            else {
                return {
                    approved: context.resumePayload.queryParams['action'] === 'approve',
                };
            }
        });
    },
});


/***/ }),
/* 557 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.slackSendDirectMessageAction = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const utils_1 = __webpack_require__(553);
const __1 = __webpack_require__(548);
const shared_1 = __webpack_require__(8);
const props_1 = __webpack_require__(550);
exports.slackSendDirectMessageAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'send_direct_message',
    displayName: 'Send Message To A User',
    description: 'Send message to a user',
    props: {
        userId: props_1.userId,
        text: props_1.text,
        username: props_1.username,
        profilePicture: props_1.profilePicture,
        blocks: props_1.blocks,
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const token = context.auth.access_token;
            const { text, userId, blocks } = context.propsValue;
            (0, shared_1.assertNotNullOrUndefined)(token, 'token');
            (0, shared_1.assertNotNullOrUndefined)(text, 'text');
            (0, shared_1.assertNotNullOrUndefined)(userId, 'userId');
            return (0, utils_1.slackSendMessage)({
                token,
                text,
                username: context.propsValue.username,
                profilePicture: context.propsValue.profilePicture,
                conversationId: userId,
                blocks,
            });
        });
    },
});


/***/ }),
/* 558 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.slackSendMessageAction = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const props_1 = __webpack_require__(550);
const utils_1 = __webpack_require__(553);
const __1 = __webpack_require__(548);
exports.slackSendMessageAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'send_channel_message',
    displayName: 'Send Message To A Channel',
    description: 'Send message to a channel',
    props: {
        info: props_1.slackInfo,
        channel: (0, props_1.slackChannel)(true),
        text: pieces_framework_1.Property.LongText({
            displayName: 'Message',
            description: 'The text of your message',
            required: true,
        }),
        username: props_1.username,
        profilePicture: props_1.profilePicture,
        file: pieces_framework_1.Property.File({
            displayName: 'Attachment',
            required: false,
        }),
        threadTs: pieces_framework_1.Property.ShortText({
            displayName: 'Thread ts',
            description: 'Provide the ts (timestamp) value of the **parent** message to make this message a reply. Do not use the ts value of the reply itself; use its parent instead. For example `1710304378.475129`.Alternatively, you can easily obtain the message link by clicking on the three dots next to the parent message and selecting the `Copy link` option.',
            required: false,
        }),
        blocks: props_1.blocks,
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const token = context.auth.access_token;
            const { text, channel, username, profilePicture, threadTs, file, blocks } = context.propsValue;
            return (0, utils_1.slackSendMessage)({
                token,
                text,
                username,
                profilePicture,
                conversationId: channel,
                threadTs: threadTs ? (0, utils_1.processMessageTimestamp)(threadTs) : undefined,
                file,
                blocks,
            });
        });
    },
});


/***/ }),
/* 559 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.newMessage = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const props_1 = __webpack_require__(550);
const __1 = __webpack_require__(548);
const web_api_1 = __webpack_require__(551);
const sampleData = {
    client_msg_id: '2767cf34-0651-44e0-b9c8-1b167ce9b7a9',
    type: 'message',
    text: 'f',
    user: 'U037UG6FKPU',
    ts: '1678231735.586539',
    blocks: [
        {
            type: 'rich_text',
            block_id: '4CM',
            elements: [
                {
                    type: 'rich_text_section',
                    elements: [
                        {
                            type: 'text',
                            text: 'f',
                        },
                    ],
                },
            ],
        },
    ],
    team: 'T037MS4FGDC',
    channel: 'C037RTX2ZDM',
    event_ts: '1678231735.586539',
    channel_type: 'channel',
};
exports.newMessage = (0, pieces_framework_1.createTrigger)({
    auth: __1.slackAuth,
    name: 'new_message',
    displayName: 'New Message',
    description: 'Triggers when a new message is received',
    props: {
        info: props_1.slackInfo,
        channel: (0, props_1.slackChannel)(true),
    },
    type: pieces_framework_1.TriggerStrategy.APP_WEBHOOK,
    sampleData: sampleData,
    onEnable: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // Older OAuth2 has team_id, newer has team.id
        const teamId = (_a = context.auth.data['team_id']) !== null && _a !== void 0 ? _a : context.auth.data['team']['id'];
        context.app.createListeners({
            events: ['message'],
            identifierValue: teamId,
        });
    }),
    onDisable: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Ignored
    }),
    test: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const client = new web_api_1.WebClient(context.auth.access_token);
        const response = yield client.conversations.history({
            channel: context.propsValue.channel,
            limit: 10,
        });
        if (!response.messages) {
            return [];
        }
        return response.messages.map((message) => {
            return Object.assign(Object.assign({}, message), { channel: context.propsValue.channel, event_ts: '1678231735.586539', channel_type: 'channel' });
        });
    }),
    run: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const payloadBody = context.payload.body;
        if (payloadBody.event.channel === context.propsValue.channel) {
            return [payloadBody.event];
        }
        return [];
    }),
});


/***/ }),
/* 560 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.newReactionAdded = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const __1 = __webpack_require__(548);
const props_1 = __webpack_require__(550);
const web_api_1 = __webpack_require__(551);
const sampleData = {
    client_msg_id: '2767cf34-0651-44e0-b9c8-1b167ce9b7a9',
    type: 'message',
    text: 'f',
    user: 'U037UG6FKPU',
    ts: '1678231735.586539',
    blocks: [
        {
            type: 'rich_text',
            block_id: '4CM',
            elements: [
                {
                    type: 'rich_text_section',
                    elements: [
                        {
                            type: 'text',
                            text: 'f',
                        },
                    ],
                },
            ],
        },
    ],
    team: 'T037MS4FGDC',
    channel: 'C037RTX2ZDM',
    event_ts: '1678231735.586539',
    channel_type: 'channel',
};
exports.newReactionAdded = (0, pieces_framework_1.createTrigger)({
    auth: __1.slackAuth,
    name: 'new_reaction_added',
    displayName: 'New Reaction',
    description: 'Triggers when a new reaction is added to a message',
    props: {
        emojis: pieces_framework_1.Property.Array({
            displayName: 'Emojis (E.g fire, smile)',
            description: 'Select emojis to trigger on',
            required: false,
        }),
        channel: (0, props_1.slackChannel)(false),
    },
    type: pieces_framework_1.TriggerStrategy.APP_WEBHOOK,
    sampleData: sampleData,
    onEnable: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // Older OAuth2 has team_id, newer has team.id
        const teamId = (_a = context.auth.data['team_id']) !== null && _a !== void 0 ? _a : context.auth.data['team']['id'];
        context.app.createListeners({
            events: ['reaction_added'],
            identifierValue: teamId,
        });
    }),
    onDisable: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Ignored
    }),
    test: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _b;
        const client = new web_api_1.WebClient((_b = context.auth.data['authed_user']) === null || _b === void 0 ? void 0 : _b.access_token);
        const response = yield client.reactions.list({ limit: 10, full: true });
        if (!response.items) {
            return [];
        }
        return response.items
            .filter((item) => item.type === 'message')
            .map((item) => {
            var _a, _b, _c, _d, _e, _f, _g;
            return {
                type: 'reaction_added',
                user: (_c = (_b = (_a = item.message) === null || _a === void 0 ? void 0 : _a.reactions) === null || _b === void 0 ? void 0 : _b[0].users) === null || _c === void 0 ? void 0 : _c[0],
                reaction: (_e = (_d = item.message) === null || _d === void 0 ? void 0 : _d.reactions) === null || _e === void 0 ? void 0 : _e[0].name,
                item_user: (_f = item.message) === null || _f === void 0 ? void 0 : _f.user,
                item: {
                    type: 'message',
                    channel: item.channel,
                    ts: (_g = item.message) === null || _g === void 0 ? void 0 : _g.ts,
                },
                event_ts: '1360782804.083113',
            };
        });
    }),
    run: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const payloadBody = context.payload.body;
        if (context.propsValue.emojis) {
            if (!context.propsValue.emojis.includes(payloadBody.event.reaction)) {
                return [];
            }
        }
        if (context.propsValue.channel) {
            if (payloadBody.event.item['channel'] !== context.propsValue.channel) {
                return [];
            }
        }
        return [payloadBody.event];
    }),
});


/***/ }),
/* 561 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.uploadFile = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const index_1 = __webpack_require__(548);
const web_api_1 = __webpack_require__(551);
exports.uploadFile = (0, pieces_framework_1.createAction)({
    auth: index_1.slackAuth,
    name: 'uploadFile',
    displayName: 'Upload file',
    description: 'Upload file without sharing it to a channel or user',
    props: {
        file: pieces_framework_1.Property.File({
            displayName: 'Attachment',
            required: true,
        }),
        title: pieces_framework_1.Property.ShortText({
            displayName: 'Title',
            required: false,
        }),
        filename: pieces_framework_1.Property.ShortText({
            displayName: 'Filename',
            required: false,
        }),
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const token = context.auth.access_token;
            const { file, title, filename } = context.propsValue;
            const client = new web_api_1.WebClient(token);
            return yield client.files.uploadV2({
                file_uploads: [{ file: file.data, filename: filename || file.filename }],
                title: title,
            });
        });
    },
});


/***/ }),
/* 562 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.searchMessages = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const __1 = __webpack_require__(548);
const web_api_1 = __webpack_require__(551);
exports.searchMessages = (0, pieces_framework_1.createAction)({
    name: 'searchMessages',
    displayName: 'Search messages',
    description: 'Searches for messages matching a query',
    auth: __1.slackAuth,
    props: {
        query: pieces_framework_1.Property.ShortText({
            displayName: 'Search query',
            required: true,
        }),
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            var _b, _c, _d, _e;
            const userToken = (_b = auth.data['authed_user']) === null || _b === void 0 ? void 0 : _b.access_token;
            if (userToken === undefined) {
                throw new Error(JSON.stringify({
                    message: 'Missing user token, please re-authenticate'
                }));
            }
            const client = new web_api_1.WebClient(userToken);
            const matches = [];
            // We can't use the usual "for await ... of" syntax with client.paginate
            // Because search.messages uses a bastardized version of cursor-based pagination
            // Where you need to pass * as first cursor
            // https://api.slack.com/methods/search.messages#arg_cursor
            let cursor = '*';
            do {
                const page = yield client.search.messages({
                    query: propsValue.query,
                    count: 100,
                    // @ts-expect-error TS2353 - SDK is not aware cursor is actually supported
                    cursor,
                });
                if ((_c = page.messages) === null || _c === void 0 ? void 0 : _c.matches) {
                    matches.push(...page.messages.matches);
                }
                // @ts-expect-error TS2353 - SDK is not aware next_cursor is actually returned
                cursor = (_e = (_d = page.messages) === null || _d === void 0 ? void 0 : _d.pagination) === null || _e === void 0 ? void 0 : _e.next_cursor;
            } while (cursor);
            return matches;
        });
    },
});


/***/ }),
/* 563 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateMessage = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const __1 = __webpack_require__(548);
const props_1 = __webpack_require__(550);
const utils_1 = __webpack_require__(553);
const web_api_1 = __webpack_require__(551);
exports.updateMessage = (0, pieces_framework_1.createAction)({
    // auth: check https://www.activepieces.com/docs/developers/piece-reference/authentication,
    name: 'updateMessage',
    displayName: 'Update message',
    description: 'Update an existing message',
    auth: __1.slackAuth,
    props: {
        info: props_1.slackInfo,
        channel: (0, props_1.slackChannel)(true),
        ts: pieces_framework_1.Property.ShortText({
            displayName: 'Message Timestamp',
            description: 'Please provide the timestamp of the message you wish to update, such as `1710304378.475129`. Alternatively, you can easily obtain the message link by clicking on the three dots next to the message and selecting the `Copy link` option.',
            required: true,
        }),
        text: pieces_framework_1.Property.LongText({
            displayName: 'Message',
            description: 'The updated text of your message',
            required: true,
        }),
        blocks: props_1.blocks,
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            const messageTimestamp = (0, utils_1.processMessageTimestamp)(propsValue.ts);
            if (!messageTimestamp) {
                throw new Error('Invalid Timestamp Value.');
            }
            const client = new web_api_1.WebClient(auth.access_token);
            return yield client.chat.update({
                channel: propsValue.channel,
                ts: messageTimestamp,
                text: propsValue.text,
                blocks: propsValue.blocks,
            });
        });
    },
});


/***/ }),
/* 564 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findUserByEmailAction = void 0;
const tslib_1 = __webpack_require__(1);
const __1 = __webpack_require__(548);
const pieces_framework_1 = __webpack_require__(174);
const web_api_1 = __webpack_require__(551);
exports.findUserByEmailAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'slack-find-user-by-email',
    displayName: 'Find User by Email',
    description: 'Finds a user by matching against their email address.',
    props: {
        email: pieces_framework_1.Property.ShortText({
            displayName: 'Email',
            required: true,
        }),
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            const email = propsValue.email;
            const client = new web_api_1.WebClient(auth.access_token);
            return yield client.users.lookupByEmail({
                email,
            });
        });
    },
});


/***/ }),
/* 565 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateProfileAction = void 0;
const tslib_1 = __webpack_require__(1);
const __1 = __webpack_require__(548);
const pieces_framework_1 = __webpack_require__(174);
const web_api_1 = __webpack_require__(551);
exports.updateProfileAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'slack-update-profile',
    displayName: 'Update Profile',
    description: 'Update basic profile field such as name or title.',
    props: {
        firstName: pieces_framework_1.Property.ShortText({
            displayName: 'First Name',
            required: false,
        }),
        lastName: pieces_framework_1.Property.ShortText({
            displayName: 'Last Name',
            required: false,
        }),
        email: pieces_framework_1.Property.ShortText({
            displayName: 'Email',
            description: `Changing a user's email address will send an email to both the old and new addresses, and also post a slackbot message to the user informing them of the change.`,
            required: false,
        }),
        userId: pieces_framework_1.Property.ShortText({
            displayName: 'User',
            description: 'ID of user to change. This argument may only be specified by admins on paid teams.You can use **Find User by Email** action to retrieve ID.',
            required: false,
        }),
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            var _b;
            const client = new web_api_1.WebClient((_b = auth.data['authed_user']) === null || _b === void 0 ? void 0 : _b.access_token);
            return client.users.profile.set({
                profile: {
                    first_name: propsValue.firstName,
                    last_name: propsValue.lastName,
                    email: propsValue.email,
                },
                user: propsValue.userId,
            });
        });
    },
});


/***/ }),
/* 566 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createChannelAction = void 0;
const tslib_1 = __webpack_require__(1);
const __1 = __webpack_require__(548);
const pieces_framework_1 = __webpack_require__(174);
const web_api_1 = __webpack_require__(551);
exports.createChannelAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'slack-create-channel',
    displayName: 'Create Channel',
    description: 'Creates a new channel.',
    props: {
        channelName: pieces_framework_1.Property.ShortText({
            displayName: 'Channel Name',
            required: true,
        }),
        isPrivate: pieces_framework_1.Property.Checkbox({
            displayName: 'Is Private?',
            required: false,
            defaultValue: false,
        }),
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            const client = new web_api_1.WebClient(auth.access_token);
            return yield client.conversations.create({
                name: propsValue.channelName,
                is_private: propsValue.isPrivate,
            });
        });
    },
});


/***/ }),
/* 567 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.channelCreated = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const __1 = __webpack_require__(548);
const web_api_1 = __webpack_require__(551);
const sampleData = {
    type: 'channel_created',
    channel: {
        id: 'C024BE91L',
        name: 'fun',
        created: 1360782804,
        creator: 'U024BE7LH',
    },
};
exports.channelCreated = (0, pieces_framework_1.createTrigger)({
    auth: __1.slackAuth,
    name: 'channel_created',
    displayName: 'Channel created',
    description: 'Triggers when a channel is created',
    props: {},
    type: pieces_framework_1.TriggerStrategy.APP_WEBHOOK,
    sampleData: sampleData,
    onEnable: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // Older OAuth2 has team_id, newer has team.id
        const teamId = (_a = context.auth.data['team_id']) !== null && _a !== void 0 ? _a : context.auth.data['team']['id'];
        context.app.createListeners({
            events: ['channel_created'],
            identifierValue: teamId,
        });
    }),
    onDisable: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Ignored
    }),
    test: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const client = new web_api_1.WebClient(context.auth.access_token);
        const response = yield client.conversations.list({
            exclude_archived: true,
            limit: 10,
            types: 'public_channel,private_channel',
        });
        if (!response.channels) {
            return [];
        }
        return response.channels.map((channel) => {
            return {
                type: 'channel_created',
                channel: {
                    id: channel.id,
                    name: channel.name,
                    created: channel.created,
                    creator: channel.creator,
                },
            };
        });
    }),
    run: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const payloadBody = context.payload.body;
        return [payloadBody.event];
    }),
});


/***/ }),
/* 568 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addRectionToMessageAction = void 0;
const tslib_1 = __webpack_require__(1);
const __1 = __webpack_require__(548);
const pieces_framework_1 = __webpack_require__(174);
const props_1 = __webpack_require__(550);
const web_api_1 = __webpack_require__(551);
const utils_1 = __webpack_require__(553);
exports.addRectionToMessageAction = (0, pieces_framework_1.createAction)({
    auth: __1.slackAuth,
    name: 'slack-add-reaction-to-message',
    displayName: 'Add Reaction to Message',
    description: 'Add an emoji reaction to a message.',
    props: {
        info: props_1.slackInfo,
        channel: (0, props_1.slackChannel)(true),
        ts: pieces_framework_1.Property.ShortText({
            displayName: 'Message Timestamp',
            description: 'Please provide the timestamp of the message you wish to react, such as `1710304378.475129`. Alternatively, you can easily obtain the message link by clicking on the three dots next to the message and selecting the `Copy link` option.',
            required: true,
        }),
        reaction: pieces_framework_1.Property.ShortText({
            displayName: 'Reaction (emoji) name',
            required: true,
            description: 'e.g.`thumbsup`',
        }),
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { channel, ts, reaction } = context.propsValue;
            const slack = new web_api_1.WebClient(context.auth.access_token);
            const messageTimestamp = (0, utils_1.processMessageTimestamp)(ts);
            if (messageTimestamp) {
                const response = yield slack.reactions.add({
                    channel,
                    timestamp: messageTimestamp,
                    name: reaction,
                });
                return response;
            }
            else {
                throw new Error('Invalid Timestamp Value.');
            }
        });
    },
});


/***/ }),
/* 569 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getChannelHistory = void 0;
const tslib_1 = __webpack_require__(1);
const web_api_1 = __webpack_require__(551);
const pieces_framework_1 = __webpack_require__(174);
const __1 = __webpack_require__(548);
const props_1 = __webpack_require__(550);
exports.getChannelHistory = (0, pieces_framework_1.createAction)({
    // auth: check https://www.activepieces.com/docs/developers/piece-reference/authentication,
    name: 'getChannelHistory',
    auth: __1.slackAuth,
    displayName: 'Get channel history',
    description: 'Retrieve all messages from a specific channel ("conversation") between specified timestamps',
    props: {
        info: props_1.slackInfo,
        channel: (0, props_1.slackChannel)(true),
        oldest: pieces_framework_1.Property.Number({
            displayName: 'Oldest',
            description: 'Only messages after this timestamp will be included in results',
            required: false,
        }),
        latest: pieces_framework_1.Property.Number({
            displayName: 'Latest',
            description: 'Only messages before this timestamp will be included in results. Default is the current time',
            required: false,
        }),
        inclusive: pieces_framework_1.Property.Checkbox({
            displayName: 'Inclusive',
            description: 'Include messages with oldest or latest timestamps in results. Ignored unless either timestamp is specified',
            defaultValue: false,
            required: true,
        }),
        includeAllMetadata: pieces_framework_1.Property.Checkbox({
            displayName: 'Include all metadata',
            description: 'Return all metadata associated with each message',
            defaultValue: false,
            required: true,
        }),
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            var _b, e_1, _c, _d;
            const client = new web_api_1.WebClient(auth.access_token);
            const messages = [];
            yield client.conversations.history({ channel: propsValue.channel });
            try {
                for (var _e = true, _f = tslib_1.__asyncValues(client.paginate('conversations.history', {
                    channel: propsValue.channel,
                    oldest: propsValue.oldest,
                    latest: propsValue.latest,
                    limit: 200, // page size, does not limit the total number of results
                    include_all_metadata: propsValue.includeAllMetadata,
                    inclusive: propsValue.inclusive,
                })), _g; _g = yield _f.next(), _b = _g.done, !_b; _e = true) {
                    _d = _g.value;
                    _e = false;
                    const page = _d;
                    const response = page;
                    if (response.messages) {
                        messages.push(...response.messages);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_e && !_b && (_c = _f.return)) yield _c.call(_f);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return messages;
        });
    },
});


/***/ }),
/* 570 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.square = exports.squareAuth = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const crypto_1 = tslib_1.__importDefault(__webpack_require__(6));
const triggers_1 = __webpack_require__(571);
exports.squareAuth = pieces_framework_1.PieceAuth.OAuth2({
    description: 'Authentication',
    authUrl: 'https://connect.squareup.com/oauth2/authorize',
    tokenUrl: 'https://connect.squareup.com/oauth2/token',
    required: true,
    scope: [
        'MERCHANT_PROFILE_READ',
        'CUSTOMERS_READ',
        'CUSTOMERS_WRITE',
        'ITEMS_READ',
        'ITEMS_WRITE',
        'ORDERS_READ',
        'ORDERS_WRITE',
        'PAYMENTS_READ',
        'INVOICES_READ',
        'APPOINTMENTS_READ',
        'APPOINTMENTS_WRITE',
    ],
});
exports.square = (0, pieces_framework_1.createPiece)({
    displayName: 'Square',
    description: 'Payment solutions for every business',
    minimumSupportedRelease: '0.5.0',
    logoUrl: 'https://cdn.activepieces.com/pieces/square.png',
    categories: [shared_1.PieceCategory.COMMERCE],
    authors: ["kishanprmr", "MoShizzle", "khaledmashaly", "abuaboud"],
    auth: exports.squareAuth,
    events: {
        verify: ({ webhookSecret, payload, appWebhookUrl }) => {
            const signature = payload.headers['x-square-hmacsha256-signature'];
            const hmac = crypto_1.default.createHmac('sha256', webhookSecret);
            hmac.update(appWebhookUrl + payload.rawBody);
            const hash = hmac.digest('base64');
            return hash === signature;
        },
        parseAndReply: ({ payload }) => {
            const payloadBody = payload.body;
            return {
                event: payloadBody === null || payloadBody === void 0 ? void 0 : payloadBody.type,
                identifierValue: payloadBody === null || payloadBody === void 0 ? void 0 : payloadBody.merchant_id,
            };
        },
    },
    actions: [],
    triggers: triggers_1.triggers,
});


/***/ }),
/* 571 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.triggers = void 0;
const tslib_1 = __webpack_require__(1);
const __1 = __webpack_require__(570);
const pieces_framework_1 = __webpack_require__(174);
const triggerData = [
    {
        name: 'new_order',
        displayName: 'New Order',
        description: 'Triggered when a new order is created',
        event: 'order.created',
        sampleData: {
            merchant_id: 'MLTZ79VE64YTN',
            type: 'order.created',
            event_id: '03441e3a-47f1-49a7-a64c-55ab26703f8d',
            created_at: '2023-03-14T01:42:54.984089903Z',
            data: {
                type: 'order',
                id: 'eA3vssLHKJrv9H0IdJCM3gNqfdcZY',
                object: {
                    order_created: {
                        created_at: '2020-04-16T23:14:26.129Z',
                        location_id: 'FPYCBCHYMXFK1',
                        order_id: 'eA3vssLHKJrv9H0IdJCM3gNqfdcZY',
                        state: 'OPEN',
                        version: 1,
                    },
                },
            },
        },
    },
    {
        name: 'order_updated',
        displayName: 'Order Updated',
        description: 'Triggered when an order is updated',
        event: 'order.updated',
        sampleData: {
            merchant_id: 'MLTZ79VE64YTN',
            type: 'order.updated',
            event_id: '7e1d596e-ebf1-443d-87aa-a5f397bce1e5',
            created_at: '2023-03-14T01:56:10.454184371Z',
            data: {
                type: 'order',
                id: 'eA3vssLHKJrv9H0IdJCM3gNqfdcZY',
                object: {
                    order_updated: {
                        created_at: '2020-04-16T23:14:26.129Z',
                        location_id: 'FPYCBCHYMXFK1',
                        order_id: 'eA3vssLHKJrv9H0IdJCM3gNqfdcZY',
                        state: 'OPEN',
                        updated_at: '2020-04-16T23:14:26.359Z',
                        version: 2,
                    },
                },
            },
        },
    },
    {
        name: 'new_customer',
        displayName: 'New Customer',
        description: 'Triggered when a customer is created',
        event: 'customer.created',
        sampleData: {
            merchant_id: 'MLTZ79VE64YTN',
            type: 'customer.created',
            event_id: '2985c7c7-2ccc-409e-8aba-998684732cab',
            created_at: '2023-03-14T01:57:28.679389163Z',
            data: {
                type: 'customer',
                id: 'QPTXM8PQNX3Q726ZYHPMNP46XC',
                object: {
                    customer: {
                        address: {
                            address_line_1: '1018 40th Street',
                            administrative_district_level_1: 'CA',
                            locality: 'Oakland',
                            postal_code: '94608',
                        },
                        birthday: '1962-03-04',
                        created_at: '2022-11-09T21:23:25.519Z',
                        creation_source: 'DIRECTORY',
                        email_address: 'jenkins+smorly@squareup.com',
                        family_name: 'Smorly',
                        given_name: 'Jenkins',
                        group_ids: ['JGJCW9S0G68NE.APPOINTMENTS'],
                        id: 'QPTXM8PQNX3Q726ZYHPMNP46XC',
                        phone_number: '+12126668929',
                        preferences: {
                            email_unsubscribed: false,
                        },
                        updated_at: '2022-11-09T21:23:25Z',
                        version: 0,
                    },
                },
            },
        },
    },
    {
        name: 'customer_updated',
        displayName: 'Customer Updated',
        description: 'Triggered when a customer is updated',
        event: 'customer.updated',
        sampleData: {
            merchant_id: 'MLTZ79VE64YTN',
            type: 'customer.updated',
            event_id: 'f6e89469-de2f-4ae4-84c7-83a95681759a',
            created_at: '2023-03-14T01:58:22.076902762Z',
            data: {
                type: 'customer',
                id: 'A0AP25A6SCVTH8JES9BX01GXM4',
                object: {
                    customer: {
                        created_at: '2022-07-09T18:23:01.795Z',
                        creation_source: 'THIRD_PARTY',
                        email_address: 'jenkins+smorly@squareup.com',
                        family_name: 'Smorly',
                        given_name: 'Jenkins',
                        id: 'A0AP25A6SCVTH8JES9BX01GXM4',
                        phone_number: '+13477947111',
                        preferences: {
                            email_unsubscribed: false,
                        },
                        updated_at: '2022-11-09T21:38:30Z',
                        version: 1,
                    },
                },
            },
        },
    },
    {
        name: 'new_appointment',
        displayName: 'New Appointment',
        description: 'Triggered when a new appointment is created',
        event: 'booking.created',
        sampleData: {
            merchant_id: 'MLTZ79VE64YTN',
            location_id: 'ES0RJRZYEC39A',
            type: 'invoice.created',
            event_id: 'ee17dc22-5e38-4aba-ad15-af8e25adcc93',
            created_at: '2023-03-14T02:01:46.497709569Z',
            data: {
                type: 'invoice',
                id: 'inv:0-ChCHu2mZEabLeeHahQnXDjZQECY',
                object: {
                    invoice: {
                        accepted_payment_methods: {
                            bank_account: false,
                            buy_now_pay_later: false,
                            card: true,
                            square_gift_card: false,
                        },
                        created_at: '2020-06-18T17:45:13Z',
                        custom_fields: [
                            {
                                label: 'Event Reference Number',
                                placement: 'ABOVE_LINE_ITEMS',
                                value: 'Ref. #1234',
                            },
                            {
                                label: 'Terms of Service',
                                placement: 'BELOW_LINE_ITEMS',
                                value: 'The terms of service are...',
                            },
                        ],
                        delivery_method: 'EMAIL',
                        description: 'We appreciate your business!',
                        id: 'inv:0-ChCHu2mZEabLeeHahQnXDjZQECY',
                        invoice_number: 'inv-100',
                        location_id: 'ES0RJRZYEC39A',
                        order_id: 'CAISENgvlJ6jLWAzERDzjyHVybY',
                        payment_requests: [
                            {
                                automatic_payment_source: 'NONE',
                                computed_amount_money: {
                                    amount: 10000,
                                    currency: 'USD',
                                },
                                due_date: '2030-01-24',
                                reminders: [
                                    {
                                        message: 'Your invoice is due tomorrow',
                                        relative_scheduled_days: -1,
                                        status: 'PENDING',
                                        uid: 'beebd363-e47f-4075-8785-c235aaa7df11',
                                    },
                                ],
                                request_type: 'BALANCE',
                                tipping_enabled: true,
                                total_completed_amount_money: {
                                    amount: 0,
                                    currency: 'USD',
                                },
                                uid: '2da7964f-f3d2-4f43-81e8-5aa220bf3355',
                            },
                        ],
                        primary_recipient: {
                            customer_id: 'JDKYHBWT1D4F8MFH63DBMEN8Y4',
                            email_address: 'Amelia.Earhart@example.com',
                            family_name: 'Earhart',
                            given_name: 'Amelia',
                            phone_number: '1-212-555-4240',
                        },
                        sale_or_service_date: '2030-01-24',
                        scheduled_at: '2030-01-13T10:00:00Z',
                        status: 'DRAFT',
                        store_payment_method_enabled: false,
                        timezone: 'America/Los_Angeles',
                        title: 'Event Planning Services',
                        updated_at: '2020-06-18T17:45:13Z',
                        version: 0,
                    },
                },
            },
        },
    },
    {
        name: 'new_payment',
        displayName: 'New Payment',
        description: 'Triggered when a new payment is created',
        event: 'payment.created',
        sampleData: {
            merchant_id: 'MLTZ79VE64YTN',
            type: 'payment.created',
            event_id: '11fb274d-6882-417a-879c-faec367e0665',
            created_at: '2023-03-14T02:00:56.000119371Z',
            data: {
                type: 'payment',
                id: 'KkAkhdMsgzn59SM8A89WgKwekxLZY',
                object: {
                    payment: {
                        amount_money: {
                            amount: 100,
                            currency: 'USD',
                        },
                        approved_money: {
                            amount: 100,
                            currency: 'USD',
                        },
                        capabilities: [
                            'EDIT_TIP_AMOUNT',
                            'EDIT_TIP_AMOUNT_UP',
                            'EDIT_TIP_AMOUNT_DOWN',
                        ],
                        card_details: {
                            avs_status: 'AVS_ACCEPTED',
                            card: {
                                bin: '540988',
                                card_brand: 'MASTERCARD',
                                card_type: 'CREDIT',
                                exp_month: 11,
                                exp_year: 2022,
                                fingerprint: 'sq-1-Tvruf3vPQxlvI6n0IcKYfBukrcv6IqWr8UyBdViWXU2yzGn5VMJvrsHMKpINMhPmVg',
                                last_4: '9029',
                                prepaid_type: 'NOT_PREPAID',
                            },
                            card_payment_timeline: {
                                authorized_at: '2020-11-22T21:16:51.198Z',
                            },
                            cvv_status: 'CVV_ACCEPTED',
                            entry_method: 'KEYED',
                            statement_description: 'SQ *DEFAULT TEST ACCOUNT',
                            status: 'AUTHORIZED',
                        },
                        created_at: '2020-11-22T21:16:51.086Z',
                        delay_action: 'CANCEL',
                        delay_duration: 'PT168H',
                        delayed_until: '2020-11-29T21:16:51.086Z',
                        id: 'hYy9pRFVxpDsO1FB05SunFWUe9JZY',
                        location_id: 'S8GWD5R9QB376',
                        order_id: '03O3USaPaAaFnI6kkwB1JxGgBsUZY',
                        receipt_number: 'hYy9',
                        risk_evaluation: {
                            created_at: '2020-11-22T21:16:51.198Z',
                            risk_level: 'NORMAL',
                        },
                        source_type: 'CARD',
                        status: 'APPROVED',
                        total_money: {
                            amount: 100,
                            currency: 'USD',
                        },
                        updated_at: '2020-11-22T21:16:51.198Z',
                        version_token: 'FfQhQJf9r3VSQIgyWBk1oqhIwiznLwVwJbVVA0bdyEv6o',
                    },
                },
            },
        },
    },
    {
        name: 'new_invoice',
        displayName: 'New Invoice',
        description: 'Triggered when a new invoice is created',
        event: 'invoice.created',
        sampleData: {
            merchant_id: 'MLTZ79VE64YTN',
            location_id: 'ES0RJRZYEC39A',
            type: 'invoice.created',
            event_id: 'ee17dc22-5e38-4aba-ad15-af8e25adcc93',
            created_at: '2023-03-14T02:01:46.497709569Z',
            data: {
                type: 'invoice',
                id: 'inv:0-ChCHu2mZEabLeeHahQnXDjZQECY',
                object: {
                    invoice: {
                        accepted_payment_methods: {
                            bank_account: false,
                            buy_now_pay_later: false,
                            card: true,
                            square_gift_card: false,
                        },
                        created_at: '2020-06-18T17:45:13Z',
                        custom_fields: [
                            {
                                label: 'Event Reference Number',
                                placement: 'ABOVE_LINE_ITEMS',
                                value: 'Ref. #1234',
                            },
                            {
                                label: 'Terms of Service',
                                placement: 'BELOW_LINE_ITEMS',
                                value: 'The terms of service are...',
                            },
                        ],
                        delivery_method: 'EMAIL',
                        description: 'We appreciate your business!',
                        id: 'inv:0-ChCHu2mZEabLeeHahQnXDjZQECY',
                        invoice_number: 'inv-100',
                        location_id: 'ES0RJRZYEC39A',
                        order_id: 'CAISENgvlJ6jLWAzERDzjyHVybY',
                        payment_requests: [
                            {
                                automatic_payment_source: 'NONE',
                                computed_amount_money: {
                                    amount: 10000,
                                    currency: 'USD',
                                },
                                due_date: '2030-01-24',
                                reminders: [
                                    {
                                        message: 'Your invoice is due tomorrow',
                                        relative_scheduled_days: -1,
                                        status: 'PENDING',
                                        uid: 'beebd363-e47f-4075-8785-c235aaa7df11',
                                    },
                                ],
                                request_type: 'BALANCE',
                                tipping_enabled: true,
                                total_completed_amount_money: {
                                    amount: 0,
                                    currency: 'USD',
                                },
                                uid: '2da7964f-f3d2-4f43-81e8-5aa220bf3355',
                            },
                        ],
                        primary_recipient: {
                            customer_id: 'JDKYHBWT1D4F8MFH63DBMEN8Y4',
                            email_address: 'Amelia.Earhart@example.com',
                            family_name: 'Earhart',
                            given_name: 'Amelia',
                            phone_number: '1-212-555-4240',
                        },
                        sale_or_service_date: '2030-01-24',
                        scheduled_at: '2030-01-13T10:00:00Z',
                        status: 'DRAFT',
                        store_payment_method_enabled: false,
                        timezone: 'America/Los_Angeles',
                        title: 'Event Planning Services',
                        updated_at: '2020-06-18T17:45:13Z',
                        version: 0,
                    },
                },
            },
        },
    },
];
exports.triggers = triggerData.map((trigger) => (0, pieces_framework_1.createTrigger)({
    auth: __1.squareAuth,
    name: trigger.name,
    displayName: trigger.displayName,
    description: trigger.description,
    props: {},
    type: pieces_framework_1.TriggerStrategy.APP_WEBHOOK,
    sampleData: trigger.sampleData,
    onEnable: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        context.app.createListeners({
            events: [trigger.event],
            identifierValue: context.auth.data['merchant_id'],
        });
    }),
    onDisable: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Ignored
    }),
    test: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return [trigger.sampleData];
    }),
    run: (context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return [context.payload.body];
    }),
}));


/***/ }),
/* 572 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowQueue = void 0;
const server_shared_1 = __webpack_require__(2);
const memory_queue_1 = __webpack_require__(573);
const redis_queue_1 = __webpack_require__(625);
const systemMode = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
exports.flowQueue = systemMode == server_shared_1.QueueMode.MEMORY ? memory_queue_1.memoryQueue : redis_queue_1.redisQueue;


/***/ }),
/* 573 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.memoryQueue = exports.memoryQueues = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const flow_service_1 = __webpack_require__(574);
const flow_run_service_1 = __webpack_require__(595);
const flow_version_service_1 = __webpack_require__(580);
const trigger_utils_1 = __webpack_require__(589);
const ap_memory_queue_1 = __webpack_require__(623);
exports.memoryQueues = {
    [server_shared_1.QueueName.ONE_TIME]: new ap_memory_queue_1.ApMemoryQueue(),
    [server_shared_1.QueueName.SCHEDULED]: new ap_memory_queue_1.ApMemoryQueue(),
    [server_shared_1.QueueName.WEBHOOK]: new ap_memory_queue_1.ApMemoryQueue(),
};
const runnerGroupId = (0, shared_1.apId)();
exports.memoryQueue = {
    removeRepeatingJob(_groupId_1, _a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (_groupId, { id }) {
            yield exports.memoryQueues[server_shared_1.QueueName.SCHEDULED].remove(id);
        });
    },
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield renewWebhooks();
            yield renewEnabledRepeating();
            yield addDelayedRun();
        });
    },
    add(_groupId, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { type, data, id } = params;
            switch (type) {
                case server_shared_1.JobType.ONE_TIME: {
                    exports.memoryQueues[server_shared_1.QueueName.ONE_TIME].add({
                        id,
                        data,
                    });
                    break;
                }
                case server_shared_1.JobType.REPEATING: {
                    exports.memoryQueues[server_shared_1.QueueName.SCHEDULED].add({
                        data,
                        id,
                        cronExpression: params.scheduleOptions.cronExpression,
                        cronTimezone: params.scheduleOptions.timezone,
                    });
                    break;
                }
                case server_shared_1.JobType.DELAYED: {
                    exports.memoryQueues[server_shared_1.QueueName.SCHEDULED].add({
                        id,
                        data,
                        nextFireAtEpochSeconds: (0, dayjs_1.default)().add(params.delay, 'ms').unix(),
                    });
                    break;
                }
                case server_shared_1.JobType.WEBHOOK: {
                    exports.memoryQueues[server_shared_1.QueueName.WEBHOOK].add({
                        id,
                        data,
                    });
                    break;
                }
            }
        });
    },
};
function addDelayedRun() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flowRuns = yield (0, flow_run_service_1.flowRunRepo)().findBy({
            status: shared_1.FlowRunStatus.PAUSED,
        });
        flowRuns.forEach((flowRun) => {
            var _a, _b, _c;
            if (((_a = flowRun.pauseMetadata) === null || _a === void 0 ? void 0 : _a.type) === shared_1.PauseType.DELAY) {
                const delayPauseMetadata = flowRun.pauseMetadata;
                const delay = Math.max(0, (0, dayjs_1.default)(delayPauseMetadata.resumeDateTime).diff((0, dayjs_1.default)(), 'ms'));
                exports.memoryQueue.add(runnerGroupId, {
                    id: flowRun.id,
                    type: server_shared_1.JobType.DELAYED,
                    data: {
                        runId: flowRun.id,
                        projectId: flowRun.projectId,
                        environment: shared_1.RunEnvironment.PRODUCTION,
                        schemaVersion: server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION,
                        flowVersionId: flowRun.flowVersionId,
                        jobType: server_shared_1.RepeatableJobType.DELAYED_FLOW,
                        synchronousHandlerId: (_b = delayPauseMetadata.handlerId) !== null && _b !== void 0 ? _b : null,
                        progressUpdateType: (_c = delayPauseMetadata.progressUpdateType) !== null && _c !== void 0 ? _c : shared_1.ProgressUpdateType.NONE,
                    },
                    delay,
                }).catch((e) => server_shared_1.logger.error(e, '[MemoryQueue#init] add'));
            }
        });
    });
}
function renewEnabledRepeating() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const enabledFlows = yield flow_service_1.flowService.getAllEnabled();
        const enabledRepeatingFlows = enabledFlows.filter((flow) => flow.schedule);
        enabledRepeatingFlows.forEach((flow) => {
            exports.memoryQueue.add(runnerGroupId, {
                id: flow.id,
                type: server_shared_1.JobType.REPEATING,
                data: {
                    projectId: flow.projectId,
                    environment: shared_1.RunEnvironment.PRODUCTION,
                    schemaVersion: 1,
                    flowVersionId: flow.publishedVersionId,
                    flowId: flow.id,
                    triggerType: shared_1.TriggerType.PIECE,
                    jobType: server_shared_1.RepeatableJobType.EXECUTE_TRIGGER,
                },
                scheduleOptions: {
                    cronExpression: flow.schedule.cronExpression,
                    timezone: flow.schedule.timezone,
                },
            }).catch((e) => server_shared_1.logger.error(e, '[MemoryQueue#init] add'));
        });
    });
}
function renewWebhooks() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const enabledFlows = yield flow_service_1.flowService.getAllEnabled();
        const enabledRenewWebhookFlows = (yield Promise.all(enabledFlows.map((flow) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowVersion = yield flow_version_service_1.flowVersionService.getOneOrThrow(flow.publishedVersionId);
            const trigger = flowVersion.trigger;
            if (trigger.type !== shared_1.TriggerType.PIECE) {
                return null;
            }
            const piece = yield trigger_utils_1.triggerUtils.getPieceTriggerOrThrow({
                trigger,
                projectId: flow.projectId,
            });
            const renewConfiguration = piece.renewConfiguration;
            if ((renewConfiguration === null || renewConfiguration === void 0 ? void 0 : renewConfiguration.strategy) !== pieces_framework_1.WebhookRenewStrategy.CRON) {
                return null;
            }
            return {
                scheduleOptions: {
                    cronExpression: renewConfiguration.cronExpression,
                    timezone: 'UTC',
                },
                flow,
            };
        })))).filter((flow) => flow !== null);
        enabledRenewWebhookFlows.forEach(({ flow, scheduleOptions }) => {
            exports.memoryQueue.add(runnerGroupId, {
                id: flow.id,
                type: server_shared_1.JobType.REPEATING,
                data: {
                    projectId: flow.projectId,
                    schemaVersion: server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION,
                    flowVersionId: flow.publishedVersionId,
                    flowId: flow.id,
                    jobType: server_shared_1.RepeatableJobType.RENEW_WEBHOOK,
                },
                scheduleOptions,
            }).catch((e) => server_shared_1.logger.error(e, '[MemoryQueue#init] add'));
        });
    });
}


/***/ }),
/* 574 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const transaction_1 = __webpack_require__(575);
const lock_1 = __webpack_require__(512);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const telemetry_utils_1 = __webpack_require__(576);
const flow_version_service_1 = __webpack_require__(580);
const folder_service_1 = __webpack_require__(592);
const flow_service_side_effects_1 = __webpack_require__(593);
const flow_entity_1 = __webpack_require__(249);
const flow_repo_1 = __webpack_require__(594);
exports.flowService = {
    create(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, request }) {
            const folderId = (0, shared_1.isNil)(request.folderName) ? null : (yield folder_service_1.flowFolderService.upsert({
                projectId,
                request: {
                    displayName: request.folderName,
                },
            })).id;
            const newFlow = {
                id: (0, shared_1.apId)(),
                projectId,
                folderId,
                status: shared_1.FlowStatus.DISABLED,
                publishedVersionId: null,
                schedule: null,
            };
            const savedFlow = yield (0, flow_repo_1.flowRepo)().save(newFlow);
            const savedFlowVersion = yield flow_version_service_1.flowVersionService.createEmptyVersion(savedFlow.id, {
                displayName: request.displayName,
            });
            telemetry_utils_1.telemetry
                .trackProject(savedFlow.projectId, {
                name: shared_1.TelemetryEventName.CREATED_FLOW,
                payload: {
                    flowId: savedFlow.id,
                },
            })
                .catch((e) => server_shared_1.logger.error(e, '[FlowService#create] telemetry.trackProject'));
            return Object.assign(Object.assign({}, savedFlow), { version: savedFlowVersion });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, cursorRequest, limit, folderId, status, }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: flow_entity_1.FlowEntity,
                query: {
                    limit,
                    order: 'DESC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const queryWhere = { projectId };
            if (folderId !== undefined) {
                queryWhere.folderId = folderId === 'NULL' ? (0, typeorm_1.IsNull)() : folderId;
            }
            if (status !== undefined) {
                queryWhere.status = status;
            }
            const paginationResult = yield paginator.paginate((0, flow_repo_1.flowRepo)().createQueryBuilder('flow').where(queryWhere));
            const populatedFlowPromises = paginationResult.data.map((flow) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const version = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
                    flowId: flow.id,
                    versionId: undefined,
                });
                return Object.assign(Object.assign({}, flow), { version });
            }));
            const populatedFlows = yield Promise.all(populatedFlowPromises);
            return pagination_utils_1.paginationHelper.createPage(populatedFlows, paginationResult.cursor);
        });
    },
    getOneById(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (0, flow_repo_1.flowRepo)().findOneBy({
                id,
            });
        });
    },
    getOne(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, projectId, entityManager }) {
            return (0, flow_repo_1.flowRepo)(entityManager).findOneBy({
                id,
                projectId,
            });
        });
    },
    getOneOrThrow(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flow = yield this.getOne(params);
            assertFlowIsNotNull(flow);
            return flow;
        });
    },
    getOnePopulated(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, projectId, versionId, removeConnectionsName = false, removeSampleData = false, entityManager, }) {
            const flow = yield (0, flow_repo_1.flowRepo)(entityManager).findOneBy({
                id,
                projectId,
            });
            if ((0, shared_1.isNil)(flow)) {
                return null;
            }
            const flowVersion = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
                flowId: id,
                versionId,
                removeConnectionsName,
                removeSampleData,
                entityManager,
            });
            return Object.assign(Object.assign({}, flow), { version: flowVersion });
        });
    },
    getOnePopulatedOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, projectId, versionId, removeConnectionsName = false, removeSampleData = false, entityManager, }) {
            const flow = yield this.getOnePopulated({
                id,
                projectId,
                versionId,
                removeConnectionsName,
                removeSampleData,
                entityManager,
            });
            assertFlowIsNotNull(flow);
            return flow;
        });
    },
    update(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, userId, projectId, operation, lock = true, }) {
            const flowLock = lock
                ? yield (0, lock_1.acquireLock)({
                    key: id,
                    timeout: 30000,
                })
                : null;
            try {
                if (operation.type === shared_1.FlowOperationType.LOCK_AND_PUBLISH) {
                    yield this.updatedPublishedVersionId({
                        id,
                        userId,
                        projectId,
                    });
                }
                else if (operation.type === shared_1.FlowOperationType.CHANGE_STATUS) {
                    yield this.updateStatus({
                        id,
                        projectId,
                        newStatus: operation.request.status,
                    });
                }
                else if (operation.type === shared_1.FlowOperationType.CHANGE_FOLDER) {
                    yield (0, flow_repo_1.flowRepo)().update(id, {
                        folderId: operation.request.folderId,
                    });
                }
                else {
                    let lastVersion = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
                        flowId: id,
                        versionId: undefined,
                    });
                    if (lastVersion.state === shared_1.FlowVersionState.LOCKED) {
                        const lastVersionWithArtifacts = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
                            flowId: id,
                            versionId: undefined,
                        });
                        lastVersion = yield flow_version_service_1.flowVersionService.createEmptyVersion(id, {
                            displayName: lastVersionWithArtifacts.displayName,
                        });
                        // Duplicate the artifacts from the previous version, otherwise they will be deleted during update operation
                        lastVersion = yield flow_version_service_1.flowVersionService.applyOperation({
                            userId,
                            projectId,
                            flowVersion: lastVersion,
                            userOperation: {
                                type: shared_1.FlowOperationType.IMPORT_FLOW,
                                request: lastVersionWithArtifacts,
                            },
                        });
                    }
                    yield flow_version_service_1.flowVersionService.applyOperation({
                        userId,
                        projectId,
                        flowVersion: lastVersion,
                        userOperation: operation,
                    });
                }
            }
            finally {
                yield (flowLock === null || flowLock === void 0 ? void 0 : flowLock.release());
            }
            return this.getOnePopulatedOrThrow({
                id,
                projectId,
            });
        });
    },
    updateStatus(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, projectId, newStatus, entityManager, }) {
            const flowToUpdate = yield this.getOneOrThrow({
                id,
                projectId,
                entityManager,
            });
            if (flowToUpdate.status !== newStatus) {
                const { scheduleOptions } = yield flow_service_side_effects_1.flowSideEffects.preUpdateStatus({
                    flowToUpdate,
                    newStatus,
                    entityManager,
                });
                flowToUpdate.status = newStatus;
                flowToUpdate.schedule = scheduleOptions;
                yield (0, flow_repo_1.flowRepo)(entityManager).save(flowToUpdate);
            }
            return this.getOnePopulatedOrThrow({
                id,
                projectId,
                entityManager,
            });
        });
    },
    updatedPublishedVersionId(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, userId, projectId, }) {
            const flowToUpdate = yield this.getOneOrThrow({ id, projectId });
            const flowVersionToPublish = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
                flowId: id,
                versionId: undefined,
            });
            const { scheduleOptions } = yield flow_service_side_effects_1.flowSideEffects.preUpdatePublishedVersionId({
                flowToUpdate,
                flowVersionToPublish,
            });
            return (0, transaction_1.transaction)((entityManager) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const lockedFlowVersion = yield lockFlowVersionIfNotLocked({
                    flowVersion: flowVersionToPublish,
                    userId,
                    projectId,
                    entityManager,
                });
                flowToUpdate.publishedVersionId = lockedFlowVersion.id;
                flowToUpdate.status = shared_1.FlowStatus.ENABLED;
                flowToUpdate.schedule = scheduleOptions;
                const updatedFlow = yield (0, flow_repo_1.flowRepo)(entityManager).save(flowToUpdate);
                return Object.assign(Object.assign({}, updatedFlow), { version: lockedFlowVersion });
            }));
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, projectId }) {
            const lock = yield (0, lock_1.acquireLock)({
                key: id,
                timeout: 10000,
            });
            try {
                const flowToDelete = yield this.getOneOrThrow({
                    id,
                    projectId,
                });
                yield flow_service_side_effects_1.flowSideEffects.preDelete({
                    flowToDelete,
                });
                yield (0, flow_repo_1.flowRepo)().delete({ id });
            }
            finally {
                yield lock.release();
            }
        });
    },
    getAllEnabled() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (0, flow_repo_1.flowRepo)().findBy({
                status: shared_1.FlowStatus.ENABLED,
            });
        });
    },
    getTemplate(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowId, versionId, projectId, }) {
            const flow = yield this.getOnePopulatedOrThrow({
                id: flowId,
                projectId,
                versionId,
                removeConnectionsName: true,
                removeSampleData: true,
            });
            return {
                name: flow.version.displayName,
                description: '',
                pieces: shared_1.flowHelper.getUsedPieces(flow.version.trigger),
                template: flow.version,
                tags: [],
                created: Date.now().toString(),
                updated: Date.now().toString(),
                blogUrl: '',
            };
        });
    },
    count(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, folderId }) {
            if (folderId === undefined) {
                return (0, flow_repo_1.flowRepo)().countBy({ projectId });
            }
            return (0, flow_repo_1.flowRepo)().countBy({
                folderId: folderId !== 'NULL' ? folderId : (0, typeorm_1.IsNull)(),
                projectId,
            });
        });
    },
    existsByProjectAndStatus(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { projectId, status, entityManager } = params;
            return (0, flow_repo_1.flowRepo)(entityManager).existsBy({
                projectId,
                status,
            });
        });
    },
};
const lockFlowVersionIfNotLocked = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ flowVersion, userId, projectId, entityManager, }) {
    if (flowVersion.state === shared_1.FlowVersionState.LOCKED) {
        return flowVersion;
    }
    return flow_version_service_1.flowVersionService.applyOperation({
        userId,
        projectId,
        flowVersion,
        userOperation: {
            type: shared_1.FlowOperationType.LOCK_FLOW,
            request: {
                flowId: flowVersion.flowId,
            },
        },
        entityManager,
    });
});
const assertFlowIsNotNull = (flow) => {
    if ((0, shared_1.isNil)(flow)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
            params: {},
        });
    }
};


/***/ }),
/* 575 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transaction = void 0;
const tslib_1 = __webpack_require__(1);
const database_connection_1 = __webpack_require__(225);
const transaction = (operation) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return (0, database_connection_1.databaseConnection)().transaction(operation);
});
exports.transaction = transaction;


/***/ }),
/* 576 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.telemetry = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const analytics_node_1 = __webpack_require__(577);
const flag_service_1 = __webpack_require__(578);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const telemetryEnabled = server_shared_1.system.getBoolean(server_shared_1.AppSystemProp.TELEMETRY_ENABLED);
const analytics = new analytics_node_1.Analytics({ writeKey: '42TtMD2Fh9PEIcDO2CagCGFmtoPwOmqK' });
exports.telemetry = {
    identify(user, projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!telemetryEnabled) {
                return;
            }
            const identify = {
                userId: user.id,
                traits: Object.assign({ email: user.email, firstName: user.firstName, lastName: user.lastName, projectId, firstSeenAt: user.created }, (yield getMetadata())),
            };
            analytics.identify(identify);
        });
    },
    trackPlatform(platformId, event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!telemetryEnabled) {
                return;
            }
            const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
            yield this.trackUser(platform.ownerId, event);
        });
    },
    trackProject(projectId, event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!telemetryEnabled) {
                return;
            }
            const project = yield project_service_1.projectService.getOne(projectId);
            this.trackUser(project.ownerId, event).catch((e) => server_shared_1.logger.error(e, '[Telemetry#trackProject] this.trackUser'));
        });
    },
    trackUser(userId, event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!telemetryEnabled) {
                return;
            }
            const payloadEvent = {
                userId,
                event: event.name,
                properties: Object.assign(Object.assign(Object.assign({}, event.payload), (yield getMetadata())), { datetime: new Date().toISOString() }),
            };
            analytics.track(payloadEvent);
        });
    },
};
function getMetadata() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const currentVersion = yield flag_service_1.flagService.getCurrentRelease();
        const edition = server_shared_1.system.getEdition();
        return {
            activepiecesVersion: currentVersion,
            activepiecesEnvironment: server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT),
            activepiecesEdition: edition,
        };
    });
}


/***/ }),
/* 577 */
/***/ ((module) => {

module.exports = require("@segment/analytics-node");

/***/ }),
/* 578 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flagService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const axios_1 = tslib_1.__importDefault(__webpack_require__(198));
const server_worker_1 = __webpack_require__(474);
const repo_factory_1 = __webpack_require__(224);
const flag_entity_1 = __webpack_require__(248);
const theme_1 = __webpack_require__(460);
const flagRepo = (0, repo_factory_1.repoFactory)(flag_entity_1.FlagEntity);
exports.flagService = {
    save: (flag) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return flagRepo().save({
            id: flag.id,
            value: flag.value,
        });
    }),
    getOne(flagId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return flagRepo().findOneBy({
                id: flagId,
            });
        });
    },
    getAll() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const flags = yield flagRepo().find({});
            const now = new Date().toISOString();
            const created = now;
            const updated = now;
            const currentVersion = yield this.getCurrentRelease();
            const latestVersion = yield this.getLatestRelease();
            flags.push({
                id: shared_1.ApFlagId.ENVIRONMENT,
                value: server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT),
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.IS_CLOUD_PLATFORM,
                value: false,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.PIECES_SYNC_MODE,
                value: server_shared_1.system.get(server_shared_1.AppSystemProp.PIECES_SYNC_MODE),
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SHOW_PLATFORM_DEMO,
                value: [shared_1.ApEdition.CLOUD].includes(server_shared_1.system.getEdition()),
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.OWN_AUTH2_ENABLED,
                value: true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SHOW_REWARDS,
                value: true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.CLOUD_AUTH_ENABLED,
                value: (_a = server_shared_1.system.getBoolean(server_shared_1.AppSystemProp.CLOUD_AUTH_ENABLED)) !== null && _a !== void 0 ? _a : true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.PROJECT_LIMITS_ENABLED,
                value: false,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.COPILOT_ENABLED,
                value: !(0, shared_1.isNil)(server_shared_1.system.get(server_shared_1.AppSystemProp.OPENAI_API_KEY)),
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SHOW_COPILOT,
                value: true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.INSTALL_PROJECT_PIECES_ENABLED,
                value: true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.MANAGE_PROJECT_PIECES_ENABLED,
                value: false,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SHOW_SIGN_UP_LINK,
                value: true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.EDITION,
                value: server_shared_1.system.getEdition(),
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SHOW_BILLING,
                value: server_shared_1.system.getEdition() === shared_1.ApEdition.CLOUD,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.THIRD_PARTY_AUTH_PROVIDERS_TO_SHOW_MAP,
                value: {},
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.THIRD_PARTY_AUTH_PROVIDER_REDIRECT_URL,
                value: [shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE].includes(server_shared_1.system.getEdition())
                    ? this.getThirdPartyRedirectUrl(undefined, undefined)
                    : undefined,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.EMAIL_AUTH_ENABLED,
                value: true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.THEME,
                value: theme_1.defaultTheme,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SHOW_DOCS,
                value: server_shared_1.system.getEdition() !== shared_1.ApEdition.ENTERPRISE,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SHOW_COMMUNITY,
                value: server_shared_1.system.getEdition() !== shared_1.ApEdition.COMMUNITY,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.PRIVATE_PIECES_ENABLED,
                value: server_shared_1.system.getEdition() !== shared_1.ApEdition.COMMUNITY,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.PRIVACY_POLICY_URL,
                value: 'https://www.activepieces.com/privacy',
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.TERMS_OF_SERVICE_URL,
                value: 'https://www.activepieces.com/terms',
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.TELEMETRY_ENABLED,
                value: (_b = server_shared_1.system.getBoolean(server_shared_1.AppSystemProp.TELEMETRY_ENABLED)) !== null && _b !== void 0 ? _b : true,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.WEBHOOK_URL_PREFIX,
                value: yield server_worker_1.webhookUtils.getWebhookPrefix(),
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.FRONTEND_URL,
                value: server_shared_1.system.get(server_shared_1.SharedSystemProp.FRONTEND_URL),
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.FLOW_RUN_TIME_SECONDS,
                value: server_shared_1.flowTimeoutSandbox,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.CURRENT_VERSION,
                value: currentVersion,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.LATEST_VERSION,
                value: latestVersion,
                created,
                updated,
            }, {
                id: shared_1.ApFlagId.SUPPORTED_APP_WEBHOOKS,
                value: server_shared_1.webhookSecretsUtils.getSupportedAppWebhooks(),
                created,
                updated,
            });
            return flags;
        });
    },
    getThirdPartyRedirectUrl(platformId, hostname) {
        const isCustomerPlatform = platformId && !exports.flagService.isCloudPlatform(platformId);
        if (isCustomerPlatform) {
            return `https://${hostname}/redirect`;
        }
        const frontendUrl = server_shared_1.system.get(server_shared_1.SharedSystemProp.FRONTEND_URL);
        const trimmedFrontendUrl = (frontendUrl === null || frontendUrl === void 0 ? void 0 : frontendUrl.endsWith('/'))
            ? frontendUrl.slice(0, -1)
            : frontendUrl;
        return `${trimmedFrontendUrl}/redirect`;
    },
    getCurrentRelease() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const packageJson = yield Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(579)));
            return packageJson.version;
        });
    },
    getLatestRelease() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.get('https://raw.githubusercontent.com/activepieces/activepieces/main/package.json');
                return response.data.version;
            }
            catch (ex) {
                return '0.0.0';
            }
        });
    },
    isCloudPlatform(platformId) {
        const cloudPlatformId = server_shared_1.system.get(server_shared_1.AppSystemProp.CLOUD_PLATFORM_ID);
        if (!cloudPlatformId || !platformId) {
            return false;
        }
        return platformId === cloudPlatformId;
    },
};


/***/ }),
/* 579 */
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"activepieces","version":"0.29.0","rcVersion":"0.30.0-rc.0","scripts":{"prepare":"husky install","serve:frontend":"nx serve ui-core","serve:backend":"nx serve server-api","serve:engine":"nx serve engine","serve:pieces":"turbowatch tools/scripts/pieces/turbowatch.ts","dev":"cross-env-shell FORCE_COLOR=true concurrently -n \\"GUI,API,ENG,PCS\\" -c \\"bgBlue.bold,bgGreen.bold,bgRed.bold,bgYellow.bold\\" \\"npm:serve:frontend\\" \\"npm:serve:backend\\" \\"npm:serve:engine\\" \\"npm:serve:pieces\\"","dev:backend":"cross-env-shell FORCE_COLOR=true concurrently -n \\"API,ENG\\" -c \\"bgGreen.bold,bgRed.bold\\" \\"npm:serve:backend\\" \\"npm:serve:engine\\"","dev:frontend":"cross-env-shell FORCE_COLOR=true concurrently -n \\"GUI,API,ENG\\" -c \\"bgBlue.bold,bgGreen.bold,bgRed.bold\\" \\"npm:serve:frontend\\" \\"npm:serve:backend\\" \\"npm:serve:engine\\"","start":"npm i && npm run dev","cli":"npx ts-node packages/cli/src/index.ts pieces sync --apiUrl localhost","create-piece":"npx ts-node packages/cli/src/index.ts pieces create","create-action":"npx ts-node packages/cli/src/index.ts actions create","create-trigger":"npx ts-node packages/cli/src/index.ts triggers create","sync-pieces":"npx ts-node packages/cli/src/index.ts pieces sync","publish-piece":"npx ts-node tools/scripts/pieces/publish-piece.ts"},"private":true,"dependencies":{"@activepieces/import-fresh-webpack":"3.3.0","@angular/animations":"18.0.3","@angular/cdk":"18.0.3","@angular/common":"18.0.3","@angular/compiler":"18.0.3","@angular/core":"18.0.3","@angular/elements":"18.0.3","@angular/forms":"18.0.3","@angular/localize":"18.0.3","@angular/material":"18.0.3","@angular/platform-browser":"18.0.3","@angular/platform-browser-dynamic":"18.0.3","@angular/router":"18.0.3","@anthropic-ai/sdk":"0.19.0","@auth0/angular-jwt":"5.1.2","@authenio/samlify-node-xmllint":"2.0.0","@aws-sdk/client-s3":"3.398.0","@azure/openai":"1.0.0-beta.11","@babel/runtime":"7.22.11","@bull-board/api":"5.9.1","@bull-board/fastify":"5.9.1","@ctrl/ngx-codemirror":"5.1.1","@fastify/basic-auth":"5.0.0","@fastify/cors":"8.3.0","@fastify/formbody":"7.4.0","@fastify/multipart":"7.7.3","@fastify/rate-limit":"9.1.0","@fastify/swagger":"8.9.0","@fastify/type-provider-typebox":"3.5.0","@fortawesome/angular-fontawesome":"0.12.1","@fortawesome/fontawesome-svg-core":"6.4.2","@fortawesome/free-solid-svg-icons":"6.4.2","@linear/sdk":"7.0.1","@mailchimp/mailchimp_marketing":"3.0.80","@mailerlite/mailerlite-nodejs":"1.1.0","@microsoft/microsoft-graph-client":"3.0.7","@microsoft/microsoft-graph-types":"2.40.0","@ngrx/effects":"17.0.1","@ngrx/store":"17.0.1","@ngrx/store-devtools":"17.0.1","@notionhq/client":"2.2.11","@nx/devkit":"19.3.0","@onfleet/node-onfleet":"1.3.3","@qdrant/js-client-rest":"1.7.0","@segment/analytics-next":"1.67.0","@segment/analytics-node":"2.1.0","@sendgrid/mail":"8.0.0","@sentry/node":"7.64.0","@sinclair/typebox":"0.26.8","@slack/web-api":"7.0.4","@socket.io/redis-adapter":"8.2.1","@supabase/supabase-js":"2.33.1","@types/imapflow":"1.0.18","@types/js-yaml":"4.0.9","@types/pg-format":"1.0.5","@types/showdown":"2.0.6","airtable":"0.11.6","ajv":"8.12.0","ang-jsoneditor":"3.1.1","angular-draggable-droppable":"8.0.0","angular-svg-icon":"15.0.0","angular2-uuid":"1.1.1","async-mutex":"0.4.0","aws-sdk":"2.1642.0","axios":"1.6.7","bcrypt":"5.1.1","buffer":"6.0.3","bullmq":"5.8.3","cheerio":"1.0.0-rc.12","clarifai-nodejs-grpc":"9.7.0","cli-table3":"0.6.3","clipboard":"2.0.11","codemirror":"5.65.14","color":"4.2.3","commander":"11.1.0","compare-versions":"6.1.0","concat":"1.0.3","contentful-management":"10.42.0","cron-validator":"1.3.1","cronstrue":"2.31.0","cross-env":"7.0.3","crypto-js":"4.2.0","dayjs":"1.11.9","decompress":"4.2.1","deep-equal":"2.2.2","drip-nodejs":"3.1.1","elevenlabs":"0.2.2","exifreader":"4.20.0","fastify":"4.12.0","fastify-favicon":"4.3.0","fastify-plugin":"4.5.1","fastify-raw-body":"4.2.0","fastify-socket.io":"5.0.0","feedparser":"2.2.10","firebase-scrypt":"2.2.0","font-awesome":"4.7.0","form-data":"4.0.0","fs-extra":"11.2.0","fuse.js":"7.0.0","google-auth-library":"8.9.0","googleapis":"129.0.0","http-status-codes":"2.2.0","https-proxy-agent":"7.0.4","imap":"0.8.17","imapflow":"1.0.152","ioredis":"5.4.1","is-base64":"1.1.0","isolated-vm":"5.0.1","jimp":"0.22.12","js-yaml":"4.1.0","jsdom":"23.0.1","jshint":"2.13.6","json-server":"1.0.0-beta.0","json-to-pretty-yaml":"1.2.2","json2xml":"0.1.3","jsoneditor":"10.0.3","jsonlint-mod":"1.7.6","jsonrepair":"3.2.0","jsonwebtoken":"9.0.1","jszip":"3.10.1","jwks-rsa":"3.1.0","kl-angular-mentions":"1.2.3","langchain":"0.0.156","lottie-web":"5.12.2","mailparser":"3.6.7","marked":"4.3.0","mime":"4.0.1","mime-types":"2.1.35","monaco-editor":"0.44.0","monday-sdk-js":"0.5.2","mustache":"4.2.0","nanoid":"3.3.6","ngx-autosize":"2.0.4","ngx-colors":"3.5.2","ngx-lottie":"11.0.2","ngx-markdown":"17.0.0","ngx-monaco-editor-v2":"17.0.1","ngx-quill":"20.0.1","ngx-skeleton-loader":"6.0.0","ngx-socket-io":"4.6.1","ngx-timeago":"3.0.0","node-cron":"3.0.3","nodemailer":"6.9.9","nx-cloud":"19.0.0","object-sizeof":"2.6.3","openai":"4.47.1","pdf-parse":"1.1.1","pdf-text-reader":"4.1.0","pg":"8.11.3","pg-format":"1.0.4","pickleparser":"0.1.0","pino-loki":"2.1.3","posthog-js":"1.140.1","priority-queue-typescript":"1.0.1","prismjs":"1.29.0","product-fruits":"1.0.23","promise-mysql":"5.2.0","qs":"6.11.2","quill":"1.3.7","quill-mention":"4.0.0","redlock":"5.0.0-beta.2","rss-parser":"3.13.0","rxjs":"7.8.1","safe-flat":"2.1.0","samlify":"2.8.10","semver":"7.6.0","shade-generator":"1.2.7","showdown":"2.1.0","simple-git":"3.21.0","snowflake-sdk":"1.9.3","soap":"1.0.0","socket.io":"4.7.5","sqlite3":"5.1.7","sqlstring":"2.3.3","ssh2-sftp-client":"9.1.0","string-replace-async":"3.0.2","string-strip-html":"8.5.0","stripe":"14.3.0","subsink":"1.0.2","tiktoken":"1.0.11","tinycolor2":"1.6.0","tsconfig-paths":"4.2.0","tslib":"2.6.2","twitter-api-v2":"1.15.1","typeorm":"0.3.18","url":"0.11.3","xml2js":"0.6.2","xmlrpc":"1.3.2","yaml":"2.4.1","zone.js":"0.14.4"},"devDependencies":{"@angular-devkit/build-angular":"18.0.4","@angular-devkit/core":"18.0.4","@angular-devkit/schematics":"18.0.4","@angular-eslint/builder":"15.2.1","@angular-eslint/eslint-plugin":"18.0.1","@angular-eslint/eslint-plugin-template":"18.0.1","@angular-eslint/schematics":"15.2.1","@angular-eslint/template-parser":"18.0.1","@angular/cli":"~18.0.0","@angular/compiler-cli":"18.0.3","@angular/language-service":"18.0.3","@commitlint/cli":"17.7.1","@commitlint/config-conventional":"17.7.0","@faker-js/faker":"8.2.0","@ngrx/eslint-plugin":"17.0.1","@nx/angular":"19.3.0","@nx/esbuild":"19.3.0","@nx/eslint":"19.3.0","@nx/eslint-plugin":"19.3.0","@nx/jest":"19.3.0","@nx/js":"19.3.0","@nx/node":"19.3.0","@nx/webpack":"19.3.0","@nx/workspace":"19.3.0","@playwright/test":"1.37.1","@schematics/angular":"18.0.4","@swc-node/register":"1.9.2","@swc/core":"1.5.7","@swc/helpers":"0.5.11","@trumbitta/nx-plugin-unused-deps":"1.12.1","@types/bcrypt":"5.0.0","@types/color":"3.0.6","@types/crypto-js":"4.1.1","@types/decompress":"4.2.4","@types/deep-equal":"1.0.1","@types/feedparser":"2.2.5","@types/imap":"0.8.37","@types/is-base64":"1.1.1","@types/jest":"29.4.4","@types/json2xml":"0.1.1","@types/mailchimp__mailchimp_marketing":"3.0.10","@types/mailparser":"3.4.0","@types/marked":"4.3.2","@types/mime-types":"2.1.1","@types/mustache":"4.2.4","@types/node":"^18.16.9","@types/node-cron":"3.0.11","@types/nodemailer":"6.4.9","@types/onfleet__node-onfleet":"1.3.7","@types/papaparse":"5.3.8","@types/pg":"8.10.2","@types/prismjs":"1.26.0","@types/qs":"6.9.7","@types/quill":"2.0.10","@types/semver":"7.5.6","@types/snowflake-sdk":"1.6.20","@types/sqlstring":"2.3.2","@types/ssh2-sftp-client":"9.0.0","@types/tinycolor2":"1.4.5","@types/xml2js":"0.4.14","@types/xmlrpc":"1.3.10","@typescript-eslint/eslint-plugin":"7.9.0","@typescript-eslint/parser":"7.9.0","@typescript-eslint/utils":"^8.0.0-alpha.28","autoprefixer":"10.4.15","chalk":"4.1.2","concurrently":"8.2.1","esbuild":"0.19.5","eslint":"8.57.0","eslint-config-prettier":"9.0.0","eslint-import-resolver-typescript":"3.6.1","eslint-plugin-import-x":"0.5.2","eslint-plugin-prettier":"4.2.1","eslint-plugin-rxjs":"5.0.3","eslint-plugin-rxjs-angular":"2.0.1","husky":"8.0.3","inquirer":"8.2.6","jasmine-core":"4.2.0","jasmine-spec-reporter":"7.0.0","jest":"29.4.3","jest-environment-jsdom":"29.4.3","jest-environment-node":"^29.4.1","jest-preset-angular":"14.1.0","jsonc-eslint-parser":"^2.1.0","karma":"6.3.17","karma-chrome-launcher":"3.1.1","karma-coverage":"2.2.1","karma-jasmine":"5.1.0","karma-jasmine-html-reporter":"2.0.0","lint-staged":"13.3.0","ng-packagr":"18.0.0","nx":"19.3.0","pino-pretty":"9.4.1","pnpm":"8.6.12","postcss":"8.4.31","postcss-import":"14.1.0","postcss-preset-env":"7.5.0","postcss-url":"10.1.3","prettier":"2.8.4","tailwindcss":"3.3.3","ts-jest":"29.1.1","ts-node":"10.9.1","turbowatch":"2.29.4","typescript":"5.4.5","verdaccio":"^5.31.0","wait-on":"7.2.0","webpack":"5.90.1","webpack-cli":"5.1.4","webpack-ignore-dynamic-require":"1.0.0"},"nx":{"includedScripts":[]}}');

/***/ }),
/* 580 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowVersionService = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const compiler_1 = __webpack_require__(73);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const piece_metadata_service_1 = __webpack_require__(222);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const step_file_service_1 = __webpack_require__(581);
const flow_version_entity_1 = __webpack_require__(251);
const flow_version_side_effects_1 = __webpack_require__(583);
const branchSettingsValidator = compiler_1.TypeCompiler.Compile(shared_1.BranchActionSettingsWithValidation);
const loopSettingsValidator = compiler_1.TypeCompiler.Compile(shared_1.LoopOnItemsActionSettingsWithValidation);
const flowVersionRepo = (0, repo_factory_1.repoFactory)(flow_version_entity_1.FlowVersionEntity);
exports.flowVersionService = {
    lockPieceVersions(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowVersion, entityManager, }) {
            if (flowVersion.state === shared_1.FlowVersionState.LOCKED) {
                return flowVersion;
            }
            return shared_1.flowHelper.transferFlowAsync(flowVersion, (step) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const clonedStep = JSON.parse(JSON.stringify(step));
                const stepTypeIsPiece = [shared_1.ActionType.PIECE, shared_1.TriggerType.PIECE].includes(step.type);
                if (stepTypeIsPiece) {
                    const pieceMetadata = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
                        projectId,
                        name: step.settings.pieceName,
                        version: step.settings.pieceVersion,
                        entityManager,
                    });
                    clonedStep.settings.pieceVersion = pieceMetadata.version;
                }
                return clonedStep;
            }));
        });
    },
    applyOperation(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowVersion, projectId, userId, userOperation, entityManager, }) {
            let operations = [];
            let mutatedFlowVersion = flowVersion;
            switch (userOperation.type) {
                case shared_1.FlowOperationType.USE_AS_DRAFT: {
                    const previousVersion = yield exports.flowVersionService.getFlowVersionOrThrow({
                        flowId: flowVersion.flowId,
                        versionId: userOperation.request.versionId,
                        removeConnectionsName: false,
                        removeSampleData: false,
                    });
                    operations = handleImportFlowOperation(flowVersion, previousVersion);
                    break;
                }
                case shared_1.FlowOperationType.IMPORT_FLOW: {
                    operations = handleImportFlowOperation(flowVersion, userOperation.request);
                    break;
                }
                case shared_1.FlowOperationType.LOCK_FLOW: {
                    mutatedFlowVersion = yield this.lockPieceVersions({
                        projectId,
                        flowVersion: mutatedFlowVersion,
                        entityManager,
                    });
                    operations = [userOperation];
                    break;
                }
                case shared_1.FlowOperationType.DUPLICATE_ACTION: {
                    mutatedFlowVersion = yield this.getFlowVersionOrThrow({
                        flowId: flowVersion.flowId,
                        versionId: flowVersion.id,
                    });
                    operations = [userOperation];
                    break;
                }
                default: {
                    operations = [userOperation];
                    break;
                }
            }
            for (const operation of operations) {
                mutatedFlowVersion = yield applySingleOperation(projectId, mutatedFlowVersion, operation);
            }
            mutatedFlowVersion.updated = (0, dayjs_1.default)().toISOString();
            if (userId) {
                mutatedFlowVersion.updatedBy = userId;
            }
            return flowVersionRepo(entityManager).save(mutatedFlowVersion);
        });
    },
    getOne(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, shared_1.isNil)(id)) {
                return null;
            }
            return flowVersionRepo().findOneBy({
                id,
            });
        });
    },
    getLatestLockedVersionOrThrow(flowId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return flowVersionRepo().findOneOrFail({
                where: {
                    flowId,
                    state: shared_1.FlowVersionState.LOCKED,
                },
                order: {
                    created: 'DESC',
                },
            });
        });
    },
    getOneOrThrow(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowVersion = yield exports.flowVersionService.getOne(id);
            if ((0, shared_1.isNil)(flowVersion)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityId: id,
                        entityType: 'FlowVersion',
                    },
                });
            }
            return flowVersion;
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ cursorRequest, limit, flowId, }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: flow_version_entity_1.FlowVersionEntity,
                query: {
                    limit,
                    order: 'DESC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const paginationResult = yield paginator.paginate(flowVersionRepo().createQueryBuilder('flow_version').leftJoinAndMapOne('flow_version.updatedByUser', 'user', 'user', 'flow_version.updatedBy = "user"."id"').where({
                flowId,
            }));
            return pagination_utils_1.paginationHelper.createPage(paginationResult.data, paginationResult.cursor);
        });
    },
    getFlowVersionOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowId, versionId, removeConnectionsName = false, removeSampleData = false, entityManager, }) {
            const flowVersion = yield flowVersionRepo(entityManager).findOne({
                where: {
                    flowId,
                    id: versionId,
                },
                //This is needed to return draft by default because it is always the latest one
                order: {
                    created: 'DESC',
                },
            });
            if ((0, shared_1.isNil)(flowVersion)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityId: versionId,
                        entityType: 'FlowVersion',
                        message: `flowId=${flowId}`,
                    },
                });
            }
            return removeSecretsFromFlow(flowVersion, removeConnectionsName, removeSampleData);
        });
    },
    createEmptyVersion(flowId, request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowVersion = {
                id: (0, shared_1.apId)(),
                displayName: request.displayName,
                flowId,
                trigger: {
                    type: shared_1.TriggerType.EMPTY,
                    name: 'trigger',
                    settings: {},
                    valid: false,
                    displayName: 'Select Trigger',
                },
                valid: false,
                state: shared_1.FlowVersionState.DRAFT,
            };
            return flowVersionRepo().save(flowVersion);
        });
    },
};
function applySingleOperation(projectId, flowVersion, operation) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        server_shared_1.logger.info(`applying ${operation.type} to ${flowVersion.displayName}`);
        yield flow_version_side_effects_1.flowVersionSideEffects.preApplyOperation({
            projectId,
            flowVersion,
            operation,
        });
        operation = yield prepareRequest(projectId, flowVersion, operation);
        return shared_1.flowHelper.apply(flowVersion, operation);
    });
}
function removeSecretsFromFlow(flowVersion, removeConnectionNames, removeSampleData) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flowVersionWithArtifacts = JSON.parse(JSON.stringify(flowVersion));
        const steps = shared_1.flowHelper.getAllSteps(flowVersionWithArtifacts.trigger);
        for (const step of steps) {
            if (removeSampleData) {
                step.settings.inputUiInfo = shared_1.DEFAULT_SAMPLE_DATA_SETTINGS;
            }
            if (removeConnectionNames) {
                step.settings.input = replaceConnections(step.settings.input);
            }
        }
        return flowVersionWithArtifacts;
    });
}
function replaceConnections(obj) {
    if ((0, shared_1.isNil)(obj)) {
        return obj;
    }
    const replacedObj = {};
    for (const [key, value] of Object.entries(obj)) {
        if (Array.isArray(value)) {
            replacedObj[key] = value;
        }
        else if (typeof value === 'object' && value !== null) {
            replacedObj[key] = replaceConnections(value);
        }
        else if (typeof value === 'string') {
            const replacedValue = value.replace(/\{{connections\.[^}]*}}/g, '');
            replacedObj[key] = replacedValue === '' ? undefined : replacedValue;
        }
        else {
            replacedObj[key] = value;
        }
    }
    return replacedObj;
}
function handleImportFlowOperation(flowVersion, operation) {
    const actionsToRemove = shared_1.flowHelper
        .getAllStepsAtFirstLevel(flowVersion.trigger)
        .filter((step) => shared_1.flowHelper.isAction(step.type));
    const operations = actionsToRemove.map((step) => ({
        type: shared_1.FlowOperationType.DELETE_ACTION,
        request: {
            name: step.name,
        },
    }));
    operations.push({
        type: shared_1.FlowOperationType.UPDATE_TRIGGER,
        request: operation.trigger,
    });
    operations.push({
        type: shared_1.FlowOperationType.CHANGE_NAME,
        request: {
            displayName: operation.displayName,
        },
    });
    operations.push(...shared_1.flowHelper.getImportOperations(operation.trigger));
    return operations;
}
function prepareRequest(projectId, flowVersion, request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const clonedRequest = JSON.parse(JSON.stringify(request));
        switch (clonedRequest.type) {
            case shared_1.FlowOperationType.ADD_ACTION:
                clonedRequest.request.action.valid = true;
                switch (clonedRequest.request.action.type) {
                    case shared_1.ActionType.LOOP_ON_ITEMS:
                        clonedRequest.request.action.valid = loopSettingsValidator.Check(clonedRequest.request.action.settings);
                        break;
                    case shared_1.ActionType.BRANCH:
                        clonedRequest.request.action.valid = branchSettingsValidator.Check(clonedRequest.request.action.settings);
                        break;
                    case shared_1.ActionType.PIECE:
                        clonedRequest.request.action.valid = yield validateAction({
                            settings: clonedRequest.request.action.settings,
                            projectId,
                        });
                        break;
                    case shared_1.ActionType.CODE: {
                        break;
                    }
                }
                break;
            case shared_1.FlowOperationType.UPDATE_ACTION:
                clonedRequest.request.valid = true;
                switch (clonedRequest.request.type) {
                    case shared_1.ActionType.LOOP_ON_ITEMS:
                        clonedRequest.request.valid = loopSettingsValidator.Check(clonedRequest.request.settings);
                        break;
                    case shared_1.ActionType.BRANCH:
                        clonedRequest.request.valid = branchSettingsValidator.Check(clonedRequest.request.settings);
                        break;
                    case shared_1.ActionType.PIECE: {
                        clonedRequest.request.valid = yield validateAction({
                            settings: clonedRequest.request.settings,
                            projectId,
                        });
                        const previousStep = shared_1.flowHelper.getStep(flowVersion, clonedRequest.request.name);
                        if (previousStep !== undefined &&
                            previousStep.type === shared_1.ActionType.PIECE &&
                            clonedRequest.request.settings.pieceName !==
                                previousStep.settings.pieceName) {
                            yield step_file_service_1.stepFileService.deleteAll({
                                projectId,
                                flowId: flowVersion.flowId,
                                stepName: previousStep.name,
                            });
                        }
                        break;
                    }
                    case shared_1.ActionType.CODE: {
                        break;
                    }
                }
                break;
            case shared_1.FlowOperationType.DELETE_ACTION: {
                const previousStep = shared_1.flowHelper.getStep(flowVersion, clonedRequest.request.name);
                if (previousStep !== undefined &&
                    previousStep.type === shared_1.ActionType.PIECE) {
                    yield step_file_service_1.stepFileService.deleteAll({
                        projectId,
                        flowId: flowVersion.flowId,
                        stepName: previousStep.name,
                    });
                }
                break;
            }
            case shared_1.FlowOperationType.UPDATE_TRIGGER:
                switch (clonedRequest.request.type) {
                    case shared_1.TriggerType.EMPTY:
                        clonedRequest.request.valid = false;
                        break;
                    case shared_1.TriggerType.PIECE:
                        clonedRequest.request.valid = yield validateTrigger({
                            settings: clonedRequest.request.settings,
                            projectId,
                        });
                        break;
                }
                break;
            default:
                break;
        }
        return clonedRequest;
    });
}
function validateAction(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, settings, }) {
        if ((0, shared_1.isNil)(settings.pieceName) ||
            (0, shared_1.isNil)(settings.pieceVersion) ||
            (0, shared_1.isNil)(settings.actionName) ||
            (0, shared_1.isNil)(settings.input)) {
            return false;
        }
        const piece = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
            projectId,
            name: settings.pieceName,
            version: settings.pieceVersion,
        });
        if ((0, shared_1.isNil)(piece)) {
            return false;
        }
        yield assertEnterprisePiecesEnabled(piece, projectId);
        const action = piece.actions[settings.actionName];
        if ((0, shared_1.isNil)(action)) {
            return false;
        }
        const props = action.props;
        if (!(0, shared_1.isNil)(piece.auth) && action.requireAuth) {
            props.auth = piece.auth;
        }
        return validateProps(props, settings.input);
    });
}
function validateTrigger(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ settings, projectId, }) {
        if ((0, shared_1.isNil)(settings.pieceName) ||
            (0, shared_1.isNil)(settings.pieceVersion) ||
            (0, shared_1.isNil)(settings.triggerName) ||
            (0, shared_1.isNil)(settings.input)) {
            return false;
        }
        const piece = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
            projectId,
            name: settings.pieceName,
            version: settings.pieceVersion,
        });
        if ((0, shared_1.isNil)(piece)) {
            return false;
        }
        yield assertEnterprisePiecesEnabled(piece, projectId);
        const trigger = piece.triggers[settings.triggerName];
        if ((0, shared_1.isNil)(trigger)) {
            return false;
        }
        const props = trigger.props;
        if (!(0, shared_1.isNil)(piece.auth)) {
            props.auth = piece.auth;
        }
        return validateProps(props, settings.input);
    });
}
function assertEnterprisePiecesEnabled(piece, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        if (!((_a = piece.categories) === null || _a === void 0 ? void 0 : _a.includes(shared_1.PieceCategory.PREMIUM))) {
            return;
        }
        const project = yield project_service_1.projectService.getOneOrThrow(projectId);
        const platform = yield platform_service_1.platformService.getOneOrThrow(project.platformId);
        const enabledForPlatform = platform.premiumPieces.includes(piece.name);
        if (enabledForPlatform) {
            return;
        }
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.FEATURE_DISABLED,
            params: {
                message: `The platform doesn not include ${piece.name}`,
            },
        });
    });
}
function validateProps(props, input) {
    const propsSchema = buildSchema(props);
    const propsValidator = compiler_1.TypeCompiler.Compile(propsSchema);
    return propsValidator.Check(input);
}
function buildSchema(props) {
    const entries = Object.entries(props);
    const nonNullableUnknownPropType = typebox_1.Type.Not(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Undefined()]), typebox_1.Type.Unknown());
    const propsSchema = {};
    for (const [name, property] of entries) {
        switch (property.type) {
            case pieces_framework_1.PropertyType.MARKDOWN:
                propsSchema[name] = typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Undefined(), typebox_1.Type.Never(), typebox_1.Type.Unknown()]));
                break;
            case pieces_framework_1.PropertyType.DATE_TIME:
            case pieces_framework_1.PropertyType.SHORT_TEXT:
            case pieces_framework_1.PropertyType.LONG_TEXT:
            case pieces_framework_1.PropertyType.FILE:
                propsSchema[name] = typebox_1.Type.String({
                    minLength: property.required ? 1 : undefined,
                });
                break;
            case pieces_framework_1.PropertyType.CHECKBOX:
                propsSchema[name] = typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.String({})]);
                break;
            case pieces_framework_1.PropertyType.NUMBER:
                // Because it could be a variable
                propsSchema[name] = typebox_1.Type.String({});
                break;
            case pieces_framework_1.PropertyType.STATIC_DROPDOWN:
                propsSchema[name] = nonNullableUnknownPropType;
                break;
            case pieces_framework_1.PropertyType.DROPDOWN:
                propsSchema[name] = nonNullableUnknownPropType;
                break;
            case pieces_framework_1.PropertyType.BASIC_AUTH:
            case pieces_framework_1.PropertyType.CUSTOM_AUTH:
            case pieces_framework_1.PropertyType.SECRET_TEXT:
            case pieces_framework_1.PropertyType.OAUTH2:
                // Only accepts connections variable.
                propsSchema[name] = typebox_1.Type.Union([
                    typebox_1.Type.RegEx(RegExp('{{1}{connections.(.*?)}{1}}')),
                    typebox_1.Type.String(),
                ]);
                break;
            case pieces_framework_1.PropertyType.ARRAY:
                // Only accepts connections variable.
                propsSchema[name] = typebox_1.Type.Union([
                    typebox_1.Type.Array(typebox_1.Type.Unknown({})),
                    typebox_1.Type.String(),
                ]);
                break;
            case pieces_framework_1.PropertyType.OBJECT:
                propsSchema[name] = typebox_1.Type.Union([
                    typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Any()),
                    typebox_1.Type.String(),
                ]);
                break;
            case pieces_framework_1.PropertyType.JSON:
                propsSchema[name] = typebox_1.Type.Union([
                    typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Any()),
                    typebox_1.Type.Array(typebox_1.Type.Any()),
                    typebox_1.Type.String(),
                ]);
                break;
            case pieces_framework_1.PropertyType.MULTI_SELECT_DROPDOWN:
                propsSchema[name] = typebox_1.Type.Union([typebox_1.Type.Array(typebox_1.Type.Any()), typebox_1.Type.String()]);
                break;
            case pieces_framework_1.PropertyType.STATIC_MULTI_SELECT_DROPDOWN:
                propsSchema[name] = typebox_1.Type.Union([typebox_1.Type.Array(typebox_1.Type.Any()), typebox_1.Type.String()]);
                break;
            case pieces_framework_1.PropertyType.DYNAMIC:
                propsSchema[name] = typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Any());
                break;
        }
        if (!property.required) {
            propsSchema[name] = typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Undefined(), propsSchema[name]]));
        }
    }
    return typebox_1.Type.Object(propsSchema);
}


/***/ }),
/* 581 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stepFileService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const domain_helper_1 = __webpack_require__(582);
const jwt_utils_1 = __webpack_require__(510);
const step_file_entity_1 = __webpack_require__(253);
const stepFileRepo = (0, repo_factory_1.repoFactory)(step_file_entity_1.StepFileEntity);
exports.stepFileService = {
    upsert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ hostname, request, projectId, }) {
            const fileId = (0, shared_1.apId)();
            const bufferFile = request.file;
            yield stepFileRepo().upsert({
                id: fileId,
                flowId: request.flowId,
                projectId,
                stepName: request.stepName,
                size: bufferFile.byteLength,
                data: bufferFile,
                name: request.name,
            }, ['flowId', 'projectId', 'stepName', 'name']);
            return encrichWithUrl(hostname, yield stepFileRepo().findOneByOrFail({
                id: fileId,
                projectId,
            }));
        });
    },
    getByToken(token) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const decodedToken = yield jwt_utils_1.jwtUtils.decodeAndVerify({
                    jwt: token,
                    key: yield jwt_utils_1.jwtUtils.getJwtSecret(),
                });
                const file = yield stepFileRepo().findOneByOrFail({
                    id: decodedToken.fileId,
                });
                return file;
            }
            catch (e) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_BEARER_TOKEN,
                    params: {
                        message: 'invalid token or expired for the step file',
                    },
                });
            }
        });
    },
    get(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, id }) {
            const file = stepFileRepo().findOneBy({
                id,
                projectId,
            });
            if ((0, shared_1.isNil)(file)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `Step file with id ${id} not found`,
                    },
                });
            }
            return file;
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, id }) {
            const file = stepFileRepo().findOneBy({
                id,
                projectId,
            });
            if ((0, shared_1.isNil)(file)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `Step file with id ${id} not found`,
                    },
                });
            }
            yield stepFileRepo().delete({
                id,
                projectId,
            });
        });
    },
    deleteAll(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, stepName, }) {
            yield stepFileRepo().delete({
                projectId,
                flowId,
                stepName,
            });
        });
    },
};
function encrichWithUrl(hostname, file) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const jwtSecret = yield jwt_utils_1.jwtUtils.getJwtSecret();
        const accessToken = yield jwt_utils_1.jwtUtils.sign({
            payload: {
                fileId: file.id,
            },
            expiresInSeconds: 60 * 60 * 24 * 7,
            key: jwtSecret,
        });
        const url = yield domain_helper_1.domainHelper.get().constructApiUrlFromRequest({
            domain: hostname,
            path: `v1/step-files/signed?token=${accessToken}`,
        });
        return Object.assign(Object.assign({}, file), { url });
    });
}


/***/ }),
/* 582 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.domainHelper = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
let _domainHelper = {
    constructApiUrlFromRequest(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ path, }) {
            return `${yield server_shared_1.networkUtls.getPublicUrl()}${path}`;
        });
    },
    constructFrontendUrlFromRequest(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ path, }) {
            const frontendUrl = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.FRONTEND_URL);
            return `${frontendUrl}${frontendUrl.endsWith('/') ? '' : '/'}${path}`;
        });
    },
};
exports.domainHelper = {
    set(newHelper) {
        _domainHelper = newHelper;
    },
    get() {
        return _domainHelper;
    },
};


/***/ }),
/* 583 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowVersionSideEffects = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const webhook_simulation_service_1 = __webpack_require__(584);
const deleteWebhookSimulation = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { projectId, flowId } = params;
    try {
        yield webhook_simulation_service_1.webhookSimulationService.delete({
            projectId,
            flowId,
        });
    }
    catch (e) {
        const notWebhookSimulationNotFoundError = !(e instanceof shared_1.ActivepiecesError &&
            e.error.code === shared_1.ErrorCode.ENTITY_NOT_FOUND);
        if (notWebhookSimulationNotFoundError) {
            throw e;
        }
    }
});
exports.flowVersionSideEffects = {
    preApplyOperation(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowVersion, operation, }) {
            if (operation.type === shared_1.FlowOperationType.UPDATE_TRIGGER) {
                try {
                    yield deleteWebhookSimulation({
                        projectId,
                        flowId: flowVersion.flowId,
                    });
                }
                catch (e) {
                    // Ignore error and continue the operation peacefully
                    server_shared_1.exceptionHandler.handle(e);
                }
            }
        });
    },
};


/***/ }),
/* 584 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookSimulationService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const lock_1 = __webpack_require__(512);
const webhook_simulation_entity_1 = __webpack_require__(263);
const webhook_simulation_side_effects_1 = __webpack_require__(585);
const createLock = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ flowId }) {
    const key = `${flowId}-webhook-simulation`;
    return (0, lock_1.acquireLock)({ key, timeout: 5000 });
});
const webhookSimulationRepo = (0, repo_factory_1.repoFactory)(webhook_simulation_entity_1.WebhookSimulationEntity);
exports.webhookSimulationService = {
    create(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug(params, '[WebhookSimulationService#deleteByFlowId] params');
            const { flowId, flowVersionId, projectId } = params;
            const lock = yield createLock({
                flowId,
            });
            try {
                const webhookSimulationExists = yield webhookSimulationRepo().exists({
                    where: { flowId },
                });
                if (webhookSimulationExists) {
                    yield this.delete({
                        flowId,
                        flowVersionId,
                        projectId,
                        parentLock: lock,
                    });
                }
                const webhookSimulation = Object.assign({ id: (0, shared_1.apId)() }, params);
                yield webhook_simulation_side_effects_1.webhookSideEffects.preCreate({
                    flowId,
                    projectId,
                });
                return yield webhookSimulationRepo().save(webhookSimulation);
            }
            finally {
                yield lock.release();
            }
        });
    },
    get(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug(params, '[WebhookSimulationService#getByFlowId] params');
            const { flowId, projectId } = params;
            return webhookSimulationRepo().findOneBy({
                flowId,
                projectId,
            });
        });
    },
    getOrThrow(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const webhookSimulation = yield this.get(params);
            const { flowId, projectId } = params;
            if ((0, shared_1.isNil)(webhookSimulation)) {
                server_shared_1.logger.debug('[WebhookSimulationService#getByFlowId] not found');
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `entityType=webhookSimulation flowId=${flowId} projectId=${projectId}`,
                    },
                });
            }
            return webhookSimulation;
        });
    },
    delete(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.debug(params, '[WebhookSimulationService#deleteByFlowId] params');
            const { flowId, flowVersionId, projectId, parentLock } = params;
            let lock = null;
            if ((0, shared_1.isNil)(parentLock)) {
                lock = yield createLock({
                    flowId,
                });
            }
            try {
                const webhookSimulation = yield this.get({
                    flowId,
                    projectId,
                });
                if ((0, shared_1.isNil)(webhookSimulation)) {
                    return;
                }
                yield webhook_simulation_side_effects_1.webhookSideEffects.preDelete({
                    flowId,
                    projectId,
                    flowVersionId,
                });
                yield webhookSimulationRepo().remove(webhookSimulation);
            }
            finally {
                if (lock) {
                    yield lock.release();
                }
            }
        });
    },
};


/***/ }),
/* 585 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookSideEffects = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const flow_service_1 = __webpack_require__(574);
const trigger_1 = __webpack_require__(586);
const getFlowOrThrow = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ projectId, flowId, flowVersionId, }) {
    return flow_service_1.flowService.getOnePopulatedOrThrow({
        id: flowId,
        projectId,
        versionId: flowVersionId,
    });
});
exports.webhookSideEffects = {
    preCreate(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId }) {
            const { version: flowVersion } = yield getFlowOrThrow({
                flowId,
                projectId,
            });
            const response = yield trigger_1.triggerHooks.enable({
                projectId,
                flowVersion,
                simulate: true,
            });
            if ((0, shared_1.isNil)(response) || response.status !== shared_1.EngineResponseStatus.OK) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.TRIGGER_ENABLE,
                    params: {
                        flowVersionId: flowVersion.id,
                    },
                });
            }
        });
    },
    preDelete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, flowVersionId, }) {
            const { version: flowVersion } = yield getFlowOrThrow({
                flowId,
                projectId,
                flowVersionId,
            });
            const response = yield trigger_1.triggerHooks.disable({
                projectId,
                flowVersion,
                simulate: true,
            });
            if ((0, shared_1.isNil)(response) || response.status !== shared_1.EngineResponseStatus.OK) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.TRIGGER_DISABLE,
                    params: {
                        flowVersionId: flowVersion.id,
                    },
                });
            }
        });
    },
};


/***/ }),
/* 586 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.triggerHooks = void 0;
const disable_trigger_hook_1 = __webpack_require__(587);
const enable_trigger_hook_1 = __webpack_require__(590);
exports.triggerHooks = {
    enable: enable_trigger_hook_1.enablePieceTrigger,
    disable: disable_trigger_hook_1.disablePieceTrigger,
};


/***/ }),
/* 587 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.disablePieceTrigger = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const server_worker_1 = __webpack_require__(474);
const app_event_routing_service_1 = __webpack_require__(588);
const engine_helper_1 = __webpack_require__(508);
const queue_1 = __webpack_require__(572);
const trigger_utils_1 = __webpack_require__(589);
const disablePieceTrigger = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { flowVersion, projectId, simulate } = params;
    if (flowVersion.trigger.type !== shared_1.TriggerType.PIECE) {
        return null;
    }
    const flowTrigger = flowVersion.trigger;
    const pieceTrigger = yield trigger_utils_1.triggerUtils.getPieceTrigger({
        trigger: flowTrigger,
        projectId,
    });
    if (!pieceTrigger) {
        return null;
    }
    try {
        const engineToken = yield (0, engine_helper_1.generateEngineToken)({
            projectId,
        });
        const result = yield server_worker_1.engineRunner.executeTrigger(engineToken, {
            hookType: shared_1.TriggerHookType.ON_DISABLE,
            flowVersion,
            webhookUrl: yield server_worker_1.webhookUtils.getWebhookUrl({
                flowId: flowVersion.flowId,
                simulate,
            }),
            projectId,
        });
        return result;
    }
    catch (error) {
        server_shared_1.exceptionHandler.handle(error);
        if (!params.ignoreError) {
            throw error;
        }
        return null;
    }
    finally {
        yield sideeffect(pieceTrigger, projectId, flowVersion);
    }
});
exports.disablePieceTrigger = disablePieceTrigger;
function sideeffect(pieceTrigger, projectId, flowVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (pieceTrigger.type) {
            case pieces_framework_1.TriggerStrategy.APP_WEBHOOK:
                yield app_event_routing_service_1.appEventRoutingService.deleteListeners({
                    projectId,
                    flowId: flowVersion.flowId,
                });
                break;
            case pieces_framework_1.TriggerStrategy.WEBHOOK: {
                const renewConfiguration = pieceTrigger.renewConfiguration;
                if ((renewConfiguration === null || renewConfiguration === void 0 ? void 0 : renewConfiguration.strategy) === pieces_framework_1.WebhookRenewStrategy.CRON) {
                    yield queue_1.flowQueue.removeRepeatingJob(null, {
                        id: flowVersion.id,
                    });
                }
                break;
            }
            case pieces_framework_1.TriggerStrategy.POLLING:
                yield queue_1.flowQueue.removeRepeatingJob(null, {
                    id: flowVersion.id,
                });
                break;
        }
    });
}


/***/ }),
/* 588 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appEventRoutingService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const app_event_routing_entity_1 = __webpack_require__(229);
const appEventRoutingRepo = (0, repo_factory_1.repoFactory)(app_event_routing_entity_1.AppEventRoutingEntity);
exports.appEventRoutingService = {
    listListeners(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ appName, event, identifierValue, }) {
            return appEventRoutingRepo().findBy({ appName, event, identifierValue });
        });
    },
    createListeners(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ appName, events, identifierValue, flowId, projectId, }) {
            server_shared_1.logger.info(`Creating listeners for ${appName}, events=${events}, identifierValue=${identifierValue}`);
            const upsertCommands = [];
            events.forEach((event) => {
                const upsert = appEventRoutingRepo().upsert({
                    id: (0, shared_1.apId)(),
                    appName,
                    event,
                    identifierValue,
                    flowId,
                    projectId,
                }, ['appName', 'event', 'identifierValue', 'projectId']);
                upsertCommands.push(upsert);
            });
            yield Promise.all(upsertCommands);
        });
    },
    deleteListeners(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, }) {
            yield appEventRoutingRepo().delete({
                projectId,
                flowId,
            });
        });
    },
};


/***/ }),
/* 589 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.triggerUtils = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const piece_metadata_service_1 = __webpack_require__(222);
exports.triggerUtils = {
    getPieceTriggerOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ trigger, projectId }) {
            const pieceTrigger = yield exports.triggerUtils.getPieceTrigger({
                trigger,
                projectId,
            });
            if ((0, shared_1.isNil)(pieceTrigger)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.PIECE_TRIGGER_NOT_FOUND,
                    params: {
                        pieceName: trigger.settings.pieceName,
                        pieceVersion: trigger.settings.pieceVersion,
                        triggerName: trigger.settings.triggerName,
                    },
                });
            }
            return pieceTrigger;
        });
    },
    getPieceTrigger(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ trigger, projectId }) {
            const piece = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
                projectId,
                name: trigger.settings.pieceName,
                version: trigger.settings.pieceVersion,
            });
            const pieceTrigger = piece.triggers[trigger.settings.triggerName];
            return pieceTrigger;
        });
    },
};


/***/ }),
/* 590 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enablePieceTrigger = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const pieces_framework_1 = __webpack_require__(174);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const server_worker_1 = __webpack_require__(474);
const app_event_routing_service_1 = __webpack_require__(588);
const project_plan_service_1 = __webpack_require__(591);
const engine_helper_1 = __webpack_require__(508);
const queue_1 = __webpack_require__(572);
const trigger_utils_1 = __webpack_require__(589);
const POLLING_FREQUENCY_CRON_EXPRESSON = constructEveryXMinuteCron((_a = server_shared_1.system.getNumber(server_shared_1.AppSystemProp.TRIGGER_DEFAULT_POLL_INTERVAL)) !== null && _a !== void 0 ? _a : 5);
function constructEveryXMinuteCron(minute) {
    var _a;
    const edition = server_shared_1.system.getEdition();
    switch (edition) {
        case shared_1.ApEdition.CLOUD:
            return `*/${minute} * * * *`;
        case shared_1.ApEdition.COMMUNITY:
        case shared_1.ApEdition.ENTERPRISE:
            return `*/${(_a = server_shared_1.system.getNumber(server_shared_1.AppSystemProp.TRIGGER_DEFAULT_POLL_INTERVAL)) !== null && _a !== void 0 ? _a : 5} * * * *`;
    }
}
const enablePieceTrigger = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { flowVersion, projectId, simulate } = params;
    if (flowVersion.trigger.type !== shared_1.TriggerType.PIECE) {
        return null;
    }
    const flowTrigger = flowVersion.trigger;
    const pieceTrigger = yield trigger_utils_1.triggerUtils.getPieceTriggerOrThrow({
        trigger: flowTrigger,
        projectId,
    });
    const webhookUrl = yield server_worker_1.webhookUtils.getWebhookUrl({
        flowId: flowVersion.flowId,
        simulate,
    });
    const engineToken = yield (0, engine_helper_1.generateEngineToken)({
        projectId,
    });
    const engineHelperResponse = yield server_worker_1.engineRunner.executeTrigger(engineToken, {
        hookType: shared_1.TriggerHookType.ON_ENABLE,
        flowVersion,
        webhookUrl,
        projectId,
    });
    if (engineHelperResponse.status !== shared_1.EngineResponseStatus.OK) {
        return engineHelperResponse;
    }
    switch (pieceTrigger.type) {
        case pieces_framework_1.TriggerStrategy.APP_WEBHOOK: {
            const appName = flowTrigger.settings.pieceName;
            for (const listener of engineHelperResponse.result.listeners) {
                yield app_event_routing_service_1.appEventRoutingService.createListeners({
                    projectId,
                    flowId: flowVersion.flowId,
                    appName,
                    events: listener.events,
                    identifierValue: listener.identifierValue,
                });
            }
            break;
        }
        case pieces_framework_1.TriggerStrategy.WEBHOOK: {
            const renewConfiguration = pieceTrigger.renewConfiguration;
            switch (renewConfiguration === null || renewConfiguration === void 0 ? void 0 : renewConfiguration.strategy) {
                case pieces_framework_1.WebhookRenewStrategy.CRON: {
                    yield queue_1.flowQueue.add(null, {
                        id: flowVersion.id,
                        type: server_shared_1.JobType.REPEATING,
                        data: {
                            schemaVersion: server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION,
                            projectId,
                            flowVersionId: flowVersion.id,
                            flowId: flowVersion.flowId,
                            jobType: server_shared_1.RepeatableJobType.RENEW_WEBHOOK,
                        },
                        scheduleOptions: {
                            cronExpression: renewConfiguration.cronExpression,
                            timezone: 'UTC',
                        },
                    });
                    break;
                }
                default:
                    break;
            }
            break;
        }
        case pieces_framework_1.TriggerStrategy.POLLING: {
            if ((0, shared_1.isNil)(engineHelperResponse.result.scheduleOptions)) {
                engineHelperResponse.result.scheduleOptions = {
                    cronExpression: POLLING_FREQUENCY_CRON_EXPRESSON,
                    timezone: 'UTC',
                };
                // BEGIN EE
                const edition = server_shared_1.system.getEdition();
                if (edition === shared_1.ApEdition.CLOUD) {
                    const plan = yield project_plan_service_1.projectLimitsService.getOrCreateDefaultPlan(projectId, ee_shared_1.DEFAULT_FREE_PLAN_LIMIT);
                    engineHelperResponse.result.scheduleOptions.cronExpression = constructEveryXMinuteCron(plan.minimumPollingInterval);
                }
                // END EE
            }
            yield queue_1.flowQueue.add(null, {
                id: flowVersion.id,
                type: server_shared_1.JobType.REPEATING,
                data: {
                    schemaVersion: server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION,
                    projectId,
                    environment: shared_1.RunEnvironment.PRODUCTION,
                    flowVersionId: flowVersion.id,
                    flowId: flowVersion.flowId,
                    triggerType: shared_1.TriggerType.PIECE,
                    jobType: server_shared_1.RepeatableJobType.EXECUTE_TRIGGER,
                },
                scheduleOptions: engineHelperResponse.result.scheduleOptions,
            });
            break;
        }
    }
    return engineHelperResponse;
});
exports.enablePieceTrigger = enablePieceTrigger;


/***/ }),
/* 591 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectLimitsService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const project_plan_entity_1 = __webpack_require__(244);
const projectPlanRepo = (0, repo_factory_1.repoFactory)(project_plan_entity_1.ProjectPlanEntity);
exports.projectLimitsService = {
    upsert(planLimits, projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const existingPlan = yield projectPlanRepo().findOneBy({ projectId });
            if (existingPlan) {
                yield projectPlanRepo().update(existingPlan.id, {
                    tasks: planLimits.tasks,
                    teamMembers: planLimits.teamMembers,
                    name: planLimits.nickname,
                    pieces: planLimits.pieces,
                    piecesFilterType: planLimits.piecesFilterType,
                    minimumPollingInterval: planLimits.minimumPollingInterval,
                    connections: planLimits.connections,
                });
            }
            else {
                yield createDefaultPlan(projectId, Object.assign(Object.assign({}, ee_shared_1.DEFAULT_FREE_PLAN_LIMIT), planLimits));
            }
            return projectPlanRepo().findOneByOrFail({ projectId });
        });
    },
    getPlanByProjectId(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return projectPlanRepo().findOneBy({ projectId });
        });
    },
    increaseTask(projectId, tasks) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield projectPlanRepo().increment({
                projectId,
            }, 'tasks', tasks);
            return projectPlanRepo().findOneByOrFail({ projectId });
        });
    },
    getOrCreateDefaultPlan(projectId, flowPlanLimit) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const existingPlan = yield projectPlanRepo().findOneBy({ projectId });
            if (!existingPlan) {
                yield createDefaultPlan(projectId, flowPlanLimit);
            }
            return projectPlanRepo().findOneByOrFail({ projectId });
        });
    },
    getPiecesFilter(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const plan = yield projectPlanRepo().createQueryBuilder().select(['"piecesFilterType"', 'pieces']).where('"projectId" = :projectId', { projectId }).getRawOne();
            if ((0, shared_1.isNil)(plan)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `Project plan not found for project id: ${projectId}`,
                    },
                });
            }
            return {
                piecesFilterType: plan.piecesFilterType,
                pieces: plan.pieces,
            };
        });
    },
};
function createDefaultPlan(projectId, flowPlanLimit) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield projectPlanRepo().upsert({
            id: (0, shared_1.apId)(),
            projectId,
            pieces: flowPlanLimit.pieces,
            piecesFilterType: flowPlanLimit.piecesFilterType,
            tasks: flowPlanLimit.tasks,
            teamMembers: flowPlanLimit.teamMembers,
            minimumPollingInterval: flowPlanLimit.minimumPollingInterval,
            connections: flowPlanLimit.connections,
            name: flowPlanLimit.nickname,
        }, ['projectId']);
        return projectPlanRepo().findOneByOrFail({ projectId });
    });
}


/***/ }),
/* 592 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowFolderService = exports.folderRepo = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const flow_service_1 = __webpack_require__(574);
const folder_entity_1 = __webpack_require__(252);
exports.folderRepo = (0, repo_factory_1.repoFactory)(folder_entity_1.FolderEntity);
exports.flowFolderService = {
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, folderId, }) {
            const folder = yield this.getOneOrThrow({ projectId, folderId });
            yield (0, exports.folderRepo)().delete({
                id: folder.id,
                projectId,
            });
        });
    },
    update(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, folderId, request, }) {
            const folder = yield this.getOneOrThrow({ projectId, folderId });
            const folderWithDisplayName = yield this.getOneByDisplayNameCaseInsensitive({
                projectId,
                displayName: request.displayName,
            });
            if (folderWithDisplayName && folderWithDisplayName.id !== folderId) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.VALIDATION,
                    params: { message: 'Folder displayName is used' },
                });
            }
            yield (0, exports.folderRepo)().update(folder.id, {
                displayName: request.displayName,
            });
            return this.getOneOrThrow({ projectId, folderId });
        });
    },
    upsert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, request, }) {
            const folderWithDisplayName = yield this.getOneByDisplayNameCaseInsensitive({
                projectId,
                displayName: request.displayName,
            });
            if (!(0, shared_1.isNil)(folderWithDisplayName)) {
                return this.update({
                    projectId,
                    folderId: folderWithDisplayName.id,
                    request,
                });
            }
            const folderId = (0, shared_1.apId)();
            yield (0, exports.folderRepo)().upsert({
                id: folderId,
                projectId,
                displayName: request.displayName,
            }, ['projectId', 'displayName']);
            const folder = yield (0, exports.folderRepo)().findOneByOrFail({ projectId, id: folderId });
            return Object.assign(Object.assign({}, folder), { numberOfFlows: 0 });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, cursorRequest, limit, }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: folder_entity_1.FolderEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const paginationResponse = yield paginator.paginate((0, exports.folderRepo)().createQueryBuilder('folder').where({ projectId }));
            const numberOfFlowForEachFolder = [];
            const dtosList = [];
            paginationResponse.data.forEach((f) => {
                numberOfFlowForEachFolder.push(flow_service_1.flowService.count({ projectId, folderId: f.id }));
            });
            (yield Promise.all(numberOfFlowForEachFolder)).forEach((num, idx) => {
                dtosList.push(Object.assign(Object.assign({}, paginationResponse.data[idx]), { numberOfFlows: num }));
            });
            return pagination_utils_1.paginationHelper.createPage(dtosList, paginationResponse.cursor);
        });
    },
    getOneByDisplayNameCaseInsensitive(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, displayName, }) {
            return (0, exports.folderRepo)().createQueryBuilder('folder')
                .where('folder.projectId = :projectId', { projectId })
                .andWhere('LOWER(folder.displayName) = LOWER(:displayName)', { displayName })
                .getOne();
        });
    },
    getOneOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, folderId, }) {
            const folder = yield (0, exports.folderRepo)().findOneBy({ projectId, id: folderId });
            if (!folder) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `Folder ${folderId} is not found`,
                    },
                });
            }
            const numberOfFlows = yield flow_service_1.flowService.count({ projectId, folderId });
            return Object.assign(Object.assign({}, folder), { numberOfFlows });
        });
    },
};


/***/ }),
/* 593 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowSideEffects = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const flow_version_service_1 = __webpack_require__(580);
const trigger_1 = __webpack_require__(586);
exports.flowSideEffects = {
    preUpdateStatus(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowToUpdate, newStatus, entityManager, }) {
            (0, shared_1.assertNotNullOrUndefined)(flowToUpdate.publishedVersionId, 'publishedVersionId');
            const publishedFlowVersion = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
                flowId: flowToUpdate.id,
                versionId: flowToUpdate.publishedVersionId,
                entityManager,
            });
            let scheduleOptions;
            switch (newStatus) {
                case shared_1.FlowStatus.ENABLED: {
                    const response = yield trigger_1.triggerHooks.enable({
                        flowVersion: publishedFlowVersion,
                        projectId: flowToUpdate.projectId,
                        simulate: false,
                    });
                    scheduleOptions = response === null || response === void 0 ? void 0 : response.result.scheduleOptions;
                    break;
                }
                case shared_1.FlowStatus.DISABLED: {
                    yield trigger_1.triggerHooks.disable({
                        flowVersion: publishedFlowVersion,
                        projectId: flowToUpdate.projectId,
                        simulate: false,
                    });
                    break;
                }
            }
            if ((0, shared_1.isNil)(scheduleOptions)) {
                return {
                    scheduleOptions: null,
                };
            }
            return {
                scheduleOptions: Object.assign(Object.assign({}, scheduleOptions), { type: shared_1.ScheduleType.CRON_EXPRESSION }),
            };
        });
    },
    preUpdatePublishedVersionId(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowToUpdate, flowVersionToPublish, }) {
            if (flowToUpdate.status === shared_1.FlowStatus.ENABLED &&
                flowToUpdate.publishedVersionId) {
                yield trigger_1.triggerHooks.disable({
                    flowVersion: yield flow_version_service_1.flowVersionService.getOneOrThrow(flowToUpdate.publishedVersionId),
                    projectId: flowToUpdate.projectId,
                    simulate: false,
                });
            }
            const enableResult = yield trigger_1.triggerHooks.enable({
                flowVersion: flowVersionToPublish,
                projectId: flowToUpdate.projectId,
                simulate: false,
            });
            const scheduleOptions = enableResult === null || enableResult === void 0 ? void 0 : enableResult.result.scheduleOptions;
            if ((0, shared_1.isNil)(scheduleOptions)) {
                return {
                    scheduleOptions: null,
                };
            }
            return {
                scheduleOptions: Object.assign(Object.assign({}, scheduleOptions), { type: shared_1.ScheduleType.CRON_EXPRESSION }),
            };
        });
    },
    preDelete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowToDelete }) {
            if (flowToDelete.status === shared_1.FlowStatus.DISABLED ||
                (0, shared_1.isNil)(flowToDelete.publishedVersionId)) {
                return;
            }
            const publishedFlowVersion = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
                flowId: flowToDelete.id,
                versionId: flowToDelete.publishedVersionId,
            });
            yield trigger_1.triggerHooks.disable({
                flowVersion: publishedFlowVersion,
                projectId: flowToDelete.projectId,
                simulate: false,
            });
        });
    },
};


/***/ }),
/* 594 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowRepo = void 0;
const repo_factory_1 = __webpack_require__(224);
const flow_entity_1 = __webpack_require__(249);
exports.flowRepo = (0, repo_factory_1.repoFactory)(flow_entity_1.FlowEntity);


/***/ }),
/* 595 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowRunService = exports.flowRunRepo = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const database_connection_1 = __webpack_require__(225);
const file_service_1 = __webpack_require__(223);
const flow_version_service_1 = __webpack_require__(580);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const paginator_1 = __webpack_require__(453);
const telemetry_utils_1 = __webpack_require__(576);
const webhook_response_watcher_1 = __webpack_require__(596);
const flow_service_1 = __webpack_require__(574);
const flow_run_entity_1 = __webpack_require__(250);
const flow_run_side_effects_1 = __webpack_require__(601);
const log_serializer_1 = __webpack_require__(622);
exports.flowRunRepo = (0, repo_factory_1.repoFactory)(flow_run_entity_1.FlowRunEntity);
const getFlowRunOrCreate = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { id, projectId, flowId, flowVersionId, flowDisplayName, environment } = params;
    if (id) {
        return exports.flowRunService.getOneOrThrow({
            id,
            projectId,
        });
    }
    return {
        id: (0, shared_1.apId)(),
        projectId,
        flowId,
        flowVersionId,
        environment,
        flowDisplayName,
        startTime: new Date().toISOString(),
    };
});
function updateFlowRunToLatestFlowVersionIdAndReturnPayload(flowRunId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        const flowRun = yield exports.flowRunService.getOnePopulatedOrThrow({
            id: flowRunId,
            projectId: undefined,
        });
        const flowVersion = yield flow_version_service_1.flowVersionService.getLatestLockedVersionOrThrow(flowRun.flowId);
        yield (0, exports.flowRunRepo)().update(flowRunId, {
            flowVersionId: flowVersion.id,
        });
        return flowRun.steps ? (_a = flowRun.steps[flowVersion.trigger.name]) === null || _a === void 0 ? void 0 : _a.output : undefined;
    });
}
function returnHandlerId(pauseMetadata, requestId) {
    const handlerId = webhook_response_watcher_1.webhookResponseWatcher.getServerId();
    if ((0, shared_1.isNil)(pauseMetadata)) {
        return handlerId;
    }
    if (pauseMetadata.type === shared_1.PauseType.WEBHOOK && requestId === pauseMetadata.requestId && pauseMetadata.handlerId) {
        return pauseMetadata.handlerId;
    }
    else {
        return handlerId;
    }
}
exports.flowRunService = {
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, status, cursor, limit, tags, createdAfter, createdBefore, }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursor);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: flow_run_entity_1.FlowRunEntity,
                query: {
                    limit,
                    order: paginator_1.Order.DESC,
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            let query = (0, exports.flowRunRepo)().createQueryBuilder('flow_run').where(Object.assign(Object.assign({ projectId }, (0, shared_1.spreadIfDefined)('flowId', flowId)), { environment: shared_1.RunEnvironment.PRODUCTION }));
            if (status) {
                query = query.andWhere({
                    status: (0, typeorm_1.In)(status),
                });
            }
            if (createdAfter) {
                query = query.andWhere('flow_run.created >= :createdAfter', {
                    createdAfter,
                });
            }
            if (createdBefore) {
                query = query.andWhere('flow_run.created <= :createdBefore', {
                    createdBefore,
                });
            }
            if (tags) {
                query = (0, database_connection_1.APArrayContains)('tags', tags, query);
            }
            const { data, cursor: newCursor } = yield paginator.paginate(query);
            return pagination_utils_1.paginationHelper.createPage(data, newCursor);
        });
    },
    retry(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowRunId, strategy }) {
            switch (strategy) {
                case shared_1.FlowRetryStrategy.FROM_FAILED_STEP:
                    yield exports.flowRunService.addToQueue({
                        flowRunId,
                        executionType: shared_1.ExecutionType.RESUME,
                        progressUpdateType: shared_1.ProgressUpdateType.NONE,
                    });
                    break;
                case shared_1.FlowRetryStrategy.ON_LATEST_VERSION: {
                    const payload = yield updateFlowRunToLatestFlowVersionIdAndReturnPayload(flowRunId);
                    yield exports.flowRunService.addToQueue({
                        payload,
                        flowRunId,
                        executionType: shared_1.ExecutionType.BEGIN,
                        progressUpdateType: shared_1.ProgressUpdateType.NONE,
                    });
                    break;
                }
            }
        });
    },
    addToQueue(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowRunId, payload, requestId, progressUpdateType, executionType, }) {
            server_shared_1.logger.info(`[FlowRunService#resume] flowRunId=${flowRunId}`);
            const flowRunToResume = yield (0, exports.flowRunRepo)().findOneBy({
                id: flowRunId,
            });
            if ((0, shared_1.isNil)(flowRunToResume)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.FLOW_RUN_NOT_FOUND,
                    params: {
                        id: flowRunId,
                    },
                });
            }
            const pauseMetadata = flowRunToResume.pauseMetadata;
            const matchRequestId = (0, shared_1.isNil)(pauseMetadata) || (pauseMetadata.type === shared_1.PauseType.WEBHOOK && requestId === pauseMetadata.requestId);
            if (matchRequestId) {
                yield exports.flowRunService.start({
                    payload,
                    flowRunId: flowRunToResume.id,
                    projectId: flowRunToResume.projectId,
                    flowVersionId: flowRunToResume.flowVersionId,
                    synchronousHandlerId: returnHandlerId(pauseMetadata, requestId),
                    httpRequestId: requestId,
                    progressUpdateType,
                    executionType,
                    environment: shared_1.RunEnvironment.PRODUCTION,
                });
            }
        });
    },
    updateStatus(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowRunId, status, tasks, executionState, projectId, tags, duration, }) {
            const logFileId = yield updateLogs({
                flowRunId,
                projectId,
                executionState,
            });
            yield (0, exports.flowRunRepo)().update(flowRunId, Object.assign(Object.assign(Object.assign({ status,
                tasks }, (0, shared_1.spreadIfDefined)('duration', duration ? Math.floor(Number(duration)) : undefined)), (0, shared_1.spreadIfDefined)('logsFileId', logFileId)), { terminationReason: undefined, tags, finishTime: new Date().toISOString() }));
            const flowRun = yield this.getOnePopulatedOrThrow({
                id: flowRunId,
                projectId: undefined,
            });
            yield flow_run_side_effects_1.flowRunSideEffects.finish({ flowRun });
            return flowRun;
        });
    },
    start(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowVersionId, flowRunId, payload, environment, executionType, synchronousHandlerId, progressUpdateType, httpRequestId, }) {
            const flowVersion = yield flow_version_service_1.flowVersionService.getOneOrThrow(flowVersionId);
            const flow = yield flow_service_1.flowService.getOneOrThrow({
                id: flowVersion.flowId,
                projectId,
            });
            const flowRun = yield getFlowRunOrCreate({
                id: flowRunId,
                projectId: flow.projectId,
                flowId: flowVersion.flowId,
                flowVersionId: flowVersion.id,
                environment,
                flowDisplayName: flowVersion.displayName,
            });
            flowRun.status = shared_1.FlowRunStatus.RUNNING;
            const savedFlowRun = yield (0, exports.flowRunRepo)().save(flowRun);
            telemetry_utils_1.telemetry
                .trackProject(flow.projectId, {
                name: shared_1.TelemetryEventName.FLOW_RUN_CREATED,
                payload: {
                    projectId: savedFlowRun.projectId,
                    flowId: savedFlowRun.flowId,
                    environment: savedFlowRun.environment,
                },
            })
                .catch((e) => server_shared_1.logger.error(e, '[FlowRunService#Start] telemetry.trackProject'));
            yield flow_run_side_effects_1.flowRunSideEffects.start({
                flowRun: savedFlowRun,
                httpRequestId,
                payload,
                synchronousHandlerId,
                executionType,
                progressUpdateType,
            });
            return savedFlowRun;
        });
    },
    test(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowVersionId }) {
            const flowVersion = yield flow_version_service_1.flowVersionService.getOneOrThrow(flowVersionId);
            const payload = flowVersion.trigger.settings.inputUiInfo.currentSelectedData;
            return this.start({
                projectId,
                flowVersionId,
                payload,
                environment: shared_1.RunEnvironment.TESTING,
                executionType: shared_1.ExecutionType.BEGIN,
                synchronousHandlerId: webhook_response_watcher_1.webhookResponseWatcher.getServerId(),
                httpRequestId: undefined,
                progressUpdateType: shared_1.ProgressUpdateType.TEST_FLOW,
            });
        });
    },
    pause(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            server_shared_1.logger.info(`[FlowRunService#pause] flowRunId=${params.flowRunId} pauseType=${params.pauseMetadata.type}`);
            const { flowRunId, pauseMetadata } = params;
            yield (0, exports.flowRunRepo)().update(flowRunId, {
                status: shared_1.FlowRunStatus.PAUSED,
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                pauseMetadata: pauseMetadata,
            });
            const flowRun = yield (0, exports.flowRunRepo)().findOneByOrFail({ id: flowRunId });
            yield flow_run_side_effects_1.flowRunSideEffects.pause({ flowRun });
        });
    },
    getOneOrThrow(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowRun = yield (0, exports.flowRunRepo)().findOneBy({
                projectId: params.projectId,
                id: params.id,
            });
            if ((0, shared_1.isNil)(flowRun)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.FLOW_RUN_NOT_FOUND,
                    params: {
                        id: params.id,
                    },
                });
            }
            return flowRun;
        });
    },
    getOnePopulatedOrThrow(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowRun = yield this.getOneOrThrow(params);
            let steps = {};
            if (!(0, shared_1.isNil)(flowRun.logsFileId)) {
                const logFile = yield file_service_1.fileService.getOneOrThrow({
                    fileId: flowRun.logsFileId,
                    projectId: flowRun.projectId,
                });
                const serializedExecutionOutput = logFile.data.toString('utf-8');
                const executionOutput = JSON.parse(serializedExecutionOutput);
                steps = executionOutput.executionState.steps;
            }
            return Object.assign(Object.assign({}, flowRun), { steps });
        });
    },
};
function updateLogs(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowRunId, projectId, executionState }) {
        var _b;
        if ((0, shared_1.isNil)(executionState)) {
            return undefined;
        }
        const flowRun = yield (0, exports.flowRunRepo)().findOneByOrFail({ id: flowRunId });
        const serializedLogs = yield log_serializer_1.logSerializer.serialize({
            executionState,
        });
        if (serializedLogs.byteLength > shared_1.MAX_LOG_SIZE) {
            const errors = new Error('Execution Output is too large, maximum size is ' + shared_1.MAX_LOG_SIZE);
            server_shared_1.exceptionHandler.handle(errors);
            throw errors;
        }
        const fileId = (_b = flowRun.logsFileId) !== null && _b !== void 0 ? _b : (0, shared_1.apId)();
        yield file_service_1.fileService.save({
            fileId,
            projectId,
            data: serializedLogs,
            type: shared_1.FileType.FLOW_RUN_LOG,
            compression: shared_1.FileCompression.GZIP,
        });
        return fileId;
    });
}


/***/ }),
/* 596 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookResponseWatcher = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const utils_1 = __webpack_require__(597);
const http_status_codes_1 = __webpack_require__(481);
const pubsub_1 = __webpack_require__(598);
const listeners = new Map();
const WEBHOOK_TIMEOUT_MS = ((_a = server_shared_1.system.getNumber(server_shared_1.AppSystemProp.WEBHOOK_TIMEOUT_SECONDS)) !== null && _a !== void 0 ? _a : 30) * 1000;
const SERVER_ID = (0, shared_1.apId)();
exports.webhookResponseWatcher = {
    getServerId() {
        return SERVER_ID;
    },
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            utils_1.logger.info('[engineWatcher#init] Initializing engine run watcher');
            yield (0, pubsub_1.pubsub)().subscribe(`engine-run:sync:${SERVER_ID}`, (_channel, message) => {
                const parsedMessasge = JSON.parse(message);
                const listener = listeners.get(parsedMessasge.requestId);
                if (listener) {
                    listener(parsedMessasge);
                }
                utils_1.logger.info({ requestId: parsedMessasge.requestId }, '[engineWatcher#init]');
            });
        });
    },
    oneTimeListener(requestId, timeoutRequest) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            utils_1.logger.info({ requestId }, '[engineWatcher#listen]');
            return new Promise((resolve) => {
                let timeout;
                if (timeoutRequest) {
                    const defaultResponse = {
                        status: http_status_codes_1.StatusCodes.NO_CONTENT,
                        body: {},
                        headers: {},
                    };
                    timeout = setTimeout(() => {
                        listeners.delete(requestId);
                        resolve(defaultResponse);
                    }, WEBHOOK_TIMEOUT_MS);
                }
                const responseHandler = (flowResponse) => {
                    if (timeout) {
                        clearTimeout(timeout);
                    }
                    listeners.delete(requestId);
                    resolve(flowResponse.httpResponse);
                };
                listeners.set(requestId, responseHandler);
            });
        });
    },
    publish(requestId, workerServerId, httpResponse) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            utils_1.logger.info({ requestId }, '[engineWatcher#publish]');
            const message = { requestId, httpResponse };
            yield (0, pubsub_1.pubsub)().publish(`engine-run:sync:${workerServerId}`, JSON.stringify(message));
        });
    },
    shutdown() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, pubsub_1.pubsub)().unsubscribe(`engine-run:sync:${SERVER_ID}`);
        });
    },
};


/***/ }),
/* 597 */
/***/ ((module) => {

module.exports = require("@sentry/utils");

/***/ }),
/* 598 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pubsub = void 0;
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const redis_connection_1 = __webpack_require__(514);
const memory_pubsub_1 = __webpack_require__(599);
const redis_pubsub_1 = __webpack_require__(600);
const queueMode = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
let _pubsub = null;
const pubsub = () => {
    if (!(0, shared_1.isNil)(_pubsub)) {
        return _pubsub;
    }
    _pubsub = queueMode === server_shared_1.QueueMode.MEMORY
        ? memory_pubsub_1.memoryPubSub
        : (0, redis_pubsub_1.redisPubSub)((0, redis_connection_1.createRedisClient)(), (0, redis_connection_1.createRedisClient)());
    return _pubsub;
};
exports.pubsub = pubsub;


/***/ }),
/* 599 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.memoryPubSub = void 0;
const tslib_1 = __webpack_require__(1);
const subscriptions = new Map();
exports.memoryPubSub = {
    subscribe(channel, listener) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!subscriptions.has(channel)) {
                subscriptions.set(channel, []);
            }
            (_a = subscriptions.get(channel)) === null || _a === void 0 ? void 0 : _a.push(listener);
        });
    },
    publish(channel, message) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const listeners = subscriptions.get(channel);
            if (listeners) {
                listeners.forEach((listener) => listener(channel, message));
            }
        });
    },
    unsubscribe(channel) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            subscriptions.delete(channel);
        });
    },
};


/***/ }),
/* 600 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.redisPubSub = void 0;
const tslib_1 = __webpack_require__(1);
const redisPubSub = (redisClientSubscriber, redisClientPublisher) => {
    return {
        subscribe(channel, listener) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield redisClientSubscriber.subscribe(channel);
                redisClientSubscriber.on('message', listener);
            });
        },
        publish(channel, message) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield redisClientPublisher.publish(channel, message);
            });
        },
        unsubscribe(channel) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield redisClientSubscriber.unsubscribe(channel);
            });
        },
    };
};
exports.redisPubSub = redisPubSub;


/***/ }),
/* 601 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowRunSideEffects = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const alerts_service_1 = __webpack_require__(602);
const issues_service_1 = __webpack_require__(612);
const application_events_1 = __webpack_require__(517);
const queue_1 = __webpack_require__(572);
const flow_run_hooks_1 = __webpack_require__(621);
const calculateDelayForPausedRun = (resumeDateTimeIsoString) => {
    const now = (0, dayjs_1.default)();
    const resumeDateTime = (0, dayjs_1.default)(resumeDateTimeIsoString);
    const delayInMilliSeconds = resumeDateTime.diff(now);
    const resumeDateTimeAlreadyPassed = delayInMilliSeconds < 0;
    if (resumeDateTimeAlreadyPassed) {
        return 0;
    }
    return delayInMilliSeconds;
};
exports.flowRunSideEffects = {
    finish(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowRun }) {
            yield flow_run_hooks_1.flowRunHooks
                .getHooks()
                .onFinish({ projectId: flowRun.projectId, tasks: flowRun.tasks });
            if (flowRun.environment === shared_1.RunEnvironment.PRODUCTION) {
                if ((0, shared_1.isFailedState)(flowRun.status)) {
                    const issue = yield issues_service_1.issuesService.add({
                        flowId: flowRun.flowId,
                        projectId: flowRun.projectId,
                        flowRunCreatedAt: flowRun.created,
                    });
                    yield alerts_service_1.alertsService.sendAlertOnRunFinish({ issue, flowRunId: flowRun.id });
                }
            }
            application_events_1.eventsHooks.get().sendWorkerEvent(flowRun.projectId, {
                action: ee_shared_1.ApplicationEventName.FLOW_RUN_FINISHED,
                data: {
                    flowRun,
                },
            });
        });
    },
    start(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowRun, executionType, payload, synchronousHandlerId, httpRequestId, progressUpdateType, }) {
            server_shared_1.logger.info(`[FlowRunSideEffects#start] flowRunId=${flowRun.id} executionType=${executionType}`);
            yield queue_1.flowQueue.add(null, {
                id: flowRun.id,
                type: server_shared_1.JobType.ONE_TIME,
                priority: (0, shared_1.isNil)(synchronousHandlerId) ? 'medium' : 'high',
                data: {
                    synchronousHandlerId: synchronousHandlerId !== null && synchronousHandlerId !== void 0 ? synchronousHandlerId : null,
                    projectId: flowRun.projectId,
                    environment: flowRun.environment,
                    runId: flowRun.id,
                    flowVersionId: flowRun.flowVersionId,
                    payload,
                    httpRequestId,
                    executionType,
                    progressUpdateType,
                },
            });
            application_events_1.eventsHooks.get().sendWorkerEvent(flowRun.projectId, {
                action: ee_shared_1.ApplicationEventName.FLOW_RUN_STARTED,
                data: {
                    flowRun,
                },
            });
        });
    },
    pause(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flowRun }) {
            var _b, _c, _d, _e, _f;
            server_shared_1.logger.info(`[FlowRunSideEffects#pause] flowRunId=${flowRun.id} pauseType=${(_b = flowRun.pauseMetadata) === null || _b === void 0 ? void 0 : _b.type}`);
            const { pauseMetadata } = flowRun;
            if ((0, shared_1.isNil)(pauseMetadata)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.VALIDATION,
                    params: {
                        message: `pauseMetadata is undefined flowRunId=${flowRun.id}`,
                    },
                });
            }
            switch (pauseMetadata.type) {
                case shared_1.PauseType.DELAY:
                    yield queue_1.flowQueue.add(null, {
                        id: flowRun.id,
                        type: server_shared_1.JobType.DELAYED,
                        data: {
                            schemaVersion: server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION,
                            runId: flowRun.id,
                            synchronousHandlerId: (_d = (_c = flowRun.pauseMetadata) === null || _c === void 0 ? void 0 : _c.handlerId) !== null && _d !== void 0 ? _d : null,
                            progressUpdateType: (_f = (_e = flowRun.pauseMetadata) === null || _e === void 0 ? void 0 : _e.progressUpdateType) !== null && _f !== void 0 ? _f : shared_1.ProgressUpdateType.NONE,
                            projectId: flowRun.projectId,
                            environment: flowRun.environment,
                            jobType: server_shared_1.RepeatableJobType.DELAYED_FLOW,
                            flowVersionId: flowRun.flowVersionId,
                        },
                        delay: calculateDelayForPausedRun(pauseMetadata.resumeDateTime),
                    });
                    break;
                case shared_1.PauseType.WEBHOOK:
                    break;
            }
        });
    },
};


/***/ }),
/* 602 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.alertsService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const repo_factory_1 = __webpack_require__(224);
const flow_version_service_1 = __webpack_require__(580);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const alerts_entity_1 = __webpack_require__(230);
const alerts_handler_1 = __webpack_require__(603);
const repo = (0, repo_factory_1.repoFactory)(alerts_entity_1.AlertEntity);
exports.alertsService = {
    sendAlertOnRunFinish(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ issue, flowRunId }) {
            const project = yield project_service_1.projectService.getOneOrThrow(issue.projectId);
            const platform = yield platform_service_1.platformService.getOneOrThrow(project.platformId);
            if (platform.embeddingEnabled) {
                return;
            }
            const flowVersion = yield flow_version_service_1.flowVersionService.getLatestLockedVersionOrThrow(issue.flowId);
            yield alerts_handler_1.alertsHandler[project.notifyStatus]({
                flowRunId,
                projectId: issue.projectId,
                platformId: platform.id,
                flowId: issue.flowId,
                flowName: flowVersion.displayName,
                issueCount: issue.count,
                createdAt: (0, dayjs_1.default)(issue.created).tz('America/Los_Angeles').format('DD MMM YYYY, HH:mm [PT]'),
            });
        });
    },
    add(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, channel, receiver }) {
            const alertId = (0, shared_1.apId)();
            const existingAlert = yield repo().findOneBy({
                projectId,
                receiver,
            });
            if (existingAlert) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.EXISTING_ALERT_CHANNEL,
                    params: {
                        email: receiver,
                    },
                });
            }
            yield repo().createQueryBuilder()
                .insert()
                .into(alerts_entity_1.AlertEntity)
                .values({
                id: alertId,
                channel,
                projectId,
                receiver,
                created: (0, dayjs_1.default)().toISOString(),
            })
                .execute();
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, cursor, limit }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursor !== null && cursor !== void 0 ? cursor : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: alerts_entity_1.AlertEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const query = repo().createQueryBuilder(alerts_entity_1.AlertEntity.options.name).where({
                projectId,
            });
            const { data, cursor: newCursor } = yield paginator.paginate(query);
            return pagination_utils_1.paginationHelper.createPage(data, newCursor);
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ alertId }) {
            yield repo().delete({
                id: alertId,
            });
        });
    },
};


/***/ }),
/* 603 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.alertsHandler = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const redis_connection_1 = __webpack_require__(514);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const email_service_1 = __webpack_require__(611);
const platform_domain_helper_1 = __webpack_require__(613);
const HOUR_IN_SECONDS = 3600;
const DAY_IN_SECONDS = 86400;
const HOURLY_LIMIT = 5;
const DAILY_LIMIT = 15;
exports.alertsHandler = {
    [shared_1.NotificationStatus.NEVER]: (_) => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return Promise.resolve(); }),
    [shared_1.NotificationStatus.ALWAYS]: (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return sendAlertOnFlowRun(params); }),
    [shared_1.NotificationStatus.NEW_ISSUE]: (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return sendAlertOnNewIssue(params); }),
};
function scheduleSendingReminder(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { projectId } = params;
        if (params.issueCount === 1) {
            const project = yield project_service_1.projectService.getOneOrThrow(projectId);
            const platform = yield platform_service_1.platformService.getOneOrThrow(project.platformId);
            if (!platform.flowIssuesEnabled || platform.embeddingEnabled) {
                return;
            }
            const reminderKey = `reminder:${projectId}`;
            const isEmailScheduled = yield (0, redis_connection_1.getRedisConnection)().get(reminderKey);
            if (isEmailScheduled) {
                return;
            }
            const endOfDay = (0, dayjs_1.default)().endOf('day');
            yield (0, redis_connection_1.getRedisConnection)().set(reminderKey, 0, 'EXAT', endOfDay.unix());
            yield system_jobs_1.systemJobsSchedule.upsertJob({
                job: {
                    name: common_1.SystemJobName.ISSUES_REMINDER,
                    data: {
                        projectId,
                        platformId: platform.id,
                        projectName: project.displayName,
                    },
                    jobId: `issues-reminder-${projectId}`,
                },
                schedule: {
                    type: 'one-time',
                    date: endOfDay,
                },
            });
        }
    });
}
function sendAlertOnNewIssue(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { platformId, issueCount } = params;
        const isOldIssue = issueCount > 1;
        if (isOldIssue) {
            return;
        }
        const issueUrl = yield platform_domain_helper_1.platformDomainHelper.constructUrlFrom({
            platformId,
            path: 'runs?limit=10#Issues',
        });
        yield scheduleSendingReminder({ projectId: params.projectId, issueCount: params.issueCount });
        yield email_service_1.emailService.sendIssueCreatedNotification(Object.assign(Object.assign({}, params), { issueOrRunsPath: issueUrl, isIssue: true }));
    });
}
function sendAlertOnFlowRun(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { flowId, platformId, flowRunId } = params;
        const hourlyFlowIdKey = `alerts:hourly:${flowId}`;
        const dailyFlowIdKey = `alerts:daily:${flowId}`;
        const [hourlyCount, dailyCount] = yield Promise.all([
            incrementAndExpire(hourlyFlowIdKey, HOUR_IN_SECONDS),
            incrementAndExpire(dailyFlowIdKey, DAY_IN_SECONDS),
        ]);
        if (hourlyCount > HOURLY_LIMIT || dailyCount > DAILY_LIMIT) {
            return;
        }
        const flowRunsUrl = yield platform_domain_helper_1.platformDomainHelper.constructUrlFrom({
            platformId,
            path: `runs/${flowRunId}`,
        });
        yield scheduleSendingReminder({ projectId: params.projectId, issueCount: params.issueCount });
        yield email_service_1.emailService.sendIssueCreatedNotification(Object.assign(Object.assign({}, params), { issueOrRunsPath: flowRunsUrl, isIssue: false }));
    });
}
function incrementAndExpire(key, expiryTime) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const redis = (0, redis_connection_1.getRedisConnection)();
        const count = yield redis.incr(key);
        if (count === 1) {
            yield redis.expire(key, expiryTime);
        }
        return count;
    });
}


/***/ }),
/* 604 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.systemJobsSchedule = void 0;
const server_shared_1 = __webpack_require__(2);
const memory_system_jobs_1 = __webpack_require__(605);
const redis_system_job_1 = __webpack_require__(608);
const queueMode = server_shared_1.system.get(server_shared_1.AppSystemProp.QUEUE_MODE);
exports.systemJobsSchedule = (() => {
    switch (queueMode) {
        case server_shared_1.QueueMode.REDIS:
            return redis_system_job_1.redisSystemJobSchedulerService;
        case server_shared_1.QueueMode.MEMORY:
            return memory_system_jobs_1.memorySystemJobSchedulerService;
        default:
            throw new Error(`Invalid queue mode: ${queueMode}`);
    }
})();


/***/ }),
/* 605 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.memorySystemJobSchedulerService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const node_cron_1 = tslib_1.__importDefault(__webpack_require__(606));
const job_handlers_1 = __webpack_require__(607);
const scheduled = {};
exports.memorySystemJobSchedulerService = {
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            //
        });
    },
    upsertJob(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ job, schedule }) {
            if (scheduled[job.name]) {
                return;
            }
            const jobHandler = job_handlers_1.systemJobHandlers.getJobHandler(job.name);
            switch (schedule.type) {
                case 'one-time': {
                    const diff = schedule.date.diff((0, dayjs_1.default)(), 'milliseconds');
                    if (diff > 0) {
                        setTimeout(() => {
                            jobHandler(job.data).catch(server_shared_1.logger.error);
                        }, diff);
                    }
                    break;
                }
                case 'repeated': {
                    const cronExpression = schedule.cron;
                    node_cron_1.default.schedule(cronExpression, () => {
                        jobHandler(job.data).catch(server_shared_1.logger.error);
                    });
                    break;
                }
            }
            scheduled[job.name] = true;
        });
    },
    close() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            //
        });
    },
};


/***/ }),
/* 606 */
/***/ ((module) => {

module.exports = require("node-cron");

/***/ }),
/* 607 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.systemJobHandlers = void 0;
const shared_1 = __webpack_require__(8);
const jobHandlers = new Map();
exports.systemJobHandlers = {
    registerJobHandler(name, handler) {
        jobHandlers.set(name, handler);
    },
    getJobHandler(name) {
        const jobHandler = jobHandlers.get(name);
        if ((0, shared_1.isNil)(jobHandler)) {
            throw new Error(`No handler for job ${name}`);
        }
        return jobHandler;
    },
};


/***/ }),
/* 608 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.redisSystemJobSchedulerService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const bullmq_1 = __webpack_require__(609);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const redis_connection_1 = __webpack_require__(514);
const job_handlers_1 = __webpack_require__(607);
const FIFTEEN_MINUTES = 15 * 60 * 1000;
const SYSTEM_JOB_QUEUE = 'system-job-queue';
let systemJobsQueue;
let systemJobWorker;
exports.redisSystemJobSchedulerService = {
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            systemJobsQueue = new bullmq_1.Queue(SYSTEM_JOB_QUEUE, {
                connection: (0, redis_connection_1.createRedisClient)(),
                defaultJobOptions: {
                    attempts: 10,
                    backoff: {
                        type: 'exponential',
                        delay: FIFTEEN_MINUTES,
                    },
                },
            });
            systemJobWorker = new bullmq_1.Worker(SYSTEM_JOB_QUEUE, (job) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                server_shared_1.logger.debug({ name: 'RedisSystemJob#systemJobWorker' }, `Executing job (${job.name})`);
                const jobHandler = job_handlers_1.systemJobHandlers.getJobHandler(job.name);
                yield jobHandler(job.data);
            }), {
                connection: (0, redis_connection_1.createRedisClient)(),
                concurrency: 1,
            });
            yield Promise.all([
                systemJobsQueue.waitUntilReady(),
                systemJobWorker.waitUntilReady(),
            ]);
        });
    },
    upsertJob(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ job, schedule }) {
            server_shared_1.logger.info({ name: 'RedisSystemJob#upsertJob', jobName: job.name }, 'Upserting job');
            if (yield jobNotInQueue(job.name, job.jobId)) {
                server_shared_1.logger.info({ name: 'RedisSystemJob#upsertJob', jobName: job.name }, 'Adding job to queue');
                yield addJobToQueue({
                    job,
                    schedule,
                });
            }
        });
    },
    close() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, shared_1.isNil)(systemJobsQueue)) {
                return;
            }
            yield Promise.all([
                systemJobWorker.close(),
                systemJobsQueue.close(),
            ]);
        });
    },
};
const addJobToQueue = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ job, schedule }) {
    const jobOptions = configureJobOptions({ schedule, jobId: job.jobId });
    yield systemJobsQueue.add(job.name, job.data, jobOptions);
});
const configureJobOptions = ({ schedule, jobId }) => {
    const config = {};
    switch (schedule.type) {
        case 'one-time': {
            const now = (0, dayjs_1.default)();
            config.delay = schedule.date.diff(now, 'milliseconds');
            break;
        }
        case 'repeated': {
            config.repeat = {
                pattern: schedule.cron,
                tz: 'UTC',
            };
            break;
        }
    }
    return Object.assign(Object.assign({}, config), (0, shared_1.spreadIfDefined)('jobId', jobId));
};
const jobNotInQueue = (name, jobId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const job = yield getJobByNameAndJobId(name, jobId);
    return (0, shared_1.isNil)(job);
});
const getJobByNameAndJobId = (name, jobId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const allSystemJobs = yield systemJobsQueue.getJobs();
    return allSystemJobs.find(job => jobId ? (job.name === name && job.id === jobId) : job.name === name);
});


/***/ }),
/* 609 */
/***/ ((module) => {

module.exports = require("bullmq");

/***/ }),
/* 610 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SystemJobName = void 0;
var SystemJobName;
(function (SystemJobName) {
    SystemJobName["HARD_DELETE_PROJECT"] = "hard-delete-project";
    SystemJobName["PROJECT_USAGE_REPORT"] = "project-usage-report";
    SystemJobName["USAGE_REPORT"] = "usage-report";
    SystemJobName["PIECES_ANALYTICS"] = "pieces-analytics";
    SystemJobName["PIECES_SYNC"] = "pieces-sync";
    SystemJobName["TRIAL_TRACKER"] = "trial-tracker";
    SystemJobName["TRIGGER_DATA_CLEANER"] = "trigger-data-cleaner";
    SystemJobName["ISSUES_REMINDER"] = "ISSUES_REMINDER";
})(SystemJobName || (exports.SystemJobName = SystemJobName = {}));


/***/ }),
/* 611 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.emailService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const alerts_service_1 = __webpack_require__(602);
const issues_service_1 = __webpack_require__(612);
const platform_domain_helper_1 = __webpack_require__(613);
const email_sender_1 = __webpack_require__(616);
const EDITION = server_shared_1.system.getEdition();
const EDITION_IS_NOT_PAID = ![shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE].includes(EDITION);
const EDITION_IS_NOT_CLOUD = EDITION !== shared_1.ApEdition.CLOUD;
const MAX_ISSUES_EMAIL_LIMT = 50;
exports.emailService = {
    sendInvitation(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ userInvitation, invitationLink }) {
            server_shared_1.logger.info({
                message: '[emailService#sendInvitation] sending invitation email',
                email: userInvitation.email,
                platformId: userInvitation.platformId,
                projectId: userInvitation.projectId,
                type: userInvitation.type,
                projectRole: userInvitation.projectRole,
                platformRole: userInvitation.platformRole,
            });
            const { email, platformId } = userInvitation;
            const { name: projectOrPlatformName, role } = yield getEntityNameForInvitation(userInvitation);
            yield email_sender_1.emailSender.send({
                emails: [email],
                platformId,
                templateData: {
                    name: 'invitation-email',
                    vars: {
                        setupLink: invitationLink,
                        projectOrPlatformName,
                        role,
                    },
                },
            });
        });
    },
    sendIssueCreatedNotification(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowName, platformId, issueOrRunsPath, isIssue, createdAt, }) {
            if (EDITION_IS_NOT_PAID) {
                return;
            }
            server_shared_1.logger.info({
                name: '[emailService#sendIssueCreatedNotification]',
                projectId,
                flowName,
                createdAt,
            });
            // TODO remove the hardcoded limit
            const alerts = yield alerts_service_1.alertsService.list({ projectId, cursor: undefined, limit: MAX_ISSUES_EMAIL_LIMT });
            const emails = alerts.data.filter((alert) => alert.channel === ee_shared_1.AlertChannel.EMAIL).map((alert) => alert.receiver);
            yield email_sender_1.emailSender.send({
                emails,
                platformId,
                templateData: {
                    name: 'issue-created',
                    vars: {
                        flowName,
                        createdAt,
                        isIssue: isIssue.toString(),
                        issueUrl: issueOrRunsPath,
                    },
                },
            });
        });
    },
    sendQuotaAlert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, resetDate, templateName }) {
            if (EDITION_IS_NOT_CLOUD) {
                return;
            }
            const project = yield project_service_1.projectService.getOne(projectId);
            (0, shared_1.assertNotNullOrUndefined)(project, 'project');
            const platform = yield platform_service_1.platformService.getOneOrThrow(project.platformId);
            if (!platform.alertsEnabled || platform.embeddingEnabled) {
                return;
            }
            // TODO remove the hardcoded limit
            const alerts = yield alerts_service_1.alertsService.list({ projectId, cursor: undefined, limit: MAX_ISSUES_EMAIL_LIMT });
            const emails = alerts.data.filter((alert) => alert.channel === ee_shared_1.AlertChannel.EMAIL).map((alert) => alert.receiver);
            yield email_sender_1.emailSender.send({
                emails,
                platformId: project.platformId,
                templateData: {
                    name: templateName,
                    vars: {
                        resetDate,
                    },
                },
            });
        });
    },
    sendOtp(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, user, otp, type }) {
            if (EDITION_IS_NOT_PAID) {
                return;
            }
            if (user.verified && type === ee_shared_1.OtpType.EMAIL_VERIFICATION) {
                return;
            }
            server_shared_1.logger.info('Sending OTP email', {
                email: user.email,
                otp,
                userId: user.id,
                type,
            });
            const frontendPath = {
                [ee_shared_1.OtpType.EMAIL_VERIFICATION]: 'verify-email',
                [ee_shared_1.OtpType.PASSWORD_RESET]: 'reset-password',
            };
            const setupLink = yield platform_domain_helper_1.platformDomainHelper.constructUrlFrom({
                platformId,
                path: frontendPath[type] + `?otpcode=${otp}&userId=${user.id}`,
            });
            const otpToTemplate = {
                [ee_shared_1.OtpType.EMAIL_VERIFICATION]: {
                    name: 'verify-email',
                    vars: {
                        setupLink,
                    },
                },
                [ee_shared_1.OtpType.PASSWORD_RESET]: {
                    name: 'reset-password',
                    vars: {
                        setupLink,
                    },
                },
            };
            yield email_sender_1.emailSender.send({
                emails: [user.email],
                platformId: platformId !== null && platformId !== void 0 ? platformId : undefined,
                templateData: otpToTemplate[type],
            });
        });
    },
    sendReminderJobHandler(job) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const issues = yield issues_service_1.issuesService.list({ projectId: job.projectId, cursor: undefined, limit: 50 });
            if (issues.data.length === 0) {
                return;
            }
            const alerts = yield alerts_service_1.alertsService.list({ projectId: job.projectId, cursor: undefined, limit: 50 });
            const emails = alerts.data.filter((alert) => alert.channel === ee_shared_1.AlertChannel.EMAIL).map((alert) => alert.receiver);
            const issuesUrl = yield platform_domain_helper_1.platformDomainHelper.constructUrlFrom({
                platformId: job.platformId,
                path: 'runs?limit=10#Issues',
            });
            const issuesWithFormattedDate = issues.data.map((issue) => (Object.assign(Object.assign({}, issue), { created: (0, dayjs_1.default)(issue.created).format('MMM d, h:mm a'), lastOccurrence: (0, dayjs_1.default)(issue.lastOccurrence).format('MMM d, h:mm a') })));
            yield email_sender_1.emailSender.send({
                emails,
                platformId: job.platformId,
                templateData: {
                    name: 'issues-reminder',
                    vars: {
                        issuesUrl,
                        issuesCount: issues.data.length.toString(),
                        projectName: job.projectName,
                        issues: JSON.stringify(issuesWithFormattedDate),
                    },
                },
            });
        });
    },
};
function getEntityNameForInvitation(userInvitation) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (userInvitation.type) {
            case shared_1.InvitationType.PLATFORM: {
                const platform = yield platform_service_1.platformService.getOneOrThrow(userInvitation.platformId);
                (0, shared_1.assertNotNullOrUndefined)(userInvitation.platformRole, 'platformRole');
                return {
                    name: platform.name,
                    role: capitalizeFirstLetter(userInvitation.platformRole),
                };
            }
            case shared_1.InvitationType.PROJECT: {
                (0, shared_1.assertNotNullOrUndefined)(userInvitation.projectId, 'projectId');
                (0, shared_1.assertNotNullOrUndefined)(userInvitation.projectRole, 'projectRole');
                const project = yield project_service_1.projectService.getOneOrThrow(userInvitation.projectId);
                return {
                    name: project.displayName,
                    role: capitalizeFirstLetter(userInvitation.projectRole),
                };
            }
        }
    });
}
function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}


/***/ }),
/* 612 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issuesService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const repo_factory_1 = __webpack_require__(224);
const flow_version_service_1 = __webpack_require__(580);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const telemetry_utils_1 = __webpack_require__(576);
const issues_entity_1 = __webpack_require__(240);
const repo = (0, repo_factory_1.repoFactory)(issues_entity_1.IssueEntity);
exports.issuesService = {
    add(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, flowRunCreatedAt }) {
            const issueId = (0, shared_1.apId)();
            const date = (0, dayjs_1.default)(flowRunCreatedAt).toISOString();
            yield repo().createQueryBuilder()
                .insert()
                .into(issues_entity_1.IssueEntity)
                .values({
                projectId,
                flowId,
                id: issueId,
                lastOccurrence: date,
                count: 0,
                status: ee_shared_1.IssueStatus.ONGOING,
                created: date,
                updated: date,
            })
                .orIgnore()
                .execute();
            const updatedIssue = yield this.update({
                projectId,
                flowId,
                status: ee_shared_1.IssueStatus.ONGOING,
            });
            return updatedIssue;
        });
    },
    get(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId }) {
            return repo().findOneBy({
                projectId,
                flowId,
            });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, cursor, limit }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursor !== null && cursor !== void 0 ? cursor : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: issues_entity_1.IssueEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const query = repo().createQueryBuilder(issues_entity_1.IssueEntity.options.name).where({
                projectId,
                status: ee_shared_1.IssueStatus.ONGOING,
            });
            const { data, cursor: newCursor } = yield paginator.paginate(query);
            const populatedIssues = yield Promise.all(data.map((issue) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const flowVersion = yield flow_version_service_1.flowVersionService.getLatestLockedVersionOrThrow(issue.flowId);
                return Object.assign(Object.assign({}, issue), { flowDisplayName: flowVersion.displayName });
            })));
            return pagination_utils_1.paginationHelper.createPage(populatedIssues, newCursor);
        });
    },
    updateById(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, id, status }) {
            const flowIssue = yield repo().findOneBy({
                id,
                projectId,
            });
            if ((0, shared_1.isNil)(flowIssue)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: 'issue not found',
                    },
                });
            }
            (0, server_shared_1.rejectedPromiseHandler)(telemetry_utils_1.telemetry.trackProject(flowIssue.projectId, {
                name: shared_1.TelemetryEventName.FLOW_ISSUE_RESOLVED,
                payload: {
                    flowId: flowIssue.flowId,
                },
            }));
            yield repo().update({
                id,
            }, {
                status,
                updated: new Date().toISOString(),
                count: 0,
            });
        });
    },
    update(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, status }) {
            if (status != ee_shared_1.IssueStatus.RESOLEVED) {
                yield repo().increment({ projectId, flowId }, 'count', 1);
            }
            yield repo().update({
                projectId,
                flowId,
            }, Object.assign(Object.assign(Object.assign({}, (0, shared_1.spreadIfDefined)('lastOccurrence', status !== ee_shared_1.IssueStatus.RESOLEVED ? (0, dayjs_1.default)().toISOString() : undefined)), (0, shared_1.spreadIfDefined)('count', status === ee_shared_1.IssueStatus.RESOLEVED ? 0 : undefined)), { status, updated: new Date().toISOString() }));
            return repo().findOneByOrFail({
                projectId,
                flowId,
            });
        });
    },
    count(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId }) {
            return repo().count({
                where: {
                    projectId,
                    status: ee_shared_1.IssueStatus.ONGOING,
                },
            });
        });
    },
};


/***/ }),
/* 613 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformDomainHelper = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const custom_domain_service_1 = __webpack_require__(614);
exports.platformDomainHelper = {
    constructUrlFrom(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, path, }) {
            const domain = yield getFrontendDomain(platformId);
            return `${domain}${path}`;
        });
    },
    constructFrontendUrlFromRequest(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ domain, path, }) {
            const domainWithProtocol = yield getFrontendDomainFromHostname(domain);
            return `${domainWithProtocol}${path}`;
        });
    },
    constructApiUrlFromRequest(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ domain, path, }) {
            const domainWithProtocol = yield getApiDomainFromHostname(domain);
            return `${domainWithProtocol}${path}`;
        });
    },
};
function getFrontendDomainFromHostname(hostname) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let domain = server_shared_1.system.get(server_shared_1.SharedSystemProp.FRONTEND_URL);
        const customDomain = yield custom_domain_service_1.customDomainService.getOneByDomain({
            domain: hostname,
        });
        if (customDomain) {
            domain = `https://${customDomain.domain}/`;
        }
        return domain + ((domain === null || domain === void 0 ? void 0 : domain.endsWith('/')) ? '' : '/');
    });
}
function getApiDomainFromHostname(hostname) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const frontendUrl = yield getFrontendDomainFromHostname(hostname);
        return frontendUrl + 'api/';
    });
}
function getFrontendDomain(platformId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let domain = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.FRONTEND_URL);
        if (platformId && [shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE].includes(server_shared_1.system.getEdition())) {
            const customDomain = yield custom_domain_service_1.customDomainService.getOneByPlatform({
                platformId,
            });
            if (customDomain) {
                domain = `https://${customDomain.domain}/`;
            }
        }
        return domain + (domain.endsWith('/') ? '' : '/');
    });
}


/***/ }),
/* 614 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customDomainService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const cloudflare_api_service_1 = __webpack_require__(615);
const custom_domain_entity_1 = __webpack_require__(237);
const customDomainRepo = (0, repo_factory_1.repoFactory)(custom_domain_entity_1.CustomDomainEntity);
const isCloudEdition = server_shared_1.system.getEdition() === shared_1.ApEdition.CLOUD && server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT) !== shared_1.ApEnvironment.TESTING;
exports.customDomainService = {
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if (isCloudEdition) {
                const customDomain = yield exports.customDomainService.getOneByIdOrThrow(request.id);
                const hostnameDetails = yield cloudflare_api_service_1.cloudflareHostnameServices.getHostnameDetails(customDomain.domain);
                const domainId = (_a = hostnameDetails.data.result[0]) === null || _a === void 0 ? void 0 : _a.id;
                if (domainId) {
                    yield cloudflare_api_service_1.cloudflareHostnameServices.delete(hostnameDetails.data.result[0].id);
                }
            }
            yield customDomainRepo().delete({
                id: request.id,
                platformId: request.platformId,
            });
        });
    },
    getOneByIdOrThrow(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const customDomain = yield customDomainRepo().findOneBy({
                id,
            });
            if ((0, shared_1.isNil)(customDomain)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityType: 'CustomDomain',
                        entityId: id,
                    },
                });
            }
            return customDomain;
        });
    },
    getOneByDomain(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return customDomainRepo().findOneBy({
                domain: request.domain,
            });
        });
    },
    getOneByPlatform(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return customDomainRepo().findOneBy({
                platformId: request.platformId,
            });
        });
    },
    getDomainValidationData(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const customDomain = yield exports.customDomainService.getOneByIdOrThrow(request.id);
            const hostnameDetails = yield cloudflare_api_service_1.cloudflareHostnameServices.getHostnameDetails(customDomain.domain);
            const record = hostnameDetails.data.result[0];
            if (record.ssl.status === 'initializing') {
                return null;
            }
            const validationRecord = record.ssl.validation_records[0];
            return {
                txtName: validationRecord.txt_name,
                txtValue: validationRecord.txt_value,
                hostname: record.hostname,
            };
        });
    },
    verifyDomain(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const customDomain = yield customDomainRepo().findOneBy({
                id: request.id,
            });
            if ((0, shared_1.isNil)(customDomain)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityType: 'CustomDomain',
                        entityId: request.id,
                    },
                });
            }
            const hostnameDetails = yield cloudflare_api_service_1.cloudflareHostnameServices.getHostnameDetails(customDomain.domain);
            const patchResult = yield cloudflare_api_service_1.cloudflareHostnameServices.update(hostnameDetails.data.result[0].id);
            const status = patchResult.data.result.status;
            yield customDomainRepo().update({
                platformId: request.platformId,
                id: request.id,
            }, {
                status: status !== 'pending' ? ee_shared_1.CustomDomainStatus.ACTIVE : ee_shared_1.CustomDomainStatus.PENDING,
            });
            return { status };
        });
    },
    create(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const customDomain = yield customDomainRepo().save({
                id: (0, shared_1.apId)(),
                domain: request.domain,
                platformId: request.platformId,
                status: isCloudEdition ? ee_shared_1.CustomDomainStatus.PENDING : ee_shared_1.CustomDomainStatus.ACTIVE,
            });
            let cloudflareHostnameData = null;
            if (isCloudEdition) {
                yield cloudflare_api_service_1.cloudflareHostnameServices.create(request.domain);
                let retry = 0;
                // TODO this is hack to wait to create verification record
                while (!cloudflareHostnameData && retry < 3) {
                    cloudflareHostnameData = yield exports.customDomainService.getDomainValidationData({
                        id: customDomain.id,
                    });
                    retry++;
                    yield new Promise((resolve) => setTimeout(resolve, 3000));
                }
            }
            return {
                customDomain,
                cloudflareHostnameData,
            };
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ request, platformId, }) {
            var _b, _c;
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor((_b = request.cursor) !== null && _b !== void 0 ? _b : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: custom_domain_entity_1.CustomDomainEntity,
                query: {
                    limit: (_c = request.limit) !== null && _c !== void 0 ? _c : 10,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const queryBuilder = customDomainRepo()
                .createQueryBuilder('custom_domain')
                .where({
                platformId,
            });
            const { data, cursor } = yield paginator.paginate(queryBuilder);
            return pagination_utils_1.paginationHelper.createPage(data, cursor);
        });
    },
};


/***/ }),
/* 615 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cloudflareHostnameServices = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const axios_1 = tslib_1.__importDefault(__webpack_require__(198));
exports.cloudflareHostnameServices = {
    headers: {
        'X-Auth-Email': server_shared_1.system.get(server_shared_1.AppSystemProp.CLOUDFLARE_AUTH_EMAIL),
        'X-Auth-Key': server_shared_1.system.get(server_shared_1.AppSystemProp.CLOUDFLARE_API_KEY),
        'Content-Type': 'application/json',
    },
    makeUrl(customHostnameId) {
        const BASE_URL = `https://api.cloudflare.com/client/v4/zones/${server_shared_1.system.get(server_shared_1.AppSystemProp.CLOUDFLARE_ZONE_ID)}/custom_hostnames`;
        if (customHostnameId) {
            return `${BASE_URL}/${customHostnameId}`;
        }
        return BASE_URL;
    },
    create(hostname) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return axios_1.default.post(this.makeUrl(), {
                hostname,
                ssl: {
                    bundleMethod: 'ubiquitous',
                    certificateAuthority: 'lets_encrypt',
                    method: 'txt',
                    settings: {
                        ciphers: ['ECDHE-RSA-AES128-GCM-SHA256', 'AES128-SHA'],
                        early_hints: 'on',
                        http2: 'on',
                        min_tls_version: '1.2',
                        tls_1_3: 'on',
                    },
                    type: 'dv',
                    wildcard: false,
                },
            }, {
                headers: this.headers,
            });
        });
    },
    getHostnameDetails(hostname) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return axios_1.default.get(this.makeUrl(), {
                params: {
                    hostname,
                },
                headers: this.headers,
            });
        });
    },
    getAllHostnames(queryParams) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return axios_1.default.get(this.makeUrl(), {
                params: queryParams,
                headers: this.headers,
            });
        });
    },
    update(customHostnameId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return axios_1.default.patch(this.makeUrl(customHostnameId), {}, {
                headers: this.headers,
            });
        });
    },
    delete(customHostnameId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return axios_1.default.delete(this.makeUrl(customHostnameId), {
                headers: this.headers,
            });
        });
    },
};


/***/ }),
/* 616 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.emailSender = void 0;
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const log_email_sender_1 = __webpack_require__(617);
const smtp_email_sender_1 = __webpack_require__(618);
const getEmailSenderInstance = () => {
    const env = server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT);
    if (env === shared_1.ApEnvironment.PRODUCTION) {
        return smtp_email_sender_1.smtpEmailSender;
    }
    return log_email_sender_1.logEmailSender;
};
exports.emailSender = getEmailSenderInstance();


/***/ }),
/* 617 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.logEmailSender = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
/**
 * Logs sent emails to the console
 */
exports.logEmailSender = {
    send(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ emails, platformId, templateData }) {
            server_shared_1.logger.debug({
                name: 'LogEmailSender#send',
                emails,
                platformId,
                templateData,
            });
        });
    },
};


/***/ }),
/* 618 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.smtpEmailSender = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = __webpack_require__(111);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const mustache_1 = tslib_1.__importDefault(__webpack_require__(619));
const nodemailer_1 = tslib_1.__importDefault(__webpack_require__(620));
const theme_1 = __webpack_require__(460);
const platform_service_1 = __webpack_require__(459);
const isSmtpConfigured = (platform) => {
    var _a;
    const isConfigured = (host, port, user, password) => {
        return !(0, shared_1.isNil)(host) && !(0, shared_1.isNil)(port) && !(0, shared_1.isNil)(user) && !(0, shared_1.isNil)(password);
    };
    const isPlatformSmtpConfigured = !(0, shared_1.isNil)(platform) && isConfigured(platform.smtpHost, (_a = platform.smtpPort) === null || _a === void 0 ? void 0 : _a.toString(), platform.smtpUser, platform.smtpPassword);
    const isSmtpSystemConfigured = isConfigured(server_shared_1.system.get(server_shared_1.AppSystemProp.SMTP_HOST), server_shared_1.system.get(server_shared_1.AppSystemProp.SMTP_PORT), server_shared_1.system.get(server_shared_1.AppSystemProp.SMTP_USERNAME), server_shared_1.system.get(server_shared_1.AppSystemProp.SMTP_PASSWORD));
    return isPlatformSmtpConfigured || isSmtpSystemConfigured;
};
exports.smtpEmailSender = {
    send(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ emails, platformId, templateData }) {
            var _b, _c;
            const platform = yield getPlatform(platformId);
            const emailSubject = getEmailSubject(templateData.name, templateData.vars);
            const senderName = (_b = platform === null || platform === void 0 ? void 0 : platform.name) !== null && _b !== void 0 ? _b : server_shared_1.system.get(server_shared_1.AppSystemProp.SMTP_SENDER_NAME);
            const senderEmail = (_c = platform === null || platform === void 0 ? void 0 : platform.smtpSenderEmail) !== null && _c !== void 0 ? _c : server_shared_1.system.get(server_shared_1.AppSystemProp.SMTP_SENDER_EMAIL);
            if (!isSmtpConfigured(platform)) {
                return;
            }
            const emailBody = yield renderEmailBody({
                platform,
                templateData,
            });
            const smtpClient = initSmtpClient(platform);
            yield smtpClient.sendMail({
                from: `${senderName} <${senderEmail}>`,
                to: emails.join(','),
                subject: emailSubject,
                html: emailBody,
            });
        });
    },
    isSmtpConfigured,
};
const getPlatform = (platformId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return platformId ? platform_service_1.platformService.getOne(platformId) : null;
});
const renderEmailBody = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ platform, templateData }) {
    var _b, _c, _d;
    const templatePath = `packages/server/api/src/assets/emails/${templateData.name}.html`;
    const template = yield (0, promises_1.readFile)(templatePath, 'utf-8');
    const primaryColor = (_b = platform === null || platform === void 0 ? void 0 : platform.primaryColor) !== null && _b !== void 0 ? _b : theme_1.defaultTheme.colors.primary.default;
    const fullLogoUrl = (_c = platform === null || platform === void 0 ? void 0 : platform.fullLogoUrl) !== null && _c !== void 0 ? _c : theme_1.defaultTheme.logos.fullLogoUrl;
    const platformName = (_d = platform === null || platform === void 0 ? void 0 : platform.name) !== null && _d !== void 0 ? _d : theme_1.defaultTheme.websiteName;
    return mustache_1.default.render(template, Object.assign(Object.assign({}, templateData.vars), { primaryColor,
        fullLogoUrl,
        platformName,
        checkIssuesEnabled() {
            return templateData.name === 'issue-created' && templateData.vars.isIssue === 'true';
        },
        renderIssues() {
            if (templateData.name === 'issues-reminder') {
                return JSON.parse(templateData.vars.issues);
            }
        } }));
});
const initSmtpClient = (platform) => {
    var _a, _b, _c, _d, _e;
    return nodemailer_1.default.createTransport({
        host: (_a = platform === null || platform === void 0 ? void 0 : platform.smtpHost) !== null && _a !== void 0 ? _a : server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.SMTP_HOST),
        port: (_b = platform === null || platform === void 0 ? void 0 : platform.smtpPort) !== null && _b !== void 0 ? _b : Number.parseInt(server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.SMTP_PORT)),
        secure: (_c = platform === null || platform === void 0 ? void 0 : platform.smtpUseSSL) !== null && _c !== void 0 ? _c : server_shared_1.system.getBoolean(server_shared_1.AppSystemProp.SMTP_USE_SSL),
        auth: {
            user: (_d = platform === null || platform === void 0 ? void 0 : platform.smtpUser) !== null && _d !== void 0 ? _d : server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.SMTP_USERNAME),
            pass: (_e = platform === null || platform === void 0 ? void 0 : platform.smtpPassword) !== null && _e !== void 0 ? _e : server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.SMTP_PASSWORD),
        },
    });
};
const getEmailSubject = (templateName, vars) => {
    const templateToSubject = {
        'invitation-email': 'You have been invited to a team',
        'quota-50': '[ACTION REQUIRED] 50% of your Activepieces tasks are consumed',
        'quota-90': '[URGENT] 90% of your Activepieces tasks are consumed',
        'quota-100': '[URGENT] 100% of your Activepieces tasks are consumed',
        'verify-email': 'Verify your email address',
        'reset-password': 'Reset your password',
        'issue-created': `[ACTION REQUIRED] New issue in ${vars.flowName}`,
        'issues-reminder': `You have unresolved issues for ${vars.projectName}`,
    };
    return templateToSubject[templateName];
};


/***/ }),
/* 619 */
/***/ ((module) => {

module.exports = require("mustache");

/***/ }),
/* 620 */
/***/ ((module) => {

module.exports = require("nodemailer");

/***/ }),
/* 621 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowRunHooks = void 0;
const tslib_1 = __webpack_require__(1);
const emptyHooks = {
    onFinish() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // DO NOTHING
        });
    },
};
let hooks = emptyHooks;
exports.flowRunHooks = {
    setHooks(newHooks) {
        hooks = newHooks;
    },
    getHooks() {
        return hooks;
    },
};


/***/ }),
/* 622 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.logSerializer = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
exports.logSerializer = {
    serialize(log) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const stringifiedLog = JSON.stringify(log, memoryFileReplacer);
            const binaryLog = Buffer.from(stringifiedLog);
            const compressedLog = yield server_shared_1.fileCompressor.compress({
                data: binaryLog,
                compression: shared_1.FileCompression.GZIP,
            });
            server_shared_1.logger.debug({
                'binaryLog.byteLength': binaryLog.byteLength,
                'compressedLog.byteLength': compressedLog.byteLength,
            }, '[logSerializer#serialize]');
            return compressedLog;
        });
    },
};
const memoryFileReplacer = (_key, value) => {
    if (typeof value === 'string' && value.startsWith('memory://')) {
        return '[TRUNCATED]';
    }
    return value;
};


/***/ }),
/* 623 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApMemoryQueue = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const cron_parser_1 = tslib_1.__importDefault(__webpack_require__(624));
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
class ApMemoryQueue {
    constructor() {
        this.lock = new server_shared_1.ApSemaphore(1);
        this.queue = [];
    }
    add(job) {
        if (isRecurringJob(job)) {
            this.queue.push(calculateNextJob(job));
        }
        else {
            this.queue.push(job);
        }
    }
    remove(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.lock.acquire();
            this.queue = this.queue.filter((job) => job.id !== id);
            this.lock.release();
        });
    }
    poll() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.lock.acquire();
                const jobToRun = this.queue.findIndex((job) => (0, shared_1.isNil)(job.nextFireAtEpochSeconds) || (0, dayjs_1.default)().unix() >= Number(job.nextFireAtEpochSeconds));
                if (jobToRun === -1) {
                    return undefined;
                }
                const currentJob = this.queue.splice(jobToRun, 1)[0];
                if (isRecurringJob(currentJob)) {
                    this.queue.push(calculateNextJob(currentJob));
                }
                return currentJob;
            }
            finally {
                this.lock.release();
            }
        });
    }
}
exports.ApMemoryQueue = ApMemoryQueue;
function isRecurringJob(job) {
    return job.cronExpression !== undefined;
}
function calculateNextJob(job) {
    (0, shared_1.assertNotNullOrUndefined)(job.cronExpression, 'cronExpression');
    const nextFireAtEpochSeconds = calculateNextFireForCron(job.cronExpression, 'UTC');
    return Object.assign(Object.assign({}, job), { nextFireAtEpochSeconds });
}
function calculateNextFireForCron(cronExpression, timezone) {
    const interval = cron_parser_1.default.parseExpression(cronExpression, {
        tz: timezone,
    });
    return (0, dayjs_1.default)(interval.next().getTime()).unix();
}


/***/ }),
/* 624 */
/***/ ((module) => {

module.exports = require("cron-parser");

/***/ }),
/* 625 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.redisQueue = exports.bullMqGroups = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const bullmq_1 = __webpack_require__(609);
const redis_connection_1 = __webpack_require__(514);
const queue_manager_1 = __webpack_require__(626);
const redis_migration_1 = __webpack_require__(627);
const EIGHT_MINUTES_IN_MILLISECONDS = 8 * 60 * 1000;
const defaultJobOptions = {
    attempts: 5,
    backoff: {
        type: 'exponential',
        delay: EIGHT_MINUTES_IN_MILLISECONDS,
    },
    removeOnComplete: true,
};
const repeatingJobKey = (id) => `activepieces:repeatJobKey:${id}`;
exports.bullMqGroups = {};
exports.redisQueue = {
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queues = Object.values(server_shared_1.QueueName).map((queueName) => ensureQueueExists(null, queueName));
            yield Promise.all(queues);
            yield redis_migration_1.redisMigrations.run();
            server_shared_1.logger.info('[redisQueueManager#init] Redis queues initialized');
        });
    },
    add(groupId, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { type } = params;
            switch (type) {
                case server_shared_1.JobType.REPEATING: {
                    yield addRepeatingJob(groupId, params);
                    break;
                }
                case server_shared_1.JobType.DELAYED: {
                    yield addDelayedJob(groupId, params);
                    break;
                }
                case server_shared_1.JobType.ONE_TIME: {
                    const queue = yield ensureQueueExists(groupId, server_shared_1.QueueName.ONE_TIME);
                    yield addJobWithPriority(queue, params);
                    break;
                }
                case server_shared_1.JobType.WEBHOOK: {
                    const queue = yield ensureQueueExists(groupId, server_shared_1.QueueName.WEBHOOK);
                    yield addJobWithPriority(queue, params);
                    break;
                }
            }
        });
    },
    removeRepeatingJob(groupId_1, _a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (groupId, { id }) {
            const queue = yield ensureQueueExists(groupId, server_shared_1.QueueName.SCHEDULED);
            const client = yield queue.client;
            const repeatJobKey = yield findRepeatableJobKey(groupId, id);
            if ((0, shared_1.isNil)(repeatJobKey)) {
                server_shared_1.exceptionHandler.handle(new Error(`Couldn't find job key for id "${id}"`));
                return;
            }
            const result = yield queue.removeRepeatableByKey(repeatJobKey);
            if (!result) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.JOB_REMOVAL_FAILURE,
                    params: {
                        jobId: id,
                    },
                });
            }
            yield client.del(repeatingJobKey(id));
        });
    },
};
function findRepeatableJobKey(groupId, id) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        const queue = yield ensureQueueExists(groupId, server_shared_1.QueueName.SCHEDULED);
        const client = yield queue.client;
        const jobKey = yield client.get(repeatingJobKey(id));
        if ((0, shared_1.isNil)(jobKey)) {
            server_shared_1.logger.warn({ jobKey: id }, 'Job key not found in redis, trying to find it in the queue');
            // TODO: this temporary solution for jobs that doesn't have repeatJobKey in redis, it's also confusing because it search by flowVersionId
            const jobs = yield queue.getJobs();
            return (_a = jobs.filter(f => !(0, shared_1.isNil)(f) && !(0, shared_1.isNil)(f.data)).find((f) => f.data.flowVersionId === id)) === null || _a === void 0 ? void 0 : _a.repeatJobKey;
        }
        return jobKey;
    });
}
function ensureQueueExists(groupId, queueName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const key = groupId !== null && groupId !== void 0 ? groupId : 'default';
        if ((0, shared_1.isNil)(exports.bullMqGroups[key])) {
            exports.bullMqGroups[key] = {};
        }
        if (!(0, shared_1.isNil)(exports.bullMqGroups[key][queueName])) {
            return exports.bullMqGroups[key][queueName];
        }
        const queueAlias = queue_manager_1.queueHelper.getQueueName(groupId, queueName);
        exports.bullMqGroups[key][queueName] = new bullmq_1.Queue(queueAlias, {
            connection: (0, redis_connection_1.createRedisClient)(),
            defaultJobOptions,
        });
        yield exports.bullMqGroups[key][queueName].waitUntilReady();
        return exports.bullMqGroups[key][queueName];
    });
}
function addJobWithPriority(queue, params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { id, data, priority } = params;
        yield queue.add(id, data, {
            jobId: id,
            priority: priority === 'high' ? 1 : undefined,
        });
    });
}
function addDelayedJob(groupId, params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { id, data, delay } = params;
        const queue = yield ensureQueueExists(groupId, server_shared_1.QueueName.SCHEDULED);
        yield queue.add(id, data, {
            jobId: id,
            delay,
        });
    });
}
function addRepeatingJob(groupId, params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { id, data, scheduleOptions } = params;
        const queue = yield ensureQueueExists(groupId, server_shared_1.QueueName.SCHEDULED);
        const job = yield queue.add(id, data, {
            jobId: id,
            repeat: {
                pattern: scheduleOptions.cronExpression,
                tz: scheduleOptions.timezone,
            },
        });
        if ((0, shared_1.isNil)(job.repeatJobKey)) {
            return;
        }
        const client = yield queue.client;
        yield client.set(repeatingJobKey(id), job.repeatJobKey);
    });
}


/***/ }),
/* 626 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.queueHelper = void 0;
exports.queueHelper = {
    getQueueName: (groupId, queueName) => {
        return groupId ? `${groupId}:${queueName}` : queueName;
    },
};


/***/ }),
/* 627 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.redisMigrations = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const flow_repo_1 = __webpack_require__(594);
const lock_1 = __webpack_require__(512);
const redis_queue_1 = __webpack_require__(625);
exports.redisMigrations = {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const migrationLock = yield (0, lock_1.acquireLock)({
                key: 'jobs_lock',
                timeout: 30000,
            });
            try {
                const scheduledJobs = yield getJobsToMigrate();
                if (scheduledJobs.length === 0) {
                    return;
                }
                server_shared_1.logger.info({
                    count: scheduledJobs.length,
                }, 'migiration of scheduled jobs started');
                for (const job of scheduledJobs) {
                    if (job) {
                        yield migrateJob(job);
                    }
                }
                server_shared_1.logger.info('migration of scheduled jobs completed');
            }
            finally {
                yield migrationLock.release();
            }
        });
    },
};
function getJobsToMigrate() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // TODO make the migration works for all queues instead of default one.
        const result = [];
        for (const key of Object.keys(redis_queue_1.bullMqGroups)) {
            const scheduledJobs = yield redis_queue_1.bullMqGroups[key][server_shared_1.QueueName.SCHEDULED].getJobs();
            result.push(scheduledJobs.filter((job) => !(0, shared_1.isNil)(job === null || job === void 0 ? void 0 : job.data) && job.data.schemaVersion !== server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION));
        }
        return result.flat();
    });
}
function migrateJob(job) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let modifiedJobData = JSON.parse(JSON.stringify(job.data));
        if ((0, shared_1.isNil)(modifiedJobData.schemaVersion) || modifiedJobData.schemaVersion === 1) {
            const { flowVersion, projectId, triggerType } = modifiedJobData;
            modifiedJobData = {
                schemaVersion: 2,
                flowVersionId: flowVersion.id,
                flowId: flowVersion.flowId,
                projectId,
                environment: shared_1.RunEnvironment.PRODUCTION,
                executionType: shared_1.ExecutionType.BEGIN,
                triggerType,
            };
            yield job.updateData(modifiedJobData);
        }
        if (modifiedJobData.schemaVersion === 2) {
            yield updateCronExpressionOfRedisToPostgresTable(job);
            modifiedJobData.schemaVersion = 3;
            yield job.updateData(modifiedJobData);
        }
        if (modifiedJobData.schemaVersion === 3) {
            modifiedJobData.schemaVersion = 4;
            if (modifiedJobData.executionType === shared_1.ExecutionType.BEGIN) {
                modifiedJobData.jobType = server_shared_1.RepeatableJobType.EXECUTE_TRIGGER;
            }
            else if (modifiedJobData.executionType === shared_1.ExecutionType.RESUME) {
                modifiedJobData.jobType = server_shared_1.RepeatableJobType.DELAYED_FLOW;
            }
            modifiedJobData.executionType = undefined;
            yield job.updateData(modifiedJobData);
        }
    });
}
function updateCronExpressionOfRedisToPostgresTable(job) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { tz, pattern } = job.opts.repeat || {};
        if ((0, shared_1.isNil)(tz) || (0, shared_1.isNil)(pattern)) {
            server_shared_1.logger.error('Found unrepeatable job in repeatable queue');
            return;
        }
        const flow = yield (0, flow_repo_1.flowRepo)().findOneBy({
            publishedVersionId: job.data.flowVersionId,
        });
        if ((0, shared_1.isNil)(flow)) {
            return;
        }
        yield (0, flow_repo_1.flowRepo)().update(flow.id, {
            schedule: {
                type: shared_1.ScheduleType.CRON_EXPRESSION,
                timezone: tz,
                cronExpression: pattern,
            },
        });
    });
}


/***/ }),
/* 628 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authenticationServiceHooks = void 0;
const community_authentication_hooks_1 = __webpack_require__(629);
let hooks = community_authentication_hooks_1.communityAuthenticationServiceHooks;
exports.authenticationServiceHooks = {
    set(newHooks) {
        hooks = newHooks;
    },
    get() {
        return hooks;
    },
};


/***/ }),
/* 629 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.communityAuthenticationServiceHooks = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const flag_service_1 = __webpack_require__(578);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const user_invitation_service_1 = __webpack_require__(630);
const access_token_manager_1 = __webpack_require__(509);
const DEFAULT_PLATFORM_NAME = 'platform';
exports.communityAuthenticationServiceHooks = {
    preSignIn() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Empty
        });
    },
    preSignUp(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId }) {
            const userCreated = yield flag_service_1.flagService.getOne(shared_1.ApFlagId.USER_CREATED);
            if (userCreated === null || userCreated === void 0 ? void 0 : userCreated.value) {
                (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
                yield assertUserIsInvitedToPlatformOrProject({ email, platformId });
            }
        });
    },
    postSignUp(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user }) {
            const platformCreated = yield platform_service_1.platformService.hasAnyPlatforms();
            if (platformCreated) {
                (0, shared_1.assertNotNullOrUndefined)(user.platformId, 'user.platformId');
                yield user_invitation_service_1.userInvitationsService.provisionUserInvitation({
                    email: user.email,
                    platformId: user.platformId,
                });
                return getProjectAndToken(user);
            }
            const platform = yield platform_service_1.platformService.create({
                ownerId: user.id,
                name: DEFAULT_PLATFORM_NAME,
            });
            yield project_service_1.projectService.create({
                displayName: `${user.firstName}'s Project`,
                ownerId: user.id,
                platformId: platform.id,
            });
            return getProjectAndToken(user);
        });
    },
    postSignIn(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user }) {
            return getProjectAndToken(user);
        });
    },
};
function assertUserIsInvitedToPlatformOrProject(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, }) {
        const isInvited = yield user_invitation_service_1.userInvitationsService.hasAnyAcceptedInvitations({
            platformId,
            email,
        });
        if (!isInvited) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.INVITATION_ONLY_SIGN_UP,
                params: {
                    message: 'User is not invited to the platform',
                },
            });
        }
    });
}
function getProjectAndToken(user) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const updatedUser = yield user_service_1.userService.getOneOrFail({ id: user.id });
        const project = yield project_service_1.projectService.getOneForUser(updatedUser);
        if ((0, shared_1.isNil)(project)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.INVITATION_ONLY_SIGN_UP,
                params: {
                    message: 'No project found for user',
                },
            });
        }
        const platform = yield platform_service_1.platformService.getOneOrThrow(project.platformId);
        const token = yield access_token_manager_1.accessTokenManager.generateToken({
            id: user.id,
            type: shared_1.PrincipalType.USER,
            projectId: project.id,
            platform: {
                id: platform.id,
            },
        });
        return {
            user: updatedUser,
            token,
            project,
            projectRole: shared_1.ProjectMemberRole.ADMIN,
        };
    });
}


/***/ }),
/* 630 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.userInvitationsService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const smtp_email_sender_1 = __webpack_require__(618);
const email_service_1 = __webpack_require__(611);
const platform_domain_helper_1 = __webpack_require__(613);
const project_member_service_1 = __webpack_require__(631);
const jwt_utils_1 = __webpack_require__(510);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const platform_service_1 = __webpack_require__(459);
const user_service_1 = __webpack_require__(462);
const user_invitation_entity_1 = __webpack_require__(262);
const repo = (0, repo_factory_1.repoFactory)(user_invitation_entity_1.UserInvitationEntity);
const INVITATION_EXPIREY_DAYS = 1;
exports.userInvitationsService = {
    countByProjectId(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return repo().countBy({
                projectId,
            });
        });
    },
    provisionUserInvitation(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId }) {
            const user = yield user_service_1.userService.getByPlatformAndEmail({
                email,
                platformId,
            });
            if ((0, shared_1.isNil)(user)) {
                return;
            }
            const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
            const ONE_DAY_AGO = (0, dayjs_1.default)().subtract(INVITATION_EXPIREY_DAYS, 'day').toISOString();
            const invitations = yield repo().findBy([
                {
                    email,
                    platformId,
                    status: shared_1.InvitationStatus.ACCEPTED,
                    created: (0, typeorm_1.MoreThanOrEqual)(ONE_DAY_AGO),
                },
            ]);
            for (const invitation of invitations) {
                switch (invitation.type) {
                    case shared_1.InvitationType.PLATFORM: {
                        (0, shared_1.assertNotNullOrUndefined)(invitation.platformRole, 'platformRole');
                        yield user_service_1.userService.update({
                            id: user.id,
                            platformId: invitation.platformId,
                            platformRole: invitation.platformRole,
                        });
                        break;
                    }
                    case shared_1.InvitationType.PROJECT: {
                        const { projectId, projectRole } = invitation;
                        (0, shared_1.assertNotNullOrUndefined)(projectId, 'projectId');
                        (0, shared_1.assertNotNullOrUndefined)(projectRole, 'projectRole');
                        (0, shared_1.assertEqual)(platform.projectRolesEnabled, true, 'Project roles are not enabled', 'PROJECT_ROLES_NOT_ENABLED');
                        yield project_member_service_1.projectMemberService.upsert({
                            projectId,
                            userId: user.id,
                            role: projectRole,
                        });
                        break;
                    }
                }
                yield repo().delete({
                    id: invitation.id,
                });
            }
        });
    },
    create(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, projectId, type, projectRole, platformRole, }) {
            const invitation = yield repo().findOneBy({
                email,
                platformId,
                projectId: (0, shared_1.isNil)(projectId) ? (0, typeorm_1.IsNull)() : projectId,
            });
            if (!(0, shared_1.isNil)(invitation)) {
                return invitation;
            }
            const id = (0, shared_1.apId)();
            yield repo().upsert({
                id,
                status: shared_1.InvitationStatus.PENDING,
                type,
                email,
                platformId,
                projectRole: type === shared_1.InvitationType.PLATFORM ? undefined : projectRole,
                platformRole: type === shared_1.InvitationType.PROJECT ? undefined : platformRole,
                projectId: type === shared_1.InvitationType.PLATFORM ? undefined : projectId,
            }, ['email', 'platformId', 'projectId']);
            const userInvitation = yield this.getOneOrThrow({
                id,
                platformId,
            });
            const invitationLink = yield generateInvitationLink(userInvitation);
            yield email_service_1.emailService.sendInvitation({
                userInvitation,
                invitationLink,
            });
            const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
            if (!smtp_email_sender_1.smtpEmailSender.isSmtpConfigured(platform)) {
                return Object.assign(Object.assign({}, userInvitation), { link: invitationLink });
            }
            return userInvitation;
        });
    },
    list(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor((_a = params.cursor) !== null && _a !== void 0 ? _a : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: user_invitation_entity_1.UserInvitationEntity,
                query: {
                    limit: params.limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const queryBuilder = repo().createQueryBuilder('user_invitation').where(Object.assign(Object.assign(Object.assign({ platformId: params.platformId }, (0, shared_1.spreadIfDefined)('projectId', params.projectId)), (0, shared_1.spreadIfDefined)('status', params.status)), (0, shared_1.spreadIfDefined)('type', params.type)));
            const { data, cursor } = yield paginator.paginate(queryBuilder);
            return pagination_utils_1.paginationHelper.createPage(data, cursor);
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, platformId }) {
            const invitation = yield this.getOneOrThrow({ id, platformId });
            yield repo().delete({
                id: invitation.id,
                platformId,
            });
        });
    },
    getOneOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, platformId }) {
            const invitation = yield repo().findOneBy({
                id,
                platformId,
            });
            if ((0, shared_1.isNil)(invitation)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityId: `id=${id}`,
                        entityType: 'UserInvitation',
                    },
                });
            }
            return invitation;
        });
    },
    accept(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ invitationToken }) {
            const invitation = yield getByInvitationTokenOrThrow(invitationToken);
            yield repo().update(invitation.id, {
                status: shared_1.InvitationStatus.ACCEPTED,
            });
            yield exports.userInvitationsService.provisionUserInvitation({
                email: invitation.email,
                platformId: invitation.platformId,
            });
            const user = yield user_service_1.userService.getByPlatformAndEmail({
                email: invitation.email,
                platformId: invitation.platformId,
            });
            return {
                registered: !(0, shared_1.isNil)(user),
            };
        });
    },
    hasAnyAcceptedInvitations(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, }) {
            const invitations = yield repo().findBy({
                email,
                platformId,
                status: shared_1.InvitationStatus.ACCEPTED,
            });
            return invitations.length > 0;
        });
    },
    getByEmailAndPlatformIdOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, projectId, }) {
            return repo().findOneBy({
                email,
                platformId,
                projectId: (0, shared_1.isNil)(projectId) ? (0, typeorm_1.IsNull)() : projectId,
            });
        });
    },
};
function generateInvitationLink(userInvitation) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const token = yield jwt_utils_1.jwtUtils.sign({
            payload: {
                id: userInvitation.id,
            },
            expiresInSeconds: INVITATION_EXPIREY_DAYS * 24 * 60 * 60,
            key: yield jwt_utils_1.jwtUtils.getJwtSecret(),
        });
        return platform_domain_helper_1.platformDomainHelper.constructUrlFrom({
            platformId: userInvitation.platformId,
            path: `invitation?token=${token}&email=${encodeURIComponent(userInvitation.email)}`,
        });
    });
}
function getByInvitationTokenOrThrow(invitationToken) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { id: projectMemberId } = yield jwt_utils_1.jwtUtils.decodeAndVerify({
            jwt: invitationToken,
            key: yield jwt_utils_1.jwtUtils.getJwtSecret(),
        });
        const userInvitation = yield repo().findOneBy({
            id: projectMemberId,
        });
        if ((0, shared_1.isNil)(userInvitation)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                params: {
                    message: `Project Member Id ${projectMemberId} is not found`,
                },
            });
        }
        return userInvitation;
    });
}


/***/ }),
/* 631 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectMemberService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const project_member_entity_1 = __webpack_require__(243);
const repo = (0, repo_factory_1.repoFactory)(project_member_entity_1.ProjectMemberEntity);
exports.projectMemberService = {
    upsert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ userId, projectId, role, }) {
            var _b;
            const { platformId } = yield project_service_1.projectService.getOneOrThrow(projectId);
            const existingProjectMember = yield repo().findOneBy({
                projectId,
                userId,
                platformId,
            });
            const projectMemberId = (_b = existingProjectMember === null || existingProjectMember === void 0 ? void 0 : existingProjectMember.id) !== null && _b !== void 0 ? _b : (0, shared_1.apId)();
            const projectMember = {
                id: projectMemberId,
                updated: (0, dayjs_1.default)().toISOString(),
                userId,
                platformId,
                projectId,
                role,
            };
            const upsertResult = yield repo().upsert(projectMember, [
                'projectId',
                'userId',
                'platformId',
            ]);
            return Object.assign(Object.assign({}, projectMember), { created: upsertResult.generatedMaps[0].created });
        });
    },
    list(projectId, cursorRequest, limit) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: project_member_entity_1.ProjectMemberEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const queryBuilder = repo()
                .createQueryBuilder('project_member')
                .where({ projectId });
            const { data, cursor } = yield paginator.paginate(queryBuilder);
            const enrichedData = yield Promise.all(data.map(enrichProjectMemberWithUser));
            return pagination_utils_1.paginationHelper.createPage(enrichedData, cursor);
        });
    },
    getRole(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ userId, projectId, }) {
            var _b;
            const project = yield project_service_1.projectService.getOneOrThrow(projectId);
            const user = yield user_service_1.userService.getOneOrFail({
                id: userId,
            });
            if (user.id === project.ownerId) {
                return shared_1.ProjectMemberRole.ADMIN;
            }
            if (project.platformId === user.platformId && user.platformRole === shared_1.PlatformRole.ADMIN) {
                return shared_1.ProjectMemberRole.ADMIN;
            }
            const member = yield repo().findOneBy({
                projectId,
                userId,
            });
            return (_b = member === null || member === void 0 ? void 0 : member.role) !== null && _b !== void 0 ? _b : null;
        });
    },
    delete(projectId, invitationId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield repo().delete({ projectId, id: invitationId });
        });
    },
    countTeamMembers(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return repo().countBy({ projectId });
        });
    },
};
function enrichProjectMemberWithUser(projectMember) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const user = yield user_service_1.userService.getOneOrFail({
            id: projectMember.userId,
        });
        return Object.assign(Object.assign({}, projectMember), { user: {
                platformId: user.platformId,
                platformRole: user.platformRole,
                email: user.email,
                id: user.id,
                firstName: user.firstName,
                lastName: user.lastName,
            } });
    });
}


/***/ }),
/* 632 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authenticationModule = void 0;
const tslib_1 = __webpack_require__(1);
const authentication_controller_1 = __webpack_require__(633);
const authenticationModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(authentication_controller_1.authenticationController, {
        prefix: '/v1/authentication',
    });
});
exports.authenticationModule = authenticationModule;


/***/ }),
/* 633 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authenticationController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const application_events_1 = __webpack_require__(517);
const platform_utils_1 = __webpack_require__(634);
const authentication_service_1 = __webpack_require__(635);
const authentication_service_hooks_1 = __webpack_require__(636);
const edition = server_shared_1.system.getEdition();
const authenticationController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/sign-up', SignUpRequestOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = yield (0, platform_utils_1.resolvePlatformIdForAuthnRequest)(request.body.email, request);
        const signUpResponse = yield authentication_service_1.authenticationService.signUp(Object.assign(Object.assign({}, request.body), { verified: edition === shared_1.ApEdition.COMMUNITY, platformId, provider: authentication_service_hooks_1.Provider.EMAIL }));
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.USER_SIGNED_UP,
            data: {
                source: 'credentials',
            },
        });
        return signUpResponse;
    }));
    app.post('/sign-in', SignInRequestOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = yield (0, platform_utils_1.resolvePlatformIdForAuthnRequest)(request.body.email, request);
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.USER_SIGNED_IN,
            data: {},
        });
        return authentication_service_1.authenticationService.signIn({
            email: request.body.email,
            password: request.body.password,
            platformId,
            provider: authentication_service_hooks_1.Provider.EMAIL,
        });
    }));
});
exports.authenticationController = authenticationController;
const rateLimitOptions = {
    max: Number.parseInt(server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.API_RATE_LIMIT_AUTHN_MAX), 10),
    timeWindow: server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.API_RATE_LIMIT_AUTHN_WINDOW),
};
const SignUpRequestOptions = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        rateLimit: rateLimitOptions,
    },
    schema: {
        body: shared_1.SignUpRequest,
    },
};
const SignInRequestOptions = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        rateLimit: rateLimitOptions,
    },
    schema: {
        body: shared_1.SignInRequest,
    },
};


/***/ }),
/* 634 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolvePlatformIdForRequest = exports.resolvePlatformIdForAuthnRequest = exports.resolvePlatformIdFromEmail = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const custom_domain_service_1 = __webpack_require__(614);
const user_service_1 = __webpack_require__(462);
const platform_service_1 = __webpack_require__(459);
const edition = server_shared_1.system.getEdition();
const resolvePlatformIdFromEmail = (userEmail) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const shouldResolve = edition === shared_1.ApEdition.COMMUNITY;
    if (!shouldResolve) {
        return null;
    }
    const users = yield user_service_1.userService.getUsersByEmail({ email: userEmail });
    if (users.length === 1) {
        return users[0].platformId;
    }
    return null;
});
exports.resolvePlatformIdFromEmail = resolvePlatformIdFromEmail;
const resolvePlatformIdForAuthnRequest = (userEmail, request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const platformId = yield (0, exports.resolvePlatformIdFromEmail)(userEmail);
    return platformId !== null && platformId !== void 0 ? platformId : (0, exports.resolvePlatformIdForRequest)(request);
});
exports.resolvePlatformIdForAuthnRequest = resolvePlatformIdForAuthnRequest;
const resolvePlatformIdForRequest = (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const platformId = yield extractPlatformIdFromAuthenticatedPrincipal(request.principal);
    if (!(0, shared_1.isNil)(platformId)) {
        return platformId;
    }
    return getPlatformIdForHostname(request.hostname);
});
exports.resolvePlatformIdForRequest = resolvePlatformIdForRequest;
const extractPlatformIdFromAuthenticatedPrincipal = (principal) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (principal.type === shared_1.PrincipalType.UNKNOWN) {
        return null;
    }
    return (_a = principal.platform.id) !== null && _a !== void 0 ? _a : getDefaultPlatformId();
});
const getPlatformIdForHostname = (hostname) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _b;
    if (edition === shared_1.ApEdition.COMMUNITY) {
        return getDefaultPlatformId();
    }
    const customDomain = yield custom_domain_service_1.customDomainService.getOneByDomain({
        domain: hostname,
    });
    return (_b = customDomain === null || customDomain === void 0 ? void 0 : customDomain.platformId) !== null && _b !== void 0 ? _b : getDefaultPlatformId();
});
function getDefaultPlatformId() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        if (edition === shared_1.ApEdition.CLOUD) {
            return server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.CLOUD_PLATFORM_ID);
        }
        const platform = yield platform_service_1.platformService.getOldestPlatform();
        return (_a = platform === null || platform === void 0 ? void 0 : platform.id) !== null && _a !== void 0 ? _a : null;
    });
}


/***/ }),
/* 635 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authenticationService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const flag_service_1 = __webpack_require__(578);
const telemetry_utils_1 = __webpack_require__(576);
const user_service_1 = __webpack_require__(462);
const password_hasher_1 = __webpack_require__(463);
const hooks_1 = __webpack_require__(628);
const authentication_service_hooks_1 = __webpack_require__(636);
exports.authenticationService = {
    signUp(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield hooks_1.authenticationServiceHooks.get().preSignUp(params);
            const user = yield createUser(params);
            return this.signUpResponse({
                user,
                referringUserId: params.referringUserId,
            });
        });
    },
    signIn(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield hooks_1.authenticationServiceHooks.get().preSignIn(request);
            const user = yield user_service_1.userService.getByPlatformAndEmail({
                platformId: request.platformId,
                email: request.email,
            });
            assertUserIsAllowedToSignIn(user);
            yield assertPasswordMatches({
                requestPassword: request.password,
                userPassword: user.password,
            });
            return this.signInResponse({
                user,
            });
        });
    },
    federatedAuthn(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const existingUser = yield user_service_1.userService.getByPlatformAndEmail({
                platformId: params.platformId,
                email: params.email,
            });
            if (existingUser) {
                return this.signInResponse({
                    user: existingUser,
                });
            }
            const newUser = {
                email: params.email,
                verified: params.verified,
                firstName: params.firstName,
                lastName: params.lastName,
                trackEvents: true,
                newsLetter: true,
                password: yield server_shared_1.cryptoUtils.generateRandomPassword(),
                platformId: params.platformId,
            };
            return this.signUp(Object.assign(Object.assign({}, newUser), { provider: authentication_service_hooks_1.Provider.FEDERATED }));
        });
    },
    signUpResponse(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user, referringUserId, }) {
            const authnResponse = yield hooks_1.authenticationServiceHooks.get().postSignUp({
                user,
                referringUserId,
            });
            yield flag_service_1.flagService.save({ id: shared_1.ApFlagId.USER_CREATED, value: true });
            const userWithoutPassword = removePasswordPropFromUser(authnResponse.user);
            yield sendTelemetry({
                user,
                project: authnResponse.project,
            });
            yield saveNewsLetterSubscriber(user);
            return Object.assign(Object.assign({}, userWithoutPassword), { token: authnResponse.token, projectId: authnResponse.project.id, projectRole: authnResponse.projectRole });
        });
    },
    signInResponse(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user, }) {
            const authnResponse = yield hooks_1.authenticationServiceHooks.get().postSignIn({
                user,
            });
            const userWithoutPassword = removePasswordPropFromUser(authnResponse.user);
            return Object.assign(Object.assign({}, userWithoutPassword), { token: authnResponse.token, projectId: authnResponse.project.id, projectRole: authnResponse.projectRole });
        });
    },
};
const createUser = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const newUser = {
            email: params.email,
            platformRole: shared_1.PlatformRole.MEMBER,
            verified: params.verified,
            status: shared_1.UserStatus.ACTIVE,
            firstName: params.firstName,
            lastName: params.lastName,
            trackEvents: params.trackEvents,
            newsLetter: params.newsLetter,
            password: params.password,
            platformId: params.platformId,
        };
        return yield user_service_1.userService.create(newUser);
    }
    catch (e) {
        if (e instanceof typeorm_1.QueryFailedError) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.EXISTING_USER,
                params: {
                    email: params.email,
                    platformId: params.platformId,
                },
            });
        }
        throw e;
    }
});
const assertUserIsAllowedToSignIn = (user) => {
    if ((0, shared_1.isNil)(user)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_CREDENTIALS,
            params: null,
        });
    }
    if (user.status === shared_1.UserStatus.INACTIVE) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.USER_IS_INACTIVE,
            params: {
                email: user.email,
            },
        });
    }
    if (!user.verified) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.EMAIL_IS_NOT_VERIFIED,
            params: {
                email: user.email,
            },
        });
    }
};
const assertPasswordMatches = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ requestPassword, userPassword, }) {
    const passwordMatches = yield password_hasher_1.passwordHasher.compare(requestPassword, userPassword);
    if (!passwordMatches) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_CREDENTIALS,
            params: null,
        });
    }
});
const removePasswordPropFromUser = (user) => {
    const { password: _ } = user, filteredUser = tslib_1.__rest(user, ["password"]);
    return filteredUser;
};
const sendTelemetry = (_b) => tslib_1.__awaiter(void 0, [_b], void 0, function* ({ user, project, }) {
    try {
        yield telemetry_utils_1.telemetry.identify(user, project.id);
        yield telemetry_utils_1.telemetry.trackProject(project.id, {
            name: shared_1.TelemetryEventName.SIGNED_UP,
            payload: {
                userId: user.id,
                email: user.email,
                firstName: user.firstName,
                lastName: user.lastName,
                projectId: project.id,
            },
        });
    }
    catch (e) {
        server_shared_1.logger.warn({ name: 'AuthenticationService#sendTelemetry', error: e });
    }
});
function saveNewsLetterSubscriber(user) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const isPlatformUserOrNotSubscribed = (!(0, shared_1.isNil)(user.platformId) &&
            !flag_service_1.flagService.isCloudPlatform(user.platformId)) ||
            !user.newsLetter;
        const environment = server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT);
        if (isPlatformUserOrNotSubscribed ||
            environment !== shared_1.ApEnvironment.PRODUCTION) {
            return;
        }
        try {
            const response = yield fetch('https://us-central1-activepieces-b3803.cloudfunctions.net/addContact', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email: user.email }),
            });
            return yield response.json();
        }
        catch (error) {
            server_shared_1.logger.warn(error);
        }
    });
}


/***/ }),
/* 636 */
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Provider = void 0;
var Provider;
(function (Provider) {
    Provider["EMAIL"] = "EMAIL";
    Provider["FEDERATED"] = "FEDERATED";
})(Provider || (exports.Provider = Provider = {}));


/***/ }),
/* 637 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.copilotModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const websockets_service_1 = __webpack_require__(638);
const copilot_service_1 = __webpack_require__(639);
const copilotModule = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    websockets_service_1.websocketService.addListener(shared_1.WebsocketServerEvent.GENERATE_CODE, (socket) => {
        return (data) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const { prompt } = data;
            const result = yield copilot_service_1.copilotService.generateCode({ prompt });
            const response = {
                result,
            };
            socket.emit(shared_1.WebsocketClientEvent.GENERATE_CODE_FINISHED, response);
        });
    });
});
exports.copilotModule = copilotModule;


/***/ }),
/* 638 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.websocketService = void 0;
const tslib_1 = __webpack_require__(1);
const access_token_manager_1 = __webpack_require__(509);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const listener = {};
exports.websocketService = {
    init(socket) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const principal = yield access_token_manager_1.accessTokenManager.extractPrincipal(socket.handshake.auth.token);
            yield socket.join(principal.projectId);
            for (const [event, handler] of Object.entries(listener)) {
                socket.on(event, handler(socket));
            }
        });
    },
    addListener(event, handler) {
        listener[event] = handler;
    },
};


/***/ }),
/* 639 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.copilotService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const openai_1 = tslib_1.__importDefault(__webpack_require__(640));
function getOpenAI() {
    let openai;
    const apiKey = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.OPENAI_API_KEY);
    const openaiInstanceType = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.COPILOT_INSTANCE_TYPE);
    switch (openaiInstanceType) {
        case server_shared_1.CopilotInstanceTypes.AZURE_OPENAI: {
            const apiVersion = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.AZURE_OPENAI_API_VERSION);
            openai = new openai_1.default({
                apiKey,
                baseURL: server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.AZURE_OPENAI_ENDPOINT),
                defaultQuery: { 'api-version': apiVersion },
                defaultHeaders: { 'api-key': apiKey },
            });
            break;
        }
        case server_shared_1.CopilotInstanceTypes.OPENAI: {
            openai = new openai_1.default({
                apiKey,
                baseURL: server_shared_1.system.get(server_shared_1.AppSystemProp.OPENAI_API_BASE_URL),
            });
            break;
        }
    }
    return openai;
}
exports.copilotService = {
    generateCode(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ prompt }) {
            server_shared_1.logger.debug({ prompt }, '[CopilotService#generateCode] Prompting...');
            const result = yield getOpenAI().chat.completions.create({
                model: 'gpt-3.5-turbo',
                messages: [
                    ...this.createCodeMessageContext(),
                    {
                        role: 'user',
                        content: prompt,
                    },
                ],
                tools: this.createCodeTools(),
                tool_choice: {
                    type: 'function',
                    function: {
                        name: 'generate_code',
                    },
                },
                temperature: 1,
            });
            (0, shared_1.assertNotNullOrUndefined)(result.choices[0].message.tool_calls, 'OpenAICodeResponse');
            server_shared_1.logger.debug({ response: result.choices[0].message.tool_calls[0] }, '[CopilotService#generateCode] Response received...');
            return result.choices[0].message.tool_calls[0].function.arguments;
        });
    },
    createCodeTools() {
        const tools = [
            {
                type: 'function',
                function: {
                    name: 'generate_code',
                    description: 'Write TypeScript code snippet based on user prompt.',
                    parameters: {
                        type: 'object',
                        properties: {
                            code: {
                                type: 'string',
                                description: 'The code snippet to write.',
                            },
                            inputs: {
                                type: 'array',
                                description: 'The inputs used in the code snippet.',
                                items: {
                                    type: 'object',
                                    properties: {
                                        key: {
                                            type: 'string',
                                            description: 'The name of the input property.',
                                        },
                                        value: {
                                            type: 'string',
                                            description: 'The value to fill the property with.',
                                        },
                                    },
                                },
                            },
                            packages: {
                                type: 'array',
                                description: 'The packages imported in the code snippet',
                                items: {
                                    type: 'string',
                                    description: 'The name of the package, e.g axios, lodash, etc.',
                                },
                            },
                        },
                        required: ['code'],
                    },
                },
            },
        ];
        return tools;
    },
    createCodeMessageContext() {
        return [
            {
                role: 'user',
                content: `
# INTRODUCTION
You are a TypeScript coding bot that helps users turn natural language into useable code, for an open-source automation platform called Activepieces.

# RESPONSE FORMAT
You will not respond to any messages that require a conversational answer.
You will not elaborate.
You will write the code in a single line, and add ***NEW_LINE*** at the end of every statement you write.
You MUST respond ONLY with a function call.
You will use import to import any libraries you need. You will be penalized for using require. You will be punished for using libraries that are not imported.
                `,
            },
            {
                role: 'user',
                content: 'I want code that will combine 2 arrays and only return the unique elements',
            },
            {
                role: 'assistant',
                content: null,
                function_call: {
                    name: 'generate_code',
                    arguments: '{ "code": "export const code = async (inputs) => {***NEW_LINE***  const combinedArray = [...inputs.array1, ...inputs.array2]***NEW_LINE***  const uniqueArray = Array.from(new Set(combinedArray))***NEW_LINE***  return uniqueArray***NEW_LINE***};", "inputs": [ { "key": "array1", "value": "[1,2,3]" }, { "key": "array2", "value": "[4,5,6]" } ], "packages": [] }',
                },
            },
            {
                role: 'user',
                content: 'Write me a piece of code that splits the user\'s first name from his last name in a full name string received in inputs.',
            },
            {
                role: 'assistant',
                content: null,
                function_call: {
                    name: 'generate_code',
                    arguments: '{ "code": "export const code = async (inputs) => {***NEW_LINE***  const nameParts = inputs.fullName.split(\' \')***NEW_LINE***  const firstName = nameParts[0]***NEW_LINE***  const lastName = nameParts.slice(1).join(\'\')***NEW_LINE***  return { firstName, lastName }***NEW_LINE***};", "inputs": [ { "key": "fullName","value": "John Doe" } ], "packages": [] }',
                },
            },
            {
                role: 'user',
                content: 'from an array of objects, take the created_at property for each object and print it as an ISO string',
            },
            {
                role: 'assistant',
                content: null,
                function_call: {
                    name: 'generate_code',
                    arguments: '{ "code": "export const code = async (inputs) => {***NEW_LINE***  const isoStrings = inputs.array.map(obj => new Date(obj.created_at).toISOString())***NEW_LINE***  return isoStrings;***NEW_LINE***};", "inputs": [ { "key": "array","value": "[{ "created_at": "2022-01-14T12:34:56Z" }, { "created_at": "2022-01-15T09:45:30Z" } ]" } ], "packages": [] }',
                },
            },
            {
                role: 'user',
                content: 'Hi',
            },
            {
                role: 'assistant',
                content: null,
                function_call: {
                    name: 'generate_code',
                    arguments: '{ "code": "export const code = async (inputs) => {***NEW_LINE*** return \'Hi\'***NEW_LINE***};", "inputs": [], "packages": [] }',
                },
            },
            {
                role: 'user',
                content: 'How are you?',
            },
            {
                role: 'assistant',
                content: null,
                function_call: {
                    name: 'generate_code',
                    arguments: '{ "code": "export const code = async (inputs) => {***NEW_LINE*** return \'How are you?\'***NEW_LINE***};", "inputs": [], "packages": [] }',
                },
            },
            {
                role: 'user',
                content: 'Using axios, send a GET request to https://cloud.activepieces.com/api/v1/pieces',
            },
            {
                role: 'assistant',
                content: null,
                function_call: {
                    name: 'generate_code',
                    arguments: '{ "code": "import axios from \'axios\'***NEW_LINE***export const code = async (inputs) => {***NEW_LINE***  const response = await axios.get(\'https://cloud.activepieces.com/api/v1/pieces\');***NEW_LINE***  return response.data;***NEW_LINE***};", "inputs": [], "packages": ["axios"] }',
                },
            },
        ];
    },
};


/***/ }),
/* 640 */
/***/ ((module) => {

module.exports = require("openai");

/***/ }),
/* 641 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rateLimitModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const rate_limit_1 = tslib_1.__importDefault(__webpack_require__(642));
const fastify_plugin_1 = tslib_1.__importDefault(__webpack_require__(643));
const redis_connection_1 = __webpack_require__(514);
const API_RATE_LIMIT_AUTHN_ENABLED = server_shared_1.system.getBoolean(server_shared_1.AppSystemProp.API_RATE_LIMIT_AUTHN_ENABLED);
exports.rateLimitModule = (0, fastify_plugin_1.default)((app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (API_RATE_LIMIT_AUTHN_ENABLED) {
        yield app.register(rate_limit_1.default, {
            global: false,
            keyGenerator: server_shared_1.networkUtls.extractClientRealIp,
            redis: getRedisClient(),
        });
    }
}));
const getRedisClient = () => {
    const redisIsNotConfigured = server_shared_1.system.get(server_shared_1.AppSystemProp.QUEUE_MODE) !== server_shared_1.QueueMode.REDIS;
    if (redisIsNotConfigured) {
        return undefined;
    }
    return (0, redis_connection_1.createRedisClient)({
        connectTimeout: 500,
        maxRetriesPerRequest: 1,
    });
};


/***/ }),
/* 642 */
/***/ ((module) => {

module.exports = require("@fastify/rate-limit");

/***/ }),
/* 643 */
/***/ ((module) => {

module.exports = require("fastify-plugin");

/***/ }),
/* 644 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.securityHandlerChain = void 0;
const tslib_1 = __webpack_require__(1);
const access_token_authn_handler_1 = __webpack_require__(645);
const anonymous_authn_handler_1 = __webpack_require__(647);
const app_sumo_authn_handler_1 = __webpack_require__(648);
const global_api_key_authn_handler_1 = __webpack_require__(649);
const platform_api_key_authn_handler_1 = __webpack_require__(650);
const principal_type_authz_handler_1 = __webpack_require__(653);
const project_authz_handler_1 = __webpack_require__(654);
const AUTHN_HANDLERS = [
    new app_sumo_authn_handler_1.AppSumoAuthnHandler(),
    new global_api_key_authn_handler_1.GlobalApiKeyAuthnHandler(),
    new platform_api_key_authn_handler_1.PlatformApiKeyAuthnHandler(),
    new access_token_authn_handler_1.AccessTokenAuthnHandler(),
    new anonymous_authn_handler_1.AnonymousAuthnHandler(),
];
const AUTHZ_HANDLERS = [
    new principal_type_authz_handler_1.PrincipalTypeAuthzHandler(),
    new project_authz_handler_1.ProjectAuthzHandler(),
];
const securityHandlerChain = (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield executeAuthnHandlers(request);
    yield executeAuthzHandlers(request);
});
exports.securityHandlerChain = securityHandlerChain;
/**
 * Executes authn handlers in order, if one of the handlers populates the principal,
 * the remaining handlers are skipped.
 */
const executeAuthnHandlers = (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    for (const handler of AUTHN_HANDLERS) {
        yield handler.handle(request);
        const principalPopulated = checkWhetherPrincipalIsPopulated(request);
        if (principalPopulated) {
            return;
        }
    }
});
const executeAuthzHandlers = (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    for (const handler of AUTHZ_HANDLERS) {
        yield handler.handle(request);
    }
});
const checkWhetherPrincipalIsPopulated = (request) => {
    const principal = request.principal;
    return principal !== undefined;
};


/***/ }),
/* 645 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AccessTokenAuthnHandler = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const access_token_manager_1 = __webpack_require__(509);
const security_handler_1 = __webpack_require__(646);
class AccessTokenAuthnHandler extends security_handler_1.BaseSecurityHandler {
    canHandle(request) {
        var _a;
        const header = request.headers[AccessTokenAuthnHandler.HEADER_NAME];
        const prefix = AccessTokenAuthnHandler.HEADER_PREFIX;
        const routeMatches = (_a = header === null || header === void 0 ? void 0 : header.startsWith(prefix)) !== null && _a !== void 0 ? _a : false;
        const skipAuth = request.routeConfig.skipAuth;
        return Promise.resolve(routeMatches && !skipAuth);
    }
    doHandle(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const accessToken = this.extractAccessTokenOrThrow(request);
            const principal = yield access_token_manager_1.accessTokenManager.extractPrincipal(accessToken);
            request.principal = principal;
        });
    }
    extractAccessTokenOrThrow(request) {
        const header = request.headers[AccessTokenAuthnHandler.HEADER_NAME];
        const prefix = AccessTokenAuthnHandler.HEADER_PREFIX;
        const accessToken = header === null || header === void 0 ? void 0 : header.substring(prefix.length);
        if ((0, shared_1.isNil)(accessToken)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHENTICATION,
                params: {
                    message: 'missing access token',
                },
            });
        }
        return accessToken;
    }
}
exports.AccessTokenAuthnHandler = AccessTokenAuthnHandler;
AccessTokenAuthnHandler.HEADER_NAME = 'authorization';
AccessTokenAuthnHandler.HEADER_PREFIX = 'Bearer ';


/***/ }),
/* 646 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseSecurityHandler = void 0;
const tslib_1 = __webpack_require__(1);
class BaseSecurityHandler {
    handle(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield this.canHandle(request)) {
                yield this.doHandle(request);
            }
        });
    }
}
exports.BaseSecurityHandler = BaseSecurityHandler;


/***/ }),
/* 647 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnonymousAuthnHandler = void 0;
const shared_1 = __webpack_require__(8);
const security_handler_1 = __webpack_require__(646);
class AnonymousAuthnHandler extends security_handler_1.BaseSecurityHandler {
    canHandle(_request) {
        return Promise.resolve(true);
    }
    doHandle(request) {
        const principal = request.principal;
        if ((0, shared_1.isNil)(principal)) {
            request.principal = {
                id: `ANONYMOUS_${(0, shared_1.apId)()}`,
                type: shared_1.PrincipalType.UNKNOWN,
                projectId: `ANONYMOUS_${(0, shared_1.apId)()}`,
                platform: {
                    id: `ANONYMOUS_${(0, shared_1.apId)()}`,
                },
            };
        }
        return Promise.resolve();
    }
}
exports.AnonymousAuthnHandler = AnonymousAuthnHandler;


/***/ }),
/* 648 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppSumoAuthnHandler = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const security_handler_1 = __webpack_require__(646);
const ROUTE_PREFIX = '/v1/appsumo';
class AppSumoAuthnHandler extends security_handler_1.BaseSecurityHandler {
    canHandle(request) {
        const routeMatches = request.routerPath.startsWith(ROUTE_PREFIX);
        return Promise.resolve(routeMatches);
    }
    doHandle(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            request.principal = this.generatePrincipal();
        });
    }
    generatePrincipal() {
        return {
            id: 'app-sumo',
            type: shared_1.PrincipalType.SERVICE,
            projectId: 'app-sumo',
            platform: {
                id: 'app-sumo',
            },
        };
    }
}
exports.AppSumoAuthnHandler = AppSumoAuthnHandler;


/***/ }),
/* 649 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlobalApiKeyAuthnHandler = void 0;
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const security_handler_1 = __webpack_require__(646);
class GlobalApiKeyAuthnHandler extends security_handler_1.BaseSecurityHandler {
    canHandle(request) {
        const routeMatches = request.headers[GlobalApiKeyAuthnHandler.HEADER_NAME] !== undefined;
        const skipAuth = request.routeConfig.skipAuth;
        return Promise.resolve(routeMatches && !skipAuth);
    }
    doHandle(request) {
        const requestApiKey = request.headers[GlobalApiKeyAuthnHandler.HEADER_NAME];
        const keyNotMatching = requestApiKey !== GlobalApiKeyAuthnHandler.API_KEY;
        if (keyNotMatching || (0, shared_1.isNil)(GlobalApiKeyAuthnHandler.API_KEY)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.INVALID_API_KEY,
                params: {},
            });
        }
        request.principal = {
            id: `SUPER_USER_${(0, shared_1.apId)()}`,
            type: shared_1.PrincipalType.SUPER_USER,
            projectId: `SUPER_USER_${(0, shared_1.apId)()}`,
            platform: {
                id: `SUPER_USER_${(0, shared_1.apId)()}`,
            },
        };
        return Promise.resolve();
    }
}
exports.GlobalApiKeyAuthnHandler = GlobalApiKeyAuthnHandler;
GlobalApiKeyAuthnHandler.HEADER_NAME = 'api-key';
GlobalApiKeyAuthnHandler.API_KEY = server_shared_1.system.get(server_shared_1.AppSystemProp.API_KEY);


/***/ }),
/* 650 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlatformApiKeyAuthnHandler = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const nanoid_1 = __webpack_require__(24);
const app_connection_entity_1 = __webpack_require__(227);
const authorization_1 = __webpack_require__(470);
const database_connection_1 = __webpack_require__(225);
const api_key_service_1 = __webpack_require__(651);
const project_member_entity_1 = __webpack_require__(243);
const flow_entity_1 = __webpack_require__(249);
const project_service_1 = __webpack_require__(448);
const request_utils_1 = __webpack_require__(652);
const security_handler_1 = __webpack_require__(646);
class PlatformApiKeyAuthnHandler extends security_handler_1.BaseSecurityHandler {
    canHandle(request) {
        var _a, _b;
        const prefix = `${PlatformApiKeyAuthnHandler.HEADER_PREFIX}${PlatformApiKeyAuthnHandler.API_KEY_PREFIX}`;
        const routeMatches = (_b = (_a = request.headers[PlatformApiKeyAuthnHandler.HEADER_NAME]) === null || _a === void 0 ? void 0 : _a.startsWith(prefix)) !== null && _b !== void 0 ? _b : false;
        const skipAuth = request.routeConfig.skipAuth;
        return Promise.resolve(routeMatches && !skipAuth);
    }
    doHandle(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = this.extractApiKeyValue(request);
            const apiKey = yield api_key_service_1.apiKeyService.getByValueOrThrow(apiKeyValue);
            const principal = yield this.createPrincipal(request, apiKey);
            request.principal = principal;
        });
    }
    extractApiKeyValue(request) {
        const header = request.headers[PlatformApiKeyAuthnHandler.HEADER_NAME];
        const prefix = PlatformApiKeyAuthnHandler.HEADER_PREFIX;
        const apiKeyValue = header === null || header === void 0 ? void 0 : header.substring(prefix.length);
        if ((0, shared_1.isNil)(apiKeyValue)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHENTICATION,
                params: {
                    message: 'missing api key',
                },
            });
        }
        return apiKeyValue;
    }
    createPrincipal(request, apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const principal = {
                id: apiKey.id,
                type: shared_1.PrincipalType.SERVICE,
                projectId: 'ANONYMOUS_' + (0, nanoid_1.nanoid)(),
                platform: {
                    id: apiKey.platformId,
                },
            };
            if (request.routeConfig.scope === shared_1.EndpointScope.PLATFORM) {
                return principal;
            }
            try {
                const projectId = yield this.extractProjectIdOrThrow(request);
                const project = yield project_service_1.projectService.getOneOrThrow(projectId);
                this.assertApiKeyAndProjectBelongToSamePlatform(project, apiKey);
                principal.projectId = projectId;
                return principal;
            }
            catch (e) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.AUTHORIZATION,
                    params: {
                        message: 'invalid project id for api key',
                    },
                });
            }
        });
    }
    extractProjectIdOrThrow(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const projectId = (_a = request_utils_1.requestUtils.extractProjectId(request)) !== null && _a !== void 0 ? _a : (yield this.extractProjectIdFromResource(request));
            if ((0, shared_1.isNil)(projectId)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.AUTHORIZATION,
                    params: {
                        message: 'missing project id',
                    },
                });
            }
            return projectId;
        });
    }
    extractProjectIdFromResource(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const oneResourceRoute = request.routerPath.includes(':id') &&
                (0, shared_1.isObject)(request.params) &&
                'id' in request.params &&
                typeof request.params.id === 'string';
            if (!oneResourceRoute) {
                return undefined;
            }
            const resourceName = (0, authorization_1.extractResourceName)(request.routerPath);
            const { id } = request.params;
            return this.getProjectIdFromResource(resourceName, id);
        });
    }
    getProjectIdFromResource(resource, id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tableName = this.getTableNameFromResource(resource);
            if ((0, shared_1.isNil)(tableName)) {
                return undefined;
            }
            const entity = yield (0, database_connection_1.databaseConnection)().getRepository(tableName).findOneBy({
                id,
            });
            return entity === null || entity === void 0 ? void 0 : entity.projectId;
        });
    }
    getTableNameFromResource(resource) {
        if ((0, shared_1.isNil)(resource)) {
            return undefined;
        }
        switch (resource) {
            case 'flows':
                return flow_entity_1.FlowEntity.options.name;
            case 'app-connections':
                return app_connection_entity_1.AppConnectionEntity.options.name;
            case 'project-members':
                return project_member_entity_1.ProjectMemberEntity.options.name;
        }
        return undefined;
    }
    assertApiKeyAndProjectBelongToSamePlatform(project, apiKey) {
        if (project.platformId !== apiKey.platformId) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHORIZATION,
                params: {
                    message: 'invalid project id and platform id',
                },
            });
        }
    }
}
exports.PlatformApiKeyAuthnHandler = PlatformApiKeyAuthnHandler;
PlatformApiKeyAuthnHandler.HEADER_NAME = 'authorization';
PlatformApiKeyAuthnHandler.HEADER_PREFIX = 'Bearer ';
PlatformApiKeyAuthnHandler.API_KEY_PREFIX = 'sk-';


/***/ }),
/* 651 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateApiKey = exports.apiKeyService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const api_key_entity_1 = __webpack_require__(231);
const API_KEY_TOKEN_LENGTH = 64;
const repo = (0, repo_factory_1.repoFactory)(api_key_entity_1.ApiKeyEntity);
exports.apiKeyService = {
    add(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, displayName, }) {
            const generatedApiKey = generateApiKey();
            const savedApiKey = yield repo().save({
                id: (0, shared_1.apId)(),
                platformId,
                displayName,
                hashedValue: generatedApiKey.secretHashed,
                truncatedValue: generatedApiKey.secretTruncated,
            });
            return Object.assign(Object.assign({}, savedApiKey), { value: generatedApiKey.secret });
        });
    },
    getByValueOrThrow(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            (0, shared_1.assertNotNullOrUndefined)(key, 'key');
            return repo().findOneByOrFail({
                hashedValue: server_shared_1.cryptoUtils.hashSHA256(key),
            });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId }) {
            const data = yield repo().findBy({
                platformId,
            });
            return {
                data,
                next: null,
                previous: null,
            };
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, id }) {
            const apiKey = yield repo().findOneBy({
                platformId,
                id,
            });
            if ((0, shared_1.isNil)(apiKey)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `api key with id ${id} not found`,
                    },
                });
            }
            yield repo().delete({
                platformId,
                id,
            });
        });
    },
};
function generateApiKey() {
    const secretValue = (0, shared_1.secureApId)(API_KEY_TOKEN_LENGTH - 3);
    const secretKey = `sk-${secretValue}`;
    return {
        secret: secretKey,
        secretHashed: server_shared_1.cryptoUtils.hashSHA256(secretKey),
        secretTruncated: secretKey.slice(-4),
    };
}
exports.generateApiKey = generateApiKey;


/***/ }),
/* 652 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestUtils = void 0;
const shared_1 = __webpack_require__(8);
exports.requestUtils = {
    extractProjectId(request) {
        if ((0, shared_1.isObject)(request.body) && 'projectId' in request.body) {
            return request.body.projectId;
        }
        else if ((0, shared_1.isObject)(request.query) && 'projectId' in request.query) {
            return request.query.projectId;
        }
        return undefined;
    },
};


/***/ }),
/* 653 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrincipalTypeAuthzHandler = void 0;
const shared_1 = __webpack_require__(8);
const security_handler_1 = __webpack_require__(646);
class PrincipalTypeAuthzHandler extends security_handler_1.BaseSecurityHandler {
    canHandle(request) {
        const requestMatches = !PrincipalTypeAuthzHandler.IGNORED_ROUTES.includes(request.routerPath) &&
            !request.routerPath.startsWith('/ui');
        return Promise.resolve(requestMatches);
    }
    doHandle(request) {
        const principalType = request.principal.type;
        const configuredPrincipals = request.routeConfig.allowedPrincipals;
        const defaultPrincipals = PrincipalTypeAuthzHandler.DEFAULT_ALLOWED_PRINCIPAL_TYPES;
        const allowedPrincipals = configuredPrincipals !== null && configuredPrincipals !== void 0 ? configuredPrincipals : defaultPrincipals;
        const principalTypeNotAllowed = !allowedPrincipals.includes(principalType);
        if (principalTypeNotAllowed) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHORIZATION,
                params: {
                    message: 'invalid route for principal type',
                },
            });
        }
        return Promise.resolve();
    }
}
exports.PrincipalTypeAuthzHandler = PrincipalTypeAuthzHandler;
PrincipalTypeAuthzHandler.IGNORED_ROUTES = [
    '/favicon.ico',
    '/v1/docs',
    '/redirect',
];
PrincipalTypeAuthzHandler.DEFAULT_ALLOWED_PRINCIPAL_TYPES = [
    shared_1.PrincipalType.USER,
    shared_1.PrincipalType.ENGINE,
    shared_1.PrincipalType.SERVICE,
];


/***/ }),
/* 654 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectAuthzHandler = void 0;
const shared_1 = __webpack_require__(8);
const request_utils_1 = __webpack_require__(652);
const security_handler_1 = __webpack_require__(646);
class ProjectAuthzHandler extends security_handler_1.BaseSecurityHandler {
    canHandle(request) {
        const requestMatches = !ProjectAuthzHandler.IGNORED_ROUTES.includes(request.routerPath);
        return Promise.resolve(requestMatches);
    }
    doHandle(request) {
        if (request.principal.type === shared_1.PrincipalType.WORKER) {
            return Promise.resolve();
        }
        const projectId = request_utils_1.requestUtils.extractProjectId(request);
        if (projectId && projectId !== request.principal.projectId) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHORIZATION,
                params: {
                    message: 'invalid project id',
                },
            });
        }
        return Promise.resolve();
    }
}
exports.ProjectAuthzHandler = ProjectAuthzHandler;
ProjectAuthzHandler.IGNORED_ROUTES = [
    '/v1/admin/pieces',
    '/v1/admin/platforms',
    '/v1/app-credentials',
    '/v1/users/projects/:projectId/token',
    '/v1/webhooks',
    '/v1/webhooks/:flowId',
    '/v1/webhooks/:flowId/test',
    '/v1/webhooks/:flowId/sync',
    // This works for both platform and project, we have to check this manually
    '/v1/user-invitations',
];


/***/ }),
/* 655 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.alertsModule = void 0;
const tslib_1 = __webpack_require__(1);
const authorization_1 = __webpack_require__(470);
const ee_authorization_1 = __webpack_require__(656);
const alerts_controller_1 = __webpack_require__(657);
const alertsModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    app.addHook('preHandler', (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.alertsEnabled));
    yield app.register(alerts_controller_1.alertsController, { prefix: '/v1/alerts' });
});
exports.alertsModule = alertsModule;


/***/ }),
/* 656 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformMustBeOwnedByCurrentUser = exports.platformMustHaveFeatureEnabled = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const platform_service_1 = __webpack_require__(459);
const user_service_1 = __webpack_require__(462);
const USER_NOT_ALLOWED_TO_PERFORM_OPERATION_ERROR = new shared_1.ActivepiecesError({
    code: shared_1.ErrorCode.AUTHORIZATION,
    params: {},
});
const platformMustHaveFeatureEnabled = (handler) => (request, _res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const platformId = request.principal.platform.id;
    if ((0, shared_1.isNil)(platformId)) {
        throw USER_NOT_ALLOWED_TO_PERFORM_OPERATION_ERROR;
    }
    const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
    const enabled = handler(platform);
    if (!enabled) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.FEATURE_DISABLED,
            params: {
                message: 'Feature is disabled',
            },
        });
    }
});
exports.platformMustHaveFeatureEnabled = platformMustHaveFeatureEnabled;
const platformMustBeOwnedByCurrentUser = (request, _res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const platformId = request.principal.platform.id;
    if ((0, shared_1.isNil)(platformId)) {
        throw USER_NOT_ALLOWED_TO_PERFORM_OPERATION_ERROR;
    }
    const isApiKey = request.principal.type === shared_1.PrincipalType.SERVICE;
    if (isApiKey) {
        return;
    }
    const user = yield user_service_1.userService.getMetaInfo({
        id: request.principal.id,
    });
    if ((0, shared_1.isNil)(user)) {
        throw USER_NOT_ALLOWED_TO_PERFORM_OPERATION_ERROR;
    }
    const canEditPlatform = user.platformRole === shared_1.PlatformRole.ADMIN && user.platformId === platformId;
    if (!canEditPlatform) {
        throw USER_NOT_ALLOWED_TO_PERFORM_OPERATION_ERROR;
    }
});
exports.platformMustBeOwnedByCurrentUser = platformMustBeOwnedByCurrentUser;


/***/ }),
/* 657 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.alertsController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const alerts_service_1 = __webpack_require__(602);
const alertsController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', ListAlertsRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        return alerts_service_1.alertsService.list({
            projectId: req.query.projectId,
            cursor: req.query.cursor,
            limit: (_a = req.query.limit) !== null && _a !== void 0 ? _a : 10,
        });
    }));
    app.post('/', CreateAlertRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return alerts_service_1.alertsService.add({
            projectId: req.body.projectId,
            channel: req.body.channel,
            receiver: req.body.receiver,
        });
    }));
    app.delete('/:id', DeleteAlertRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return alerts_service_1.alertsService.delete({
            alertId: req.params.id,
        });
    }));
});
exports.alertsController = alertsController;
const ListAlertsRequest = {
    config: {
        allowedPrincipals: [
            shared_1.PrincipalType.USER,
        ],
    },
    schema: {
        querystring: ee_shared_1.ListAlertsParams,
    },
};
const CreateAlertRequest = {
    config: {
        allowedPrincipals: [
            shared_1.PrincipalType.USER,
        ],
    },
    schema: {
        body: ee_shared_1.CreateAlertParams,
    },
};
const DeleteAlertRequest = {
    config: {
        allowedPrincipals: [
            shared_1.PrincipalType.USER,
        ],
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
    },
};


/***/ }),
/* 658 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.analyticsModule = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_analytics_service_1 = __webpack_require__(659);
const analyticsModule = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield pieces_analytics_service_1.piecesAnalyticsService.init();
});
exports.analyticsModule = analyticsModule;


/***/ }),
/* 659 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.piecesAnalyticsService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const flow_entity_1 = __webpack_require__(249);
const flow_version_entity_1 = __webpack_require__(251);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const piece_metadata_service_1 = __webpack_require__(222);
const flowRepo = (0, repo_factory_1.repoFactory)(flow_entity_1.FlowEntity);
const flowVersionRepo = (0, repo_factory_1.repoFactory)(flow_version_entity_1.FlowVersionEntity);
exports.piecesAnalyticsService = {
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.PIECES_ANALYTICS, piecesAnalyticsHandler);
            yield system_jobs_1.systemJobsSchedule.upsertJob({
                job: {
                    name: common_1.SystemJobName.PIECES_ANALYTICS,
                    data: {},
                },
                schedule: {
                    type: 'repeated',
                    cron: '0 12 * * *',
                },
            });
        });
    },
};
function piecesAnalyticsHandler() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flowIds = (yield flowRepo().createQueryBuilder().select('id').where({
            status: shared_1.FlowStatus.ENABLED,
        }).getRawMany()).map((flow) => flow.id);
        const activeProjects = {};
        server_shared_1.logger.info('Syncing pieces analytics');
        for (const flowId of flowIds) {
            const flow = yield flowRepo().findOneBy({
                id: flowId,
            });
            const publishedVersionId = flow === null || flow === void 0 ? void 0 : flow.publishedVersionId;
            if ((0, shared_1.isNil)(flow) || (0, shared_1.isNil)(publishedVersionId)) {
                continue;
            }
            const flowVersion = yield flowVersionRepo().findOneBy({
                id: publishedVersionId,
            });
            if ((0, shared_1.isNil)(flowVersion)) {
                continue;
            }
            const pieces = shared_1.flowHelper.getAllSteps(flowVersion.trigger).filter((step) => step.type === shared_1.ActionType.PIECE || step.type === shared_1.TriggerType.PIECE).map((step) => {
                const clonedStep = step;
                return {
                    name: clonedStep.settings.pieceName,
                    version: clonedStep.settings.pieceVersion,
                };
            });
            for (const piece of pieces) {
                try {
                    const pieceMetadata = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
                        name: piece.name,
                        version: piece.version,
                        projectId: flow.projectId,
                    });
                    const pieceId = pieceMetadata.id;
                    activeProjects[pieceId] = activeProjects[pieceId] || new Set();
                    activeProjects[pieceId].add(flow.projectId);
                }
                catch (e) {
                    server_shared_1.logger.error({
                        name: piece.name,
                        version: piece.version,
                    }, 'Piece not found in pieces analytics service');
                }
            }
        }
        for (const id in activeProjects) {
            yield piece_metadata_service_1.pieceMetadataService.updateUsage({
                id,
                usage: activeProjects[id].size,
            });
        }
        server_shared_1.logger.info('Synced pieces analytics finished');
    });
}


/***/ }),
/* 660 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.apiKeyController = exports.apiKeyModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const ee_authorization_1 = __webpack_require__(656);
const api_key_service_1 = __webpack_require__(651);
const apiKeyModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preHandler', (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.apiKeysEnabled));
    app.addHook('preHandler', ee_authorization_1.platformMustBeOwnedByCurrentUser);
    yield app.register(exports.apiKeyController, { prefix: '/v1/api-keys' });
});
exports.apiKeyModule = apiKeyModule;
const apiKeyController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', CreateRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        const newApiKey = yield api_key_service_1.apiKeyService.add({
            platformId,
            displayName: req.body.displayName,
        });
        return res.status(http_status_codes_1.StatusCodes.CREATED).send(newApiKey);
    }));
    app.get('/', ListRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return api_key_service_1.apiKeyService.list({
            platformId,
        });
    }));
    app.delete('/:id', DeleteRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        yield api_key_service_1.apiKeyService.delete({
            id: req.params.id,
            platformId,
        });
        return res.status(http_status_codes_1.StatusCodes.OK).send();
    }));
});
exports.apiKeyController = apiKeyController;
const ListRequest = {
    schema: {
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(ee_shared_1.ApiKeyResponseWithoutValue),
        },
    },
};
const CreateRequest = {
    schema: {
        body: ee_shared_1.CreateApiKeyRequest,
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: ee_shared_1.ApiKeyResponseWithValue,
        },
    },
};
const DeleteRequest = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
    },
};


/***/ }),
/* 661 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformOAuth2Service = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const credentials_oauth2_service_1 = __webpack_require__(220);
const piece_metadata_service_1 = __webpack_require__(222);
const project_service_1 = __webpack_require__(448);
const oauth_app_service_1 = __webpack_require__(662);
exports.platformOAuth2Service = {
    claim,
    refresh,
};
function refresh(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ pieceName, projectId, connectionValue, }) {
        const oauth2App = yield getApp({
            pieceName,
            clientId: connectionValue.client_id,
            projectId,
        });
        const newValue = yield credentials_oauth2_service_1.credentialsOauth2Service.refresh({
            pieceName,
            projectId,
            connectionValue: Object.assign(Object.assign({}, connectionValue), { type: shared_1.AppConnectionType.OAUTH2, client_secret: oauth2App.clientSecret }),
        });
        return {
            expires_in: newValue.expires_in,
            client_id: newValue.client_id,
            token_type: newValue.token_type,
            access_token: newValue.access_token,
            claimed_at: newValue.claimed_at,
            refresh_token: newValue.refresh_token,
            redirect_url: newValue.redirect_url,
            scope: newValue.scope,
            token_url: newValue.token_url,
            data: newValue.data,
            props: newValue.props,
            authorization_method: newValue.authorization_method,
            type: shared_1.AppConnectionType.PLATFORM_OAUTH2,
        };
    });
}
function claim(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ request, projectId, pieceName, }) {
        const { auth } = yield piece_metadata_service_1.pieceMetadataService.getOrThrow({
            name: pieceName,
            version: undefined,
            projectId,
        });
        if ((0, shared_1.isNil)(auth) || auth.type !== pieces_framework_1.PropertyType.OAUTH2) {
            throw new Error('Cannot claim auth for non oauth2 property ' +
                (auth === null || auth === void 0 ? void 0 : auth.type) +
                ' ' +
                pieceName);
        }
        const oauth2App = yield getApp({
            pieceName,
            clientId: request.clientId,
            projectId,
        });
        const claimedValue = yield credentials_oauth2_service_1.credentialsOauth2Service.claim({
            request: Object.assign(Object.assign({}, request), { clientId: oauth2App.clientId, clientSecret: oauth2App.clientSecret }),
            projectId,
            pieceName,
        });
        return Object.assign(Object.assign({}, claimedValue), { type: shared_1.AppConnectionType.PLATFORM_OAUTH2 });
    });
}
function getApp(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ pieceName, clientId, projectId, }) {
        const project = yield project_service_1.projectService.getOne(projectId);
        const platformId = project === null || project === void 0 ? void 0 : project.platformId;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'Platform id is not defined');
        return oauth_app_service_1.oauthAppService.getWithSecret({
            pieceName,
            clientId,
            platformId,
        });
    });
}


/***/ }),
/* 662 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.oauthAppService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const encryption_1 = __webpack_require__(299);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const oauth_app_entity_1 = __webpack_require__(241);
const oauthRepo = (0, repo_factory_1.repoFactory)(oauth_app_entity_1.OAuthAppEntity);
exports.oauthAppService = {
    upsert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, request, }) {
            yield oauthRepo().upsert(Object.assign(Object.assign({ platformId }, request), { clientSecret: encryption_1.encryptUtils.encryptString(request.clientSecret), id: (0, shared_1.apId)() }), ['platformId', 'pieceName']);
            const connection = yield oauthRepo().findOneByOrFail({
                platformId,
                pieceName: request.pieceName,
            });
            return (0, shared_1.deleteProps)(connection, ['clientSecret']);
        });
    },
    getWithSecret(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, pieceName, clientId, }) {
            const oauthApp = yield oauthRepo().findOneByOrFail({
                platformId,
                pieceName,
                clientId,
            });
            return Object.assign(Object.assign({}, oauthApp), { clientSecret: encryption_1.encryptUtils.decryptString(oauthApp.clientSecret) });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ request, platformId, }) {
            var _b, _c;
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor((_b = request.cursor) !== null && _b !== void 0 ? _b : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: oauth_app_entity_1.OAuthAppEntity,
                query: {
                    limit: (_c = request.limit) !== null && _c !== void 0 ? _c : 10,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const { data, cursor } = yield paginator.paginate(oauthRepo().createQueryBuilder('oauth_app').where({ platformId }));
            return pagination_utils_1.paginationHelper.createPage(data, cursor);
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, id, }) {
            const oauthApp = yield oauthRepo().findOneBy({ platformId, id });
            if ((0, shared_1.isNil)(oauthApp)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `OAuth with id ${id} not found`,
                    },
                });
            }
            yield oauthRepo().delete({ platformId, id });
        });
    },
};


/***/ }),
/* 663 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appCredentialModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const app_credentials_service_1 = __webpack_require__(664);
const appCredentialModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(appCredentialController, {
        prefix: '/v1/app-credentials',
    });
});
exports.appCredentialModule = appCredentialModule;
const DEFAULT_LIMIT_SIZE = 10;
const appCredentialController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            querystring: ee_shared_1.ListAppCredentialsRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const page = yield app_credentials_service_1.appCredentialService.list(request.query.projectId, request.query.appName, (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null, (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_LIMIT_SIZE);
        return censorClientSecret(page);
    }));
    fastify.post('/', {
        schema: {
            body: ee_shared_1.UpsertAppCredentialRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return app_credentials_service_1.appCredentialService.upsert({
            projectId: request.principal.projectId,
            request: request.body,
        });
    }));
    fastify.delete('/:credentialId', (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield app_credentials_service_1.appCredentialService.delete({
            id: request.params.credentialId,
            projectId: request.principal.projectId,
        });
        return reply.status(http_status_codes_1.StatusCodes.OK).send();
    }));
});
function censorClientSecret(page) {
    page.data = page.data.map((f) => {
        if (f.settings.type === ee_shared_1.AppCredentialType.OAUTH2) {
            f.settings.clientSecret = undefined;
        }
        return f;
    });
    return page;
}


/***/ }),
/* 664 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appCredentialService = exports.appCredentialRepo = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const app_credentials_entity_1 = __webpack_require__(232);
exports.appCredentialRepo = (0, repo_factory_1.repoFactory)(app_credentials_entity_1.AppCredentialEntity);
exports.appCredentialService = {
    list(projectId, appName, cursorRequest, limit) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest !== null && cursorRequest !== void 0 ? cursorRequest : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: app_credentials_entity_1.AppCredentialEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            let queryBuilder = (0, exports.appCredentialRepo)()
                .createQueryBuilder('app_credential')
                .where({ projectId });
            if (appName !== undefined) {
                queryBuilder = queryBuilder.where({ appName });
            }
            const { data, cursor } = yield paginator.paginate(queryBuilder);
            return pagination_utils_1.paginationHelper.createPage(data, cursor);
        });
    },
    getOneOrThrow(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (0, exports.appCredentialRepo)().findOneByOrFail({ id });
        });
    },
    upsert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, request, }) {
            var _b;
            const newId = (_b = request.id) !== null && _b !== void 0 ? _b : (0, shared_1.apId)();
            yield (0, exports.appCredentialRepo)().upsert(Object.assign({ id: newId, projectId }, request), ['id']);
            return (0, exports.appCredentialRepo)().findOneBy({ projectId, appName: request.appName });
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, projectId }) {
            yield (0, exports.appCredentialRepo)().delete({
                id,
                projectId,
            });
        });
    },
};


/***/ }),
/* 665 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.auditEventModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const ee_authorization_1 = __webpack_require__(656);
const audit_event_service_1 = __webpack_require__(666);
const auditEventModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preHandler', (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.auditLogEnabled));
    app.addHook('preHandler', ee_authorization_1.platformMustBeOwnedByCurrentUser);
    yield app.register(auditEventController, { prefix: '/v1/audit-events' });
});
exports.auditEventModule = auditEventModule;
const auditEventController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', {
        schema: {
            querystring: ee_shared_1.ListAuditEventsRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return audit_event_service_1.auditLogService.list({
            platformId,
            cursorRequest: (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null,
            limit: (_b = request.query.limit) !== null && _b !== void 0 ? _b : 20,
        });
    }));
});


/***/ }),
/* 666 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.auditLogService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const ajv_1 = tslib_1.__importDefault(__webpack_require__(667));
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const audit_event_entity_1 = __webpack_require__(233);
const auditLogRepo = (0, repo_factory_1.repoFactory)(audit_event_entity_1.AuditEventEntity);
const ajv = new ajv_1.default({ removeAdditional: 'all' });
const eventSchema = ajv.compile(ee_shared_1.ApplicationEvent);
exports.auditLogService = {
    sendUserEvent(request, params) {
        if ([shared_1.PrincipalType.UNKNOWN, shared_1.PrincipalType.WORKER].includes(request.principal.type)) {
            return;
        }
        (0, server_shared_1.rejectedPromiseHandler)(saveEvent({
            platformId: request.principal.platform.id,
            projectId: request.principal.projectId,
            userId: request.principal.id,
            ip: server_shared_1.networkUtls.extractClientRealIp(request),
        }, params));
    },
    sendWorkerEvent(projectId, params) {
        (0, server_shared_1.rejectedPromiseHandler)(project_service_1.projectService.getOneOrThrow(projectId).then((project) => {
            (0, server_shared_1.rejectedPromiseHandler)(saveEvent({
                platformId: project.platformId,
                projectId,
                userId: undefined,
                ip: undefined,
            }, params));
        }));
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, cursorRequest, limit }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: audit_event_entity_1.AuditEventEntity,
                query: {
                    limit,
                    order: 'DESC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const paginationResponse = yield paginator.paginate(auditLogRepo().createQueryBuilder('audit_event')
                .where({ platformId }));
            return pagination_utils_1.paginationHelper.createPage(paginationResponse.data, paginationResponse.cursor);
        });
    },
};
function saveEvent(info, rawEvent) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const platformId = info.platformId;
        const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
        if (!platform.auditLogEnabled) {
            return;
        }
        const user = info.userId ? yield user_service_1.userService.getOneOrFail({
            id: info.userId,
        }) : undefined;
        const project = info.projectId ? yield project_service_1.projectService.getOne(info.projectId) : undefined;
        const eventToSave = {
            id: (0, shared_1.apId)(),
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            userId: info.userId,
            projectId: info.projectId,
            platformId: info.platformId,
            ip: info.ip,
            data: Object.assign(Object.assign({}, rawEvent.data), { project,
                user }),
            action: rawEvent.action,
        };
        const valid = eventSchema(eventToSave);
        (0, shared_1.assertEqual)(valid, true, 'Event validation', 'true');
        const appEvent = yield auditLogRepo().save(eventToSave);
        server_shared_1.logger.info({
            message: '[AuditEventService#saveEvent] Audit event saved',
            appEvent,
        });
    });
}


/***/ }),
/* 667 */
/***/ ((module) => {

module.exports = require("ajv");

/***/ }),
/* 668 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cloudAuthenticationServiceHooks = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const flag_service_1 = __webpack_require__(578);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const user_invitation_service_1 = __webpack_require__(630);
const appsumo_service_1 = __webpack_require__(669);
const otp_service_1 = __webpack_require__(676);
const referral_service_1 = __webpack_require__(678);
const authentication_helper_1 = __webpack_require__(679);
exports.cloudAuthenticationServiceHooks = {
    preSignIn(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, provider }) {
            yield authentication_helper_1.authenticationHelper.assertEmailAuthIsEnabled({
                platformId,
                provider,
            });
            yield authentication_helper_1.authenticationHelper.assertDomainIsAllowed({ email, platformId });
        });
    },
    preSignUp(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, provider }) {
            yield authentication_helper_1.authenticationHelper.assertEmailAuthIsEnabled({
                platformId,
                provider,
            });
            yield authentication_helper_1.authenticationHelper.assertUserIsInvitedAndDomainIsAllowed({
                email,
                platformId,
            });
        });
    },
    postSignUp(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user, referringUserId }) {
            if (!(0, shared_1.isNil)(user.platformId) &&
                flag_service_1.flagService.isCloudPlatform(user.platformId)) {
                yield project_service_1.projectService.create({
                    displayName: `${user.firstName}'s Project`,
                    ownerId: user.id,
                    platformId: user.platformId,
                });
            }
            if (referringUserId) {
                try {
                    yield referral_service_1.referralService.add({
                        referringUserId,
                        referredUserId: user.id,
                        referredUserEmail: user.email,
                    });
                }
                catch (e) {
                    server_shared_1.exceptionHandler.handle(e);
                    server_shared_1.logger.error(e, '[CloudAuthenticationServiceHooks#postSignUp] referralService.add');
                }
            }
            yield authentication_helper_1.authenticationHelper.autoVerifyUserIfEligible(user);
            yield user_invitation_service_1.userInvitationsService.provisionUserInvitation({
                email: user.email,
                platformId: user.platformId,
            });
            const updatedUser = yield user_service_1.userService.getOneOrFail({ id: user.id });
            const { project, token, projectRole } = yield authentication_helper_1.authenticationHelper.getProjectAndTokenOrThrow(user);
            if (!updatedUser.verified) {
                yield otp_service_1.otpService.createAndSend({
                    platformId: updatedUser.platformId,
                    email: updatedUser.email,
                    type: ee_shared_1.OtpType.EMAIL_VERIFICATION,
                });
            }
            const appSumo = yield appsumo_service_1.appsumoService.getByEmail(updatedUser.email);
            if (appSumo) {
                yield appsumo_service_1.appsumoService.handleRequest({
                    plan_id: appSumo.plan_id,
                    action: 'activate',
                    uuid: appSumo.uuid,
                    activation_email: appSumo.activation_email,
                });
            }
            return {
                user: updatedUser,
                project,
                projectRole,
                token,
            };
        });
    },
    postSignIn(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user }) {
            const result = yield authentication_helper_1.authenticationHelper.getProjectAndTokenOrThrow(user);
            return Object.assign({ user }, result);
        });
    },
};


/***/ }),
/* 669 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appsumoService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const project_plan_service_1 = __webpack_require__(591);
const project_billing_service_1 = __webpack_require__(670);
const appsumo_entity_1 = __webpack_require__(234);
const appsumoRepo = (0, repo_factory_1.repoFactory)(appsumo_entity_1.AppSumoEntity);
const appSumoPlans = {
    activepieces_tier1: {
        nickname: 'appsumo_activepieces_tier1',
        tasks: 10000,
        minimumPollingInterval: 10,
        connections: 100,
        teamMembers: 1,
    },
    activepieces_tier2: {
        nickname: 'appsumo_activepieces_tier2',
        tasks: 50000,
        minimumPollingInterval: 5,
        connections: 100,
        teamMembers: 1,
    },
    activepieces_tier3: {
        nickname: 'appsumo_activepieces_tier3',
        tasks: 200000,
        minimumPollingInterval: 1,
        connections: 100,
        teamMembers: 5,
    },
    activepieces_tier4: {
        nickname: 'appsumo_activepieces_tier4',
        tasks: 500000,
        minimumPollingInterval: 1,
        connections: 100,
        teamMembers: 5,
    },
    activepieces_tier5: {
        nickname: 'appsumo_activepieces_tier5',
        tasks: 1000000,
        minimumPollingInterval: 1,
        connections: 100,
        teamMembers: 5,
    },
    activepieces_tier6: {
        nickname: 'appsumo_activepieces_tier6',
        tasks: 10000000,
        minimumPollingInterval: 1,
        connections: 100,
        teamMembers: 5,
    },
};
exports.appsumoService = {
    getPlanInformation(plan_id) {
        return appSumoPlans[plan_id];
    },
    getByEmail(email) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return appsumoRepo().findOneBy({
                activation_email: email,
            });
        });
    },
    getById(uuid) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return appsumoRepo().findOneBy({
                uuid,
            });
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email }) {
            yield appsumoRepo().delete({
                activation_email: email,
            });
        });
    },
    upsert(plan) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield appsumoRepo().upsert(plan, ['uuid']);
        });
    },
    handleRequest(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const { plan_id, action, uuid, activation_email: rawEmail } = request;
            const appSumoLicense = yield exports.appsumoService.getById(uuid);
            const activation_email = (_a = appSumoLicense === null || appSumoLicense === void 0 ? void 0 : appSumoLicense.activation_email) !== null && _a !== void 0 ? _a : rawEmail;
            const appSumoPlan = exports.appsumoService.getPlanInformation(plan_id);
            const user = yield user_service_1.userService.getByPlatformAndEmail({
                platformId: server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.CLOUD_PLATFORM_ID),
                email: activation_email,
            });
            if (!(0, shared_1.isNil)(user)) {
                const project = yield project_service_1.projectService.getUserProjectOrThrow(user.id);
                yield project_billing_service_1.projectBillingService.getOrCreateForProject(project.id);
                if (action === 'refund') {
                    yield project_plan_service_1.projectLimitsService.upsert(ee_shared_1.DEFAULT_FREE_PLAN_LIMIT, project.id);
                    yield project_billing_service_1.projectBillingService.updateByProjectId(project.id, {
                        includedTasks: ee_shared_1.DEFAULT_FREE_PLAN_LIMIT.tasks,
                        includedUsers: ee_shared_1.DEFAULT_FREE_PLAN_LIMIT.teamMembers,
                    });
                }
                else {
                    yield project_plan_service_1.projectLimitsService.upsert(appSumoPlan, project.id);
                    yield project_billing_service_1.projectBillingService.updateByProjectId(project.id, {
                        includedTasks: appSumoPlan.tasks,
                        includedUsers: appSumoPlan.teamMembers,
                    });
                }
            }
            if (action === 'refund') {
                yield exports.appsumoService.delete({
                    email: activation_email,
                });
            }
            else {
                yield exports.appsumoService.upsert({
                    uuid,
                    plan_id,
                    activation_email,
                });
            }
        });
    },
};


/***/ }),
/* 670 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectBillingService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const lock_1 = __webpack_require__(512);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const project_billing_entity_1 = __webpack_require__(235);
const stripe_helper_1 = __webpack_require__(671);
const projectBillingRepo = (0, repo_factory_1.repoFactory)(project_billing_entity_1.ProjectBillingEntity);
exports.projectBillingService = {
    getOrCreateForProject(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectBilling = yield (0, lock_1.acquireLock)({
                key: `project_billing_${projectId}`,
                timeout: 30 * 1000,
            });
            try {
                const project = yield project_service_1.projectService.getOneOrThrow(projectId);
                const user = yield user_service_1.userService.getOneOrFail({
                    id: project.ownerId,
                });
                const billing = yield projectBillingRepo().findOneBy({ projectId });
                if ((0, shared_1.isNil)(billing)) {
                    return yield createInitialBilling(user, projectId);
                }
                return billing;
            }
            finally {
                yield projectBilling.release();
            }
        });
    },
    updateByProjectId(projectId, update) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield projectBillingRepo().update({ projectId }, update);
            return projectBillingRepo().findOneByOrFail({ projectId });
        });
    },
    increaseTasks(projectId, tasks) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield projectBillingRepo().increment({
                projectId,
            }, 'includedTasks', tasks);
            return exports.projectBillingService.getOrCreateForProject(projectId);
        });
    },
    updateSubscriptionIdByCustomerId(subscription) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const stripeCustomerId = subscription.customer;
            const projectBilling = yield projectBillingRepo().findOneByOrFail({ stripeCustomerId });
            server_shared_1.logger.info(`Updating subscription id for project billing ${projectBilling.id}`);
            yield projectBillingRepo().update(projectBilling.id, {
                stripeSubscriptionId: subscription.id,
                subscriptionStatus: subscription.status,
            });
            return projectBillingRepo().findOneByOrFail({ stripeCustomerId });
        });
    },
};
function createInitialBilling(user, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const stripeCustomerId = yield stripe_helper_1.stripeHelper.getOrCreateCustomer(user, projectId);
        const billing = projectBillingRepo().create({
            id: (0, shared_1.apId)(),
            projectId,
            includedTasks: ee_shared_1.DEFAULT_FREE_PLAN_LIMIT.tasks,
            includedUsers: ee_shared_1.DEFAULT_FREE_PLAN_LIMIT.teamMembers,
            stripeCustomerId,
        });
        return projectBillingRepo().save(billing);
    });
}


/***/ }),
/* 671 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stripeHelper = exports.TASKS_PAYG_PRICE_ID = exports.stripeWebhookSecret = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const stripe_1 = tslib_1.__importDefault(__webpack_require__(672));
const project_service_1 = __webpack_require__(448);
const project_usage_service_1 = __webpack_require__(673);
const project_billing_service_1 = __webpack_require__(670);
exports.stripeWebhookSecret = server_shared_1.system.get(server_shared_1.AppSystemProp.STRIPE_WEBHOOK_SECRET);
exports.TASKS_PAYG_PRICE_ID = (0, ee_shared_1.getTasksPriceId)((_a = server_shared_1.system.get(server_shared_1.AppSystemProp.STRIPE_SECRET_KEY)) !== null && _a !== void 0 ? _a : '');
function getStripe() {
    const edition = server_shared_1.system.getEdition();
    if (edition !== shared_1.ApEdition.CLOUD) {
        return undefined;
    }
    const stripeSecret = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.STRIPE_SECRET_KEY);
    return new stripe_1.default(stripeSecret, {
        apiVersion: '2023-10-16',
    });
}
function getOrCreateCustomer(user, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const edition = server_shared_1.system.getEdition();
        const stripe = getStripe();
        if (edition !== shared_1.ApEdition.CLOUD) {
            return undefined;
        }
        (0, shared_1.assertNotNullOrUndefined)(stripe, 'Stripe is not configured');
        try {
            // Retrieve the customer by their email
            const existingCustomers = yield stripe.customers.list({
                email: user.email,
                limit: 1,
            });
            // If a customer with the email exists, update their details
            if (existingCustomers.data.length > 0) {
                const existingCustomer = existingCustomers.data[0];
                return existingCustomer.id;
            }
            // If no customer with the email exists, create a new customer
            const newCustomer = yield stripe.customers.create({
                email: user.email,
                name: user.firstName + ' ' + user.lastName,
                description: 'User Id: ' + user.id + ' Project Id: ' + projectId,
            });
            return newCustomer.id;
        }
        catch (error) {
            server_shared_1.exceptionHandler.handle(error);
            throw error;
        }
    });
}
function createCheckoutUrl(projectId, customerId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const stripe = exports.stripeHelper.getStripe();
        (0, shared_1.assertNotNullOrUndefined)(stripe, 'Stripe is not configured');
        const project = yield project_service_1.projectService.getOneOrThrow(projectId);
        const startBillingPeriod = project_usage_service_1.projectUsageService.getCurrentingStartPeriod(project.created);
        const session = yield stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [
                {
                    price: exports.TASKS_PAYG_PRICE_ID,
                },
            ],
            subscription_data: {
                billing_cycle_anchor: (0, dayjs_1.default)(startBillingPeriod).add(30, 'day').unix(),
            },
            mode: 'subscription',
            success_url: 'https://cloud.activepieces.com/plans',
            cancel_url: 'https://cloud.activepieces.com/plans',
            customer: customerId,
        });
        return session.url;
    });
}
function createPortalSessionUrl(projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const stripe = exports.stripeHelper.getStripe();
        (0, shared_1.assertNotNullOrUndefined)(stripe, 'Stripe is not configured');
        const projectBilling = yield project_billing_service_1.projectBillingService.getOrCreateForProject(projectId);
        const session = yield stripe.billingPortal.sessions.create({
            customer: projectBilling.stripeCustomerId,
            return_url: 'https://cloud.activepieces.com/plans',
        });
        return session.url;
    });
}
function isPriceForTasks(subscription) {
    return subscription.items.data.some((item) => item.price.id === exports.TASKS_PAYG_PRICE_ID);
}
exports.stripeHelper = {
    createPortalSessionUrl,
    getStripe,
    getOrCreateCustomer,
    createCheckoutUrl,
    isPriceForTasks,
};


/***/ }),
/* 672 */
/***/ ((module) => {

module.exports = require("stripe");

/***/ }),
/* 673 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectUsageService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const redis_connection_1 = __webpack_require__(514);
const project_member_service_1 = __webpack_require__(631);
const dayjs_helper_1 = __webpack_require__(674);
const user_invitation_service_1 = __webpack_require__(630);
const project_service_1 = __webpack_require__(448);
exports.projectUsageService = {
    getUsageForBillingPeriod(projectId, startBillingPeriod) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowTasks = yield getTasksUsage(projectId, getCurrentingStartPeriod(startBillingPeriod));
            const teamMembers = (yield project_member_service_1.projectMemberService.countTeamMembers(projectId)) + (yield user_invitation_service_1.userInvitationsService.countByProjectId(projectId));
            return {
                tasks: flowTasks,
                teamMembers,
            };
        });
    },
    increaseTasks,
    getCurrentingStartPeriod,
    getCurrentingEndPeriod,
};
function getCurrentingStartPeriod(datetime) {
    const thirtyDaysInMs = 30 * 24 * 60 * 60 * 1000;
    const date = (0, dayjs_helper_1.apDayjs)(datetime);
    const currentDate = (0, dayjs_helper_1.apDayjs)();
    const nextResetInMs = (currentDate.diff(date, 'millisecond') % thirtyDaysInMs);
    return currentDate.subtract(nextResetInMs, 'millisecond').toISOString();
}
function getCurrentingEndPeriod(datetime) {
    return (0, dayjs_helper_1.apDayjs)(getCurrentingStartPeriod(datetime)).add(30, 'days').toISOString();
}
function increaseTasks(projectId, incrementBy) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const project = yield project_service_1.projectService.getOneOrThrow(projectId);
        const startBillingPeriod = getCurrentingStartPeriod(project.created);
        return incrementOrCreateRedisRecord(projectId, startBillingPeriod, incrementBy);
    });
}
function incrementOrCreateRedisRecord(projectId, startBillingPeriod, incrementBy) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const environment = server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT);
        if (environment === shared_1.ApEnvironment.TESTING) {
            return 0;
        }
        const key = constructUsageKey(projectId, startBillingPeriod);
        return (0, redis_connection_1.getRedisConnection)().incrby(key, incrementBy);
    });
}
function getTasksUsage(projectId, startBillingPeriod) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const environment = server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT);
        if (environment === shared_1.ApEnvironment.TESTING) {
            return 0;
        }
        const key = constructUsageKey(projectId, startBillingPeriod);
        const value = yield (0, redis_connection_1.getRedisConnection)().get(key);
        return Number(value) || 0;
    });
}
function constructUsageKey(projectId, startBillingPeriod) {
    return `project-usage:${projectId}:${startBillingPeriod}`;
}


/***/ }),
/* 674 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.apDayjs = void 0;
const tslib_1 = __webpack_require__(1);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const duration_1 = tslib_1.__importDefault(__webpack_require__(675));
const timezone_1 = tslib_1.__importDefault(__webpack_require__(195));
const utc_1 = tslib_1.__importDefault(__webpack_require__(196));
dayjs_1.default.extend(utc_1.default);
dayjs_1.default.extend(timezone_1.default);
dayjs_1.default.extend(duration_1.default);
function apDayjs(time = undefined) {
    if (time === undefined) {
        return (0, dayjs_1.default)();
    }
    return (0, dayjs_1.default)(time);
}
exports.apDayjs = apDayjs;


/***/ }),
/* 675 */
/***/ ((module) => {

module.exports = require("dayjs/plugin/duration");

/***/ }),
/* 676 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.otpService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const repo_factory_1 = __webpack_require__(224);
const user_service_1 = __webpack_require__(462);
const email_service_1 = __webpack_require__(611);
const otp_generator_1 = __webpack_require__(677);
const otp_entity_1 = __webpack_require__(242);
const TEN_MINUTES = 10 * 60 * 1000;
const repo = (0, repo_factory_1.repoFactory)(otp_entity_1.OtpEntity);
exports.otpService = {
    createAndSend(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, email, type, }) {
            const user = yield getUser({
                platformId,
                email,
            });
            if (!user) {
                return;
            }
            const existingOtp = yield repo().findOneBy({
                userId: user.id,
                type,
            });
            const otpIsNotExpired = existingOtp && (0, dayjs_1.default)().diff(existingOtp.updated, 'milliseconds') < TEN_MINUTES;
            if (otpIsNotExpired) {
                return;
            }
            const newOtp = {
                id: (0, shared_1.apId)(),
                updated: (0, dayjs_1.default)().toISOString(),
                type,
                userId: user.id,
                value: otp_generator_1.otpGenerator.generate(),
                state: ee_shared_1.OtpState.PENDING,
            };
            yield repo().upsert(newOtp, ['userId', 'type']);
            yield email_service_1.emailService.sendOtp({
                platformId,
                user,
                otp: newOtp.value,
                type: newOtp.type,
            });
        });
    },
    confirm(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ userId, type, value }) {
            const otp = yield repo().findOneByOrFail({
                userId,
                type,
            });
            const otpIsPending = otp.state === ee_shared_1.OtpState.PENDING;
            const otpIsNotExpired = (0, dayjs_1.default)().diff(otp.updated, 'milliseconds') < TEN_MINUTES;
            const otpMatches = otp.value === value;
            const verdict = otpIsNotExpired && otpMatches && otpIsPending;
            if (verdict) {
                yield repo().update(otp.id, {
                    state: ee_shared_1.OtpState.CONFIRMED,
                });
            }
            return verdict;
        });
    },
};
const getUser = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ platformId, email, }) {
    const user = yield user_service_1.userService.getByPlatformAndEmail({
        platformId,
        email,
    });
    return user;
});


/***/ }),
/* 677 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.otpGenerator = void 0;
const node_crypto_1 = __webpack_require__(121);
exports.otpGenerator = {
    generate() {
        return (0, node_crypto_1.randomUUID)();
    },
};


/***/ }),
/* 678 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.referralService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const telemetry_utils_1 = __webpack_require__(576);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const project_billing_service_1 = __webpack_require__(670);
const project_plan_service_1 = __webpack_require__(591);
const referral_entity_1 = __webpack_require__(245);
const referralRepo = (0, repo_factory_1.repoFactory)(referral_entity_1.ReferralEntity);
exports.referralService = {
    add(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ referringUserId, referredUserId, referredUserEmail }) {
            const referringUser = yield user_service_1.userService.getMetaInfo({ id: referringUserId });
            if ((0, shared_1.isNil)(referringUser)) {
                server_shared_1.logger.warn({ name: 'ReferralService#add', referringUserId, referredUserId }, 'Referring user not found');
                return;
            }
            const newReferral = {
                id: (0, shared_1.apId)(),
                referringUserId,
                referringUserEmail: referringUser.email,
                referredUserId,
                referredUserEmail,
            };
            yield referralRepo().save(newReferral);
            telemetry_utils_1.telemetry
                .trackUser(referringUserId, {
                name: shared_1.TelemetryEventName.REFERRAL,
                payload: {
                    referredUserId,
                },
            })
                .catch((e) => server_shared_1.logger.error(e, '[ReferralService#upsert] telemetry.trackUser'));
            yield addExtraTasks(referringUserId);
            yield addExtraTasks(referredUserId);
        });
    },
    list(referringUserId, cursorRequest, limit) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: referral_entity_1.ReferralEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const { data, cursor } = yield paginator.paginate(referralRepo().createQueryBuilder().where({ referringUserId }));
            return pagination_utils_1.paginationHelper.createPage(data, cursor);
        });
    },
};
function addExtraTasks(userId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const referralsCount = yield referralRepo().countBy({
            referringUserId: userId,
        });
        if (referralsCount > 5) {
            return;
        }
        const ownerProject = yield project_service_1.projectService.getUserProjectOrThrow(userId);
        const projectBilling = yield project_billing_service_1.projectBillingService.getOrCreateForProject(ownerProject.id);
        const newBilling = yield project_billing_service_1.projectBillingService.increaseTasks(projectBilling.projectId, 500);
        yield project_plan_service_1.projectLimitsService.getOrCreateDefaultPlan(ownerProject.id, ee_shared_1.DEFAULT_FREE_PLAN_LIMIT);
        yield project_plan_service_1.projectLimitsService.increaseTask(ownerProject.id, 500);
        server_shared_1.logger.info({
            message: 'Added 500 tasks to project',
            projectId: ownerProject.id,
            includedTasks: newBilling.includedTasks,
        });
    });
}


/***/ }),
/* 679 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authenticationHelper = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const authentication_service_hooks_1 = __webpack_require__(636);
const access_token_manager_1 = __webpack_require__(509);
const flag_service_1 = __webpack_require__(578);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const user_invitation_service_1 = __webpack_require__(630);
const project_member_service_1 = __webpack_require__(631);
const platform_project_service_1 = __webpack_require__(680);
function getProjectForUserOrThrow(user) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const invitedProject = yield getProjectMemberOrThrow(user);
        if (!(0, shared_1.isNil)(invitedProject)) {
            return invitedProject;
        }
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
            params: {
                entityType: 'project',
                message: `no projects found for the user=${user.id}`,
            },
        });
    });
}
const getProjectMemberOrThrow = (user) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { platformId } = user;
    (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
    const platformProjects = yield platform_project_service_1.platformProjectService.getAll({
        principalType: shared_1.PrincipalType.USER,
        principalId: user.id,
        platformId,
        cursorRequest: null,
        limit: 1,
    });
    if (platformProjects.data.length === 0) {
        return null;
    }
    return project_service_1.projectService.getOneOrThrow(platformProjects.data[0].id);
});
const populateTokenWithPlatformInfo = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ user, project, }) {
    const platform = yield platform_service_1.platformService.getOneOrThrow(project.platformId);
    const updatedToken = yield access_token_manager_1.accessTokenManager.generateToken({
        id: user.id,
        type: shared_1.PrincipalType.USER,
        projectId: project.id,
        platform: {
            id: platform.id,
        },
    });
    return updatedToken;
});
function autoVerifyUserIfEligible(user) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, shared_1.assertNotNullOrUndefined)(user.platformId, 'platformId');
        const isInvited = yield user_invitation_service_1.userInvitationsService.hasAnyAcceptedInvitations({
            platformId: user.platformId,
            email: user.email,
        });
        if (isInvited) {
            yield user_service_1.userService.verify({
                id: user.id,
            });
            return;
        }
    });
}
function getProjectAndTokenOrThrow(user) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const project = yield getProjectForUserOrThrow(user);
        const projectRole = yield project_member_service_1.projectMemberService.getRole({
            projectId: project.id,
            userId: user.id,
        });
        const token = yield populateTokenWithPlatformInfo({
            user,
            project,
        });
        return {
            project,
            projectRole,
            token,
        };
    });
}
function assertEmailAuthIsEnabled(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, provider, }) {
        if ((0, shared_1.isNil)(platformId)) {
            return;
        }
        const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
        if (!platform.ssoEnabled) {
            return;
        }
        if (provider !== authentication_service_hooks_1.Provider.EMAIL) {
            return;
        }
        if (!platform.emailAuthEnabled) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.EMAIL_AUTH_DISABLED,
                params: {},
            });
        }
    });
}
function assertDomainIsAllowed(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, }) {
        if ((0, shared_1.isNil)(platformId)) {
            return;
        }
        const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
        if (!platform.ssoEnabled) {
            return;
        }
        const emailDomain = email.split('@')[1];
        const isAllowedDomaiin = !platform.enforceAllowedAuthDomains ||
            platform.allowedAuthDomains.includes(emailDomain);
        if (!isAllowedDomaiin) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.DOMAIN_NOT_ALLOWED,
                params: {
                    domain: emailDomain,
                },
            });
        }
    });
}
function assertUserIsInvitedToPlatformOrProject(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, }) {
        const isInvited = yield user_invitation_service_1.userInvitationsService.hasAnyAcceptedInvitations({
            platformId,
            email,
        });
        if (!isInvited) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.INVITATION_ONLY_SIGN_UP,
                params: {},
            });
        }
    });
}
function assertUserIsInvitedAndDomainIsAllowed(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, }) {
        yield assertDomainIsAllowed({ email, platformId });
        const customerPlatformEnabled = !(0, shared_1.isNil)(platformId) && !flag_service_1.flagService.isCloudPlatform(platformId);
        if (customerPlatformEnabled) {
            yield assertUserIsInvitedToPlatformOrProject({ email, platformId });
        }
    });
}
exports.authenticationHelper = {
    getProjectAndTokenOrThrow,
    autoVerifyUserIfEligible,
    assertUserIsInvitedAndDomainIsAllowed,
    assertDomainIsAllowed,
    assertEmailAuthIsEnabled,
};


/***/ }),
/* 680 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformProjectService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const transaction_1 = __webpack_require__(575);
const flag_service_1 = __webpack_require__(578);
const flow_service_1 = __webpack_require__(574);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const project_entity_1 = __webpack_require__(257);
const project_service_1 = __webpack_require__(448);
const project_usage_service_1 = __webpack_require__(673);
const user_service_1 = __webpack_require__(462);
const project_billing_service_1 = __webpack_require__(670);
const project_member_entity_1 = __webpack_require__(243);
const project_plan_service_1 = __webpack_require__(591);
const platform_project_side_effects_1 = __webpack_require__(681);
const projectRepo = (0, repo_factory_1.repoFactory)(project_entity_1.ProjectEntity);
const projectMemberRepo = (0, repo_factory_1.repoFactory)(project_member_entity_1.ProjectMemberEntity);
exports.platformProjectService = {
    getAll(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { cursorRequest, limit } = params;
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: project_entity_1.ProjectEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const filters = yield createFilters(params);
            const queryBuilder = projectRepo()
                .createQueryBuilder('project')
                .leftJoinAndMapOne('project.plan', 'project_plan', 'project_plan', 'project.id = "project_plan"."projectId"')
                .where(filters);
            const { data, cursor } = yield paginator.paginate(queryBuilder);
            const projects = yield Promise.all(data.map(enrichWithUsageAndPlan));
            return pagination_utils_1.paginationHelper.createPage(projects, cursor);
        });
    },
    update(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, request, }) {
            yield project_service_1.projectService.update(projectId, request);
            if (!(0, shared_1.isNil)(request.plan)) {
                const isSubscribed = yield isSubscribedInStripe(projectId);
                const project = yield project_service_1.projectService.getOneOrThrow(projectId);
                const isCustomerProject = isCustomerPlatform(project.platformId);
                if (isSubscribed || isCustomerProject) {
                    const newTasks = getTasksLimit(isCustomerProject, request.plan.tasks);
                    yield project_plan_service_1.projectLimitsService.upsert(Object.assign(Object.assign(Object.assign({}, (0, shared_1.spreadIfDefined)('pieces', request.plan.pieces)), (0, shared_1.spreadIfDefined)('piecesFilterType', request.plan.piecesFilterType)), (0, shared_1.spreadIfDefined)('tasks', newTasks)), projectId);
                }
            }
            return this.getWithPlanAndUsageOrThrow(projectId);
        });
    },
    getWithPlanAndUsageOrThrow(projectId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return enrichWithUsageAndPlan(yield projectRepo().findOneByOrFail({
                id: projectId,
                deleted: (0, typeorm_1.IsNull)(),
            }));
        });
    },
    softDelete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, platformId }) {
            yield (0, transaction_1.transaction)((entityManager) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield assertAllProjectFlowsAreDisabled({
                    projectId: id,
                    entityManager,
                });
                yield softDeleteOrThrow({
                    id,
                    platformId,
                    entityManager,
                });
                yield platform_project_side_effects_1.platformProjectSideEffects.onSoftDelete({
                    id,
                });
            }));
        });
    },
    hardDelete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            yield projectRepo().delete({
                id,
            });
        });
    },
};
function getTasksLimit(isCustomerPlatform, limit) {
    return isCustomerPlatform ? limit : Math.min(limit !== null && limit !== void 0 ? limit : ee_shared_1.MAXIMUM_ALLOWED_TASKS, ee_shared_1.MAXIMUM_ALLOWED_TASKS);
}
function isSubscribedInStripe(projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const isCloud = server_shared_1.system.getEdition() === shared_1.ApEdition.CLOUD;
        if (!isCloud) {
            return false;
        }
        const status = yield project_billing_service_1.projectBillingService.getOrCreateForProject(projectId);
        return status.subscriptionStatus === ee_shared_1.ApSubscriptionStatus.ACTIVE;
    });
}
function isCustomerPlatform(platformId) {
    if ((0, shared_1.isNil)(platformId)) {
        return true;
    }
    return !flag_service_1.flagService.isCloudPlatform(platformId);
}
function createFilters(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, principalType, principalId, externalId }) {
        const commonFilter = Object.assign(Object.assign({ deleted: (0, typeorm_1.IsNull)() }, (0, shared_1.spreadIfDefined)('platformId', platformId)), (0, shared_1.spreadIfDefined)('externalId', externalId));
        switch (principalType) {
            case shared_1.PrincipalType.SERVICE: {
                return commonFilter;
            }
            case shared_1.PrincipalType.USER: {
                const user = yield user_service_1.userService.getMetaInfo({ id: principalId });
                (0, shared_1.assertNotNullOrUndefined)(user, 'User not found');
                if (user.platformRole === shared_1.PlatformRole.ADMIN) {
                    return commonFilter;
                }
                else {
                    const ids = yield getIdsOfProjects({
                        platformId,
                        userId: user.id,
                    });
                    return [
                        Object.assign(Object.assign({}, commonFilter), { id: (0, typeorm_1.In)(ids) }),
                        Object.assign(Object.assign({}, commonFilter), { ownerId: (0, typeorm_1.Equal)(user.id) }),
                    ];
                }
            }
            default: {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.VALIDATION,
                    params: {
                        message: 'INVALID_PRINCIPAL_TYPE',
                    },
                });
            }
        }
    });
}
function getIdsOfProjects(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, userId }) {
        const members = yield projectMemberRepo().findBy({
            userId,
            platformId: (0, typeorm_1.Equal)(platformId),
        });
        return members.map((member) => member.projectId);
    });
}
function enrichWithUsageAndPlan(project) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return Object.assign(Object.assign({}, project), { plan: yield project_plan_service_1.projectLimitsService.getOrCreateDefaultPlan(project.id, ee_shared_1.DEFAULT_FREE_PLAN_LIMIT), usage: yield project_usage_service_1.projectUsageService.getUsageForBillingPeriod(project.id, project_usage_service_1.projectUsageService.getCurrentingStartPeriod(project.created)) });
    });
}
const assertAllProjectFlowsAreDisabled = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { projectId, entityManager } = params;
    const projectHasEnabledFlows = yield flow_service_1.flowService.existsByProjectAndStatus({
        projectId,
        status: shared_1.FlowStatus.ENABLED,
        entityManager,
    });
    if (projectHasEnabledFlows) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.VALIDATION,
            params: {
                message: 'PROJECT_HAS_ENABLED_FLOWS',
            },
        });
    }
});
const softDeleteOrThrow = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ id, platformId, entityManager, }) {
    const deleteResult = yield projectRepo(entityManager).softDelete({
        id,
        platformId,
        deleted: (0, typeorm_1.IsNull)(),
    });
    if (deleteResult.affected !== 1) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
            params: {
                entityId: id,
                entityType: 'project',
            },
        });
    }
});


/***/ }),
/* 681 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformProjectSideEffects = void 0;
const tslib_1 = __webpack_require__(1);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
exports.platformProjectSideEffects = {
    onSoftDelete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            yield system_jobs_1.systemJobsSchedule.upsertJob({
                job: {
                    name: common_1.SystemJobName.HARD_DELETE_PROJECT,
                    data: {
                        projectId: id,
                    },
                },
                schedule: {
                    type: 'one-time',
                    date: (0, dayjs_1.default)().add(30, 'days'),
                },
            });
        });
    },
};


/***/ }),
/* 682 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enterpriseAuthenticationServiceHooks = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const user_invitation_service_1 = __webpack_require__(630);
const license_keys_service_1 = __webpack_require__(683);
const authentication_helper_1 = __webpack_require__(679);
const DEFAULT_PLATFORM_NAME = 'Activepieces';
exports.enterpriseAuthenticationServiceHooks = {
    preSignIn(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, provider }) {
            yield authentication_helper_1.authenticationHelper.assertEmailAuthIsEnabled({
                platformId,
                provider,
            });
            yield authentication_helper_1.authenticationHelper.assertDomainIsAllowed({ email, platformId });
        });
    },
    preSignUp(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ email, platformId, provider }) {
            yield authentication_helper_1.authenticationHelper.assertEmailAuthIsEnabled({
                platformId,
                provider,
            });
            yield authentication_helper_1.authenticationHelper.assertUserIsInvitedAndDomainIsAllowed({
                email,
                platformId,
            });
        });
    },
    postSignUp(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user }) {
            const platformCreated = yield platform_service_1.platformService.hasAnyPlatforms();
            if (platformCreated) {
                yield authentication_helper_1.authenticationHelper.autoVerifyUserIfEligible(user);
                yield user_invitation_service_1.userInvitationsService.provisionUserInvitation({
                    email: user.email,
                    platformId: user.platformId,
                });
                const updatedUser = yield user_service_1.userService.getOneOrFail({ id: user.id });
                const result = yield authentication_helper_1.authenticationHelper.getProjectAndTokenOrThrow(user);
                return Object.assign({ user: updatedUser }, result);
            }
            const platform = yield platform_service_1.platformService.create({
                ownerId: user.id,
                name: DEFAULT_PLATFORM_NAME,
            });
            yield project_service_1.projectService.create({
                displayName: `${user.firstName}'s Project`,
                ownerId: user.id,
                platformId: platform.id,
            });
            yield license_keys_service_1.licenseKeysService.verifyKeyAndApplyLimits({
                platformId: platform.id,
                license: server_shared_1.system.get(server_shared_1.AppSystemProp.LICENSE_KEY),
            });
            yield user_invitation_service_1.userInvitationsService.provisionUserInvitation({
                email: user.email,
                platformId: user.platformId,
            });
            yield user_service_1.userService.verify({ id: user.id });
            const updatedUser = yield user_service_1.userService.getOneOrFail({ id: user.id });
            const result = yield authentication_helper_1.authenticationHelper.getProjectAndTokenOrThrow(updatedUser);
            return Object.assign({ user: updatedUser }, result);
        });
    },
    postSignIn(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ user }) {
            const result = yield authentication_helper_1.authenticationHelper.getProjectAndTokenOrThrow(user);
            return Object.assign({ user }, result);
        });
    },
};


/***/ }),
/* 683 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.licenseKeysService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const http_status_codes_1 = __webpack_require__(481);
const flag_service_1 = __webpack_require__(578);
const telemetry_utils_1 = __webpack_require__(576);
const piece_metadata_service_1 = __webpack_require__(222);
const platform_service_1 = __webpack_require__(459);
const user_service_1 = __webpack_require__(462);
const secretManagerLicenseKeysRoute = 'https://secrets.activepieces.com/license-keys';
const handleUnexpectedSecretsManagerError = (message) => {
    server_shared_1.logger.error(`[ERROR]: Unexpected error from secret manager: ${message}`);
    throw new Error(message);
};
exports.licenseKeysService = {
    requestTrial(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(secretManagerLicenseKeysRoute, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request),
            });
            if (response.status === http_status_codes_1.StatusCodes.CONFLICT) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.EMAIL_ALREADY_HAS_ACTIVATION_KEY,
                    params: request,
                });
            }
            if (!response.ok) {
                const errorMessage = JSON.stringify(yield response.json());
                handleUnexpectedSecretsManagerError(errorMessage);
            }
        });
    },
    activateKey(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(`${secretManagerLicenseKeysRoute}/activate`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request),
            });
            if (response.status === http_status_codes_1.StatusCodes.CONFLICT) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ACTIVATION_KEY_ALREADY_ACTIVATED,
                    params: request,
                });
            }
            if (response.status === http_status_codes_1.StatusCodes.NOT_FOUND) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ACTIVATION_KEY_NOT_FOUND,
                    params: request,
                });
            }
            if (!response.ok) {
                const errorMessage = JSON.stringify(yield response.json());
                handleUnexpectedSecretsManagerError(errorMessage);
            }
            (0, server_shared_1.rejectedPromiseHandler)(telemetry_utils_1.telemetry.trackPlatform(request.platformId, {
                name: shared_1.TelemetryEventName.KEY_ACTIVIATED,
                payload: {
                    date: (0, dayjs_1.default)().toISOString(),
                    key: request.key,
                },
            }));
        });
    },
    getKey(license) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if ((0, shared_1.isNil)(license)) {
                return null;
            }
            const response = yield fetch(`${secretManagerLicenseKeysRoute}/${license}`);
            if (response.status === http_status_codes_1.StatusCodes.NOT_FOUND) {
                return null;
            }
            if (!response.ok) {
                const errorMessage = JSON.stringify(yield response.json());
                handleUnexpectedSecretsManagerError(errorMessage);
            }
            return response.json();
        });
    },
    verifyKeyAndApplyLimits(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, license }) {
            if ((0, shared_1.isNil)(license)) {
                yield downgradeToFreePlan(platformId);
                return;
            }
            try {
                yield this.activateKey({ key: license, platformId });
            }
            catch (e) {
                // Ignore
            }
            try {
                const key = yield this.getKey(license);
                const isExpired = (0, shared_1.isNil)(key) || (0, dayjs_1.default)(key.expiresAt).isBefore((0, dayjs_1.default)());
                if (isExpired) {
                    yield downgradeToFreePlan(platformId);
                    return;
                }
                yield platform_service_1.platformService.update({
                    id: platformId,
                    ssoEnabled: key.ssoEnabled,
                    gitSyncEnabled: key.gitSyncEnabled,
                    showPoweredBy: key.showPoweredBy,
                    embeddingEnabled: key.embeddingEnabled,
                    auditLogEnabled: key.auditLogEnabled,
                    customAppearanceEnabled: key.customAppearanceEnabled,
                    manageProjectsEnabled: key.manageProjectsEnabled,
                    managePiecesEnabled: key.managePiecesEnabled,
                    manageTemplatesEnabled: key.manageTemplatesEnabled,
                    apiKeysEnabled: key.apiKeysEnabled,
                    customDomainsEnabled: key.customDomainsEnabled,
                    projectRolesEnabled: key.projectRolesEnabled,
                    flowIssuesEnabled: key.flowIssuesEnabled,
                    alertsEnabled: key.alertsEnabled,
                    premiumPieces: key.premiumPieces,
                });
            }
            catch (e) {
                server_shared_1.logger.error(`[ERROR]: Failed to verify license key: ${e}`);
            }
        });
    },
};
const deactivatePlatformUsersOtherThanAdmin = (platformId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { data } = yield user_service_1.userService.list({
        platformId,
    });
    const users = data.filter(f => f.platformRole !== shared_1.PlatformRole.ADMIN).map(u => {
        server_shared_1.logger.debug(`Deactivating user ${u.email}`);
        return user_service_1.userService.update({
            id: u.id,
            status: shared_1.UserStatus.INACTIVE,
            platformId,
            platformRole: u.platformRole,
        });
    });
    yield Promise.all(users);
});
const deletePrivatePieces = (platformId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const latestRelease = yield flag_service_1.flagService.getCurrentRelease();
    const pieces = yield piece_metadata_service_1.pieceMetadataService.list({
        edition: shared_1.ApEdition.ENTERPRISE,
        includeHidden: true,
        release: latestRelease,
        platformId,
    });
    const piecesToDelete = pieces.filter((piece) => piece.packageType === shared_1.PackageType.ARCHIVE && piece.id).map((piece) => piece_metadata_service_1.pieceMetadataService.delete({
        id: piece.id,
        projectId: piece.projectId,
    }));
    yield Promise.all(piecesToDelete);
});
function downgradeToFreePlan(platformId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield platform_service_1.platformService.update(Object.assign({ id: platformId }, turnedOffFeatures));
        yield deactivatePlatformUsersOtherThanAdmin(platformId);
        yield deletePrivatePieces(platformId);
    });
}
const turnedOffFeatures = {
    ssoEnabled: false,
    gitSyncEnabled: false,
    showPoweredBy: false,
    embeddingEnabled: false,
    auditLogEnabled: false,
    customAppearanceEnabled: false,
    manageProjectsEnabled: false,
    managePiecesEnabled: false,
    manageTemplatesEnabled: false,
    apiKeysEnabled: false,
    customDomainsEnabled: false,
    projectRolesEnabled: false,
    flowIssuesEnabled: false,
    alertsEnabled: false,
    premiumPieces: [],
};


/***/ }),
/* 684 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enterpriseLocalAuthnModule = void 0;
const tslib_1 = __webpack_require__(1);
const enterprise_local_authn_controller_1 = __webpack_require__(685);
const enterpriseLocalAuthnModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(enterprise_local_authn_controller_1.enterpriseLocalAuthnController, {
        prefix: '/v1/authn/local',
    });
});
exports.enterpriseLocalAuthnModule = enterpriseLocalAuthnModule;


/***/ }),
/* 685 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enterpriseLocalAuthnController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const application_events_1 = __webpack_require__(517);
const enterprise_local_authn_service_1 = __webpack_require__(686);
const enterpriseLocalAuthnController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/verify-email', VerifyEmailRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        application_events_1.eventsHooks.get().sendUserEvent(req, {
            action: ee_shared_1.ApplicationEventName.USER_EMAIL_VERIFIED,
            data: {},
        });
        yield enterprise_local_authn_service_1.enterpriseLocalAuthnService.verifyEmail(req.body);
    }));
    app.post('/reset-password', ResetPasswordRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        application_events_1.eventsHooks.get().sendUserEvent(req, {
            action: ee_shared_1.ApplicationEventName.USER_PASSWORD_RESET,
            data: {},
        });
        yield enterprise_local_authn_service_1.enterpriseLocalAuthnService.resetPassword(req.body);
    }));
});
exports.enterpriseLocalAuthnController = enterpriseLocalAuthnController;
const VerifyEmailRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: ee_shared_1.VerifyEmailRequestBody,
    },
};
const ResetPasswordRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: ee_shared_1.ResetPasswordRequestBody,
    },
};


/***/ }),
/* 686 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enterpriseLocalAuthnService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const user_service_1 = __webpack_require__(462);
const otp_service_1 = __webpack_require__(676);
exports.enterpriseLocalAuthnService = {
    verifyEmail(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ userId, otp }) {
            yield confirmOtp({
                userId,
                otp,
                otpType: ee_shared_1.OtpType.EMAIL_VERIFICATION,
            });
            yield user_service_1.userService.verify({ id: userId });
        });
    },
    resetPassword(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ userId, otp, newPassword, }) {
            yield confirmOtp({
                userId,
                otp,
                otpType: ee_shared_1.OtpType.PASSWORD_RESET,
            });
            yield user_service_1.userService.updatePassword({
                id: userId,
                newPassword,
            });
        });
    },
};
const confirmOtp = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ userId, otp, otpType, }) {
    const isOtpValid = yield otp_service_1.otpService.confirm({
        userId,
        type: otpType,
        value: otp,
    });
    if (!isOtpValid) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_OTP,
            params: {},
        });
    }
});


/***/ }),
/* 687 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.federatedAuthModule = void 0;
const tslib_1 = __webpack_require__(1);
const federated_authn_controller_1 = __webpack_require__(688);
const federatedAuthModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(federated_authn_controller_1.federatedAuthnController, {
        prefix: '/v1/authn/federated',
    });
});
exports.federatedAuthModule = federatedAuthModule;


/***/ }),
/* 688 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.federatedAuthnController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const application_events_1 = __webpack_require__(517);
const platform_utils_1 = __webpack_require__(634);
const federated_authn_service_1 = __webpack_require__(689);
const federatedAuthnController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/login', LoginRequestSchema, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = yield (0, platform_utils_1.resolvePlatformIdForRequest)(req);
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'Platform id is not defined');
        return federated_authn_service_1.federatedAuthnService.login({
            providerName: req.query.providerName,
            platformId,
            hostname: req.hostname,
        });
    }));
    app.post('/claim', ClaimTokenRequestSchema, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = yield (0, platform_utils_1.resolvePlatformIdForRequest)(req);
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'Platform id is not defined');
        const response = yield federated_authn_service_1.federatedAuthnService.claim({
            platformId,
            hostname: req.hostname,
            providerName: req.body.providerName,
            code: req.body.code,
        });
        application_events_1.eventsHooks.get().sendUserEvent(req, {
            action: ee_shared_1.ApplicationEventName.USER_SIGNED_UP,
            data: {
                source: 'sso',
            },
        });
        return response;
    }));
});
exports.federatedAuthnController = federatedAuthnController;
const LoginRequestSchema = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        querystring: type_provider_typebox_1.Type.Object({
            providerName: type_provider_typebox_1.Type.Enum(shared_1.ThirdPartyAuthnProviderEnum),
        }),
    },
};
const ClaimTokenRequestSchema = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: shared_1.ClaimTokenRequest,
    },
};


/***/ }),
/* 689 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.federatedAuthnService = void 0;
const tslib_1 = __webpack_require__(1);
const authentication_service_1 = __webpack_require__(635);
const platform_utils_1 = __webpack_require__(634);
const platform_service_1 = __webpack_require__(459);
const authn_provider_1 = __webpack_require__(690);
exports.federatedAuthnService = {
    login(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ providerName, platformId, hostname, }) {
            const provider = authn_provider_1.providers[providerName];
            const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
            const loginUrl = yield provider.getLoginUrl(hostname, platform);
            return {
                loginUrl,
            };
        });
    },
    claim(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ hostname, platformId, providerName, code, }) {
            var _b;
            const provider = authn_provider_1.providers[providerName];
            const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
            const idToken = yield provider.authenticate(hostname, platform, code);
            const platformIdFromEmail = (_b = (yield (0, platform_utils_1.resolvePlatformIdFromEmail)(idToken.email))) !== null && _b !== void 0 ? _b : platformId;
            return authentication_service_1.authenticationService.federatedAuthn({
                email: idToken.email,
                verified: true,
                firstName: idToken.firstName,
                lastName: idToken.lastName,
                platformId: platformIdFromEmail,
            });
        });
    },
};


/***/ }),
/* 690 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.providers = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const github_authn_provider_1 = __webpack_require__(691);
const google_authn_provider_1 = __webpack_require__(692);
const emptyProvider = {
    getLoginUrl: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        throw new Error('No provider configured');
    }),
    authenticate: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        throw new Error('No provider configured');
    }),
};
exports.providers = {
    [shared_1.ThirdPartyAuthnProviderEnum.GOOGLE]: google_authn_provider_1.googleAuthnProvider,
    [shared_1.ThirdPartyAuthnProviderEnum.GITHUB]: github_authn_provider_1.gitHubAuthnProvider,
    [shared_1.ThirdPartyAuthnProviderEnum.SAML]: emptyProvider,
};


/***/ }),
/* 691 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gitHubAuthnProvider = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const flag_service_1 = __webpack_require__(578);
function getClientIdAndSecret(platform) {
    const clientInformation = platform.federatedAuthProviders.github;
    (0, shared_1.assertNotNullOrUndefined)(clientInformation, 'GitHub information is not configured for this platform');
    return {
        clientId: clientInformation.clientId,
        clientSecret: clientInformation.clientSecret,
    };
}
exports.gitHubAuthnProvider = {
    getLoginUrl(hostname, platform) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { clientId } = getClientIdAndSecret(platform);
            const loginUrl = new URL('https://github.com/login/oauth/authorize');
            loginUrl.searchParams.set('client_id', clientId);
            loginUrl.searchParams.set('redirect_uri', flag_service_1.flagService.getThirdPartyRedirectUrl(platform.id, hostname));
            loginUrl.searchParams.set('scope', 'user:email');
            return loginUrl.href;
        });
    },
    authenticate(hostname, platform, authorizationCode) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { clientId, clientSecret } = getClientIdAndSecret(platform);
            const githubAccessToken = yield getGitHubAccessToken(platform, hostname, clientId, clientSecret, authorizationCode);
            return getGitHubUserInfo(githubAccessToken);
        });
    },
};
const getGitHubAccessToken = (platform, hostname, clientId, clientSecret, authorizationCode) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const response = yield fetch('https://github.com/login/oauth/access_token', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
            client_id: clientId,
            client_secret: clientSecret,
            code: authorizationCode,
            redirect_uri: flag_service_1.flagService.getThirdPartyRedirectUrl(platform.id, hostname),
        }),
    });
    if (!response.ok) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_CREDENTIALS,
            params: null,
        });
    }
    const responseFormData = yield response.formData();
    const accessToken = (_a = responseFormData.get('access_token')) === null || _a === void 0 ? void 0 : _a.toString();
    if ((0, shared_1.isNil)(accessToken)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_CREDENTIALS,
            params: null,
        });
    }
    return accessToken;
});
const getGitHubUserInfo = (gitHubAccessToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch('https://api.github.com/user', {
        headers: {
            Accept: 'application/vnd.github+json',
            Authorization: `token ${gitHubAccessToken}`,
            'X-GitHub-Api-Version': '2022-11-28',
        },
    });
    if (!response.ok) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_CREDENTIALS,
            params: null,
        });
    }
    const { name, login } = yield response.json();
    return {
        firstName: name !== null && name !== void 0 ? name : login,
        lastName: '',
        email: yield getGitHubUserEmail(gitHubAccessToken),
    };
});
const getGitHubUserEmail = (gitHubAccessToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _b;
    const response = yield fetch('https://api.github.com/user/emails', {
        headers: {
            Accept: 'application/vnd.github+json',
            Authorization: `token ${gitHubAccessToken}`,
            'X-GitHub-Api-Version': '2022-11-28',
        },
    });
    if (!response.ok) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_CREDENTIALS,
            params: null,
        });
    }
    const emails = yield response.json();
    const email = (_b = emails.find((email) => email.primary && email.verified)) === null || _b === void 0 ? void 0 : _b.email;
    if (!email) {
        throw new Error('Can\'t find email for the github account');
    }
    return email;
});


/***/ }),
/* 692 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.googleAuthnProvider = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const jwks_rsa_1 = tslib_1.__importDefault(__webpack_require__(693));
const flag_service_1 = __webpack_require__(578);
const jwt_utils_1 = __webpack_require__(510);
const JWKS_URI = 'https://www.googleapis.com/oauth2/v3/certs';
const keyLoader = (0, jwks_rsa_1.default)({
    rateLimit: true,
    cache: true,
    jwksUri: JWKS_URI,
});
function getClientIdAndSecret(platform) {
    const clientInformation = platform.federatedAuthProviders.google;
    (0, shared_1.assertNotNullOrUndefined)(clientInformation, 'Google information is not configured for this platform');
    return {
        clientId: clientInformation.clientId,
        clientSecret: clientInformation.clientSecret,
    };
}
exports.googleAuthnProvider = {
    getLoginUrl(hostname, platform) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { clientId } = getClientIdAndSecret(platform);
            const loginUrl = new URL('https://accounts.google.com/o/oauth2/v2/auth');
            loginUrl.searchParams.set('client_id', clientId);
            loginUrl.searchParams.set('redirect_uri', flag_service_1.flagService.getThirdPartyRedirectUrl(platform.id, hostname));
            loginUrl.searchParams.set('scope', 'email profile');
            loginUrl.searchParams.set('response_type', 'code');
            return loginUrl.href;
        });
    },
    authenticate(hostname, platform, authorizationCode) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { clientId, clientSecret } = getClientIdAndSecret(platform);
            const idToken = yield exchangeCodeForIdToken(platform.id, hostname, clientId, clientSecret, authorizationCode);
            return verifyIdToken(clientId, idToken);
        });
    },
};
const exchangeCodeForIdToken = (platformId, hostName, clientId, clientSecret, code) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch('https://oauth2.googleapis.com/token', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
            code,
            client_id: clientId,
            client_secret: clientSecret,
            redirect_uri: flag_service_1.flagService.getThirdPartyRedirectUrl(platformId, hostName),
            grant_type: 'authorization_code',
        }),
    });
    const { id_token: idToken } = yield response.json();
    return idToken;
});
const verifyIdToken = (clientId, idToken) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { header } = jwt_utils_1.jwtUtils.decode({ jwt: idToken });
    const signingKey = yield keyLoader.getSigningKey(header.kid);
    const publicKey = signingKey.getPublicKey();
    const payload = yield jwt_utils_1.jwtUtils.decodeAndVerify({
        jwt: idToken,
        key: publicKey,
        issuer: ['accounts.google.com', 'https://accounts.google.com'],
        algorithm: jwt_utils_1.JwtSignAlgorithm.RS256,
        audience: clientId,
    });
    (0, shared_1.assertNotEqual)(payload.email_verified, false, 'payload.email_verified', 'Email is not verified');
    return {
        email: payload.email,
        firstName: payload.given_name,
        lastName: payload.family_name,
    };
});


/***/ }),
/* 693 */
/***/ ((module) => {

module.exports = require("jwks-rsa");

/***/ }),
/* 694 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertRoleHasPermission = exports.assertUserHasPermissionToFlow = exports.rbacMiddleware = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const project_member_service_1 = __webpack_require__(631);
const EDITION_IS_COMMUNITY = server_shared_1.system.getEdition() === shared_1.ApEdition.COMMUNITY;
const rbacMiddleware = (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (ignoreRequest(req)) {
        return;
    }
    yield (0, exports.assertRoleHasPermission)(req.principal, req.routeConfig.permission);
});
exports.rbacMiddleware = rbacMiddleware;
function assertUserHasPermissionToFlow(principal, operationType) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const edition = server_shared_1.system.getEdition();
        if (![shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE].includes(edition)) {
            return;
        }
        switch (operationType) {
            case shared_1.FlowOperationType.LOCK_AND_PUBLISH:
            case shared_1.FlowOperationType.CHANGE_STATUS: {
                yield (0, exports.assertRoleHasPermission)(principal, shared_1.Permission.UPDATE_FLOW_STATUS);
                break;
            }
            case shared_1.FlowOperationType.ADD_ACTION:
            case shared_1.FlowOperationType.UPDATE_ACTION:
            case shared_1.FlowOperationType.DELETE_ACTION:
            case shared_1.FlowOperationType.LOCK_FLOW:
            case shared_1.FlowOperationType.CHANGE_FOLDER:
            case shared_1.FlowOperationType.CHANGE_NAME:
            case shared_1.FlowOperationType.MOVE_ACTION:
            case shared_1.FlowOperationType.IMPORT_FLOW:
            case shared_1.FlowOperationType.UPDATE_TRIGGER:
            case shared_1.FlowOperationType.DUPLICATE_ACTION:
            case shared_1.FlowOperationType.USE_AS_DRAFT: {
                yield (0, exports.assertRoleHasPermission)(principal, shared_1.Permission.WRITE_FLOW);
                break;
            }
        }
    });
}
exports.assertUserHasPermissionToFlow = assertUserHasPermissionToFlow;
const assertRoleHasPermission = (principal, permission) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (principal.type === shared_1.PrincipalType.SERVICE) {
        return;
    }
    const principalRole = yield getPrincipalRoleOrThrow(principal);
    const access = grantAccess({
        principalRole,
        routePermission: permission,
    });
    if (!access) {
        throwPermissionDenied(principalRole, principal, permission);
    }
});
exports.assertRoleHasPermission = assertRoleHasPermission;
const ignoreRequest = (req) => {
    if (EDITION_IS_COMMUNITY) {
        return true;
    }
    const ignoredPrefixes = ['/redirect', '/ui', '/v1/project-members/accept'];
    if (ignoredPrefixes.some(p => req.url.startsWith(p))) {
        return true;
    }
    if (req.principal.type === shared_1.PrincipalType.SERVICE) {
        return true;
    }
    return req.routeConfig.permission === undefined;
};
const getPrincipalRoleOrThrow = (principal) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { id: userId, projectId } = principal;
    const role = yield project_member_service_1.projectMemberService.getRole({
        projectId,
        userId,
    });
    if ((0, shared_1.isNil)(role)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.AUTHORIZATION,
            params: {
                message: 'No role found for the user',
                userId,
                projectId,
            },
        });
    }
    return role;
});
const grantAccess = ({ principalRole, routePermission }) => {
    if ((0, shared_1.isNil)(routePermission)) {
        return true;
    }
    const principalPermissions = ee_shared_1.rolePermissions[principalRole];
    return principalPermissions.includes(routePermission);
};
const throwPermissionDenied = (role, principal, permission) => {
    throw new shared_1.ActivepiecesError({
        code: shared_1.ErrorCode.PERMISSION_DENIED,
        params: {
            userId: principal.id,
            projectId: principal.projectId,
            role,
            permission,
        },
    });
};


/***/ }),
/* 695 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authnSsoSamlModule = void 0;
const tslib_1 = __webpack_require__(1);
const authn_sso_saml_controller_1 = __webpack_require__(696);
const authnSsoSamlModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(authn_sso_saml_controller_1.authnSsoSamlController, { prefix: '/v1/authn/saml' });
});
exports.authnSsoSamlModule = authnSsoSamlModule;


/***/ }),
/* 696 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authnSsoSamlController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const platform_utils_1 = __webpack_require__(634);
const platform_service_1 = __webpack_require__(459);
const authentication_helper_1 = __webpack_require__(679);
const authn_sso_saml_service_1 = __webpack_require__(697);
const authnSsoSamlController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/login', LoginRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { saml, platformId } = yield getSamlConfigOrThrow(req);
        const loginResponse = yield authn_sso_saml_service_1.authnSsoSamlService.login(platformId, saml);
        return res.redirect(loginResponse.redirectUrl);
    }));
    app.post('/acs', AcsRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { saml, platformId } = yield getSamlConfigOrThrow(req);
        const user = yield authn_sso_saml_service_1.authnSsoSamlService.acs(platformId, saml, {
            body: req.body,
            query: req.query,
        });
        const { token } = yield authentication_helper_1.authenticationHelper.getProjectAndTokenOrThrow(user);
        const url = new URL('/authenticate', `${req.protocol}://${req.hostname}`);
        url.searchParams.append('token', token);
        return res.redirect(url.toString());
    }));
});
exports.authnSsoSamlController = authnSsoSamlController;
function getSamlConfigOrThrow(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const platformId = yield (0, platform_utils_1.resolvePlatformIdForRequest)(request);
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'Platform ID is required for SAML authentication');
        const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
        if (!platform.ssoEnabled) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.FEATURE_DISABLED,
                params: {
                    message: 'Feature is disabled',
                },
            });
        }
        const saml = platform.federatedAuthProviders.saml;
        (0, shared_1.assertNotNullOrUndefined)(saml, 'SAML IDP metadata is not configured for this platform');
        return {
            saml,
            platformId,
        };
    });
}
const AcsRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: type_provider_typebox_1.Type.Record(type_provider_typebox_1.Type.String(), type_provider_typebox_1.Type.Unknown()),
        querystring: type_provider_typebox_1.Type.Record(type_provider_typebox_1.Type.String(), type_provider_typebox_1.Type.Unknown()),
    },
};
const LoginRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
};


/***/ }),
/* 697 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authnSsoSamlService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const user_service_1 = __webpack_require__(462);
const saml_client_1 = __webpack_require__(698);
exports.authnSsoSamlService = {
    login(platformId, samlProvider) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const client = yield (0, saml_client_1.createSamlClient)(platformId, samlProvider);
            const redirectUrl = client.getLoginUrl();
            return {
                redirectUrl,
            };
        });
    },
    acs(platformId, samlProvider, idpLoginResponse) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const client = yield (0, saml_client_1.createSamlClient)(platformId, samlProvider);
            const attributes = yield client.parseAndValidateLoginResponse(idpLoginResponse);
            return getOrCreateUser(platformId, attributes);
        });
    },
};
const getOrCreateUser = (platformId, attributes) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const email = attributes.email;
    const existingUser = yield user_service_1.userService.getByPlatformAndEmail({
        platformId,
        email,
    });
    if (!(0, shared_1.isNil)(existingUser)) {
        return existingUser;
    }
    return user_service_1.userService.create({
        email,
        firstName: attributes.firstName,
        lastName: attributes.lastName,
        password: yield server_shared_1.cryptoUtils.generateRandomPassword(),
        trackEvents: true,
        newsLetter: false,
        verified: true,
        platformId,
        platformRole: shared_1.PlatformRole.MEMBER,
    });
});


/***/ }),
/* 698 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createSamlClient = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const validator = tslib_1.__importStar(__webpack_require__(699));
const typebox_1 = __webpack_require__(10);
const compiler_1 = __webpack_require__(73);
const saml = tslib_1.__importStar(__webpack_require__(700));
const custom_domain_service_1 = __webpack_require__(614);
const samlResponseValidator = compiler_1.TypeCompiler.Compile(typebox_1.Type.Object({
    email: typebox_1.Type.String(),
    firstName: typebox_1.Type.String(),
    lastName: typebox_1.Type.String(),
}));
class SamlClient {
    constructor(idp, sp) {
        this.idp = idp;
        this.sp = sp;
    }
    getLoginUrl() {
        const loginRequest = this.sp.createLoginRequest(this.idp, SamlClient.LOGIN_REQUEST_BINDING);
        return loginRequest.context;
    }
    parseAndValidateLoginResponse(idpLoginResponse) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const loginResult = yield this.sp.parseLoginResponse(this.idp, SamlClient.LOGIN_RESPONSE_BINDING, idpLoginResponse);
            const atts = loginResult.extract.attributes;
            if (!samlResponseValidator.Check(atts)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_SAML_RESPONSE,
                    params: {
                        message: 'Invalid SAML response, It should contain these firstName, lastName, email fields.',
                    },
                });
            }
            return atts;
        });
    }
}
SamlClient.LOGIN_REQUEST_BINDING = 'redirect';
SamlClient.LOGIN_RESPONSE_BINDING = 'post';
let instance = null;
const createSamlClient = (platformId, samlProvider) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (instance) {
        return instance;
    }
    const customDomain = yield custom_domain_service_1.customDomainService.getOneByPlatform({
        platformId,
    });
    if ((0, shared_1.isNil)(customDomain)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
            params: {
                entityId: platformId,
                entityType: 'CustomDomain',
                message: 'Please configure a custom domain for this platform.',
            },
        });
    }
    saml.setSchemaValidator(validator);
    const idp = createIdp(samlProvider.idpMetadata);
    const sp = createSp(customDomain.domain, samlProvider.idpCertificate);
    return instance = new SamlClient(idp, sp);
});
exports.createSamlClient = createSamlClient;
const createIdp = (metadata) => {
    return saml.IdentityProvider({
        metadata,
        isAssertionEncrypted: false,
        messageSigningOrder: 'encrypt-then-sign',
        wantLogoutRequestSigned: true,
    });
};
const createSp = (domain, privateKey) => {
    return saml.ServiceProvider({
        entityID: 'Activepieces',
        authnRequestsSigned: false,
        wantMessageSigned: true,
        wantLogoutResponseSigned: true,
        wantLogoutRequestSigned: true,
        privateKey,
        isAssertionEncrypted: true,
        assertionConsumerService: [{
                Binding: saml.Constants.namespace.binding.post,
                Location: `https://${domain}/api/v1/authn/saml/acs`,
            }],
        signatureConfig: {},
    });
};


/***/ }),
/* 699 */
/***/ ((module) => {

module.exports = require("@authenio/samlify-node-xmllint");

/***/ }),
/* 700 */
/***/ ((module) => {

module.exports = require("samlify");

/***/ }),
/* 701 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appSumoModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const http_status_codes_1 = __webpack_require__(481);
const appsumo_service_1 = __webpack_require__(669);
const appSumoModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(appsumoController, { prefix: '/v1/appsumo' });
});
exports.appSumoModule = appSumoModule;
const exchangeCredentialUsername = server_shared_1.system.get(server_shared_1.AppSystemProp.APPSUMO_TOKEN);
const exchangeCredentialPassword = server_shared_1.system.get(server_shared_1.AppSystemProp.APPSUMO_TOKEN);
const token = server_shared_1.system.get(server_shared_1.AppSystemProp.APPSUMO_TOKEN);
const ActionRequest = typebox_1.Type.Object({
    action: typebox_1.Type.String(),
    plan_id: typebox_1.Type.String(),
    uuid: typebox_1.Type.String(),
    activation_email: typebox_1.Type.String(),
});
const ExchangeTokenRequest = typebox_1.Type.Object({
    username: typebox_1.Type.String(),
    password: typebox_1.Type.String(),
});
const AuthorizationHeaders = typebox_1.Type.Object({
    authorization: typebox_1.Type.String(),
});
const appsumoController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.post('/token', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            body: ExchangeTokenRequest,
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        if (request.body.username === exchangeCredentialUsername &&
            request.body.password === exchangeCredentialPassword) {
            return reply.status(http_status_codes_1.StatusCodes.OK).send({
                access: token,
            });
        }
        else {
            return reply.status(http_status_codes_1.StatusCodes.UNAUTHORIZED).send();
        }
    }));
    fastify.post('/action', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            headers: AuthorizationHeaders,
            body: ActionRequest,
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        if (request.headers.authorization != `Bearer ${token}`) {
            return reply.status(http_status_codes_1.StatusCodes.UNAUTHORIZED).send();
        }
        else {
            const { plan_id, action, uuid, activation_email } = request.body;
            yield appsumo_service_1.appsumoService.handleRequest({
                plan_id,
                action,
                uuid,
                activation_email,
            });
            switch (action) {
                case 'activate':
                    return reply.status(http_status_codes_1.StatusCodes.CREATED).send({
                        redirect_url: 'https://cloud.activepieces.com/sign-up?email=' +
                            encodeURIComponent(activation_email),
                        message: 'success',
                    });
                default:
                    return reply.status(http_status_codes_1.StatusCodes.OK).send({
                        message: 'success',
                    });
            }
        }
    }));
});


/***/ }),
/* 702 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectBillingModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const http_status_codes_1 = __webpack_require__(481);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const flow_run_entity_1 = __webpack_require__(250);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const project_service_1 = __webpack_require__(448);
const project_usage_service_1 = __webpack_require__(673);
const project_plan_service_1 = __webpack_require__(591);
const project_billing_service_1 = __webpack_require__(670);
const stripe_helper_1 = __webpack_require__(671);
const flowRunRepo = (0, repo_factory_1.repoFactory)(flow_run_entity_1.FlowRunEntity);
const EVERY_4_HOURS = '59 */4 * * *';
const projectBillingModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.PROJECT_USAGE_REPORT, sendProjectRecords);
    yield system_jobs_1.systemJobsSchedule.upsertJob({
        job: {
            name: common_1.SystemJobName.PROJECT_USAGE_REPORT,
            data: {},
        },
        schedule: {
            type: 'repeated',
            cron: EVERY_4_HOURS,
        },
    });
    yield app.register(projectBillingController, { prefix: '/v1/project-billing' });
});
exports.projectBillingModule = projectBillingModule;
function sendProjectRecords(job) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        server_shared_1.logger.info('Running project-daily-report');
        const startOfDay = (0, dayjs_1.default)(job.timestamp).startOf('day').toISOString();
        const endOfDay = (0, dayjs_1.default)(job.timestamp).endOf('day').toISOString();
        const projectIds = yield flowRunRepo().createQueryBuilder('flowRun')
            .select('DISTINCT "projectId"')
            .where({
            created: (0, typeorm_1.MoreThanOrEqual)(startOfDay),
        }).andWhere({
            created: (0, typeorm_1.LessThanOrEqual)(endOfDay),
        })
            .getRawMany();
        server_shared_1.logger.info(`Found ${projectIds.length} projects with usage in the current day`);
        const stripe = stripe_helper_1.stripeHelper.getStripe();
        (0, shared_1.assertNotNullOrUndefined)(stripe, 'Stripe is not configured');
        for (const { projectId } of projectIds) {
            const projectBilling = yield project_billing_service_1.projectBillingService.getOrCreateForProject(projectId);
            if ((0, shared_1.isNil)(projectBilling.stripeSubscriptionId) || projectBilling.subscriptionStatus !== ee_shared_1.ApSubscriptionStatus.ACTIVE) {
                continue;
            }
            const subscription = yield stripe.subscriptions.retrieve(projectBilling.stripeSubscriptionId);
            const item = subscription.items.data.find((item) => item.price.id === stripe_helper_1.TASKS_PAYG_PRICE_ID);
            (0, shared_1.assertNotNullOrUndefined)(item, 'No item found for tasks');
            const project = yield project_service_1.projectService.getOneOrThrow(projectId);
            const billingPeriod = project_usage_service_1.projectUsageService.getCurrentingStartPeriod(project.created);
            const usage = yield project_usage_service_1.projectUsageService.getUsageForBillingPeriod(projectId, billingPeriod);
            server_shared_1.logger.info({ projectId, tasks: usage.tasks, includedTasks: projectBilling.includedTasks }, 'Sending usage record to stripe');
            yield stripe.subscriptionItems.createUsageRecord(item.id, {
                quantity: Math.max(usage.tasks - projectBilling.includedTasks, 0),
                timestamp: (0, dayjs_1.default)(job.timestamp).unix(),
                action: 'set',
            });
        }
        server_shared_1.logger.info('Finished project-daily-report');
    });
}
const projectBillingController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.USER],
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const project = yield project_service_1.projectService.getOneOrThrow(request.principal.projectId);
        return {
            subscription: yield project_billing_service_1.projectBillingService.getOrCreateForProject(request.principal.projectId),
            nextBillingDate: project_usage_service_1.projectUsageService.getCurrentingEndPeriod(project.created),
        };
    }));
    fastify.post('/portal', {}, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return {
            portalLink: yield stripe_helper_1.stripeHelper.createPortalSessionUrl(request.principal.projectId),
        };
    }));
    fastify.post('/upgrade', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.USER],
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const stripe = stripe_helper_1.stripeHelper.getStripe();
        (0, shared_1.assertNotNullOrUndefined)(stripe, 'Stripe is not configured');
        const projectBilling = yield project_billing_service_1.projectBillingService.getOrCreateForProject(request.principal.projectId);
        if (projectBilling.subscriptionStatus === ee_shared_1.ApSubscriptionStatus.ACTIVE) {
            yield reply.status(http_status_codes_1.StatusCodes.BAD_REQUEST).send({
                message: 'Already subscribed',
            });
            return;
        }
        return {
            paymentLink: yield stripe_helper_1.stripeHelper.createCheckoutUrl(request.principal.projectId, projectBilling.stripeCustomerId),
        };
    }));
    fastify.post('/stripe/webhook', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
            rawBody: true,
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        try {
            const payload = request.rawBody;
            const signature = request.headers['stripe-signature'];
            const stripe = stripe_helper_1.stripeHelper.getStripe();
            (0, shared_1.assertNotNullOrUndefined)(stripe, 'Stripe is not configured');
            const webhook = stripe.webhooks.constructEvent(payload, signature, stripe_helper_1.stripeWebhookSecret);
            const subscription = webhook.data.object;
            if (!stripe_helper_1.stripeHelper.isPriceForTasks(subscription)) {
                return {
                    message: 'Subscription does not have a price for tasks',
                };
            }
            const projectBilling = yield project_billing_service_1.projectBillingService.updateSubscriptionIdByCustomerId(subscription);
            if (subscription.status === ee_shared_1.ApSubscriptionStatus.CANCELED) {
                server_shared_1.logger.info(`Subscription canceled for project ${projectBilling.projectId}, downgrading to free plan`);
                yield project_plan_service_1.projectLimitsService.upsert(ee_shared_1.DEFAULT_FREE_PLAN_LIMIT, projectBilling.projectId);
            }
            return yield reply.status(http_status_codes_1.StatusCodes.OK).send();
        }
        catch (err) {
            server_shared_1.logger.error(err);
            server_shared_1.logger.warn('⚠️  Webhook signature verification failed.');
            server_shared_1.exceptionHandler.handle(err);
            return reply
                .status(http_status_codes_1.StatusCodes.BAD_REQUEST)
                .send('Invalid webhook signature');
        }
    }));
});


/***/ }),
/* 703 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.connectionKeyModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const app_connection_service_1 = __webpack_require__(473);
const connection_key_service_1 = __webpack_require__(704);
const connectionKeyModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(connectionKeyController, {
        prefix: '/v1/connection-keys',
    });
});
exports.connectionKeyModule = connectionKeyModule;
const DEFAULT_LIMIT_SIZE = 10;
const connectionKeyController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.delete('/app-connections', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            querystring: ee_shared_1.GetOrDeleteConnectionFromTokenRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const appConnection = yield connection_key_service_1.connectionKeyService.getConnection(request.query);
        if (appConnection !== null) {
            yield app_connection_service_1.appConnectionService.delete({
                projectId: request.query.projectId,
                id: appConnection.id,
            });
        }
    }));
    fastify.get('/app-connections', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            querystring: ee_shared_1.GetOrDeleteConnectionFromTokenRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return connection_key_service_1.connectionKeyService.getConnection(request.query);
    }));
    fastify.post('/app-connections', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            body: ee_shared_1.UpsertConnectionFromToken,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return connection_key_service_1.connectionKeyService.createConnection(request.body);
    }));
    fastify.get('/', {
        schema: {
            querystring: ee_shared_1.ListConnectionKeysRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        return connection_key_service_1.connectionKeyService.list(request.principal.projectId, (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null, (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_LIMIT_SIZE);
    }));
    fastify.post('/', {
        schema: {
            body: ee_shared_1.UpsertSigningKeyConnection,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return connection_key_service_1.connectionKeyService.upsert({
            projectId: request.principal.projectId,
            request: request.body,
        });
    }));
    fastify.delete('/:connectionkeyId', (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield connection_key_service_1.connectionKeyService.delete(request.params.connectionkeyId);
        return reply.status(http_status_codes_1.StatusCodes.OK).send();
    }));
});


/***/ }),
/* 704 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.connectionKeyService = void 0;
const tslib_1 = __webpack_require__(1);
const crypto_1 = tslib_1.__importDefault(__webpack_require__(6));
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const jsonwebtoken_1 = tslib_1.__importDefault(__webpack_require__(511));
const app_connection_service_1 = __webpack_require__(473);
const repo_factory_1 = __webpack_require__(224);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const app_credentials_service_1 = __webpack_require__(664);
const connection_key_entity_1 = __webpack_require__(236);
const connectionKeyRepo = (0, repo_factory_1.repoFactory)(connection_key_entity_1.ConnectionKeyEntity);
exports.connectionKeyService = {
    getConnection(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, token, appName, }) {
            const connectionName = yield getConnectioName({ projectId, token });
            // TODO this is hardcoded for now, just to make sure it's not changed on client side
            const finalAppName = appName.replace('@activepieces/piece-', '');
            if (connectionName == null) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_OR_EXPIRED_JWT_TOKEN,
                    params: {
                        token,
                    },
                });
            }
            return app_connection_service_1.appConnectionService.getOne({
                projectId,
                name: `${finalAppName}_${connectionName}`,
            });
        });
    },
    createConnection(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const appCredential = yield app_credentials_service_1.appCredentialService.getOneOrThrow(request.appCredentialId);
            const projectId = appCredential.projectId;
            const connectionName = yield getConnectioName({
                projectId,
                token: request.token,
            });
            if (connectionName == null) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_OR_EXPIRED_JWT_TOKEN,
                    params: {
                        token: request.token,
                    },
                });
            }
            // TODO this is hardcoded for now, just to make sure it's not changed on client side
            const finalAppName = `@activepieces/piece-${appCredential.appName}`;
            switch (appCredential.settings.type) {
                case ee_shared_1.AppCredentialType.API_KEY: {
                    const apiRequest = request;
                    return app_connection_service_1.appConnectionService.upsert({
                        projectId,
                        request: {
                            projectId,
                            name: `${appCredential.appName}_${connectionName}`,
                            pieceName: finalAppName,
                            type: shared_1.AppConnectionType.SECRET_TEXT,
                            value: {
                                type: shared_1.AppConnectionType.SECRET_TEXT,
                                secret_text: apiRequest.apiKey,
                            },
                        },
                    });
                }
                case ee_shared_1.AppCredentialType.OAUTH2: {
                    const apiRequest = request;
                    return app_connection_service_1.appConnectionService.upsert({
                        projectId,
                        request: {
                            name: `${appCredential.appName}_${connectionName}`,
                            pieceName: finalAppName,
                            projectId,
                            type: shared_1.AppConnectionType.OAUTH2,
                            value: {
                                type: shared_1.AppConnectionType.OAUTH2,
                                redirect_url: apiRequest.redirectUrl,
                                code: apiRequest.code,
                                props: apiRequest.props,
                                scope: appCredential.settings.scope,
                                client_id: appCredential.settings.clientId,
                                client_secret: appCredential.settings.clientSecret,
                            },
                        },
                    });
                }
            }
        });
    },
    upsert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, request, }) {
            const key = crypto_1.default.generateKeyPairSync('rsa', {
                modulusLength: 2048,
                publicKeyEncoding: {
                    type: 'pkcs1',
                    format: 'pem',
                },
                privateKeyEncoding: {
                    type: 'pkcs1',
                    format: 'pem',
                },
            });
            const savedConnection = yield connectionKeyRepo().save({
                id: (0, shared_1.apId)(),
                projectId,
                settings: {
                    type: request.settings.type,
                    publicKey: key.publicKey,
                },
            });
            return Object.assign(Object.assign({}, savedConnection), { settings: {
                    type: savedConnection.settings.type,
                    publicKey: savedConnection.settings.publicKey,
                    privateKey: key.privateKey,
                } });
        });
    },
    list(projectId, cursorRequest, limit) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursorRequest !== null && cursorRequest !== void 0 ? cursorRequest : null);
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: connection_key_entity_1.ConnectionKeyEntity,
                query: {
                    limit,
                    order: 'ASC',
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const queryBuilder = connectionKeyRepo()
                .createQueryBuilder('connection_key')
                .where({ projectId });
            const { data, cursor } = yield paginator.paginate(queryBuilder);
            return pagination_utils_1.paginationHelper.createPage(data, cursor);
        });
    },
    delete(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield connectionKeyRepo().delete({
                id,
            });
        });
    },
};
function getConnectioName(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        const connectionKeys = yield connectionKeyRepo().findBy({
            projectId: request.projectId,
        });
        let connectionName = null;
        for (let i = 0; i < connectionKeys.length; ++i) {
            const currentKey = connectionKeys[i];
            const decodedTokenSub = (_a = decodeTokenOrNull(request.token, currentKey.settings.publicKey)) === null || _a === void 0 ? void 0 : _a.sub;
            if (decodedTokenSub !== null && decodedTokenSub !== undefined) {
                connectionName = decodedTokenSub;
                break;
            }
        }
        return connectionName;
    });
}
function decodeTokenOrNull(token, publicKey) {
    try {
        return jsonwebtoken_1.default.verify(token, publicKey);
    }
    catch (e) {
        return null;
    }
}


/***/ }),
/* 705 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.customDomainModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const axios_1 = __webpack_require__(198);
const http_status_codes_1 = __webpack_require__(481);
const ee_authorization_1 = __webpack_require__(656);
const custom_domain_service_1 = __webpack_require__(614);
const GetOneRequest = type_provider_typebox_1.Type.Object({
    id: type_provider_typebox_1.Type.String(),
});
const customDomainModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preHandler', (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.customDomainsEnabled));
    app.addHook('preHandler', ee_authorization_1.platformMustBeOwnedByCurrentUser);
    yield app.register(customDomainController, { prefix: '/v1/custom-domains' });
});
exports.customDomainModule = customDomainModule;
const customDomainController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', {
        schema: {
            body: ee_shared_1.AddDomainRequest,
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        const domain = yield custom_domain_service_1.customDomainService.getOneByDomain({
            domain: request.body.domain,
        });
        if (domain) {
            return reply.status(axios_1.HttpStatusCode.Conflict).send({
                message: `Domain ${request.body.domain} already exists`,
            });
        }
        const customDomain = yield custom_domain_service_1.customDomainService.create({
            domain: request.body.domain,
            platformId,
        });
        return reply.status(http_status_codes_1.StatusCodes.CREATED).send(customDomain);
    }));
    app.get('/', {
        schema: {
            querystring: ee_shared_1.ListCustomDomainsRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return custom_domain_service_1.customDomainService.list({
            platformId,
            request: request.query,
        });
    }));
    app.get('/validation/:id', {
        schema: {
            params: GetOneRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return custom_domain_service_1.customDomainService.getDomainValidationData({
            id: request.params.id,
        });
    }));
    app.patch('/verify/:id', {
        schema: {
            params: GetOneRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return custom_domain_service_1.customDomainService.verifyDomain({
            id: request.params.id,
            platformId,
        });
    }));
    app.delete('/:id', {
        schema: {
            params: GetOneRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return custom_domain_service_1.customDomainService.delete({
            id: request.params.id,
            platformId,
        });
    }));
});


/***/ }),
/* 706 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enterpriseFlagsHooks = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const flag_service_1 = __webpack_require__(578);
const platform_utils_1 = __webpack_require__(634);
const platform_service_1 = __webpack_require__(459);
const appearance_helper_1 = __webpack_require__(707);
exports.enterpriseFlagsHooks = {
    modify(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ flags, request }) {
            const modifiedFlags = Object.assign({}, flags);
            const hostname = request.hostname;
            const hostUrl = `https://${hostname}`;
            const platformId = yield (0, platform_utils_1.resolvePlatformIdForRequest)(request);
            if ((0, shared_1.isNil)(platformId)) {
                return modifiedFlags;
            }
            const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
            modifiedFlags[shared_1.ApFlagId.THIRD_PARTY_AUTH_PROVIDERS_TO_SHOW_MAP] = {
                [shared_1.ThirdPartyAuthnProviderEnum.GOOGLE]: !(0, shared_1.isNil)(platform.federatedAuthProviders.google),
                [shared_1.ThirdPartyAuthnProviderEnum.GITHUB]: !(0, shared_1.isNil)(platform.federatedAuthProviders.github),
                [shared_1.ThirdPartyAuthnProviderEnum.SAML]: !(0, shared_1.isNil)(platform.federatedAuthProviders.saml),
            };
            modifiedFlags[shared_1.ApFlagId.EMAIL_AUTH_ENABLED] = platform.emailAuthEnabled;
            const isCustomerPlatform = !flag_service_1.flagService.isCloudPlatform(platformId);
            modifiedFlags[shared_1.ApFlagId.IS_CLOUD_PLATFORM] = !isCustomerPlatform;
            if (isCustomerPlatform) {
                modifiedFlags[shared_1.ApFlagId.SHOW_PLATFORM_DEMO] = false;
                modifiedFlags[shared_1.ApFlagId.THEME] = yield appearance_helper_1.appearanceHelper.getTheme({
                    platformId,
                });
                modifiedFlags[shared_1.ApFlagId.SHOW_COMMUNITY] = false;
                modifiedFlags[shared_1.ApFlagId.SHOW_DOCS] = false;
                modifiedFlags[shared_1.ApFlagId.SHOW_BILLING] = false;
                modifiedFlags[shared_1.ApFlagId.SHOW_REWARDS] = false;
                modifiedFlags[shared_1.ApFlagId.SHOW_COPILOT] = false;
                modifiedFlags[shared_1.ApFlagId.PROJECT_LIMITS_ENABLED] = true;
                modifiedFlags[shared_1.ApFlagId.INSTALL_PROJECT_PIECES_ENABLED] = false;
                modifiedFlags[shared_1.ApFlagId.MANAGE_PROJECT_PIECES_ENABLED] = true;
                modifiedFlags[shared_1.ApFlagId.SHOW_SIGN_UP_LINK] = false;
                modifiedFlags[shared_1.ApFlagId.CLOUD_AUTH_ENABLED] = platform.cloudAuthEnabled;
                modifiedFlags[shared_1.ApFlagId.FRONTEND_URL] = `${hostUrl}`;
                modifiedFlags[shared_1.ApFlagId.SAML_AUTH_ACS_URL] = `${hostUrl}/api/v1/authn/saml/acs`;
                modifiedFlags[shared_1.ApFlagId.WEBHOOK_URL_PREFIX] = `${hostUrl}/api/v1/webhooks`;
                modifiedFlags[shared_1.ApFlagId.THIRD_PARTY_AUTH_PROVIDER_REDIRECT_URL] =
                    flag_service_1.flagService.getThirdPartyRedirectUrl(platform.id, hostname);
                modifiedFlags[shared_1.ApFlagId.PRIVACY_POLICY_URL] = platform.privacyPolicyUrl;
                modifiedFlags[shared_1.ApFlagId.OWN_AUTH2_ENABLED] = false;
            }
            return modifiedFlags;
        });
    },
};


/***/ }),
/* 707 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appearanceHelper = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const theme_1 = __webpack_require__(460);
const platform_service_1 = __webpack_require__(459);
const getPlatformByIdOrFallback = (platformId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if ((0, shared_1.isNil)(platformId)) {
        return theme_1.defaultTheme;
    }
    const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
    return enterpriseThemeChecker(platform);
});
exports.appearanceHelper = {
    getTheme(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId }) {
            return getPlatformByIdOrFallback(platformId);
        });
    },
};
const enterpriseThemeChecker = (platform) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const edition = server_shared_1.system.getEdition();
    switch (edition) {
        case shared_1.ApEdition.COMMUNITY:
            return theme_1.defaultTheme;
        case shared_1.ApEdition.CLOUD:
            return (0, theme_1.generateTheme)({
                websiteName: platform.name,
                fullLogoUrl: platform.fullLogoUrl,
                favIconUrl: platform.favIconUrl,
                logoIconUrl: platform.logoIconUrl,
                primaryColor: platform.primaryColor,
            });
        case shared_1.ApEdition.ENTERPRISE:
            if (platform.customAppearanceEnabled) {
                return (0, theme_1.generateTheme)({
                    websiteName: platform.name,
                    fullLogoUrl: platform.fullLogoUrl,
                    favIconUrl: platform.favIconUrl,
                    logoIconUrl: platform.logoIconUrl,
                    primaryColor: platform.primaryColor,
                });
            }
            return theme_1.defaultTheme;
    }
});


/***/ }),
/* 708 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformRunHooks = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const project_usage_service_1 = __webpack_require__(673);
const email_service_1 = __webpack_require__(611);
const project_plan_service_1 = __webpack_require__(591);
exports.platformRunHooks = {
    onFinish(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, tasks, }) {
            const edition = server_shared_1.system.getEdition();
            if ([shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE].includes(edition)) {
                const consumedTasks = yield project_usage_service_1.projectUsageService.increaseTasks(projectId, tasks);
                yield sendAlertsIfNeeded({
                    projectId,
                    consumedTasks,
                    createdAt: (0, dayjs_1.default)().toISOString(),
                    previousConsumedTasks: consumedTasks - tasks,
                });
            }
        });
    },
};
function sendAlertsIfNeeded(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, createdAt, consumedTasks, previousConsumedTasks, }) {
        const quotaAlerts = [
            { limit: 1.0, templateName: 'quota-100' },
            { limit: 0.9, templateName: 'quota-90' },
            { limit: 0.5, templateName: 'quota-50' },
        ];
        const projectPlan = yield project_plan_service_1.projectLimitsService.getPlanByProjectId(projectId);
        const tasksPerMonth = projectPlan === null || projectPlan === void 0 ? void 0 : projectPlan.tasks;
        if (!tasksPerMonth) {
            return;
        }
        const resetDate = project_usage_service_1.projectUsageService.getCurrentingEndPeriod(createdAt).replace(' UTC', '');
        const currentUsagePercentage = (consumedTasks / tasksPerMonth) * 100;
        const previousUsagePercentage = (previousConsumedTasks / tasksPerMonth) * 100;
        for (const { limit, templateName } of quotaAlerts) {
            const projectPlanPercentage = tasksPerMonth * limit;
            if (currentUsagePercentage >= projectPlanPercentage && previousUsagePercentage < projectPlanPercentage) {
                yield email_service_1.emailService.sendQuotaAlert({
                    templateName,
                    projectId,
                    resetDate: (0, dayjs_1.default)(resetDate).tz('America/Los_Angeles').format('DD MMM YYYY, HH:mm [PT]'),
                });
            }
        }
    });
}


/***/ }),
/* 709 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformFlowTemplateModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const http_status_codes_1 = __webpack_require__(481);
const platform_service_1 = __webpack_require__(459);
const ee_authorization_1 = __webpack_require__(656);
const flow_template_service_1 = __webpack_require__(710);
const platformFlowTemplateModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(flowTemplateController, { prefix: '/v1/flow-templates' });
});
exports.platformFlowTemplateModule = platformFlowTemplateModule;
const GetIdParams = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
});
const flowTemplateController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/:id', GetParams, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return flow_template_service_1.flowTemplateService.getOrThrow(request.params.id);
    }));
    fastify.get('/', ListFlowParams, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = yield resolveTemplatesPlatformId(request.principal, request.principal.platform.id);
        return flow_template_service_1.flowTemplateService.list(platformId, request.query);
    }));
    fastify.post('/', CreateParams, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { type } = request.body;
        if (type === shared_1.TemplateType.PLATFORM) {
            yield ee_authorization_1.platformMustBeOwnedByCurrentUser.call(fastify, request, reply);
        }
        return flow_template_service_1.flowTemplateService.upsert(request.principal.platform.id, request.principal.projectId, request.body);
    }));
    fastify.delete('/:id', DeleteParams, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const template = yield flow_template_service_1.flowTemplateService.getOrThrow(request.params.id);
        switch (template.type) {
            case shared_1.TemplateType.PLATFORM:
                yield ee_authorization_1.platformMustBeOwnedByCurrentUser.call(fastify, request, reply);
                break;
            case shared_1.TemplateType.PROJECT:
                if (template.projectId !== request.principal.projectId) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.AUTHORIZATION,
                        params: {},
                    });
                }
                break;
        }
        yield flow_template_service_1.flowTemplateService.delete({
            id: request.params.id,
        });
        return reply.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
});
function resolveTemplatesPlatformId(principal, platformId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (principal.type === shared_1.PrincipalType.UNKNOWN) {
            return server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.CLOUD_PLATFORM_ID);
        }
        const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
        return platform.id;
    });
}
const GetParams = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        params: GetIdParams,
    },
};
const ListFlowParams = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        querystring: shared_1.ListFlowTemplatesRequest,
    },
};
const DeleteParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
    schema: {
        params: GetIdParams,
    },
};
const CreateParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
    schema: {
        body: ee_shared_1.CreateFlowTemplateRequest,
    },
};


/***/ }),
/* 710 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowTemplateService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const pagination_utils_1 = __webpack_require__(454);
const flow_template_entity_1 = __webpack_require__(238);
const templateRepo = (0, repo_factory_1.repoFactory)(flow_template_entity_1.FlowTemplateEntity);
exports.flowTemplateService = {
    upsert: (platformId_1, projectId_1, _a) => tslib_1.__awaiter(void 0, [platformId_1, projectId_1, _a], void 0, function* (platformId, projectId, { description, type, template, blogUrl, tags, id, }) {
        const flowTemplate = template;
        const newTags = tags !== null && tags !== void 0 ? tags : [];
        const newId = id !== null && id !== void 0 ? id : (0, shared_1.apId)();
        yield templateRepo().upsert({
            id: newId,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            template: flowTemplate,
            name: flowTemplate.displayName,
            description: description !== null && description !== void 0 ? description : '',
            pieces: shared_1.flowHelper.getUsedPieces(flowTemplate.trigger),
            blogUrl,
            type,
            tags: newTags,
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            platformId,
            projectId,
        }, ['id']);
        return templateRepo().findOneByOrFail({
            id: newId,
        });
    }),
    list: (platformId_2, _b) => tslib_1.__awaiter(void 0, [platformId_2, _b], void 0, function* (platformId, { pieces, tags, search }) {
        const commonFilters = {};
        if (pieces) {
            commonFilters.pieces = (0, typeorm_1.ArrayOverlap)(pieces);
        }
        if (tags) {
            commonFilters.tags = (0, typeorm_1.ArrayContains)(tags);
        }
        if (search) {
            commonFilters.name = (0, typeorm_1.ILike)(`%${search}%`);
            commonFilters.description = (0, typeorm_1.ILike)(`%${search}%`);
        }
        commonFilters.platformId = (0, typeorm_1.Equal)(platformId);
        commonFilters.type = (0, typeorm_1.Equal)(shared_1.TemplateType.PLATFORM);
        const templates = yield templateRepo()
            .createQueryBuilder('flow_template')
            .where(commonFilters)
            .getMany();
        return pagination_utils_1.paginationHelper.createPage(templates, null);
    }),
    getOrThrow: (id) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const template = yield templateRepo().findOneBy({
            id,
        });
        if ((0, shared_1.isNil)(template)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                params: {
                    message: `Flow template ${id} is not found`,
                },
            });
        }
        return template;
    }),
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            yield templateRepo().delete({
                id,
            });
        });
    },
};


/***/ }),
/* 711 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gitRepoController = exports.gitRepoModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const authorization_1 = __webpack_require__(470);
const platform_service_1 = __webpack_require__(459);
const ee_authorization_1 = __webpack_require__(656);
const git_repo_service_1 = __webpack_require__(712);
const gitRepoModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    app.addHook('preHandler', (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.gitSyncEnabled));
    yield app.register(exports.gitRepoController, { prefix: '/v1/git-repos' });
});
exports.gitRepoModule = gitRepoModule;
const gitRepoController = (app, _options, done) => {
    app.post('/pull', PullRepoFromProjectRequestSchema, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platform = yield platform_service_1.platformService.getOneOrThrow(request.principal.platform.id);
        const gitRepo = yield git_repo_service_1.gitRepoService.getOneByProjectOrThrow({ projectId: request.body.projectId });
        const userId = platform.ownerId;
        yield git_repo_service_1.gitRepoService.pull({
            gitRepo,
            userId,
            dryRun: false,
        });
    }));
    app.post('/', ConfigureRepoRequestSchema, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield reply
            .status(http_status_codes_1.StatusCodes.CREATED)
            .send(yield git_repo_service_1.gitRepoService.upsert(request.body));
    }));
    app.get('/', ListRepoRequestSchema, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return git_repo_service_1.gitRepoService.list(request.query);
    }));
    app.post('/:id/push', PushRepoRequestSchema, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return git_repo_service_1.gitRepoService.push({
            id: request.params.id,
            userId: request.principal.id,
            request: request.body,
        });
    }));
    app.post('/:id/pull', PullRepoRequestSchema, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const gitRepo = yield git_repo_service_1.gitRepoService.getOrThrow({
            id: request.params.id,
        });
        return git_repo_service_1.gitRepoService.pull({
            gitRepo,
            dryRun: (_a = request.body.dryRun) !== null && _a !== void 0 ? _a : false,
            userId: request.principal.id,
        });
    }));
    app.delete('/:id', DeleteRepoRequestSchema, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield git_repo_service_1.gitRepoService.delete({
            id: request.params.id,
            projectId: request.principal.projectId,
        });
        yield reply.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
    done();
};
exports.gitRepoController = gitRepoController;
const PullRepoFromProjectRequestSchema = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.WRITE_GIT_REPO,
    },
    schema: {
        description: 'Pull all changes from the git repository and overwrite any conflicting changes in the project.',
        body: ee_shared_1.PullGitRepoFromProjectRequest,
        tags: ['git-repo'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        response: {
            [http_status_codes_1.StatusCodes.OK]: type_provider_typebox_1.Type.Object({}),
        },
    },
};
const DeleteRepoRequestSchema = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
        permission: shared_1.Permission.WRITE_GIT_REPO,
    },
    schema: {
        description: 'Delete a git repository information for a project.',
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
        response: {
            [http_status_codes_1.StatusCodes.NO_CONTENT]: type_provider_typebox_1.Type.Undefined(),
        },
    },
};
const PullRepoRequestSchema = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
        permission: shared_1.Permission.WRITE_GIT_REPO,
    },
    schema: {
        description: 'Pull all changes from the git repository and overwrite any conflicting changes in the project.',
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
        body: ee_shared_1.PullGitRepoRequest,
        security: [],
        response: {
            [http_status_codes_1.StatusCodes.OK]: ee_shared_1.ProjectSyncPlan,
        },
    },
};
const PushRepoRequestSchema = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
        permission: shared_1.Permission.WRITE_GIT_REPO,
    },
    schema: {
        description: 'Push single flow to the git repository',
        body: ee_shared_1.PushGitRepoRequest,
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: type_provider_typebox_1.Type.Void(),
        },
    },
};
const ConfigureRepoRequestSchema = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
        permission: shared_1.Permission.WRITE_GIT_REPO,
    },
    schema: {
        description: 'Upsert a git repository information for a project.',
        body: ee_shared_1.ConfigureRepoRequest,
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: ee_shared_1.GitRepoWithoutSensitiveData,
        },
    },
};
const ListRepoRequestSchema = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.READ_GIT_REPO,
    },
    schema: {
        querystring: type_provider_typebox_1.Type.Object({
            projectId: type_provider_typebox_1.Type.String(),
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(ee_shared_1.GitRepoWithoutSensitiveData),
        },
    },
};


/***/ }),
/* 712 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gitRepoService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const flow_service_1 = __webpack_require__(574);
const pagination_utils_1 = __webpack_require__(454);
const project_service_1 = __webpack_require__(448);
const git_helper_1 = __webpack_require__(713);
const git_repo_entity_1 = __webpack_require__(239);
const git_sync_helper_1 = __webpack_require__(715);
const project_diff_service_1 = __webpack_require__(717);
const project_mapping_state_1 = __webpack_require__(716);
const repo = (0, repo_factory_1.repoFactory)(git_repo_entity_1.GitRepoEntity);
exports.gitRepoService = {
    upsert(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const existingRepo = yield repo().findOneBy({ projectId: request.projectId });
            const id = (_a = existingRepo === null || existingRepo === void 0 ? void 0 : existingRepo.id) !== null && _a !== void 0 ? _a : (0, shared_1.apId)();
            yield repo().upsert({
                id,
                projectId: request.projectId,
                sshPrivateKey: request.sshPrivateKey,
                branch: request.branch,
                branchType: request.branchType,
                remoteUrl: request.remoteUrl,
                slug: request.slug,
            }, ['projectId']);
            return repo().findOneByOrFail({ id });
        });
    },
    getOneByProjectOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId }) {
            const gitRepo = yield repo().findOneByOrFail({ projectId });
            if ((0, shared_1.isNil)(gitRepo)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityType: 'git-repo',
                    },
                });
            }
            return gitRepo;
        });
    },
    getOrThrow(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            const gitRepo = yield repo().findOneByOrFail({ id });
            if ((0, shared_1.isNil)(gitRepo)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityId: id,
                        entityType: 'git-repo',
                    },
                });
            }
            return gitRepo;
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId }) {
            const repos = yield repo().findBy({ projectId });
            return pagination_utils_1.paginationHelper.createPage(repos, null);
        });
    },
    push(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, userId, request }) {
            var _b, _c, _d;
            const gitRepo = yield exports.gitRepoService.getOrThrow({ id });
            const { git, flowFolderPath } = yield git_helper_1.gitHelper.createGitRepoAndReturnPaths(gitRepo, userId);
            const project = yield project_service_1.projectService.getOneOrThrow(gitRepo.projectId);
            const mappingState = gitRepo.mapping ? new project_mapping_state_1.ProjectMappingState(gitRepo.mapping) : project_mapping_state_1.ProjectMappingState.empty();
            switch (request.type) {
                case ee_shared_1.GitPushOperationType.PUSH_FLOW: {
                    const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
                        id: request.flowId,
                        projectId: project.id,
                        removeConnectionsName: false,
                        removeSampleData: true,
                    });
                    const flowName = (_b = mappingState.findSourceId(request.flowId)) !== null && _b !== void 0 ? _b : request.flowId;
                    yield git_sync_helper_1.gitSyncHelper.upsertFlowToGit(flowName, flow, flowFolderPath);
                    yield repo().update({ id: gitRepo.id }, {
                        mapping: mappingState.mapFlow({
                            sourceId: flowName,
                            targetId: flow.id,
                        }),
                    });
                    yield git_helper_1.gitHelper.commitAndPush(git, gitRepo, (_c = request.commitMessage) !== null && _c !== void 0 ? _c : `chore: updated flow ${flow.id}`);
                    break;
                }
                case ee_shared_1.GitPushOperationType.DELETE_FLOW: {
                    const mappingState = gitRepo.mapping ? new project_mapping_state_1.ProjectMappingState(gitRepo.mapping) : project_mapping_state_1.ProjectMappingState.empty();
                    yield repo().update({ id: gitRepo.id }, {
                        mapping: mappingState.deleteFlow(request.flowId),
                    });
                    yield git_sync_helper_1.gitSyncHelper.deleteFlowFromGit(request.flowId, flowFolderPath);
                    yield git_helper_1.gitHelper.commitAndPush(git, gitRepo, (_d = request.commitMessage) !== null && _d !== void 0 ? _d : `chore: deleted flow ${request.flowId} from user interface`);
                    break;
                }
            }
        });
    },
    pull(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ gitRepo, dryRun, userId }) {
            const project = yield project_service_1.projectService.getOneOrThrow(gitRepo.projectId);
            const { flowFolderPath } = yield git_helper_1.gitHelper.createGitRepoAndReturnPaths(gitRepo, userId);
            const gitProjectState = yield git_sync_helper_1.gitSyncHelper.getStateFromGit(flowFolderPath);
            const dbProjectState = yield git_sync_helper_1.gitSyncHelper.getStateFromDB(project.id);
            const mappingState = (gitRepo.mapping ? new project_mapping_state_1.ProjectMappingState(gitRepo.mapping) : project_mapping_state_1.ProjectMappingState.empty()).clean({
                gitFiles: gitProjectState,
                projectFlows: dbProjectState,
            });
            const operations = project_diff_service_1.projectDiffService.diff({
                gitFiles: gitProjectState,
                projectFlows: dbProjectState,
                mapping: mappingState,
            });
            if (dryRun) {
                return toResponse(operations);
            }
            let newMapState = mappingState;
            const publishJobs = [];
            for (const operation of operations) {
                switch (operation.type) {
                    case ee_shared_1.ProjectOperationType.UPDATE_FLOW: {
                        const flowUpdated = yield git_sync_helper_1.gitSyncHelper.updateFlowInProject(operation.projectFlow.id, operation.gitFile.flow, gitRepo.projectId);
                        if (flowUpdated.status === shared_1.FlowStatus.ENABLED) {
                            publishJobs.push(git_sync_helper_1.gitSyncHelper.republishFlow(flowUpdated.id, gitRepo.projectId));
                        }
                        newMapState = newMapState.mapFlow({
                            sourceId: operation.gitFile.baseFilename,
                            targetId: flowUpdated.id,
                        });
                        break;
                    }
                    case ee_shared_1.ProjectOperationType.CREATE_FLOW: {
                        const flowCreated = yield git_sync_helper_1.gitSyncHelper.createFlowInProject(operation.gitFile.flow, gitRepo.projectId);
                        newMapState = newMapState.mapFlow({
                            sourceId: operation.gitFile.baseFilename,
                            targetId: flowCreated.id,
                        });
                        break;
                    }
                    case ee_shared_1.ProjectOperationType.DELETE_FLOW:
                        yield git_sync_helper_1.gitSyncHelper.deleteFlowFromProject(operation.projectFlow.id, gitRepo.projectId);
                        newMapState = newMapState.deleteFlow(operation.projectFlow.id);
                        break;
                }
            }
            yield repo().update({ id: gitRepo.id }, { mapping: newMapState });
            const errors = (yield Promise.all(publishJobs)).filter((f) => f !== null);
            return toResponse(operations, errors);
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id, projectId }) {
            const gitRepo = yield repo().findOneBy({ id, projectId });
            if ((0, shared_1.isNil)(gitRepo)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        entityId: id,
                        entityType: 'git-repo',
                    },
                });
            }
            yield repo().delete({ id, projectId });
        });
    },
};
function toResponse(operations, errors = []) {
    const responsePlans = operations.map((operation) => {
        switch (operation.type) {
            case ee_shared_1.ProjectOperationType.DELETE_FLOW:
                return {
                    type: operation.type,
                    flow: {
                        id: operation.projectFlow.id,
                        displayName: operation.projectFlow.version.displayName,
                    },
                };
            case ee_shared_1.ProjectOperationType.CREATE_FLOW:
                return {
                    type: operation.type,
                    flow: {
                        id: operation.gitFile.baseFilename,
                        displayName: operation.gitFile.flow.version.displayName,
                    },
                };
            case ee_shared_1.ProjectOperationType.UPDATE_FLOW:
                return {
                    type: operation.type,
                    flow: {
                        id: operation.gitFile.flow.id,
                        displayName: operation.gitFile.flow.version.displayName,
                    },
                    targetFlow: {
                        id: operation.projectFlow.id,
                        displayName: operation.projectFlow.version.displayName,
                    },
                };
        }
    });
    return {
        errors,
        operations: responsePlans,
    };
}


/***/ }),
/* 713 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gitHelper = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = tslib_1.__importDefault(__webpack_require__(128));
const path_1 = tslib_1.__importDefault(__webpack_require__(108));
const simple_git_1 = tslib_1.__importDefault(__webpack_require__(714));
const user_service_1 = __webpack_require__(462);
exports.gitHelper = {
    commitAndPush,
    createGitRepoAndReturnPaths,
};
function commitAndPush(git, gitRepo, commitMessage) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield git.add('.');
        yield git.commit(commitMessage);
        yield git.push('origin', gitRepo.branch);
    });
}
function createGitRepoAndReturnPaths(gitRepo, userId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tmpFolder = path_1.default.join('/', 'tmp', 'repo', gitRepo.projectId);
        try {
            yield promises_1.default.rmdir(tmpFolder, { recursive: true });
        }
        catch (e) {
            // ignore
        }
        const flowFolderPath = path_1.default.join(tmpFolder, 'projects', gitRepo.slug, 'flows');
        yield promises_1.default.mkdir(flowFolderPath, { recursive: true });
        const stateFolderPath = path_1.default.join(tmpFolder, 'projects', gitRepo.slug, 'state');
        yield promises_1.default.mkdir(stateFolderPath, { recursive: true });
        const git = yield initGitRepo(gitRepo, tmpFolder);
        const { email, firstName, lastName } = yield user_service_1.userService.getOneOrFail({
            id: userId,
        });
        yield git.addConfig('user.email', email);
        yield git.addConfig('user.name', `${firstName} ${lastName}`);
        return {
            git,
            flowFolderPath,
            stateFolderPath,
        };
    });
}
function createOrGetSshKeyPath(gitRepo) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const keyPath = path_1.default.resolve(path_1.default.join('tmp', 'keys', gitRepo.id));
        yield promises_1.default.mkdir(path_1.default.dirname(keyPath), { recursive: true });
        yield promises_1.default.writeFile(keyPath, gitRepo.sshPrivateKey);
        yield promises_1.default.chmod(keyPath, 0o600);
        return keyPath;
    });
}
function initGitRepo(gitRepo, baseDir) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const keyPath = yield createOrGetSshKeyPath(gitRepo);
        const git = (0, simple_git_1.default)({
            baseDir,
            binary: 'git',
        }).env('GIT_SSH_COMMAND', `ssh -i ${keyPath} -o StrictHostKeyChecking=no`);
        yield git.init();
        yield git.addRemote('origin', gitRepo.remoteUrl);
        yield git.branch(['-M', gitRepo.branch]);
        yield git.pull('origin', gitRepo.branch);
        return git;
    });
}


/***/ }),
/* 714 */
/***/ ((module) => {

module.exports = require("simple-git");

/***/ }),
/* 715 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gitSyncHelper = void 0;
const tslib_1 = __webpack_require__(1);
const promises_1 = tslib_1.__importDefault(__webpack_require__(128));
const path_1 = tslib_1.__importDefault(__webpack_require__(108));
const shared_1 = __webpack_require__(8);
const flow_repo_1 = __webpack_require__(594);
const flow_service_1 = __webpack_require__(574);
const project_service_1 = __webpack_require__(448);
const project_mapping_state_1 = __webpack_require__(716);
function getStateFromDB(projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flows = yield (0, flow_repo_1.flowRepo)().findBy({
            projectId,
        });
        return Promise.all(flows.map((f) => {
            return flow_service_1.flowService.getOnePopulatedOrThrow({
                id: f.id,
                projectId,
                removeConnectionsName: false,
                removeSampleData: true,
            });
        }));
    });
}
function getMappingStateFromGit(stateFolderPath, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const _statePath = path_1.default.join(stateFolderPath, projectId + '.json');
        try {
            const state = yield promises_1.default.readFile(_statePath, 'utf-8');
            return new project_mapping_state_1.ProjectMappingState(JSON.parse(state));
        }
        catch (e) {
            return project_mapping_state_1.ProjectMappingState.empty();
        }
    });
}
function getStateFromGit(flowPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flowFiles = yield promises_1.default.readdir(flowPath);
        const parsedFlows = [];
        for (const file of flowFiles) {
            // Extract base file name
            const flow = JSON.parse(yield promises_1.default.readFile(path_1.default.join(flowPath, file), 'utf-8'));
            parsedFlows.push({
                flow,
                baseFilename: path_1.default.basename(file, '.json'),
            });
        }
        return parsedFlows;
    });
}
function createFlowInProject(flow, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const createdFlow = yield flow_service_1.flowService.create({
            projectId,
            request: {
                displayName: flow.version.displayName,
                projectId,
            },
        });
        return updateFlowInProject(createdFlow.id, flow, projectId);
    });
}
function updateFlowInProject(targetFlowId, flow, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const project = yield project_service_1.projectService.getOneOrThrow(projectId);
        return flow_service_1.flowService.update({
            id: targetFlowId,
            projectId,
            lock: true,
            userId: project.ownerId,
            operation: {
                type: shared_1.FlowOperationType.IMPORT_FLOW,
                request: {
                    displayName: flow.version.displayName,
                    trigger: flow.version.trigger,
                },
            },
        });
    });
}
function republishFlow(flowId, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const project = yield project_service_1.projectService.getOneOrThrow(projectId);
        const flow = yield flow_service_1.flowService.getOnePopulated({ id: flowId, projectId });
        if (!flow) {
            return null;
        }
        if (!flow.version.valid) {
            return {
                flowId,
                message: `Flow ${flow.version.displayName} #${flow.id} is not valid`,
            };
        }
        try {
            yield flow_service_1.flowService.update({
                id: flowId,
                projectId,
                lock: true,
                userId: project.ownerId,
                operation: {
                    type: shared_1.FlowOperationType.LOCK_AND_PUBLISH,
                    request: {},
                },
            });
            return null;
        }
        catch (e) {
            return {
                flowId,
                message: `Failed to publish flow ${flow.version.displayName} #${flow.id}`,
            };
        }
    });
}
function upsertFlowToGit(fileName, flow, flowFolderPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flowJsonPath = path_1.default.join(flowFolderPath, `${fileName}.json`);
        yield promises_1.default.writeFile(flowJsonPath, JSON.stringify(flow, null, 2));
    });
}
function deleteFlowFromGit(flowId, flowFolderPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flowJsonPath = path_1.default.join(flowFolderPath, `${flowId}.json`);
        yield promises_1.default.unlink(flowJsonPath);
    });
}
function deleteFlowFromProject(flowId, projectId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flow = yield flow_service_1.flowService.getOne({ id: flowId, projectId });
        if (!flow) {
            return;
        }
        yield flow_service_1.flowService.delete({ id: flowId, projectId });
    });
}
exports.gitSyncHelper = {
    getStateFromDB,
    getStateFromGit,
    getMappingStateFromGit,
    upsertFlowToGit,
    deleteFlowFromGit,
    deleteFlowFromProject,
    createFlowInProject,
    updateFlowInProject,
    republishFlow,
};


/***/ }),
/* 716 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectState = exports.ProjectMappingState = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
class ProjectMappingState {
    constructor(data) {
        this.flows = data.flows;
    }
    mapFlow({ sourceId, targetId }) {
        return new ProjectMappingState(Object.assign(Object.assign({}, this), { flows: Object.assign(Object.assign({}, this.flows), { [targetId]: {
                    sourceId,
                } }) }));
    }
    clean({ projectFlows, gitFiles }) {
        const sourceIds = new Set(gitFiles.map(f => f.baseFilename));
        const targetIds = new Set(projectFlows.map(f => f.id));
        const filtered = Object.entries(this.flows).filter(([targetId, { sourceId }]) => {
            return sourceIds.has(sourceId) && targetIds.has(targetId);
        });
        return new ProjectMappingState({
            flows: Object.fromEntries(filtered),
        });
    }
    deleteFlow(targetId) {
        const _a = this.flows, _b = targetId, _ = _a[_b], rest = tslib_1.__rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        return new ProjectMappingState(Object.assign(Object.assign({}, this), { flows: rest }));
    }
    reverse() {
        const reversed = {};
        for (const [targetflowId, state] of Object.entries(this.flows)) {
            reversed[state.sourceId] = {
                sourceId: targetflowId,
            };
        }
        return new ProjectMappingState(Object.assign(Object.assign({}, this), { flows: reversed }));
    }
    findSourceId(targetflowId) {
        const state = this.flows[targetflowId];
        if ((0, shared_1.isNil)(state)) {
            return undefined;
        }
        return state.sourceId;
    }
    findTargetId(sourceId) {
        var _a;
        return (_a = Object.entries(this.flows).find(([_, value]) => value.sourceId === sourceId)) === null || _a === void 0 ? void 0 : _a[0];
    }
    static from(data) {
        return new ProjectMappingState(data);
    }
    static empty() {
        return new ProjectMappingState({
            flows: {},
        });
    }
}
exports.ProjectMappingState = ProjectMappingState;
exports.ProjectState = typebox_1.Type.Object({
    flows: typebox_1.Type.Array(shared_1.PopulatedFlow),
});


/***/ }),
/* 717 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectOperation = exports.GitFile = exports.projectDiffService = void 0;
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
exports.projectDiffService = {
    diff({ gitFiles, projectFlows, mapping }) {
        const createFlowOperation = findFlowsToCreate({ gitFiles, projectFlows, mapping });
        const deleteFlowOperation = findFlowsToDelete({ gitFiles, projectFlows, mapping });
        const updateFlowOperations = findFlowsToUpdate({ gitFiles, projectFlows, mapping });
        return [...deleteFlowOperation, ...createFlowOperation, ...updateFlowOperations];
    },
};
function findFlowsToCreate({ gitFiles, projectFlows, mapping }) {
    return gitFiles.filter((gitFile) => {
        const targetId = mapping.findTargetId(gitFile.baseFilename);
        return (0, shared_1.isNil)(targetId) || (0, shared_1.isNil)(projectFlows.find((fl) => fl.id === targetId));
    }).map((gitFile) => ({
        type: ee_shared_1.ProjectOperationType.CREATE_FLOW,
        gitFile,
    }));
}
function findFlowsToDelete({ gitFiles, projectFlows, mapping }) {
    return projectFlows.filter((f) => {
        const sourceId = mapping.findSourceId(f.id);
        return (0, shared_1.isNil)(sourceId) || (0, shared_1.isNil)(gitFiles.find((gitFlow) => gitFlow.baseFilename === sourceId));
    }).map((projectFlow) => ({
        type: ee_shared_1.ProjectOperationType.DELETE_FLOW,
        projectFlow,
    }));
}
function findFlowsToUpdate({ gitFiles, projectFlows, mapping }) {
    return gitFiles.filter((gitFile) => {
        const targetId = mapping.findTargetId(gitFile.baseFilename);
        return !(0, shared_1.isNil)(targetId) && !(0, shared_1.isNil)(projectFlows.find((fl) => fl.id === targetId));
    }).map((gitFile) => {
        const destFlowId = mapping.findTargetId(gitFile.baseFilename);
        const projectFlow = projectFlows.find((fl) => fl.id === destFlowId);
        (0, shared_1.assertNotNullOrUndefined)(projectFlow, `Could not find target flow for source flow ${gitFile.baseFilename}`);
        return {
            type: ee_shared_1.ProjectOperationType.UPDATE_FLOW,
            gitFile,
            projectFlow,
        };
    }).filter((op) => isFlowChanged(op.gitFile.flow, op.projectFlow));
}
function isFlowChanged(fromFlow, targetFlow) {
    return fromFlow.version.displayName !== targetFlow.version.displayName
        || JSON.stringify(shared_1.flowHelper.normalize(fromFlow.version).trigger) !== JSON.stringify(shared_1.flowHelper.normalize(targetFlow.version).trigger);
}
exports.GitFile = typebox_1.Type.Object({
    flow: shared_1.PopulatedFlow,
    baseFilename: typebox_1.Type.String(),
});
exports.ProjectOperation = typebox_1.Type.Union([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(ee_shared_1.ProjectOperationType.UPDATE_FLOW),
        gitFile: exports.GitFile,
        projectFlow: shared_1.PopulatedFlow,
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(ee_shared_1.ProjectOperationType.CREATE_FLOW),
        gitFile: exports.GitFile,
    }),
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal(ee_shared_1.ProjectOperationType.DELETE_FLOW),
        projectFlow: shared_1.PopulatedFlow,
    }),
]);


/***/ }),
/* 718 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issuesModule = void 0;
const tslib_1 = __webpack_require__(1);
const authorization_1 = __webpack_require__(470);
const ee_authorization_1 = __webpack_require__(656);
const issues_controller_1 = __webpack_require__(719);
const issuesModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    app.addHook('preHandler', (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.flowIssuesEnabled));
    yield app.register(issues_controller_1.issuesController, { prefix: '/v1/issues' });
});
exports.issuesModule = issuesModule;


/***/ }),
/* 719 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issuesController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const issues_service_1 = __webpack_require__(612);
const issuesController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', ListIssuesRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        return issues_service_1.issuesService.list({
            projectId: req.query.projectId,
            cursor: req.query.cursor,
            limit: (_a = req.query.limit) !== null && _a !== void 0 ? _a : 10,
        });
    }));
    app.get('/count', CountIssuesRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return issues_service_1.issuesService.count({
            projectId: req.principal.projectId,
        });
    }));
    app.post('/:id', UpdateIssueRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return issues_service_1.issuesService.updateById({
            id: req.params.id,
            status: req.body.status,
            projectId: req.principal.projectId,
        });
    }));
});
exports.issuesController = issuesController;
const ListIssuesRequest = {
    config: {
        allowedPrincipals: [
            shared_1.PrincipalType.USER,
        ],
        permission: shared_1.Permission.READ_ISSUES,
    },
    schema: {
        querystring: ee_shared_1.ListIssuesParams,
    },
};
const CountIssuesRequest = {
    config: {
        allowedPrincipals: [
            shared_1.PrincipalType.USER,
        ],
        permission: shared_1.Permission.READ_ISSUES,
    },
};
const UpdateIssueRequest = {
    config: {
        allowedPrincipals: [
            shared_1.PrincipalType.USER,
        ],
        permission: shared_1.Permission.WRITE_ISSUES,
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        body: ee_shared_1.UpdateIssueRequestBody,
    },
};


/***/ }),
/* 720 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.licenseKeysModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const platform_service_1 = __webpack_require__(459);
const license_keys_controller_1 = __webpack_require__(721);
const license_keys_service_1 = __webpack_require__(683);
const licenseKeysModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.TRIAL_TRACKER, licenseKeyJobHandler);
    yield system_jobs_1.systemJobsSchedule.upsertJob({
        job: {
            name: common_1.SystemJobName.TRIAL_TRACKER,
            data: {},
        },
        schedule: {
            type: 'repeated',
            cron: '*/59 23 * * *',
        },
    });
    yield app.register(license_keys_controller_1.licenseKeysController, { prefix: '/v1/license-keys' });
});
exports.licenseKeysModule = licenseKeysModule;
function licenseKeyJobHandler() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const platform = yield platform_service_1.platformService.getOldestPlatform();
        if ((0, shared_1.isNil)(platform)) {
            return;
        }
        yield license_keys_service_1.licenseKeysService.verifyKeyAndApplyLimits({
            platformId: platform.id,
            license: server_shared_1.system.get(server_shared_1.AppSystemProp.LICENSE_KEY),
        });
    });
}


/***/ }),
/* 721 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.licenseKeysController = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const license_keys_service_1 = __webpack_require__(683);
const key = server_shared_1.system.get(server_shared_1.AppSystemProp.LICENSE_KEY);
const licenseKeysController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', CreateTrialLicenseKeyRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return license_keys_service_1.licenseKeysService.requestTrial(req.body);
    }));
    app.get('/status', (_req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const licenseKey = yield license_keys_service_1.licenseKeysService.getKey(key);
        if ((0, shared_1.isNil)(licenseKey)) {
            return res.status(http_status_codes_1.StatusCodes.NOT_FOUND).send({
                message: 'No license key found',
            });
        }
        return licenseKey;
    }));
});
exports.licenseKeysController = licenseKeysController;
const CreateTrialLicenseKeyRequest = {
    config: {
        allowedPrincipals: [
            shared_1.PrincipalType.UNKNOWN,
            shared_1.PrincipalType.USER,
        ],
    },
    schema: {
        body: shared_1.CreateTrialLicenseKeyRequestBody,
    },
};


/***/ }),
/* 722 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.managedAuthnModule = void 0;
const tslib_1 = __webpack_require__(1);
const managed_authn_controller_1 = __webpack_require__(723);
const managedAuthnModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(managed_authn_controller_1.managedAuthnController, { prefix: '/v1/managed-authn' });
});
exports.managedAuthnModule = managedAuthnModule;


/***/ }),
/* 723 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.managedAuthnController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const application_events_1 = __webpack_require__(517);
const managed_authn_service_1 = __webpack_require__(724);
const managedAuthnController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/external-token', ManagedAuthnRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { externalAccessToken } = req.body;
        const response = yield managed_authn_service_1.managedAuthnService.externalToken({
            externalAccessToken,
        });
        application_events_1.eventsHooks.get().sendUserEvent(req, {
            action: ee_shared_1.ApplicationEventName.USER_SIGNED_UP,
            data: {
                source: 'managed',
            },
        });
        return response;
    }));
});
exports.managedAuthnController = managedAuthnController;
const ManagedAuthnRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: ee_shared_1.ManagedAuthnRequestBody,
    },
};


/***/ }),
/* 724 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.managedAuthnService = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const access_token_manager_1 = __webpack_require__(509);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const piece_tag_service_1 = __webpack_require__(450);
const user_service_1 = __webpack_require__(462);
const project_member_service_1 = __webpack_require__(631);
const project_plan_service_1 = __webpack_require__(591);
const external_token_extractor_1 = __webpack_require__(725);
exports.managedAuthnService = {
    externalToken(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ externalAccessToken, }) {
            const externalPrincipal = yield external_token_extractor_1.externalTokenExtractor.extract(externalAccessToken);
            const user = yield getOrCreateUser(externalPrincipal);
            const project = yield getOrCreateProject({
                platformId: externalPrincipal.platformId,
                externalProjectId: externalPrincipal.externalProjectId,
            });
            yield updateProjectLimits(project.platformId, project.id, externalPrincipal.pieces.tags, externalPrincipal.pieces.filterType);
            const projectMember = yield project_member_service_1.projectMemberService.upsert({
                projectId: project.id,
                userId: user.id,
                role: externalPrincipal.role,
            });
            const token = yield access_token_manager_1.accessTokenManager.generateToken({
                id: user.id,
                type: shared_1.PrincipalType.USER,
                projectId: project.id,
                platform: {
                    id: externalPrincipal.platformId,
                },
            });
            return Object.assign(Object.assign({}, user), { token, projectId: project.id, projectRole: projectMember.role });
        });
    },
};
const updateProjectLimits = (platformId, projectId, piecesTags, piecesFilterType) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const pieces = yield getPiecesList({
        platformId,
        projectId,
        piecesTags,
        piecesFilterType,
    });
    yield project_plan_service_1.projectLimitsService.upsert(Object.assign(Object.assign({}, ee_shared_1.DEFAULT_PLATFORM_LIMIT), { pieces,
        piecesFilterType }), projectId);
});
const getOrCreateUser = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { platformId, externalUserId, externalEmail, externalFirstName, externalLastName, } = params;
    const existingUser = yield user_service_1.userService.getByPlatformAndExternalId({
        platformId,
        externalId: externalUserId,
    });
    if (existingUser) {
        const { password: _ } = existingUser, user = tslib_1.__rest(existingUser, ["password"]);
        return user;
    }
    const _a = yield user_service_1.userService.create({
        email: externalEmail,
        password: yield server_shared_1.cryptoUtils.generateRandomPassword(),
        firstName: externalFirstName,
        lastName: externalLastName,
        trackEvents: true,
        newsLetter: false,
        platformRole: shared_1.PlatformRole.MEMBER,
        verified: true,
        externalId: externalUserId,
        platformId,
    }), { password: _ } = _a, newUser = tslib_1.__rest(_a, ["password"]);
    return newUser;
});
const getOrCreateProject = (_b) => tslib_1.__awaiter(void 0, [_b], void 0, function* ({ platformId, externalProjectId, }) {
    const existingProject = yield project_service_1.projectService.getByPlatformIdAndExternalId({
        platformId,
        externalId: externalProjectId,
    });
    if (existingProject) {
        return existingProject;
    }
    const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
    const project = yield project_service_1.projectService.create({
        displayName: externalProjectId,
        ownerId: platform.ownerId,
        platformId,
        externalId: externalProjectId,
    });
    return project;
});
const getPiecesList = (_c) => tslib_1.__awaiter(void 0, [_c], void 0, function* ({ piecesFilterType, piecesTags, platformId, }) {
    switch (piecesFilterType) {
        case shared_1.PiecesFilterType.ALLOWED: {
            return piece_tag_service_1.pieceTagService.findByPlatformAndTags(platformId, piecesTags);
        }
        case shared_1.PiecesFilterType.NONE: {
            return [];
        }
    }
});


/***/ }),
/* 725 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExternalTokenPayload = exports.externalTokenExtractor = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const jwt_utils_1 = __webpack_require__(510);
const signing_key_service_1 = __webpack_require__(726);
const ALGORITHM = jwt_utils_1.JwtSignAlgorithm.RS256;
exports.externalTokenExtractor = {
    extract(token) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f;
            const decoded = jwt_utils_1.jwtUtils.decode({ jwt: token });
            const signingKeyId = (_a = decoded === null || decoded === void 0 ? void 0 : decoded.header) === null || _a === void 0 ? void 0 : _a.kid;
            if ((0, shared_1.isNil)(signingKeyId)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_BEARER_TOKEN,
                    params: {
                        message: 'signing key id is not found in the header',
                    },
                });
            }
            const signingKey = yield getSigningKey({
                signingKeyId,
            });
            try {
                const payload = yield jwt_utils_1.jwtUtils.decodeAndVerify({
                    jwt: token,
                    key: signingKey.publicKey,
                    algorithm: ALGORITHM,
                    issuer: null,
                });
                return {
                    platformId: signingKey.platformId,
                    externalUserId: payload.externalUserId,
                    externalProjectId: payload.externalProjectId,
                    externalEmail: payload.email,
                    externalFirstName: payload.firstName,
                    externalLastName: payload.lastName,
                    role: (_b = payload === null || payload === void 0 ? void 0 : payload.role) !== null && _b !== void 0 ? _b : shared_1.ProjectMemberRole.EDITOR,
                    pieces: {
                        filterType: (_d = (_c = payload === null || payload === void 0 ? void 0 : payload.pieces) === null || _c === void 0 ? void 0 : _c.filterType) !== null && _d !== void 0 ? _d : shared_1.PiecesFilterType.NONE,
                        tags: (_f = (_e = payload === null || payload === void 0 ? void 0 : payload.pieces) === null || _e === void 0 ? void 0 : _e.tags) !== null && _f !== void 0 ? _f : [],
                    },
                };
            }
            catch (error) {
                server_shared_1.logger.error({ name: 'ExternalTokenExtractor#extract', error });
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.INVALID_BEARER_TOKEN,
                    params: {
                        message: error instanceof Error ? error.message : 'error decoding token',
                    },
                });
            }
        });
    },
};
const getSigningKey = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ signingKeyId, }) {
    const signingKey = yield signing_key_service_1.signingKeyService.get({
        id: signingKeyId,
    });
    if ((0, shared_1.isNil)(signingKey)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.INVALID_BEARER_TOKEN,
            params: {
                message: `signing key not found signingKeyId=${signingKeyId}`,
            },
        });
    }
    return signingKey;
});
function externalTokenPayload() {
    const v1 = typebox_1.Type.Object({
        externalUserId: typebox_1.Type.String(),
        externalProjectId: typebox_1.Type.String(),
        email: typebox_1.Type.String(),
        firstName: typebox_1.Type.String(),
        lastName: typebox_1.Type.String(),
    });
    const v2 = typebox_1.Type.Composite([v1,
        typebox_1.Type.Object({
            role: typebox_1.Type.Optional(typebox_1.Type.Enum(shared_1.ProjectMemberRole)),
            pieces: typebox_1.Type.Optional(typebox_1.Type.Object({
                filterType: typebox_1.Type.Enum(shared_1.PiecesFilterType),
                tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
            })),
        }),
    ]);
    return v2;
}
exports.ExternalTokenPayload = externalTokenPayload();


/***/ }),
/* 726 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.signingKeyService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const signing_key_entity_1 = __webpack_require__(246);
const signing_key_generator_1 = __webpack_require__(727);
const repo = (0, repo_factory_1.repoFactory)(signing_key_entity_1.SigningKeyEntity);
exports.signingKeyService = {
    add(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, displayName }) {
            const generatedSigningKey = yield signing_key_generator_1.signingKeyGenerator.generate();
            const newSigningKey = {
                id: (0, shared_1.apId)(),
                platformId,
                publicKey: generatedSigningKey.publicKey,
                algorithm: generatedSigningKey.algorithm,
                displayName,
            };
            const savedKeyPair = yield repo().save(newSigningKey);
            return Object.assign(Object.assign({}, savedKeyPair), { privateKey: generatedSigningKey.privateKey });
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId }) {
            const data = yield repo().findBy({
                platformId,
            });
            return {
                data,
                next: null,
                previous: null,
            };
        });
    },
    get(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ id }) {
            return repo().findOneBy({
                id,
            });
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ platformId, id }) {
            const entity = yield repo().findOneBy({
                platformId,
                id,
            });
            if ((0, shared_1.isNil)(entity)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                    params: {
                        message: `signing key with id ${id} not found`,
                    },
                });
            }
            yield repo().delete({
                platformId,
                id,
            });
        });
    },
};


/***/ }),
/* 727 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.signingKeyGenerator = void 0;
const tslib_1 = __webpack_require__(1);
const node_crypto_1 = __webpack_require__(121);
const node_util_1 = __webpack_require__(122);
const ee_shared_1 = __webpack_require__(134);
const generateKeyPair = (0, node_util_1.promisify)(node_crypto_1.generateKeyPair);
exports.signingKeyGenerator = {
    generate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const algorithm = 'rsa';
            const options = {
                modulusLength: 4096,
                publicKeyEncoding: {
                    type: 'pkcs1',
                    format: 'pem',
                },
                privateKeyEncoding: {
                    type: 'pkcs1',
                    format: 'pem',
                },
            };
            const keyPair = yield generateKeyPair(algorithm, options);
            return Object.assign(Object.assign({}, keyPair), { algorithm: ee_shared_1.KeyAlgorithm.RSA });
        });
    },
};


/***/ }),
/* 728 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.oauthAppModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const ee_authorization_1 = __webpack_require__(656);
const oauth_app_service_1 = __webpack_require__(662);
const oauthAppModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(readOauthAppModule);
    yield app.register(writeOauthAppModule);
});
exports.oauthAppModule = oauthAppModule;
const readOauthAppModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(readOauthAppController, { prefix: '/v1/oauth-apps' });
});
const readOauthAppController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', {
        schema: {
            querystring: ee_shared_1.ListOAuth2AppRequest,
            response: {
                [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(ee_shared_1.OAuthApp),
            },
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return oauth_app_service_1.oauthAppService.list({
            platformId,
            request: request.query,
        });
    }));
});
const writeOauthAppModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preHandler', ee_authorization_1.platformMustBeOwnedByCurrentUser);
    yield app.register(oauthAppController, { prefix: '/v1/oauth-apps' });
});
const oauthAppController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', {
        schema: {
            body: ee_shared_1.UpsertOAuth2AppRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return oauth_app_service_1.oauthAppService.upsert({
            platformId,
            request: request.body,
        });
    }));
    app.delete('/:id', {
        schema: {
            params: GetIdParams,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return oauth_app_service_1.oauthAppService.delete({
            platformId,
            id: request.params.id,
        });
    }));
});
const GetIdParams = type_provider_typebox_1.Type.Object({
    id: type_provider_typebox_1.Type.String(),
});


/***/ }),
/* 729 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.otpModule = void 0;
const tslib_1 = __webpack_require__(1);
const otp_controller_1 = __webpack_require__(730);
const otpModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(otp_controller_1.otpController, { prefix: '/v1/otp' });
});
exports.otpModule = otpModule;


/***/ }),
/* 730 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.otpController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const platform_utils_1 = __webpack_require__(634);
const otp_service_1 = __webpack_require__(676);
const otpController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', CreateOtpRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = yield (0, platform_utils_1.resolvePlatformIdForAuthnRequest)(req.body.email, req);
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        yield otp_service_1.otpService.createAndSend({
            platformId,
            email: req.body.email,
            type: req.body.type,
        });
        return res.code(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
});
exports.otpController = otpController;
const CreateOtpRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: ee_shared_1.CreateOtpRequestBody,
    },
};


/***/ }),
/* 731 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.adminPieceModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const piece_metadata_service_1 = __webpack_require__(222);
const admin_piece_requests_ee_1 = __webpack_require__(732);
const adminPieceModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(adminPieceController, { prefix: '/v1/admin/pieces' });
});
exports.adminPieceModule = adminPieceModule;
const adminPieceController = (app, _opts, done) => {
    app.post('/', admin_piece_requests_ee_1.CreatePieceRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return piece_metadata_service_1.pieceMetadataService.create({
            pieceMetadata: req.body,
            packageType: shared_1.PackageType.REGISTRY,
            pieceType: shared_1.PieceType.OFFICIAL,
        });
    }));
    done();
};


/***/ }),
/* 732 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreatePieceRequest = void 0;
const pieces_framework_1 = __webpack_require__(174);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const Action = type_provider_typebox_1.Type.Object({
    name: type_provider_typebox_1.Type.String(),
    displayName: type_provider_typebox_1.Type.String(),
    description: type_provider_typebox_1.Type.String(),
    requireAuth: type_provider_typebox_1.Type.Boolean(),
    props: type_provider_typebox_1.Type.Unknown(),
    errorHandlingOptions: type_provider_typebox_1.Type.Optional(pieces_framework_1.ErrorHandlingOptionsParam),
});
const Trigger = type_provider_typebox_1.Type.Composite([
    type_provider_typebox_1.Type.Omit(Action, ['requireAuth']),
    type_provider_typebox_1.Type.Object({
        renewConfiguration: type_provider_typebox_1.Type.Optional(pieces_framework_1.WebhookRenewConfiguration),
        handshakeConfiguration: pieces_framework_1.WebhookHandshakeConfiguration,
        sampleData: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.Unknown()),
        type: type_provider_typebox_1.Type.Enum(pieces_framework_1.TriggerStrategy),
        testStrategy: type_provider_typebox_1.Type.Enum(shared_1.TriggerTestStrategy),
    }),
]);
exports.CreatePieceRequest = {
    schema: {
        body: type_provider_typebox_1.Type.Object({
            name: type_provider_typebox_1.Type.String(),
            displayName: type_provider_typebox_1.Type.String(),
            logoUrl: type_provider_typebox_1.Type.String(),
            description: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.String()),
            version: shared_1.ExactVersionType,
            auth: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.Any()),
            authors: type_provider_typebox_1.Type.Array(type_provider_typebox_1.Type.String()),
            categories: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.Array(type_provider_typebox_1.Type.Enum(shared_1.PieceCategory))),
            minimumSupportedRelease: shared_1.ExactVersionType,
            maximumSupportedRelease: shared_1.ExactVersionType,
            actions: type_provider_typebox_1.Type.Record(type_provider_typebox_1.Type.String(), Action),
            triggers: type_provider_typebox_1.Type.Record(type_provider_typebox_1.Type.String(), Trigger),
        }),
    },
    config: {
        allowedPrincipals: [shared_1.PrincipalType.SUPER_USER],
    },
};


/***/ }),
/* 733 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enterprisePieceMetadataServiceHooks = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const hooks_1 = __webpack_require__(456);
const platform_service_1 = __webpack_require__(459);
const project_plan_service_1 = __webpack_require__(591);
exports.enterprisePieceMetadataServiceHooks = {
    filterPieces(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { platformId, includeHidden, pieces, projectId } = params;
            if ((0, shared_1.isNil)(platformId) || includeHidden) {
                return hooks_1.defaultPieceHooks.filterPieces(Object.assign(Object.assign({}, params), { pieces }));
            }
            const resultPieces = yield filterPiecesBasedPlatform(platformId, pieces);
            const piecesAfterDefaultFilter = yield hooks_1.defaultPieceHooks.filterPieces(Object.assign(Object.assign({}, params), { pieces: resultPieces }));
            if ((0, shared_1.isNil)(projectId)) {
                return piecesAfterDefaultFilter;
            }
            return filterBasedOnProject(projectId, piecesAfterDefaultFilter);
        });
    },
};
function filterBasedOnProject(projectId, pieces) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { pieces: allowedPieces, piecesFilterType } = yield project_plan_service_1.projectLimitsService.getPiecesFilter(projectId);
        const filterPredicate = {
            [shared_1.PiecesFilterType.NONE]: () => true,
            [shared_1.PiecesFilterType.ALLOWED]: (p) => allowedPieces.includes(p.name),
        };
        const predicate = filterPredicate[piecesFilterType];
        return pieces.slice().filter(predicate);
    });
}
/*
    @deprecated This function is deprecated and will be removed in the future. replaced with project filtering
*/
function filterPiecesBasedPlatform(platformId, pieces) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
        const filterPredicate = {
            [shared_1.FilteredPieceBehavior.ALLOWED]: (p) => platform.filteredPieceNames.includes(p.name),
            [shared_1.FilteredPieceBehavior.BLOCKED]: (p) => !platform.filteredPieceNames.includes(p.name),
        };
        const predicate = filterPredicate[platform.filteredPieceBehavior];
        return pieces.slice().filter(predicate);
    });
}


/***/ }),
/* 734 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformPieceModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const piece_service_1 = __webpack_require__(735);
const ee_authorization_1 = __webpack_require__(656);
const platformPieceModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(platformPieceController, { prefix: '/v1/pieces' });
});
exports.platformPieceModule = platformPieceModule;
const platformPieceController = (app, _opts, done) => {
    app.post('/', installPieceParams, (req, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        yield ee_authorization_1.platformMustBeOwnedByCurrentUser.call(app, req, reply);
        assertProjectScopeOnlyAllowedForUser(req.body.scope, req.principal);
        yield piece_service_1.pieceService.installPiece(platformId, req.principal.projectId, req.body);
        yield reply.status(http_status_codes_1.StatusCodes.CREATED).send({});
    }));
    done();
};
const installPieceParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        tags: ['pieces'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        summary: 'Add a piece to a platform',
        description: 'Add a piece to a platform',
        body: shared_1.AddPieceRequestBody,
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: type_provider_typebox_1.Type.Object({}),
        },
    },
};
function assertProjectScopeOnlyAllowedForUser(scope, principal) {
    if (scope === shared_1.PieceScope.PROJECT && principal.type !== shared_1.PrincipalType.USER) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.ENGINE_OPERATION_FAILURE,
            params: {
                message: 'Project scope is only allowed for user token',
            },
        });
    }
}


/***/ }),
/* 735 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieceService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const server_worker_1 = __webpack_require__(474);
const file_service_1 = __webpack_require__(223);
const piece_metadata_service_1 = __webpack_require__(222);
exports.pieceService = {
    installPiece(platformId, projectId, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            assertInstallProjectEnabled(params.scope);
            try {
                const piecePackage = yield getPiecePackage(platformId, projectId, params);
                const pieceInformation = yield extractPieceInformation(piecePackage);
                const archiveId = piecePackage.packageType === shared_1.PackageType.ARCHIVE ? piecePackage.archiveId : undefined;
                const savedPiece = yield piece_metadata_service_1.pieceMetadataService.create({
                    pieceMetadata: Object.assign(Object.assign({}, pieceInformation), { minimumSupportedRelease: (_a = pieceInformation.minimumSupportedRelease) !== null && _a !== void 0 ? _a : '0.0.0', maximumSupportedRelease: (_b = pieceInformation.maximumSupportedRelease) !== null && _b !== void 0 ? _b : '999.999.999', name: pieceInformation.name, version: pieceInformation.version }),
                    projectId: params.scope === shared_1.PieceScope.PROJECT ? projectId : undefined,
                    packageType: params.packageType,
                    platformId,
                    pieceType: shared_1.PieceType.CUSTOM,
                    archiveId,
                });
                return savedPiece;
            }
            catch (error) {
                server_shared_1.logger.error(error, '[PieceService#add]');
                if (error.error.code === shared_1.ErrorCode.VALIDATION) {
                    throw error;
                }
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.ENGINE_OPERATION_FAILURE,
                    params: {
                        message: JSON.stringify(error),
                    },
                });
            }
        });
    },
};
const assertInstallProjectEnabled = (scope) => {
    if (scope === shared_1.PieceScope.PROJECT) {
        const sandboxMode = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.EXECUTION_MODE);
        const edition = server_shared_1.system.getEdition();
        if (sandboxMode === server_shared_1.ExecutionMode.UNSANDBOXED &&
            [shared_1.ApEdition.ENTERPRISE, shared_1.ApEdition.CLOUD].includes(edition)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHORIZATION,
                params: {
                    message: 'Project pieces are not supported in this edition with unsandboxed execution mode',
                },
            });
        }
    }
};
const getPiecePackage = (platformId, projectId, params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    switch (params.packageType) {
        case shared_1.PackageType.ARCHIVE: {
            const archiveId = yield saveArchive({
                projectId: params.scope === shared_1.PieceScope.PROJECT ? projectId : undefined,
                platformId,
                archive: params.pieceArchive,
            });
            return Object.assign(Object.assign({}, params), { pieceType: shared_1.PieceType.CUSTOM, archive: params.pieceArchive, archiveId, packageType: params.packageType });
        }
        case shared_1.PackageType.REGISTRY: {
            return Object.assign(Object.assign({}, params), { pieceType: shared_1.PieceType.CUSTOM });
        }
    }
});
const extractPieceInformation = (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const engineResponse = yield server_worker_1.engineRunner.extractPieceMetadata(request);
    if (engineResponse.status !== shared_1.EngineResponseStatus.OK) {
        throw new Error(engineResponse.standardError);
    }
    return engineResponse.result;
});
const saveArchive = (params) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { projectId, platformId, archive } = params;
    const archiveFile = yield file_service_1.fileService.save({
        projectId: (0, shared_1.isNil)(platformId) ? projectId : undefined,
        platformId,
        data: archive,
        type: shared_1.FileType.PACKAGE_ARCHIVE,
        compression: shared_1.FileCompression.NONE,
    });
    return archiveFile.id;
});


/***/ }),
/* 736 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.adminPlatformPieceModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const admin_platform_service_1 = __webpack_require__(737);
const adminPlatformPieceModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(adminPlatformController, { prefix: '/v1/admin/platforms' });
});
exports.adminPlatformPieceModule = adminPlatformPieceModule;
const adminPlatformController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', AdminAddPlatformRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const newPlatform = yield admin_platform_service_1.adminPlatformService.add(req.body);
        return res.status(http_status_codes_1.StatusCodes.CREATED).send(newPlatform);
    }));
});
const AdminAddPlatformRequest = {
    schema: {
        body: shared_1.AdminAddPlatformRequestBody,
    },
    config: {
        allowedPrincipals: [shared_1.PrincipalType.SUPER_USER],
    },
};


/***/ }),
/* 737 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.adminPlatformService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
exports.adminPlatformService = {
    add(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ userId, projectId, name, }) {
            const project = yield getProjectOrThrow(projectId);
            const platform = yield platform_service_1.platformService.create({
                ownerId: userId,
                name,
            });
            yield project_service_1.projectService.addProjectToPlatform({
                projectId: project.id,
                platformId: platform.id,
            });
            return platform;
        });
    },
};
const getProjectOrThrow = (projectId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const project = yield project_service_1.projectService.getOne(projectId);
    if ((0, shared_1.isNil)(project)) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
            params: {
                entityId: projectId,
                entityType: 'project',
            },
        });
    }
    return project;
});


/***/ }),
/* 738 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectMemberModule = void 0;
const tslib_1 = __webpack_require__(1);
const authorization_1 = __webpack_require__(470);
const ee_authorization_1 = __webpack_require__(656);
const project_member_controller_1 = __webpack_require__(739);
const projectMemberModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    app.addHook('preHandler', (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.projectRolesEnabled));
    yield app.register(project_member_controller_1.projectMemberController, {
        prefix: '/v1/project-members',
    });
});
exports.projectMemberModule = projectMemberModule;


/***/ }),
/* 739 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectMemberController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const http_status_codes_1 = __webpack_require__(481);
const project_member_service_1 = __webpack_require__(631);
const DEFAULT_LIMIT_SIZE = 10;
const projectMemberController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', UpsertProjectMemberRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { userId, projectId, role } = request.body;
        const projectMember = yield project_member_service_1.projectMemberService.upsert({
            userId,
            projectId,
            role,
        });
        yield reply.status(http_status_codes_1.StatusCodes.CREATED).send(projectMember);
    }));
    app.get('/', ListProjectMembersRequestQueryOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        return project_member_service_1.projectMemberService.list(request.principal.projectId, (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null, (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_LIMIT_SIZE);
    }));
    app.delete('/:id', DeleteProjectMemberRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield project_member_service_1.projectMemberService.delete(request.principal.projectId, request.params.id);
        yield reply.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
});
exports.projectMemberController = projectMemberController;
const UpsertProjectMemberRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.WRITE_PROJECT_MEMBER,
    },
    schema: {
        tags: ['project-members'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        body: ee_shared_1.UpsertProjectMemberRequestBody,
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: ee_shared_1.ProjectMember,
        },
    },
};
const ListProjectMembersRequestQueryOptions = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.READ_PROJECT_MEMBER,
    },
    schema: {
        tags: ['project-members'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        querystring: ee_shared_1.ListProjectMembersRequestQuery,
        responnse: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(ee_shared_1.ProjectMemberWithUser),
        },
    },
};
const DeleteProjectMemberRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.WRITE_PROJECT_MEMBER,
    },
    schema: {
        tags: ['project-members'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        response: {
            [http_status_codes_1.StatusCodes.NO_CONTENT]: typebox_1.Type.Undefined(),
        },
        params: typebox_1.Type.Object({
            id: typebox_1.Type.String(),
        }),
    },
};


/***/ }),
/* 740 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectEnterpriseHooks = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const user_service_1 = __webpack_require__(462);
const alerts_service_1 = __webpack_require__(602);
exports.projectEnterpriseHooks = {
    postCreate(project) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const owner = yield user_service_1.userService.getOneOrFail({
                id: project.ownerId,
            });
            yield alerts_service_1.alertsService.add({
                channel: ee_shared_1.AlertChannel.EMAIL,
                projectId: project.id,
                receiver: owner.email,
            });
        });
    },
};


/***/ }),
/* 741 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformProjectModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const project_worker_controller_1 = __webpack_require__(742);
const platform_project_controller_1 = __webpack_require__(743);
const platform_project_service_1 = __webpack_require__(680);
const platform_user_project_controller_1 = __webpack_require__(744);
const platformProjectModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.HARD_DELETE_PROJECT, (job) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        server_shared_1.logger.info({ name: 'PlatformProjectSideEffects#hardDeleteProjectJobHandler', projectId: job.projectId });
        yield platform_project_service_1.platformProjectService.hardDelete({ id: job.projectId });
    }));
    yield app.register(platform_project_controller_1.platformProjectController, { prefix: '/v1/projects' });
    yield app.register(platform_user_project_controller_1.usersProjectController, { prefix: '/v1/users/projects' });
    yield app.register(project_worker_controller_1.projectWorkerController, { prefix: '/v1/worker/project' });
});
exports.platformProjectModule = platformProjectModule;


/***/ }),
/* 742 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectWorkerController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const project_service_1 = __webpack_require__(448);
const projectWorkerController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', GetWorkerProjectRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const projectId = req.principal.projectId;
        return project_service_1.projectService.getOneOrThrow(projectId);
    }));
});
exports.projectWorkerController = projectWorkerController;
const GetWorkerProjectRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.ENGINE],
    },
};


/***/ }),
/* 743 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformProjectController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const platform_service_1 = __webpack_require__(459);
const project_service_1 = __webpack_require__(448);
const user_service_1 = __webpack_require__(462);
const ee_authorization_1 = __webpack_require__(656);
const project_plan_service_1 = __webpack_require__(591);
const platform_project_service_1 = __webpack_require__(680);
const DEFAULT_LIMIT_SIZE = 50;
const platformProjectController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', CreateProjectRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        const platform = yield platform_service_1.platformService.getOneOrThrow(platformId);
        const project = yield project_service_1.projectService.create({
            ownerId: platform.ownerId,
            displayName: request.body.displayName,
            platformId,
            externalId: request.body.externalId,
        });
        yield project_plan_service_1.projectLimitsService.upsert(ee_shared_1.DEFAULT_PLATFORM_LIMIT, project.id);
        const projectWithUsage = yield platform_project_service_1.platformProjectService.getWithPlanAndUsageOrThrow(project.id);
        yield reply.status(http_status_codes_1.StatusCodes.CREATED).send(projectWithUsage);
    }));
    app.get('/', ListProjectRequestForApiKey, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return platform_project_service_1.platformProjectService.getAll({
            externalId: request.query.externalId,
            principalType: request.principal.type,
            principalId: request.principal.id,
            platformId: request.principal.platform.id,
            cursorRequest: (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null,
            limit: (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_LIMIT_SIZE,
        });
    }));
    app.post('/:id', UpdateProjectRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const project = yield project_service_1.projectService.getOneOrThrow(request.params.id);
        const haveTokenForTheProject = request.principal.projectId === project.id;
        const ownThePlatform = yield isPlatformAdmin(request.principal, project.platformId);
        if (!haveTokenForTheProject && !ownThePlatform) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.AUTHORIZATION,
                params: {},
            });
        }
        return platform_project_service_1.platformProjectService.update({
            platformId: request.principal.platform.id,
            projectId: request.params.id,
            request: request.body,
        });
    }));
    app.delete('/:id', DeleteProjectRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield ee_authorization_1.platformMustBeOwnedByCurrentUser.call(app, req, res);
        assertProjectToDeleteIsNotPrincipalProject(req.principal, req.params.id);
        yield platform_project_service_1.platformProjectService.softDelete({
            id: req.params.id,
            platformId: req.principal.platform.id,
        });
        return res.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
});
exports.platformProjectController = platformProjectController;
function isPlatformAdmin(principal, platformId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (principal.platform.id !== platformId) {
            return false;
        }
        if (principal.type === shared_1.PrincipalType.SERVICE) {
            return true;
        }
        const user = yield user_service_1.userService.getMetaInfo({
            id: principal.id,
        });
        (0, shared_1.assertNotNullOrUndefined)(user, 'user can not be null');
        return user.platformRole === shared_1.PlatformRole.ADMIN;
    });
}
const assertProjectToDeleteIsNotPrincipalProject = (principal, projectId) => {
    if (principal.projectId === projectId) {
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.VALIDATION,
            params: {
                message: 'ACTIVE_PROJECT',
            },
        });
    }
};
const UpdateProjectRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
        permission: shared_1.Permission.WRITE_RPOJECT,
    },
    schema: {
        tags: ['projects'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.ProjectWithLimits,
        },
        body: ee_shared_1.UpdateProjectPlatformRequest,
    },
};
const CreateProjectRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        tags: ['projects'],
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: shared_1.ProjectWithLimits,
        },
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        body: ee_shared_1.CreatePlatformProjectRequest,
    },
};
const ListProjectRequestForApiKey = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.ProjectWithLimits),
        },
        querystring: type_provider_typebox_1.Type.Object({
            externalId: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.String()),
            limit: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.Number({})),
            cursor: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.String({})),
        }),
        tags: ['projects'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
    },
};
const DeleteProjectRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
        tags: ['projects'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
    },
};


/***/ }),
/* 744 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.usersProjectController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const access_token_manager_1 = __webpack_require__(509);
const platform_service_1 = __webpack_require__(459);
const platform_project_service_1 = __webpack_require__(680);
const usersProjectController = (fastify, _opts, done) => {
    fastify.get('/:id', (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return platform_project_service_1.platformProjectService.getWithPlanAndUsageOrThrow(request.principal.projectId);
    }));
    fastify.get('/', ListProjectRequestForUser, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        return platform_project_service_1.platformProjectService.getAll({
            principalType: request.principal.type,
            principalId: request.principal.id,
            platformId: request.principal.platform.id,
            cursorRequest: (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null,
            limit: (_b = request.query.limit) !== null && _b !== void 0 ? _b : 10,
        });
    }));
    fastify.post('/:projectId/token', SwitchTokenRequestForUser, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const allProjects = yield platform_project_service_1.platformProjectService.getAll({
            principalType: request.principal.type,
            principalId: request.principal.id,
            platformId: request.principal.platform.id,
            cursorRequest: null,
            limit: 1000000,
        });
        const project = allProjects.data.find((project) => project.id === request.params.projectId);
        if (!project) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                params: {
                    entityId: request.params.projectId,
                    entityType: 'project',
                },
            });
        }
        const platform = yield platform_service_1.platformService.getOneOrThrow(project.platformId);
        return {
            token: yield access_token_manager_1.accessTokenManager.generateToken({
                id: request.principal.id,
                type: request.principal.type,
                projectId: request.params.projectId,
                platform: {
                    id: platform.id,
                },
            }),
        };
    }));
    done();
};
exports.usersProjectController = usersProjectController;
const SwitchTokenRequestForUser = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            projectId: type_provider_typebox_1.Type.String(),
        }),
    },
};
const ListProjectRequestForUser = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
    schema: {
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.ProjectWithLimits),
        },
        querystring: shared_1.ListProjectRequestForUserQueryParams,
    },
};


/***/ }),
/* 745 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.referralModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const referral_service_1 = __webpack_require__(678);
const referralModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(referralController, { prefix: '/v1/referrals' });
});
exports.referralModule = referralModule;
const DEFAULT_LIMIT_SIZE = 10;
const referralController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/', {
        schema: {
            querystring: ee_shared_1.ListReferralsRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        return referral_service_1.referralService.list(request.principal.id, (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null, (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_LIMIT_SIZE);
    }));
});


/***/ }),
/* 746 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.signingKeyModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_authorization_1 = __webpack_require__(656);
const signing_key_controller_1 = __webpack_require__(747);
const signingKeyModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preHandler', ee_authorization_1.platformMustBeOwnedByCurrentUser);
    yield app.register(signing_key_controller_1.signingKeyController, { prefix: '/v1/signing-keys' });
});
exports.signingKeyModule = signingKeyModule;


/***/ }),
/* 747 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.signingKeyController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const application_events_1 = __webpack_require__(517);
const signing_key_service_1 = __webpack_require__(726);
const signingKeyController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', AddSigningKeyRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        const newSigningKey = yield signing_key_service_1.signingKeyService.add({
            platformId,
            displayName: req.body.displayName,
        });
        application_events_1.eventsHooks.get().sendUserEvent(req, {
            action: ee_shared_1.ApplicationEventName.SIGNING_KEY_CREATED,
            data: {
                signingKey: newSigningKey,
            },
        });
        return res.status(http_status_codes_1.StatusCodes.CREATED).send(newSigningKey);
    }));
    app.get('/', {}, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return signing_key_service_1.signingKeyService.list({
            platformId,
        });
    }));
    app.get('/:id', GetSigningKeyRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        const signingKey = yield signing_key_service_1.signingKeyService.get({
            id: req.params.id,
        });
        if ((0, shared_1.isNil)(signingKey)) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                params: {
                    message: `SigningKey with id ${req.params.id} not found`,
                },
            });
        }
        return signingKey;
    }));
    app.delete('/:id', DeleteSigningKeyRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        yield signing_key_service_1.signingKeyService.delete({
            id: req.params.id,
            platformId,
        });
        return res.status(http_status_codes_1.StatusCodes.OK).send();
    }));
});
exports.signingKeyController = signingKeyController;
const AddSigningKeyRequest = {
    schema: {
        body: ee_shared_1.AddSigningKeyRequestBody,
    },
};
const GetSigningKeyRequest = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
    },
};
const DeleteSigningKeyRequest = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
    },
};


/***/ }),
/* 748 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.usageTrackerModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const flag_service_1 = __webpack_require__(578);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const platform_entity_1 = __webpack_require__(256);
const project_entity_1 = __webpack_require__(257);
const user_entity_1 = __webpack_require__(261);
const userRepo = (0, repo_factory_1.repoFactory)(user_entity_1.UserEntity);
const projectRepo = (0, repo_factory_1.repoFactory)(project_entity_1.ProjectEntity);
const platformRepo = (0, repo_factory_1.repoFactory)(platform_entity_1.PlatformEntity);
const usageTrackerModule = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.USAGE_REPORT, sendUsageReport);
    yield system_jobs_1.systemJobsSchedule.upsertJob({
        job: {
            name: common_1.SystemJobName.USAGE_REPORT,
            data: {},
        },
        schedule: {
            type: 'repeated',
            cron: '*/59 23 * * *',
        },
    });
});
exports.usageTrackerModule = usageTrackerModule;
function sendUsageReport(job) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const startOfDay = (0, dayjs_1.default)(job.timestamp).startOf('day').toISOString();
        const endOfDay = (0, dayjs_1.default)(job.timestamp).endOf('day').toISOString();
        const platforms = yield platformRepo().find();
        const reports = [];
        for (const platform of platforms) {
            if (flag_service_1.flagService.isCloudPlatform(platform.id)) {
                continue;
            }
            const report = yield constructUsageReport(platform, startOfDay, endOfDay);
            reports.push(report);
        }
        yield fetch('https://cloud.activepieces.com/api/v1/webhooks/ophE6T5QJBe7O3QT0sjvn', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(reports),
        });
    });
}
function constructUsageReport(platform, startDate, endDate) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const licenseKey = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.LICENSE_KEY);
        const version = yield flag_service_1.flagService.getCurrentRelease();
        const addedProjects = yield getAddedProjects(platform.id, startDate, endDate);
        const addedUsers = yield getAddedUsers(platform.id, startDate, endDate);
        const activeProjects = yield projectRepo().countBy({
            platformId: (0, typeorm_1.Equal)(platform.id),
        });
        const activeUsers = yield userRepo().countBy({
            platformId: (0, typeorm_1.Equal)(platform.id),
        });
        return {
            platformId: platform.id,
            platformName: platform.name,
            timestamp: startDate,
            version,
            licenseKey,
            activeUsers,
            deletedUsers: 0,
            addedUsers: addedUsers.length,
            activeProjects,
            deletedProjects: 0,
            addedProjects: addedProjects.length,
            details: {
                users: addedUsers,
                projects: addedProjects,
            },
        };
    });
}
function getAddedUsers(platformId, startDate, endDate) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const users = yield userRepo().findBy({
            platformId: (0, typeorm_1.Equal)(platformId),
            created: (0, typeorm_1.Between)(startDate, endDate),
        });
        return users.map((user) => ({
            id: user.id,
            operation: 'add',
            timestamp: user.created,
        }));
    });
}
function getAddedProjects(platformId, startDate, endDate) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = yield projectRepo().findBy({
            created: (0, typeorm_1.Between)(startDate, endDate),
            platformId: (0, typeorm_1.Equal)(platformId),
        });
        return projects.map((project) => ({
            id: project.id,
            operation: 'add',
            timestamp: project.created,
        }));
    });
}


/***/ }),
/* 749 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileModule = void 0;
const tslib_1 = __webpack_require__(1);
const file_controller_1 = __webpack_require__(750);
const fileModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(file_controller_1.fileController, { prefix: '/v1/files' });
});
exports.fileModule = fileModule;


/***/ }),
/* 750 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fileController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const file_service_1 = __webpack_require__(223);
const fileController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/:fileId', GetFileRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { fileId } = request.params;
        const file = yield file_service_1.fileService.getOneOrThrow({
            projectId: request.principal.projectId,
            fileId,
        });
        return reply
            .type('application/zip')
            .status(http_status_codes_1.StatusCodes.OK)
            .send(file.data);
    }));
});
exports.fileController = fileController;
const GetFileRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            fileId: type_provider_typebox_1.Type.String(),
        }),
    },
};


/***/ }),
/* 751 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flagController = exports.flagModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const flag_service_1 = __webpack_require__(578);
const flags_hooks_1 = __webpack_require__(752);
const flagModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(exports.flagController, { prefix: '/v1/flags' });
});
exports.flagModule = flagModule;
const flagController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        logLevel: 'silent',
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const flags = yield flag_service_1.flagService.getAll();
        const flagsMap = flags.reduce((map, flag) => (Object.assign(Object.assign({}, map), { [flag.id]: flag.value })), {});
        return flags_hooks_1.flagHooks.get().modify({
            flags: flagsMap,
            request,
        });
    }));
});
exports.flagController = flagController;


/***/ }),
/* 752 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flagHooks = void 0;
const tslib_1 = __webpack_require__(1);
let hooks = {
    modify(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return params.flags;
        });
    },
};
exports.flagHooks = {
    set(newHooks) {
        hooks = newHooks;
    },
    get() {
        return hooks;
    },
};


/***/ }),
/* 753 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.communityFlowTemplateModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const pagination_utils_1 = __webpack_require__(454);
const communityFlowTemplateModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(flowTemplateController, { prefix: '/v1/flow-templates' });
});
exports.communityFlowTemplateModule = communityFlowTemplateModule;
const flowTemplateController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            querystring: shared_1.ListFlowTemplatesRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const templateSource = server_shared_1.system.get(server_shared_1.AppSystemProp.TEMPLATES_SOURCE_URL);
        if ((0, shared_1.isNil)(templateSource)) {
            return pagination_utils_1.paginationHelper.createPage([], null);
        }
        const queryString = convertToQueryString(request.query);
        const url = `${templateSource}?${queryString}`;
        const response = yield fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const templates = yield response.json();
        return templates;
    }));
});
function convertToQueryString(params) {
    const searchParams = new URLSearchParams();
    Object.entries(params).forEach(([key, value]) => {
        if (Array.isArray(value)) {
            value.forEach((val) => {
                if (!(0, shared_1.isNil)(val)) {
                    searchParams.append(key, val);
                }
            });
        }
        else if (!(0, shared_1.isNil)(value)) {
            searchParams.set(key, value.toString());
        }
    });
    return searchParams.toString();
}


/***/ }),
/* 754 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formModule = void 0;
const tslib_1 = __webpack_require__(1);
const form_controller_1 = __webpack_require__(755);
const formModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(form_controller_1.formController, { prefix: '/v1/forms' });
});
exports.formModule = formModule;


/***/ }),
/* 755 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const form_service_1 = __webpack_require__(756);
const formController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/:flowId', GetFormRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        return form_service_1.formService.getFormByFlowIdOrThrow(request.params.flowId, (_a = request.query.useDraft) !== null && _a !== void 0 ? _a : false);
    }));
});
exports.formController = formController;
const GetFormRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        description: 'Get a form by flow id',
        params: type_provider_typebox_1.Type.Object({
            flowId: shared_1.ApId,
        }),
        querystring: type_provider_typebox_1.Type.Object({
            [shared_1.USE_DRAFT_QUERY_PARAM_NAME]: type_provider_typebox_1.Type.Optional(type_provider_typebox_1.Type.Boolean()),
        }),
    },
};


/***/ }),
/* 756 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const flow_version_service_1 = __webpack_require__(580);
const flow_repo_1 = __webpack_require__(594);
const FORMS_PIECE_NAME = '@activepieces/piece-forms';
const FORM_TRIIGGER = 'form_submission';
const FILE_TRIGGER = 'file_submission';
const SIMPLE_FILE_PROPS = {
    inputs: [
        {
            displayName: 'File',
            description: '',
            type: shared_1.FormInputType.FILE,
            required: true,
        },
    ],
    waitForResponse: true,
};
const FORMS_TRIGGER_NAMES = [
    FORM_TRIIGGER,
    FILE_TRIGGER,
];
exports.formService = {
    getFormByFlowIdOrThrow: (flowId, useDraft) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const flow = yield getPopulatedFlowById(flowId, useDraft);
        if (!flow
            || !FORMS_TRIGGER_NAMES.includes(flow.version.trigger.settings.triggerName)
            || flow.version.trigger.settings.pieceName !== FORMS_PIECE_NAME) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.FLOW_FORM_NOT_FOUND,
                params: {
                    flowId,
                    message: 'Flow form not found in draft version of flow.',
                },
            });
        }
        server_shared_1.logger.info(flow.version.trigger.settings);
        const triggerName = flow.version.trigger.settings.triggerName;
        return {
            id: flow.id,
            title: flow.version.displayName,
            props: triggerName === FILE_TRIGGER ? SIMPLE_FILE_PROPS : flow.version.trigger.settings.input,
            projectId: flow.projectId,
        };
    }),
};
function getPopulatedFlowById(id, useDraft) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flow = yield (0, flow_repo_1.flowRepo)().findOneBy({ id });
        if ((0, shared_1.isNil)(flow) || ((0, shared_1.isNil)(flow.publishedVersionId) && !useDraft)) {
            return null;
        }
        const flowVersion = yield flow_version_service_1.flowVersionService.getFlowVersionOrThrow({
            flowId: id,
            versionId: useDraft ? undefined : flow.publishedVersionId,
        });
        return Object.assign(Object.assign({}, flow), { version: flowVersion });
    });
}


/***/ }),
/* 757 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowRunModule = void 0;
const tslib_1 = __webpack_require__(1);
const authorization_1 = __webpack_require__(470);
const webhook_response_watcher_1 = __webpack_require__(596);
const flow_run_controller_1 = __webpack_require__(758);
const flowRunModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    yield app.register(flow_run_controller_1.flowRunController, { prefix: '/v1/flow-runs' });
    yield webhook_response_watcher_1.webhookResponseWatcher.init();
});
exports.flowRunModule = flowRunModule;


/***/ }),
/* 758 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowRunController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const flow_run_service_1 = __webpack_require__(595);
const DEFAULT_PAGING_LIMIT = 10;
const flowRunController = (app, _options, done) => {
    app.get('/', ListRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        // TODO project Id will be required after May 2024, this no longer needs to be optional
        const projectId = (_a = request.query.projectId) !== null && _a !== void 0 ? _a : (request.principal.type === shared_1.PrincipalType.SERVICE ? undefined : request.principal.projectId);
        (0, shared_1.assertNotNullOrUndefined)(projectId, 'projectId');
        return flow_run_service_1.flowRunService.list({
            projectId,
            flowId: request.query.flowId,
            tags: request.query.tags,
            status: request.query.status,
            cursor: (_b = request.query.cursor) !== null && _b !== void 0 ? _b : null,
            limit: Number((_c = request.query.limit) !== null && _c !== void 0 ? _c : DEFAULT_PAGING_LIMIT),
            createdAfter: request.query.createdAfter,
            createdBefore: request.query.createdBefore,
        });
    }));
    app.get('/:id', GetRequest, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const flowRun = yield flow_run_service_1.flowRunService.getOnePopulatedOrThrow({
            projectId: request.principal.projectId,
            id: request.params.id,
        });
        yield reply.send(flowRun);
    }));
    app.all('/:id/requests/:requestId', ResumeFlowRunRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const headers = req.headers;
        const queryParams = req.query;
        yield flow_run_service_1.flowRunService.addToQueue({
            flowRunId: req.params.id,
            requestId: req.params.requestId,
            payload: {
                body: req.body,
                headers,
                queryParams,
            },
            progressUpdateType: shared_1.ProgressUpdateType.TEST_FLOW,
            executionType: shared_1.ExecutionType.RESUME,
        });
    }));
    app.post('/:id/retry', RetryFlowRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield flow_run_service_1.flowRunService.retry({
            flowRunId: req.params.id,
            strategy: req.query.strategy,
        });
    }));
    done();
};
exports.flowRunController = flowRunController;
const FlowRunFiltered = type_provider_typebox_1.Type.Omit(shared_1.FlowRun, ['logsFileId', 'terminationReason', 'pauseMetadata']);
const FlowRunFilteredWithNoSteps = type_provider_typebox_1.Type.Omit(shared_1.FlowRun, ['logsFileId', 'terminationReason', 'pauseMetadata', 'steps']);
const ListRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
    },
    schema: {
        tags: ['flow-runs'],
        description: 'List Flow Runs',
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        querystring: shared_1.ListFlowRunsRequestQuery,
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(FlowRunFilteredWithNoSteps),
        },
    },
};
const GetRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.SERVICE, shared_1.PrincipalType.USER],
    },
    schema: {
        tags: ['flow-runs'],
        description: 'Get Flow Run',
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: FlowRunFiltered,
        },
    },
};
const ResumeFlowRunRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
            requestId: type_provider_typebox_1.Type.String(),
        }),
    },
};
const RetryFlowRequest = {
    config: {
        permission: shared_1.Permission.RETRY_RUN,
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        querystring: shared_1.RetryFlowRequestBody,
    },
};


/***/ }),
/* 759 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const access_token_manager_1 = __webpack_require__(509);
const websockets_service_1 = __webpack_require__(638);
const worker_controller_1 = __webpack_require__(760);
const flow_version_controller_1 = __webpack_require__(766);
const flow_controller_1 = __webpack_require__(767);
const flow_run_service_1 = __webpack_require__(595);
const folder_controller_1 = __webpack_require__(768);
const step_run_service_1 = __webpack_require__(769);
const test_trigger_controller_1 = __webpack_require__(770);
const flowModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(worker_controller_1.flowWorkerController, { prefix: '/v1/worker/flows' });
    yield app.register(flow_version_controller_1.flowVersionController, { prefix: '/v1/flows' });
    yield app.register(flow_controller_1.flowController, { prefix: '/v1/flows' });
    yield app.register(folder_controller_1.folderController, { prefix: '/v1/folders' });
    yield app.register(test_trigger_controller_1.testTriggerController, { prefix: '/v1/test-trigger' });
    websockets_service_1.websocketService.addListener(shared_1.WebsocketServerEvent.TEST_FLOW_RUN, (socket) => {
        return (data) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const principal = yield access_token_manager_1.accessTokenManager.extractPrincipal(socket.handshake.auth.token);
            const flowRun = yield flow_run_service_1.flowRunService.test({
                projectId: principal.projectId,
                flowVersionId: data.flowVersionId,
            });
            socket.emit(shared_1.WebsocketClientEvent.TEST_FLOW_RUN_STARTED, flowRun);
        });
    });
    websockets_service_1.websocketService.addListener(shared_1.WebsocketServerEvent.TEST_STEP_RUN, (socket) => {
        return (data) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const principal = yield access_token_manager_1.accessTokenManager.extractPrincipal(socket.handshake.auth.token);
            server_shared_1.logger.debug({ data }, '[Socket#testStepRun]');
            const stepRun = yield step_run_service_1.stepRunService.create({
                projectId: principal.projectId,
                flowVersionId: data.flowVersionId,
                stepName: data.stepName,
            });
            const response = {
                id: data.id,
                success: stepRun.success,
                output: stepRun.output,
                standardError: stepRun.standardError,
                standardOutput: stepRun.standardOutput,
            };
            socket.emit(shared_1.WebsocketClientEvent.TEST_STEP_FINISHED, response);
        });
    });
});
exports.flowModule = flowModule;


/***/ }),
/* 760 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowWorkerController = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const flow_service_1 = __webpack_require__(574);
const flow_run_service_1 = __webpack_require__(595);
const dedupe_1 = __webpack_require__(761);
const trigger_event_service_1 = __webpack_require__(762);
const engine_helper_1 = __webpack_require__(508);
const webhook_simulation_service_1 = __webpack_require__(584);
const consumer_1 = __webpack_require__(763);
const webhook_response_watcher_1 = __webpack_require__(596);
const flowWorkerController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/poll', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.WORKER],
        },
        logLevel: 'silent',
        schema: {
            querystring: server_shared_1.PollJobRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { queueName } = request.query;
        const job = yield consumer_1.flowConsumer.poll(null, queueName);
        if (!job) {
            return null;
        }
        return enrichEngineToken(queueName, job);
    }));
    app.post('/delete-webhook-simulation', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.WORKER],
        },
        schema: {
            body: server_shared_1.DeleteWebhookSimulationRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { flowId, projectId } = request.body;
        yield webhook_simulation_service_1.webhookSimulationService.delete({ flowId, projectId });
    }));
    app.post('/send-webhook-update', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.WORKER],
        },
        schema: {
            body: server_shared_1.SendWebhookUpdateRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { workerServerId, requestId, response } = request.body;
        yield webhook_response_watcher_1.webhookResponseWatcher.publish(requestId, workerServerId, response);
        return {};
    }));
    app.post('/save-payloads', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.WORKER],
        },
        schema: {
            body: server_shared_1.SavePayloadRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { flowId, projectId, payloads } = request.body;
        const savePayloads = payloads.map((payload) => (0, server_shared_1.rejectedPromiseHandler)(trigger_event_service_1.triggerEventService.saveEvent({
            flowId,
            payload,
            projectId,
        })));
        (0, server_shared_1.rejectedPromiseHandler)(Promise.all(savePayloads));
        return {};
    }));
    app.post('/submit-payloads', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.WORKER],
        },
        schema: {
            body: server_shared_1.SubmitPayloadsRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { flowVersionId, projectId, payloads, httpRequestId, synchronousHandlerId, progressUpdateType } = request.body;
        const filterPayloads = yield dedupe_1.dedupeService.filterUniquePayloads(flowVersionId, payloads);
        const createFlowRuns = filterPayloads.map((payload) => flow_run_service_1.flowRunService.start({
            environment: shared_1.RunEnvironment.PRODUCTION,
            flowVersionId,
            payload,
            synchronousHandlerId,
            projectId,
            httpRequestId,
            executionType: shared_1.ExecutionType.BEGIN,
            progressUpdateType,
        }));
        return Promise.all(createFlowRuns);
    }));
    app.post('/resume-run', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.WORKER],
        },
        schema: {
            body: server_shared_1.ResumeRunRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const data = request.body;
        yield flow_run_service_1.flowRunService.start({
            payload: null,
            flowRunId: data.runId,
            synchronousHandlerId: (_a = data.synchronousHandlerId) !== null && _a !== void 0 ? _a : undefined,
            projectId: data.projectId,
            flowVersionId: data.flowVersionId,
            executionType: shared_1.ExecutionType.RESUME,
            httpRequestId: data.httpRequestId,
            environment: shared_1.RunEnvironment.PRODUCTION,
            progressUpdateType: data.progressUpdateType,
        });
    }));
});
exports.flowWorkerController = flowWorkerController;
function enrichEngineToken(queueName, job) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const engineToken = yield (0, engine_helper_1.generateEngineToken)({
            jobId: job.id,
            projectId: yield getProjectId(queueName, job.data),
        });
        return {
            data: job.data,
            id: job.id,
            engineToken,
        };
    });
}
function getProjectId(queueName, job) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        switch (queueName) {
            case server_shared_1.QueueName.ONE_TIME:
                return job.projectId;
            case server_shared_1.QueueName.WEBHOOK: {
                // TODO add project it to the webhook data
                const webhookData = job;
                const flow = yield flow_service_1.flowService.getOneById(webhookData.flowId);
                return (_a = flow === null || flow === void 0 ? void 0 : flow.projectId) !== null && _a !== void 0 ? _a : (0, shared_1.apId)();
            }
            case server_shared_1.QueueName.SCHEDULED:
                return job.projectId;
        }
    });
}


/***/ }),
/* 761 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dedupeService = void 0;
const tslib_1 = __webpack_require__(1);
const pieces_framework_1 = __webpack_require__(174);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const redis_connection_1 = __webpack_require__(514);
const DUPLICATE_RECORD_EXPIRATION_SECONDS = 30;
const MEMORY_QUEUE = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
exports.dedupeService = {
    filterUniquePayloads: (flowVersionId, payloads) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const filteredPayloads = yield Promise.all(payloads.map((payload) => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return isDuplicated(flowVersionId, payload); })));
        return payloads.filter((_, index) => !filteredPayloads[index]).map(removeDedupeKey);
    }),
};
const isDuplicated = (flowVersionId, payload) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const dedupeKeyValue = extractDedupeKey(payload);
    if ((0, shared_1.isNil)(dedupeKeyValue)) {
        return false;
    }
    const key = `${flowVersionId}:${dedupeKeyValue}`;
    switch (MEMORY_QUEUE) {
        case server_shared_1.QueueMode.REDIS: {
            const value = yield incrementInRedis(key, DUPLICATE_RECORD_EXPIRATION_SECONDS);
            return value > 1;
        }
        case server_shared_1.QueueMode.MEMORY: {
            const value = yield incrementInMemory(key, DUPLICATE_RECORD_EXPIRATION_SECONDS);
            return value > 1;
        }
    }
});
function removeDedupeKey(payload) {
    const dedupeKeyValue = extractDedupeKey(payload);
    if ((0, shared_1.isNil)(dedupeKeyValue)) {
        return payload;
    }
    return Object.assign(Object.assign({}, payload), { [pieces_framework_1.DEDUPE_KEY_PROPERTY]: undefined });
}
function extractDedupeKey(payload) {
    if ((0, shared_1.isNil)(payload) || typeof payload !== 'object') {
        return null;
    }
    return payload[pieces_framework_1.DEDUPE_KEY_PROPERTY];
}
function incrementInRedis(key, expireySeconds) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const value = yield (0, redis_connection_1.getRedisConnection)().incrby(key, 1);
        if (value > 1) {
            return value;
        }
        yield (0, redis_connection_1.getRedisConnection)().expire(key, expireySeconds);
        return value;
    });
}
const memoryCache = {};
function incrementInMemory(key, expireySeconds) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        memoryCache[key] = memoryCache[key] ? memoryCache[key] + 1 : 1;
        setTimeout(() => {
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete memoryCache[key];
        }, expireySeconds * 1000);
        return memoryCache[key];
    });
}


/***/ }),
/* 762 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.triggerEventService = exports.triggerEventRepo = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const server_worker_1 = __webpack_require__(474);
const typeorm_1 = __webpack_require__(226);
const repo_factory_1 = __webpack_require__(224);
const engine_helper_1 = __webpack_require__(508);
const build_paginator_1 = __webpack_require__(452);
const pagination_utils_1 = __webpack_require__(454);
const paginator_1 = __webpack_require__(453);
const flow_service_1 = __webpack_require__(574);
const step_file_service_1 = __webpack_require__(581);
const trigger_event_entity_1 = __webpack_require__(254);
exports.triggerEventRepo = (0, repo_factory_1.repoFactory)(trigger_event_entity_1.TriggerEventEntity);
exports.triggerEventService = {
    saveEvent(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, payload, }) {
            const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
                id: flowId,
                projectId,
            });
            const sourceName = getSourceName(flow.version.trigger);
            return (0, exports.triggerEventRepo)().save({
                id: (0, shared_1.apId)(),
                projectId,
                flowId: flow.id,
                sourceName,
                payload,
            });
        });
    },
    test(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flow, }) {
            const trigger = flow.version.trigger;
            const emptyPage = pagination_utils_1.paginationHelper.createPage([], null);
            switch (trigger.type) {
                case shared_1.TriggerType.PIECE: {
                    yield deleteOldFilesForTestData({
                        projectId,
                        flowId: flow.id,
                        stepName: trigger.name,
                    });
                    const engineToken = yield (0, engine_helper_1.generateEngineToken)({
                        projectId,
                    });
                    const { result: testResult } = yield server_worker_1.engineRunner.executeTrigger(engineToken, {
                        hookType: shared_1.TriggerHookType.TEST,
                        flowVersion: flow.version,
                        webhookUrl: yield server_worker_1.webhookUtils.getWebhookUrl({
                            flowId: flow.id,
                            simulate: true,
                        }),
                        projectId,
                    });
                    yield (0, exports.triggerEventRepo)().delete({
                        projectId,
                        flowId: flow.id,
                    });
                    if (!testResult.success) {
                        throw new shared_1.ActivepiecesError({
                            code: shared_1.ErrorCode.TEST_TRIGGER_FAILED,
                            params: {
                                message: testResult.message,
                            },
                        });
                    }
                    for (const output of testResult.output) {
                        yield exports.triggerEventService.saveEvent({
                            projectId,
                            flowId: flow.id,
                            payload: output,
                        });
                    }
                    return exports.triggerEventService.list({
                        projectId,
                        flow,
                        cursor: null,
                        limit: testResult.output.length,
                    });
                }
                case shared_1.TriggerType.EMPTY:
                    return emptyPage;
            }
        });
    },
    list(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flow, cursor, limit, }) {
            const decodedCursor = pagination_utils_1.paginationHelper.decodeCursor(cursor);
            const sourceName = getSourceName(flow.version.trigger);
            const flowId = flow.id;
            const paginator = (0, build_paginator_1.buildPaginator)({
                entity: trigger_event_entity_1.TriggerEventEntity,
                query: {
                    limit,
                    order: paginator_1.Order.DESC,
                    afterCursor: decodedCursor.nextCursor,
                    beforeCursor: decodedCursor.previousCursor,
                },
            });
            const query = (0, exports.triggerEventRepo)().createQueryBuilder('trigger_event').where({
                projectId,
                flowId,
                sourceName,
            });
            const { data, cursor: newCursor } = yield paginator.paginate(query);
            return pagination_utils_1.paginationHelper.createPage(data, newCursor);
        });
    },
    deleteEventsOlderThanFourteenDay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fourteenDayAgo = (0, dayjs_1.default)().subtract(14, 'day').toDate();
            yield (0, exports.triggerEventRepo)().delete({
                created: (0, typeorm_1.LessThan)(fourteenDayAgo.toISOString()),
            });
        });
    },
};
function deleteOldFilesForTestData(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowId, stepName, }) {
        yield step_file_service_1.stepFileService.deleteAll({
            projectId,
            flowId,
            stepName,
        });
    });
}
function getSourceName(trigger) {
    switch (trigger.type) {
        case shared_1.TriggerType.PIECE: {
            const pieceTrigger = trigger;
            const pieceName = pieceTrigger.settings.pieceName;
            const pieceVersion = (0, shared_1.getPieceMajorAndMinorVersion)(pieceTrigger.settings.pieceVersion);
            const triggerName = pieceTrigger.settings.triggerName;
            return `${pieceName}@${pieceVersion}:${triggerName}`;
        }
        case shared_1.TriggerType.EMPTY:
            return trigger.type;
    }
}


/***/ }),
/* 763 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowConsumer = void 0;
const server_shared_1 = __webpack_require__(2);
const memory_consumer_1 = __webpack_require__(764);
const redis_consumer_1 = __webpack_require__(765);
const systemMode = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_MODE);
exports.flowConsumer = systemMode == server_shared_1.QueueMode.MEMORY ? memory_consumer_1.memoryConsumer : redis_consumer_1.redisConsumer;


/***/ }),
/* 764 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.memoryConsumer = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const memory_queue_1 = __webpack_require__(573);
exports.memoryConsumer = {
    poll(_platformId, queueName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const job = yield memory_queue_1.memoryQueues[queueName].poll();
            if ((0, shared_1.isNil)(job)) {
                yield new Promise((resolve) => setTimeout(resolve, 500));
                return null;
            }
            return {
                id: job.id,
                data: job.data,
            };
        });
    },
    update(_params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // 
        });
    },
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return;
        });
    },
    close() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return;
        });
    },
};


/***/ }),
/* 765 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.redisConsumer = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const bullmq_1 = __webpack_require__(609);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const redis_connection_1 = __webpack_require__(514);
const queue_manager_1 = __webpack_require__(626);
const consumerGroups = {};
const serverId = (0, shared_1.apId)();
exports.redisConsumer = {
    poll(groupId, jobType) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let lock;
            try {
                lock = yield server_shared_1.memoryLock.acquire(`poll-${groupId}-${jobType}`, 5000);
                const worker = yield ensureWorkerExists(groupId, jobType);
                (0, shared_1.assertNotNullOrUndefined)(worker, 'Queue not found');
                // The worker.getNextJob() method holds the connection until a job is available, but it can only be called once at a time.
                // To handle multiple workers, we are storing them in memory while waiting for a job to become available.
                const job = yield worker.getNextJob(serverId);
                if ((0, shared_1.isNil)(job)) {
                    return null;
                }
                return {
                    id: job.id,
                    data: job.data,
                };
            }
            catch (e) {
                if (server_shared_1.memoryLock.isTimeoutError(e)) {
                    return null;
                }
                server_shared_1.exceptionHandler.handle(e);
                throw e;
            }
            finally {
                if (lock) {
                    yield lock.release();
                }
            }
        });
    },
    update(groupId_1, _a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (groupId, { queueName, jobId, status, message }) {
            const worker = yield ensureWorkerExists(groupId, queueName);
            const job = yield bullmq_1.Job.fromId(worker, jobId);
            (0, shared_1.assertNotNullOrUndefined)(job, 'Job not found');
            switch (status) {
                case server_shared_1.JobStatus.COMPLETED:
                    yield job.moveToCompleted({}, serverId, false);
                    break;
                case server_shared_1.JobStatus.FAILED:
                    yield job.moveToFailed(new Error(message), serverId, false);
                    break;
            }
        });
    },
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const sharedConsumers = Object.values(server_shared_1.QueueName).map((queueName) => ensureWorkerExists(null, queueName));
            yield Promise.all(sharedConsumers);
        });
    },
    close() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const promises = Object.values(consumerGroups).map((consumerGroup) => {
                return Promise.all(Object.values(consumerGroup).map((consumer) => consumer.close()));
            });
            yield Promise.all(promises);
        });
    },
};
function ensureWorkerExists(groupId, queueName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const key = groupId !== null && groupId !== void 0 ? groupId : 'default';
        if ((0, shared_1.isNil)(consumerGroups[key])) {
            consumerGroups[key] = {};
        }
        if (!(0, shared_1.isNil)(consumerGroups[key][queueName])) {
            return consumerGroups[key][queueName];
        }
        const lockDuration = getLockDurationInMs(queueName);
        const queueAlias = queue_manager_1.queueHelper.getQueueName(groupId, queueName);
        consumerGroups[key][queueName] = new bullmq_1.Worker(queueAlias, null, {
            connection: (0, redis_connection_1.createRedisClient)(),
            lockDuration,
            maxStalledCount: 5,
            drainDelay: 5,
            stalledInterval: 30000,
        });
        yield consumerGroups[key][queueName].waitUntilReady();
        yield consumerGroups[key][queueName].startStalledCheckTimer();
        return consumerGroups[key][queueName];
    });
}
function getLockDurationInMs(queueName) {
    switch (queueName) {
        case server_shared_1.QueueName.WEBHOOK:
            return dayjs_1.default.duration(server_shared_1.triggerTimeoutSandbox, 'seconds').add(5, 'seconds').asMilliseconds();
        case server_shared_1.QueueName.ONE_TIME:
            return dayjs_1.default.duration(server_shared_1.flowTimeoutSandbox, 'seconds').add(5, 'seconds').asMilliseconds();
        case server_shared_1.QueueName.SCHEDULED:
            return dayjs_1.default.duration(server_shared_1.triggerTimeoutSandbox, 'seconds').add(5, 'seconds').asMilliseconds();
    }
}


/***/ }),
/* 766 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowVersionController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const flow_version_service_1 = __webpack_require__(580);
const flow_service_1 = __webpack_require__(574);
const DEFAULT_PAGE_SIZE = 10;
const flowVersionController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/:flowId/versions', {
        schema: {
            params: type_provider_typebox_1.Type.Object({
                flowId: type_provider_typebox_1.Type.String(),
            }),
            querystring: shared_1.ListFlowVersionRequest,
            response: {
                [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.FlowVersionMetadata),
            },
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const flow = yield flow_service_1.flowService.getOneOrThrow({
            id: request.params.flowId,
            projectId: request.principal.projectId,
        });
        return flow_version_service_1.flowVersionService.list({
            flowId: flow.id,
            limit: (_a = request.query.limit) !== null && _a !== void 0 ? _a : DEFAULT_PAGE_SIZE,
            cursorRequest: (_b = request.query.cursor) !== null && _b !== void 0 ? _b : null,
        });
    }));
});
exports.flowVersionController = flowVersionController;


/***/ }),
/* 767 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const http_status_codes_1 = __webpack_require__(481);
const authorization_1 = __webpack_require__(470);
const rbac_middleware_1 = __webpack_require__(694);
const application_events_1 = __webpack_require__(517);
const project_service_1 = __webpack_require__(448);
const flow_service_1 = __webpack_require__(574);
const DEFAULT_PAGE_SIZE = 10;
const flowController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    app.post('/', CreateFlowRequestOptions, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const newFlow = yield flow_service_1.flowService.create({
            projectId: request.principal.projectId,
            request: request.body,
        });
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.FLOW_CREATED,
            data: {
                flow: newFlow,
            },
        });
        return reply.status(http_status_codes_1.StatusCodes.CREATED).send(newFlow);
    }));
    app.post('/:id', UpdateFlowRequestOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const userId = yield extractUserIdFromPrincipal(request.principal);
        yield (0, rbac_middleware_1.assertUserHasPermissionToFlow)(request.principal, request.body.type);
        const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
            id: request.params.id,
            projectId: request.principal.projectId,
        });
        yield assertThatFlowIsNotBeingUsed(flow, userId);
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.FLOW_UPDATED,
            data: {
                request: request.body,
                flowVersion: flow.version,
            },
        });
        const updatedFlow = yield flow_service_1.flowService.update({
            id: request.params.id,
            userId: request.principal.type === shared_1.PrincipalType.SERVICE ? null : userId,
            projectId: request.principal.projectId,
            operation: request.body,
        });
        return updatedFlow;
    }));
    app.get('/', ListFlowsRequestOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        return flow_service_1.flowService.list({
            projectId: request.principal.projectId,
            folderId: request.query.folderId,
            cursorRequest: (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null,
            limit: (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_PAGE_SIZE,
            status: request.query.status,
        });
    }));
    app.get('/count', CountFlowsRequestOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return flow_service_1.flowService.count({
            folderId: request.query.folderId,
            projectId: request.principal.projectId,
        });
    }));
    app.get('/:id/template', GetFlowTemplateRequestOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return flow_service_1.flowService.getTemplate({
            flowId: request.params.id,
            projectId: request.principal.projectId,
            versionId: undefined,
        });
    }));
    app.get('/:id', GetFlowRequestOptions, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return flow_service_1.flowService.getOnePopulatedOrThrow({
            id: request.params.id,
            projectId: request.principal.projectId,
            versionId: request.query.versionId,
        });
    }));
    app.delete('/:id', DeleteFlowRequestOptions, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
            id: request.params.id,
            projectId: request.principal.projectId,
        });
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.FLOW_DELETED,
            data: {
                flow,
                flowVersion: flow.version,
            },
        });
        yield flow_service_1.flowService.delete({
            id: request.params.id,
            projectId: request.principal.projectId,
        });
        return reply.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
});
exports.flowController = flowController;
function assertThatFlowIsNotBeingUsed(flow, userId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const currentTime = (0, dayjs_1.default)();
        if (!(0, shared_1.isNil)(flow.version.updatedBy) &&
            flow.version.updatedBy !== userId &&
            currentTime.diff((0, dayjs_1.default)(flow.version.updated), 'minute') <= 1) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.FLOW_IN_USE,
                params: {
                    flowVersionId: flow.version.id,
                    message: 'Flow is being used by another user in the last minute. Please try again later.',
                },
            });
        }
    });
}
function extractUserIdFromPrincipal(principal) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (principal.type === shared_1.PrincipalType.USER) {
            return principal.id;
        }
        // TODO currently it's same as api service, but it's better to get it from api key service, in case we introduced more admin users
        const project = yield project_service_1.projectService.getOneOrThrow(principal.projectId);
        return project.ownerId;
    });
}
const CreateFlowRequestOptions = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.WRITE_FLOW,
    },
    schema: {
        tags: ['flows'],
        description: 'Create a flow',
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        body: shared_1.CreateFlowRequest,
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: shared_1.PopulatedFlow,
        },
    },
};
const UpdateFlowRequestOptions = {
    config: {
        permission: shared_1.Permission.UPDATE_FLOW_STATUS,
    },
    schema: {
        tags: ['flows'],
        description: 'Apply an operation to a flow',
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        body: shared_1.FlowOperationRequest,
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
    },
};
const ListFlowsRequestOptions = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.READ_FLOW,
    },
    schema: {
        tags: ['flows'],
        description: 'List flows',
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        querystring: shared_1.ListFlowsRequest,
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.PopulatedFlow),
        },
    },
};
const CountFlowsRequestOptions = {
    schema: {
        querystring: shared_1.CountFlowsRequest,
    },
};
const GetFlowTemplateRequestOptions = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.FlowTemplateWithoutProjectInformation,
        },
    },
};
const GetFlowRequestOptions = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.READ_FLOW,
    },
    schema: {
        tags: ['flows'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        description: 'Get a flow by id',
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        querystring: shared_1.GetFlowQueryParamsRequest,
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.PopulatedFlow,
        },
    },
};
const DeleteFlowRequestOptions = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.WRITE_FLOW,
    },
    schema: {
        tags: ['flows'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        description: 'Delete a flow',
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        response: {
            [http_status_codes_1.StatusCodes.NO_CONTENT]: type_provider_typebox_1.Type.Undefined(),
        },
    },
};


/***/ }),
/* 768 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.folderController = void 0;
const tslib_1 = __webpack_require__(1);
const ee_shared_1 = __webpack_require__(134);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const http_status_codes_1 = __webpack_require__(481);
const authorization_1 = __webpack_require__(470);
const application_events_1 = __webpack_require__(517);
const folder_service_1 = __webpack_require__(592);
const DEFAULT_PAGE_SIZE = 10;
const FolderIdParam = typebox_1.Type.Object({
    folderId: typebox_1.Type.String(),
});
const folderController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    fastify.post('/', {
        schema: {
            body: shared_1.CreateOrRenameFolderRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const createdFolder = yield folder_service_1.flowFolderService.upsert({
            projectId: request.principal.projectId,
            request: request.body,
        });
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.FOLDER_CREATED,
            data: {
                folder: createdFolder,
            },
        });
        return createdFolder;
    }));
    fastify.post('/:folderId', {
        schema: {
            params: FolderIdParam,
            body: shared_1.CreateOrRenameFolderRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const updatedFlow = yield folder_service_1.flowFolderService.update({
            projectId: request.principal.projectId,
            folderId: request.params.folderId,
            request: request.body,
        });
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.FOLDER_UPDATED,
            data: {
                folder: updatedFlow,
            },
        });
        return updatedFlow;
    }));
    fastify.get('/:folderId', (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return folder_service_1.flowFolderService.getOneOrThrow({
            projectId: request.principal.projectId,
            folderId: request.params.folderId,
        });
    }));
    fastify.get('/', {
        schema: {
            querystring: shared_1.ListFolderRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        return folder_service_1.flowFolderService.list({
            projectId: request.principal.projectId,
            cursorRequest: (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null,
            limit: (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_PAGE_SIZE,
        });
    }));
    fastify.delete('/:folderId', (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const folder = yield folder_service_1.flowFolderService.getOneOrThrow({
            projectId: request.principal.projectId,
            folderId: request.params.folderId,
        });
        application_events_1.eventsHooks.get().sendUserEvent(request, {
            action: ee_shared_1.ApplicationEventName.FOLDER_DELETED,
            data: {
                folder,
            },
        });
        yield folder_service_1.flowFolderService.delete({
            projectId: request.principal.projectId,
            folderId: request.params.folderId,
        });
        return reply.status(http_status_codes_1.StatusCodes.OK).send();
    }));
});
exports.folderController = folderController;


/***/ }),
/* 769 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stepRunService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const server_worker_1 = __webpack_require__(474);
const engine_helper_1 = __webpack_require__(508);
const flow_version_service_1 = __webpack_require__(580);
exports.stepRunService = {
    create(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, flowVersionId, stepName, }) {
            const flowVersion = yield flow_version_service_1.flowVersionService.getOneOrThrow(flowVersionId);
            const step = shared_1.flowHelper.getStep(flowVersion, stepName);
            if ((0, shared_1.isNil)(step) ||
                !Object.values(shared_1.ActionType).includes(step.type)) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.STEP_NOT_FOUND,
                    params: {
                        stepName,
                    },
                });
            }
            const engineToken = yield (0, engine_helper_1.generateEngineToken)({
                projectId,
            });
            const { result, standardError, standardOutput } = yield server_worker_1.engineRunner.executeAction(engineToken, {
                stepName,
                flowVersion,
                projectId,
            });
            return {
                success: result.success,
                output: result.output,
                standardError,
                standardOutput,
            };
        });
    },
};


/***/ }),
/* 770 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.testTriggerController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const test_trigger_service_1 = __webpack_require__(771);
const testTriggerController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', TestTriggerRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { projectId } = req.principal;
        const { flowId, flowVersionId, testStrategy } = req.body;
        return test_trigger_service_1.testTriggerService.test({
            flowId,
            flowVersionId,
            projectId,
            testStrategy,
        });
    }));
});
exports.testTriggerController = testTriggerController;
const TestTriggerRequest = {
    schema: {
        body: shared_1.TestTriggerRequestBody,
    },
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
};


/***/ }),
/* 771 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.testTriggerService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const webhook_simulation_service_1 = __webpack_require__(584);
const flow_service_1 = __webpack_require__(574);
const trigger_event_service_1 = __webpack_require__(762);
exports.testTriggerService = {
    test(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { testStrategy } = params, executeParams = tslib_1.__rest(params, ["testStrategy"]);
            const testExecutors = {
                [shared_1.TriggerTestStrategy.SIMULATION]: executeSimulation,
                [shared_1.TriggerTestStrategy.TEST_FUNCTION]: executeTestFunction,
            };
            const executor = testExecutors[testStrategy];
            return executor(executeParams);
        });
    },
};
const executeSimulation = (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ flowId, flowVersionId, projectId, }) {
    server_shared_1.logger.debug({
        name: 'testTriggerService.executeSimulation',
        flowId,
        flowVersionId,
        projectId,
    });
    return webhook_simulation_service_1.webhookSimulationService.create({
        flowId,
        flowVersionId,
        projectId,
    });
});
const executeTestFunction = (_b) => tslib_1.__awaiter(void 0, [_b], void 0, function* ({ flowId, flowVersionId, projectId, }) {
    server_shared_1.logger.debug({
        name: 'testTriggerService.executeTestFunction',
        flowId,
        flowVersionId,
        projectId,
    });
    const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
        id: flowId,
        projectId,
        versionId: flowVersionId,
    });
    return trigger_event_service_1.triggerEventService.test({
        flow,
        projectId,
    });
});


/***/ }),
/* 772 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stepFileController = exports.stepFileModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const typebox_1 = __webpack_require__(10);
const http_status_codes_1 = __webpack_require__(481);
const authorization_1 = __webpack_require__(470);
const step_file_service_1 = __webpack_require__(581);
const stepFileModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    yield app.register(exports.stepFileController, { prefix: '/v1/step-files' });
});
exports.stepFileModule = stepFileModule;
const stepFileController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/signed', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
        schema: {
            querystring: typebox_1.Type.Object({
                token: typebox_1.Type.String(),
            }),
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const stepFile = yield step_file_service_1.stepFileService.getByToken(request.query.token);
        yield reply
            .header('Content-Disposition', `attachment; filename="${stepFile === null || stepFile === void 0 ? void 0 : stepFile.name}"`)
            .type('application/octet-stream')
            .status(http_status_codes_1.StatusCodes.OK)
            .send(stepFile === null || stepFile === void 0 ? void 0 : stepFile.data);
    }));
    app.get('/:id', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.ENGINE],
        },
        schema: {
            params: typebox_1.Type.Object({
                id: typebox_1.Type.String(),
            }),
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const stepFile = yield step_file_service_1.stepFileService.get({
            projectId: request.principal.projectId,
            id: request.params.id,
        });
        return reply
            .header('Content-Disposition', `attachment; filename="${stepFile === null || stepFile === void 0 ? void 0 : stepFile.name}"`)
            .type('application/octet-stream')
            .status(http_status_codes_1.StatusCodes.OK)
            .send(stepFile === null || stepFile === void 0 ? void 0 : stepFile.data);
    }));
    app.post('/', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.ENGINE],
        },
        schema: {
            body: shared_1.StepFileUpsert,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return step_file_service_1.stepFileService.upsert({
            hostname: request.hostname,
            projectId: request.principal.projectId,
            request: request.body,
        });
    }));
    app.delete('/:id', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.ENGINE],
        },
        schema: {
            params: typebox_1.Type.Object({
                id: typebox_1.Type.String(),
            }),
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return step_file_service_1.stepFileService.delete({
            projectId: request.principal.projectId,
            id: request.params.id,
        });
    }));
});
exports.stepFileController = stepFileController;


/***/ }),
/* 773 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.triggerEventModule = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const flow_service_1 = __webpack_require__(574);
const trigger_event_service_1 = __webpack_require__(762);
const DEFAULT_PAGE_SIZE = 10;
const triggerEventModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.TRIGGER_DATA_CLEANER, function triggerDataCleanerJobHandler() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield trigger_event_service_1.triggerEventService.deleteEventsOlderThanFourteenDay();
        });
    });
    yield app.register(triggerEventController, { prefix: '/v1/trigger-events' });
    yield system_jobs_1.systemJobsSchedule.upsertJob({
        job: {
            name: common_1.SystemJobName.TRIGGER_DATA_CLEANER,
            data: {},
        },
        schedule: {
            type: 'repeated',
            cron: `0 * */${server_shared_1.system.getNumber(server_shared_1.AppSystemProp.EXECUTION_DATA_RETENTION_DAYS)} * *`,
        },
    });
});
exports.triggerEventModule = triggerEventModule;
const triggerEventController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/poll', {
        schema: {
            querystring: shared_1.TestPollingTriggerRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
            projectId: request.principal.projectId,
            id: request.query.flowId,
        });
        return trigger_event_service_1.triggerEventService.test({
            projectId: request.principal.projectId,
            flow,
        });
    }));
    fastify.post('/', {
        schema: {
            querystring: shared_1.TestPollingTriggerRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return trigger_event_service_1.triggerEventService.saveEvent({
            projectId: request.principal.projectId,
            flowId: request.query.flowId,
            payload: request.body,
        });
    }));
    fastify.get('/', {
        schema: {
            querystring: shared_1.ListTriggerEventsRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
            id: request.query.flowId,
            projectId: request.principal.projectId,
        });
        return trigger_event_service_1.triggerEventService.list({
            projectId: request.principal.projectId,
            flow,
            cursor: (_a = request.query.cursor) !== null && _a !== void 0 ? _a : null,
            limit: (_b = request.query.limit) !== null && _b !== void 0 ? _b : DEFAULT_PAGE_SIZE,
        });
    }));
});


/***/ }),
/* 774 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.openapiModule = void 0;
const tslib_1 = __webpack_require__(1);
const openapi_controller_1 = __webpack_require__(775);
const openapiModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(openapi_controller_1.openapiController, { prefix: '/v1/docs' });
});
exports.openapiModule = openapiModule;


/***/ }),
/* 775 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.openapiController = void 0;
const tslib_1 = __webpack_require__(1);
const openapiController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return JSON.stringify(fastify.swagger(), null, 2);
    }));
});
exports.openapiController = openapiController;


/***/ }),
/* 776 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieceModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const server_worker_1 = __webpack_require__(474);
const flag_service_1 = __webpack_require__(578);
const flow_service_1 = __webpack_require__(574);
const engine_helper_1 = __webpack_require__(508);
const piece_metadata_service_1 = __webpack_require__(222);
const piece_sync_service_1 = __webpack_require__(777);
const pieceModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(basePiecesController, { prefix: '/v1/pieces' });
});
exports.pieceModule = pieceModule;
const basePiecesController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/versions', ListVersionsRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        return piece_metadata_service_1.pieceMetadataService.getVersions({
            name: req.query.name,
            projectId: req.principal.type === shared_1.PrincipalType.UNKNOWN ? undefined : req.principal.projectId,
            release: req.query.release,
            edition: (_a = req.query.edition) !== null && _a !== void 0 ? _a : shared_1.ApEdition.COMMUNITY,
            platformId: req.principal.type === shared_1.PrincipalType.UNKNOWN ? undefined : req.principal.platform.id,
        });
    }));
    app.get('/categories', ListCategoriesRequest, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return Object.values(shared_1.PieceCategory);
    }));
    app.get('/', ListPiecesRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _b, _c, _d, _e;
        const latestRelease = yield flag_service_1.flagService.getCurrentRelease();
        const includeTags = (_b = req.query.includeTags) !== null && _b !== void 0 ? _b : false;
        const release = (_c = req.query.release) !== null && _c !== void 0 ? _c : latestRelease;
        const edition = (_d = req.query.edition) !== null && _d !== void 0 ? _d : shared_1.ApEdition.COMMUNITY;
        const platformId = req.principal.type === shared_1.PrincipalType.UNKNOWN ? undefined : req.principal.platform.id;
        const projectId = req.principal.type === shared_1.PrincipalType.UNKNOWN ? undefined : req.principal.projectId;
        const pieceMetadataSummary = yield piece_metadata_service_1.pieceMetadataService.list({
            release,
            includeHidden: (_e = req.query.includeHidden) !== null && _e !== void 0 ? _e : false,
            projectId,
            platformId,
            edition,
            includeTags,
            categories: req.query.categories,
            searchQuery: req.query.searchQuery,
            sortBy: req.query.sortBy,
            orderBy: req.query.orderBy,
            suggestionType: req.query.suggestionType,
        });
        return pieceMetadataSummary;
    }));
    app.get('/:scope/:name', GetPieceParamsWithScopeRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { name, scope } = req.params;
        const { version } = req.query;
        const decodeScope = decodeURIComponent(scope);
        const decodedName = decodeURIComponent(name);
        const projectId = req.principal.type === shared_1.PrincipalType.UNKNOWN ? undefined : req.principal.projectId;
        return piece_metadata_service_1.pieceMetadataService.getOrThrow({
            projectId,
            name: `${decodeScope}/${decodedName}`,
            version,
        });
    }));
    app.get('/:name', GetPieceParamsRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { name } = req.params;
        const { version } = req.query;
        const decodedName = decodeURIComponent(name);
        const projectId = req.principal.type === shared_1.PrincipalType.UNKNOWN ? undefined : req.principal.projectId;
        return piece_metadata_service_1.pieceMetadataService.getOrThrow({
            projectId,
            name: decodedName,
            version,
        });
    }));
    app.post('/sync', SyncPiecesRequest, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield piece_sync_service_1.pieceSyncService.sync();
    }));
    app.post('/options', OptionsPieceRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { packageType, pieceType, pieceName, pieceVersion, propertyName, stepName, input, flowVersionId, flowId, searchValue, } = req.body;
        const { projectId } = req.principal;
        const flow = yield flow_service_1.flowService.getOnePopulatedOrThrow({
            projectId,
            id: flowId,
            versionId: flowVersionId,
        });
        const engineToken = yield (0, engine_helper_1.generateEngineToken)({
            projectId,
        });
        const { result } = yield server_worker_1.engineRunner.executeProp(engineToken, {
            piece: yield (0, piece_metadata_service_1.getPiecePackage)(projectId, {
                packageType,
                pieceType,
                pieceName,
                pieceVersion,
            }),
            flowVersion: flow.version,
            propertyName,
            stepName,
            input,
            projectId,
            searchValue,
        });
        return result;
    }));
    app.delete('/:id', DeletePieceRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return piece_metadata_service_1.pieceMetadataService.delete({
            projectId: req.principal.projectId,
            id: req.params.id,
        });
    }));
});
const ListPiecesRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        querystring: shared_1.ListPiecesRequestQuery,
    },
};
const GetPieceParamsRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        params: shared_1.GetPieceRequestParams,
        querystring: shared_1.GetPieceRequestQuery,
    },
};
const GetPieceParamsWithScopeRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        params: shared_1.GetPieceRequestWithScopeParams,
        querystring: shared_1.GetPieceRequestQuery,
    },
};
const ListCategoriesRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        querystring: shared_1.ListPiecesRequestQuery,
    },
};
const OptionsPieceRequest = {
    schema: {
        body: shared_1.PieceOptionRequest,
    },
};
const DeletePieceRequest = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
    },
};
const ListVersionsRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        querystring: shared_1.ListVersionRequestQuery,
    },
};
const SyncPiecesRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
};


/***/ }),
/* 777 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pieceSyncService = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const http_status_codes_1 = __webpack_require__(481);
const repo_factory_1 = __webpack_require__(224);
const flag_service_1 = __webpack_require__(578);
const json_validator_1 = __webpack_require__(778);
const system_jobs_1 = __webpack_require__(604);
const common_1 = __webpack_require__(610);
const job_handlers_1 = __webpack_require__(607);
const piece_metadata_entity_1 = __webpack_require__(255);
const piece_metadata_service_1 = __webpack_require__(222);
const CLOUD_API_URL = 'https://cloud.activepieces.com/api/v1/pieces';
const piecesRepo = (0, repo_factory_1.repoFactory)(piece_metadata_entity_1.PieceMetadataEntity);
const syncMode = server_shared_1.system.get(server_shared_1.AppSystemProp.PIECES_SYNC_MODE);
exports.pieceSyncService = {
    setup() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (syncMode !== shared_1.PieceSyncMode.OFFICIAL_AUTO) {
                server_shared_1.logger.info('Piece sync service is disabled');
                return;
            }
            job_handlers_1.systemJobHandlers.registerJobHandler(common_1.SystemJobName.PIECES_SYNC, function syncPiecesJobHandler() {
                return tslib_1.__awaiter(this, void 0, void 0, function* () {
                    yield exports.pieceSyncService.sync();
                });
            });
            yield exports.pieceSyncService.sync();
            yield system_jobs_1.systemJobsSchedule.upsertJob({
                job: {
                    name: common_1.SystemJobName.PIECES_SYNC,
                    data: {},
                },
                schedule: {
                    type: 'repeated',
                    cron: '0 */1 * * *',
                },
            });
        });
    },
    sync() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (syncMode !== shared_1.PieceSyncMode.OFFICIAL_AUTO) {
                server_shared_1.logger.info('Piece sync service is disabled');
                return;
            }
            try {
                server_shared_1.logger.info({ time: (0, dayjs_1.default)().toISOString() }, 'Syncing pieces');
                const pieces = yield listPieces();
                const promises = [];
                for (const summary of pieces) {
                    const lastVersionSynced = yield existsInDatabase({ name: summary.name, version: summary.version });
                    if (!lastVersionSynced) {
                        promises.push(syncPiece(summary.name));
                    }
                }
                yield Promise.all(promises);
            }
            catch (error) {
                server_shared_1.logger.error({ error }, 'Error syncing pieces');
            }
        });
    },
};
function syncPiece(name) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            server_shared_1.logger.info({ name }, 'Syncing piece metadata into database');
            const versions = yield getVersions({ name });
            for (const version of Object.keys(versions)) {
                const currentVersionSynced = yield existsInDatabase({ name, version });
                if (!currentVersionSynced) {
                    const piece = yield getOrThrow({ name, version });
                    yield piece_metadata_service_1.pieceMetadataService.create({
                        pieceMetadata: piece,
                        packageType: piece.packageType,
                        pieceType: piece.pieceType,
                    });
                }
            }
        }
        catch (error) {
            server_shared_1.logger.error({ error }, 'Error syncing piece, please upgrade the activepieces to latest version');
        }
    });
}
function existsInDatabase(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ name, version }) {
        return piecesRepo().existsBy({
            name,
            version,
            pieceType: shared_1.PieceType.OFFICIAL,
            packageType: shared_1.PackageType.REGISTRY,
        });
    });
}
function getVersions(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ name }) {
        const queryParams = new URLSearchParams();
        queryParams.append('edition', server_shared_1.system.getEdition());
        queryParams.append('release', yield flag_service_1.flagService.getCurrentRelease());
        queryParams.append('name', name);
        const url = `${CLOUD_API_URL}/versions?${queryParams.toString()}`;
        const response = yield fetch(url);
        return (0, json_validator_1.parseAndVerify)(shared_1.ListVersionsResponse, (yield response.json()));
    });
}
function getOrThrow(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ name, version }) {
        const response = yield fetch(`${CLOUD_API_URL}/${name}${version ? '?version=' + version : ''}`);
        return response.json();
    });
}
function listPieces() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const queryParams = new URLSearchParams();
        queryParams.append('edition', server_shared_1.system.getEdition());
        queryParams.append('release', yield flag_service_1.flagService.getCurrentRelease());
        const url = `${CLOUD_API_URL}?${queryParams.toString()}`;
        const response = yield fetch(url);
        if (response.status === http_status_codes_1.StatusCodes.GONE.valueOf()) {
            server_shared_1.logger.error({ name }, 'Piece list not found');
            return [];
        }
        if (response.status !== http_status_codes_1.StatusCodes.OK.valueOf()) {
            throw new Error(yield response.text());
        }
        return response.json();
    });
}


/***/ }),
/* 778 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseAndVerify = void 0;
const compiler_1 = __webpack_require__(73);
function parseAndVerify(schema, data) {
    const C = compiler_1.TypeCompiler.Compile(schema);
    const isValid = C.Check(data);
    if (isValid) {
        return data;
    }
    throw new Error(JSON.stringify([...C.Errors(data)].map(({ path, message }) => ({ path, message }))));
}
exports.parseAndVerify = parseAndVerify;


/***/ }),
/* 779 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.communityPiecesModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const piece_service_1 = __webpack_require__(735);
const communityPiecesModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(communityPiecesController, { prefix: '/v1/pieces' });
});
exports.communityPiecesModule = communityPiecesModule;
const communityPiecesController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.USER],
        },
        schema: {
            body: shared_1.AddPieceRequestBody,
        },
    }, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        const projectId = req.principal.projectId;
        const pieceMetadata = yield piece_service_1.pieceService.installPiece(platformId, projectId, req.body);
        return res.code(http_status_codes_1.StatusCodes.CREATED).send(pieceMetadata);
    }));
});


/***/ }),
/* 780 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformModule = void 0;
const tslib_1 = __webpack_require__(1);
const platform_controller_1 = __webpack_require__(781);
const platformModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(platform_controller_1.platformController, { prefix: '/v1/platforms' });
});
exports.platformModule = platformModule;


/***/ }),
/* 781 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const ee_authorization_1 = __webpack_require__(656);
const platform_service_1 = __webpack_require__(459);
const platformController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/:id', UpdatePlatformRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield ee_authorization_1.platformMustBeOwnedByCurrentUser.call(app, req, res);
        return platform_service_1.platformService.update(Object.assign({ id: req.params.id }, req.body));
    }));
    app.get('/:id', GetPlatformRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        (0, shared_1.assertEqual)(req.principal.platform.id, req.params.id, 'userPlatformId', 'paramId');
        const platform = yield platform_service_1.platformService.getOneOrThrow(req.params.id);
        return platform;
    }));
});
exports.platformController = platformController;
const UpdatePlatformRequest = {
    schema: {
        body: shared_1.UpdatePlatformRequestBody,
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.PlatformWithoutSensitiveData,
        },
    },
};
const GetPlatformRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        tags: ['platforms'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        description: 'Get a platform by id',
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.PlatformWithoutSensitiveData,
        },
    },
};


/***/ }),
/* 782 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectModule = void 0;
const tslib_1 = __webpack_require__(1);
const project_controller_1 = __webpack_require__(783);
const project_worker_controller_1 = __webpack_require__(742);
const projectModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(project_controller_1.userProjectController, { prefix: '/v1/users/projects' });
    yield app.register(project_controller_1.projectController, { prefix: '/v1/projects' });
    yield app.register(project_worker_controller_1.projectWorkerController, { prefix: '/v1/worker/project' });
});
exports.projectModule = projectModule;


/***/ }),
/* 783 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectController = exports.userProjectController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const pagination_utils_1 = __webpack_require__(454);
const project_service_1 = __webpack_require__(448);
const userProjectController = (fastify, _opts, done) => {
    fastify.get('/:id', (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return project_service_1.projectService.getOneOrThrow(request.principal.projectId);
    }));
    fastify.get('/', (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return pagination_utils_1.paginationHelper.createPage([yield project_service_1.projectService.getUserProjectOrThrow(request.principal.id)], null);
    }));
    done();
};
exports.userProjectController = userProjectController;
const projectController = (fastify, _opts, done) => {
    fastify.post('/:id', UpdateProjectRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return project_service_1.projectService.update(request.params.id, request.body);
    }));
    done();
};
exports.projectController = projectController;
const UpdateProjectRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        tags: ['projects'],
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.Project,
        },
        body: shared_1.UpdateProjectRequestInCommunity,
    },
};


/***/ }),
/* 784 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeEntryModule = void 0;
const tslib_1 = __webpack_require__(1);
const authorization_1 = __webpack_require__(470);
const store_entry_controller_1 = __webpack_require__(785);
const storeEntryModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    app.addHook('preHandler', authorization_1.allowWorkersOnly);
    yield app.register(store_entry_controller_1.storeEntryController, { prefix: '/v1/store-entries' });
});
exports.storeEntryModule = storeEntryModule;


/***/ }),
/* 785 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeEntryController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const store_entry_service_1 = __webpack_require__(786);
const storeEntryController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.post('/', {
        schema: {
            body: shared_1.PutStoreEntryRequest,
        },
    }, (request, _reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return store_entry_service_1.storeEntryService.upsert({
            projectId: request.principal.projectId,
            request: request.body,
        });
    }));
    fastify.get('/', {
        schema: {
            querystring: shared_1.GetStoreEntryRequest,
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const value = yield store_entry_service_1.storeEntryService.getOne({
            projectId: request.principal.projectId,
            key: request.query.key,
        });
        if (!value) {
            return reply.code(http_status_codes_1.StatusCodes.NOT_FOUND).send('Value not found!');
        }
        return value;
    }));
    fastify.delete('/', {
        schema: {
            querystring: shared_1.DeleteStoreEntryRequest,
        },
    }, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        if (request.principal.type !== shared_1.PrincipalType.ENGINE) {
            return reply.status(http_status_codes_1.StatusCodes.FORBIDDEN);
        }
        else {
            return store_entry_service_1.storeEntryService.delete({
                projectId: request.principal.projectId,
                key: request.query.key,
            });
        }
    }));
});
exports.storeEntryController = storeEntryController;


/***/ }),
/* 786 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeEntryService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const repo_factory_1 = __webpack_require__(224);
const store_entry_entity_1 = __webpack_require__(258);
const storeEntryRepo = (0, repo_factory_1.repoFactory)(store_entry_entity_1.StoreEntryEntity);
exports.storeEntryService = {
    upsert(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, request }) {
            const insertResult = yield storeEntryRepo().upsert({
                id: (0, shared_1.apId)(),
                key: request.key,
                value: request.value,
                projectId,
            }, ['projectId', 'key']);
            return {
                projectId,
                key: request.key,
                value: request.value,
                id: insertResult.identifiers[0].id,
                created: insertResult.generatedMaps[0].created,
                updated: insertResult.generatedMaps[0].updated,
            };
        });
    },
    getOne(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, key, }) {
            return storeEntryRepo().findOneBy({
                projectId,
                key,
            });
        });
    },
    delete(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, key, }) {
            yield storeEntryRepo().delete({
                projectId,
                key,
            });
        });
    },
};


/***/ }),
/* 787 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tagsModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const ee_authorization_1 = __webpack_require__(656);
const piece_tag_service_1 = __webpack_require__(450);
const tag_service_1 = __webpack_require__(451);
const tagsModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preHandler', ee_authorization_1.platformMustBeOwnedByCurrentUser);
    yield app.register(tagsController, { prefix: '/v1/tags' });
});
exports.tagsModule = tagsModule;
const tagsController = (fastify) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    fastify.get('/', ListTagsParams, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = request.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return tag_service_1.tagService.list({
            platformId,
            request: request.query,
        });
    }));
    fastify.post('/', UpsertTagParams, (req, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        const tag = yield tag_service_1.tagService.upsert(platformId, req.body.name);
        yield reply.status(http_status_codes_1.StatusCodes.CREATED).send(tag);
    }));
    fastify.post('/pieces', setPiecesTagsParams, (req, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        const pieces = req.body.piecesName.map(pieceName => piece_tag_service_1.pieceTagService.set(platformId, pieceName, req.body.tags));
        yield Promise.all(pieces);
        yield reply.status(http_status_codes_1.StatusCodes.CREATED).send({});
    }));
});
const UpsertTagParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        body: shared_1.UpsertTagRequest,
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: shared_1.Tag,
        },
    },
};
const setPiecesTagsParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        body: shared_1.SetPieceTagsRequest,
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: type_provider_typebox_1.Type.Object({}),
        },
    },
};
const ListTagsParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        querystring: shared_1.ListTagsRequest,
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.Tag),
        },
    },
};


/***/ }),
/* 788 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformUserModule = void 0;
const tslib_1 = __webpack_require__(1);
const ee_authorization_1 = __webpack_require__(656);
const platform_user_controller_1 = __webpack_require__(789);
const platformUserModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preHandler', ee_authorization_1.platformMustBeOwnedByCurrentUser);
    yield app.register(platform_user_controller_1.platformUserController, { prefix: '/v1/users' });
});
exports.platformUserModule = platformUserModule;


/***/ }),
/* 789 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platformUserController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const user_service_1 = __webpack_require__(462);
const platformUserController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', ListUsersRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return user_service_1.userService.list({
            platformId,
        });
    }));
    app.post('/:id', UpdateUserRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        return user_service_1.userService.update({
            id: req.params.id,
            platformId,
            platformRole: req.body.platformRole,
            status: req.body.status,
        });
    }));
    app.delete('/:id', DeleteUserRequest, (req, res) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platformId = req.principal.platform.id;
        (0, shared_1.assertNotNullOrUndefined)(platformId, 'platformId');
        yield user_service_1.userService.delete({
            id: req.params.id,
            platformId,
        });
        return res.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
});
exports.platformUserController = platformUserController;
const ListUsersRequest = {
    schema: {
        response: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.UserResponse),
        },
    },
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
};
const UpdateUserRequest = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
        body: shared_1.UpdateUserRequestBody,
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.UserResponse,
        },
    },
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
};
const DeleteUserRequest = {
    schema: {
        params: type_provider_typebox_1.Type.Object({
            id: shared_1.ApId,
        }),
    },
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
};


/***/ }),
/* 790 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.userModule = void 0;
const tslib_1 = __webpack_require__(1);
const user_service_1 = __webpack_require__(462);
const userModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(usersController, { prefix: '/v1/users' });
});
exports.userModule = userModule;
const usersController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/me', (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const user = yield user_service_1.userService.getMetaInfo({
            id: request.principal.id,
        });
        return user;
    }));
});


/***/ }),
/* 791 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.invitationModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const ee_authorization_1 = __webpack_require__(656);
const rbac_middleware_1 = __webpack_require__(694);
const members_limit_1 = __webpack_require__(792);
const project_service_1 = __webpack_require__(448);
const user_invitation_service_1 = __webpack_require__(630);
const invitationModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(invitationController, { prefix: '/v1/user-invitations' });
});
exports.invitationModule = invitationModule;
const invitationController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.post('/', CreateUserInvitationRequestParams, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        yield assertPermission(app, request, reply, (_a = request.body.projectId) !== null && _a !== void 0 ? _a : undefined, request.body.type);
        const { email, platformRole, projectRole, type } = request.body;
        if (type === shared_1.InvitationType.PROJECT) {
            yield members_limit_1.projectMembersLimit.limit({
                projectId: request.principal.projectId,
                platformId: request.principal.platform.id,
                role: projectRole,
            });
        }
        const platformId = request.principal.platform.id;
        const invitation = yield user_invitation_service_1.userInvitationsService.create({
            email,
            type,
            platformId,
            platformRole: type === shared_1.InvitationType.PROJECT ? null : platformRole !== null && platformRole !== void 0 ? platformRole : null,
            projectId: type === shared_1.InvitationType.PLATFORM ? null : (_b = request.body.projectId) !== null && _b !== void 0 ? _b : null,
            projectRole: type === shared_1.InvitationType.PLATFORM ? null : projectRole !== null && projectRole !== void 0 ? projectRole : null,
        });
        yield reply.status(http_status_codes_1.StatusCodes.CREATED).send(invitation);
    }));
    app.get('/', ListUserInvitationsRequestParams, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _c, _d;
        const invitations = yield user_invitation_service_1.userInvitationsService.list({
            platformId: request.principal.platform.id,
            projectId: request.query.type === shared_1.InvitationType.PROJECT ? request.principal.projectId : null,
            type: request.query.type,
            status: request.query.status,
            cursor: (_c = request.query.cursor) !== null && _c !== void 0 ? _c : null,
            limit: (_d = request.query.limit) !== null && _d !== void 0 ? _d : 10,
        });
        yield reply.status(http_status_codes_1.StatusCodes.OK).send(invitations);
    }));
    app.post('/accept', AcceptUserInvitationRequestParams, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const result = yield user_invitation_service_1.userInvitationsService.accept(request.body);
        yield reply.status(http_status_codes_1.StatusCodes.OK).send(result);
    }));
    app.delete('/:id', DeleteInvitationRequestParams, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _e;
        const invitation = yield user_invitation_service_1.userInvitationsService.getOneOrThrow({
            id: request.params.id,
            platformId: request.principal.platform.id,
        });
        yield assertPermission(app, request, reply, (_e = invitation.projectId) !== null && _e !== void 0 ? _e : undefined, invitation.type);
        yield user_invitation_service_1.userInvitationsService.delete({
            id: request.params.id,
            platformId: request.principal.platform.id,
        });
        yield reply.status(http_status_codes_1.StatusCodes.NO_CONTENT).send();
    }));
});
function assertPermission(fastify, request, reply, projectId, invitationType) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (invitationType) {
            case shared_1.InvitationType.PLATFORM:
                yield ee_authorization_1.platformMustBeOwnedByCurrentUser.call(fastify, request, reply);
                break;
            case shared_1.InvitationType.PROJECT: {
                if ((0, shared_1.isNil)(projectId)) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.AUTHORIZATION,
                        params: {
                            message: 'projectId is required',
                        },
                    });
                }
                const project = yield project_service_1.projectService.getOneOrThrow(projectId);
                if ((0, shared_1.isNil)(project) || project.platformId !== request.principal.platform.id) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.AUTHORIZATION,
                        params: {
                            message: 'user does not have access to the project',
                        },
                    });
                }
                yield (0, ee_authorization_1.platformMustHaveFeatureEnabled)((platform) => platform.projectRolesEnabled).call(fastify, request, reply);
                yield (0, rbac_middleware_1.assertRoleHasPermission)(request.principal, shared_1.Permission.WRITE_INVITATION);
                break;
            }
        }
    });
}
const ListUserInvitationsRequestParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        permission: shared_1.Permission.READ_INVITATION,
    },
    schema: {
        tags: ['user-invitations'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        querystring: shared_1.ListUserInvitationsRequest,
        responnse: {
            [http_status_codes_1.StatusCodes.OK]: (0, shared_1.SeekPage)(shared_1.UserInvitation),
        },
    },
};
const AcceptUserInvitationRequestParams = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: shared_1.AcceptUserInvitationRequest,
    },
};
const DeleteInvitationRequestParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
    },
    schema: {
        tags: ['user-invitations'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        params: type_provider_typebox_1.Type.Object({
            id: type_provider_typebox_1.Type.String(),
        }),
        response: {
            [http_status_codes_1.StatusCodes.NO_CONTENT]: type_provider_typebox_1.Type.Undefined(),
        },
    },
};
const CreateUserInvitationRequestParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER, shared_1.PrincipalType.SERVICE],
        scope: shared_1.EndpointScope.PLATFORM,
    },
    schema: {
        body: shared_1.SendUserInvitationRequest,
        tags: ['user-invitations'],
        security: [shared_1.SERVICE_KEY_SECURITY_OPENAPI],
        response: {
            [http_status_codes_1.StatusCodes.CREATED]: shared_1.UserInvitationWithLink,
        },
    },
};


/***/ }),
/* 792 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.projectMembersLimit = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const flag_service_1 = __webpack_require__(578);
const user_invitation_service_1 = __webpack_require__(630);
const project_member_service_1 = __webpack_require__(631);
const project_plan_service_1 = __webpack_require__(591);
exports.projectMembersLimit = {
    limit(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, platformId, role }) {
            const shouldLimit = yield shouldLimitMembers({ projectId, platformId, role });
            if (shouldLimit) {
                throw new shared_1.ActivepiecesError({
                    code: shared_1.ErrorCode.QUOTA_EXCEEDED,
                    params: {
                        metric: 'team-members',
                    },
                });
            }
        });
    },
};
const UNLIMITED_TEAM_MEMBERS = 100;
function shouldLimitMembers(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId, platformId, role }) {
        if (!flag_service_1.flagService.isCloudPlatform(platformId)) {
            return false;
        }
        const projectPlan = yield project_plan_service_1.projectLimitsService.getPlanByProjectId(projectId);
        if (!projectPlan) {
            return false;
        }
        if (projectPlan.teamMembers === UNLIMITED_TEAM_MEMBERS) {
            return role !== shared_1.ProjectMemberRole.ADMIN;
        }
        const numberOfMembers = yield project_member_service_1.projectMemberService.countTeamMembers(projectId);
        const numberOfInvitations = yield user_invitation_service_1.userInvitationsService.countByProjectId(projectId);
        return numberOfMembers + numberOfInvitations > projectPlan.teamMembers;
    });
}


/***/ }),
/* 793 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookModule = void 0;
const tslib_1 = __webpack_require__(1);
const webhook_controller_1 = __webpack_require__(794);
const webhook_simulation_controller_1 = __webpack_require__(796);
const webhookModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(webhook_controller_1.webhookController, { prefix: '/v1/webhooks' });
    yield app.register(webhook_simulation_controller_1.webhookSimulationController, {
        prefix: '/v1/webhook-simulation',
    });
});
exports.webhookModule = webhookModule;


/***/ }),
/* 794 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookController = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const tasks_limit_1 = __webpack_require__(795);
const flow_repo_1 = __webpack_require__(594);
const flow_service_1 = __webpack_require__(574);
const webhook_response_watcher_1 = __webpack_require__(596);
const queue_1 = __webpack_require__(572);
const webhookController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.all('/:flowId/sync', WEBHOOK_PARAMS, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield handleWebhook({
            request,
            flowId: request.params.flowId,
            async: false,
            simulate: false,
        });
        yield reply
            .status(response.status)
            .headers(response.headers)
            .send(response.body);
    }));
    app.all('/:flowId', WEBHOOK_PARAMS, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield handleWebhook({
            request,
            flowId: request.params.flowId,
            async: true,
            simulate: false,
        });
        yield reply
            .status(response.status)
            .headers(response.headers)
            .send(response.body);
    }));
    app.all('/', WEBHOOK_QUERY_PARAMS, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield handleWebhook({
            request,
            flowId: request.query.flowId,
            async: true,
            simulate: false,
        });
        yield reply
            .status(response.status)
            .headers(response.headers)
            .send(response.body);
    }));
    app.all('/:flowId/test', WEBHOOK_PARAMS, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield handleWebhook({
            request,
            flowId: request.params.flowId,
            async: true,
            simulate: true,
        });
        yield reply
            .status(response.status)
            .headers(response.headers)
            .send(response.body);
    }));
});
exports.webhookController = webhookController;
function handleWebhook(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ request, flowId, async, simulate }) {
        const flow = yield getFlowOrThrow(flowId);
        const payload = yield convertRequest(request);
        const requestId = (0, shared_1.apId)();
        yield queue_1.flowQueue.add(null, {
            id: requestId,
            type: server_shared_1.JobType.WEBHOOK,
            data: {
                schemaVersion: server_shared_1.LATEST_JOB_DATA_SCHEMA_VERSION,
                requestId,
                synchronousHandlerId: async ? null : webhook_response_watcher_1.webhookResponseWatcher.getServerId(),
                payload,
                flowId: flow.id,
                simulate,
            },
            priority: async ? 'medium' : 'high',
        });
        if (async) {
            return {
                status: http_status_codes_1.StatusCodes.OK,
                body: {},
                headers: {},
            };
        }
        return webhook_response_watcher_1.webhookResponseWatcher.oneTimeListener(requestId, true);
    });
}
function convertRequest(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const payload = {
            method: request.method,
            headers: request.headers,
            body: yield convertBody(request),
            queryParams: request.query,
        };
        return payload;
    });
}
const convertBody = (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (request.isMultipart()) {
        const jsonResult = {};
        const requestBodyEntries = Object.entries(request.body);
        for (const [key, value] of requestBodyEntries) {
            jsonResult[key] =
                value instanceof Buffer ? value.toString('base64') : value;
        }
        server_shared_1.logger.debug({ name: 'WebhookController#convertBody', jsonResult });
        return jsonResult;
    }
    return request.body;
});
const getFlowOrThrow = (flowId) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if ((0, shared_1.isNil)(flowId)) {
        server_shared_1.logger.error('[WebhookService#getFlowOrThrow] error=flow_id_is_undefined');
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.VALIDATION,
            params: {
                message: 'flowId is undefined',
            },
        });
    }
    const flow = yield (0, flow_repo_1.flowRepo)().findOneBy({ id: flowId });
    if ((0, shared_1.isNil)(flow)) {
        server_shared_1.logger.error(`[WebhookService#getFlowOrThrow] error=flow_not_found flowId=${flowId}`);
        throw new shared_1.ActivepiecesError({
            code: shared_1.ErrorCode.FLOW_NOT_FOUND,
            params: {
                id: flowId,
            },
        });
    }
    const exceededLimit = yield tasks_limit_1.tasksLimit.exceededLimit({
        projectId: flow.projectId,
    });
    if (exceededLimit) {
        server_shared_1.logger.info({
            message: 'disable webhook out of flow quota',
            projectId: flow.projectId,
            flowId: flow.id,
        });
        yield flow_service_1.flowService.updateStatus({
            id: flow.id,
            projectId: flow.projectId,
            newStatus: shared_1.FlowStatus.DISABLED,
        });
    }
    return flow;
});
const WEBHOOK_PARAMS = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        skipAuth: true,
    },
    schema: {
        params: shared_1.WebhookUrlParams,
    },
};
const WEBHOOK_QUERY_PARAMS = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        skipAuth: true,
    },
    schema: {
        querystring: shared_1.WebhookUrlParams,
    },
};


/***/ }),
/* 795 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tasksLimit = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const project_usage_service_1 = __webpack_require__(673);
const project_plan_service_1 = __webpack_require__(591);
function exceededLimit(_a) {
    return tslib_1.__awaiter(this, arguments, void 0, function* ({ projectId }) {
        const edition = server_shared_1.system.getEdition();
        if (![shared_1.ApEdition.CLOUD, shared_1.ApEdition.COMMUNITY, shared_1.ApEdition.ENTERPRISE].includes(edition)) {
            return false;
        }
        try {
            const projectPlan = yield project_plan_service_1.projectLimitsService.getPlanByProjectId(projectId);
            if (!projectPlan) {
                return false;
            }
            const consumedTasks = yield project_usage_service_1.projectUsageService.increaseTasks(projectId, 0);
            return consumedTasks >= projectPlan.tasks;
        }
        catch (e) {
            server_shared_1.exceptionHandler.handle(e);
            return false;
        }
    });
}
exports.tasksLimit = {
    exceededLimit,
};


/***/ }),
/* 796 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webhookSimulationController = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const webhook_simulation_service_1 = __webpack_require__(584);
const webhookSimulationController = (app, _opts, done) => {
    app.post('/', CreateWebhookSimulationRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { flowId } = req.body;
        const { projectId } = req.principal;
        return webhook_simulation_service_1.webhookSimulationService.create({
            flowId,
            projectId,
        });
    }));
    app.get('/', GetWebhookSimulationRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { flowId } = req.query;
        const { projectId } = req.principal;
        return webhook_simulation_service_1.webhookSimulationService.getOrThrow({
            flowId,
            projectId,
        });
    }));
    app.delete('/', DeleteWebhookSimulationRequest, (req) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { flowId } = req.query;
        const { projectId } = req.principal;
        return webhook_simulation_service_1.webhookSimulationService.delete({
            flowId,
            projectId,
        });
    }));
    done();
};
exports.webhookSimulationController = webhookSimulationController;
const CreateWebhookSimulationRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        body: type_provider_typebox_1.Type.Object({
            flowId: type_provider_typebox_1.Type.String(),
        }),
    },
};
const GetWebhookSimulationRequest = {
    config: {
        allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
    },
    schema: {
        querystring: type_provider_typebox_1.Type.Object({
            flowId: type_provider_typebox_1.Type.String(),
        }),
    },
};
const DeleteWebhookSimulationRequest = GetWebhookSimulationRequest;


/***/ }),
/* 797 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.workerModule = void 0;
const tslib_1 = __webpack_require__(1);
const consumer_1 = __webpack_require__(763);
const engine_controller_1 = __webpack_require__(798);
const machine_controller_1 = __webpack_require__(799);
const queue_1 = __webpack_require__(572);
const redis_bullboard_1 = __webpack_require__(801);
const worker_controller_1 = __webpack_require__(760);
const workerModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(worker_controller_1.flowWorkerController, {
        prefix: '/v1/workers',
    });
    yield app.register(engine_controller_1.flowEngineWorker, {
        prefix: '/v1/engine',
    });
    yield app.register(machine_controller_1.workerMachineController, {
        prefix: '/v1/worker-machines',
    });
    yield queue_1.flowQueue.init();
    yield consumer_1.flowConsumer.init();
    yield (0, redis_bullboard_1.setupBullMQBoard)(app);
});
exports.workerModule = workerModule;


/***/ }),
/* 798 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flowEngineWorker = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const http_status_codes_1 = __webpack_require__(481);
const authorization_1 = __webpack_require__(470);
const tasks_limit_1 = __webpack_require__(795);
const file_service_1 = __webpack_require__(223);
const flow_service_1 = __webpack_require__(574);
const flow_run_service_1 = __webpack_require__(595);
const flow_version_service_1 = __webpack_require__(580);
const trigger_1 = __webpack_require__(586);
const consumer_1 = __webpack_require__(763);
const webhook_response_watcher_1 = __webpack_require__(596);
const queue_1 = __webpack_require__(572);
const flowEngineWorker = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.addHook('preSerialization', authorization_1.entitiesMustBeOwnedByCurrentProject);
    app.get('/runs/:runId', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.ENGINE],
        },
        schema: {
            params: server_shared_1.GetRunForWorkerRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { runId } = request.params;
        return flow_run_service_1.flowRunService.getOnePopulatedOrThrow({
            id: runId,
            projectId: request.principal.projectId,
        });
    }));
    app.post('/update-job', {
        config: {
            allowedPrincipals: [shared_1.PrincipalType.ENGINE],
        },
        schema: {
            body: server_shared_1.UpdateJobRequest,
        },
    }, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const environment = server_shared_1.system.getOrThrow(server_shared_1.SharedSystemProp.ENVIRONMENT);
        if (environment === shared_1.ApEnvironment.TESTING) {
            return {};
        }
        const { id } = request.principal;
        const { queueName, status, message } = request.body;
        yield consumer_1.flowConsumer.update(null, { jobId: id, queueName, status, message: message !== null && message !== void 0 ? message : 'NO_MESSAGE_AVAILABLE' });
        return {};
    }));
    app.post('/update-run', UpdateStepProgress, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const { runId, workerHandlerId, runDetails, progressUpdateType, httpRequestId } = request.body;
        if (progressUpdateType === shared_1.ProgressUpdateType.WEBHOOK_RESPONSE && workerHandlerId && httpRequestId) {
            yield webhook_response_watcher_1.webhookResponseWatcher.publish(httpRequestId, workerHandlerId, yield getFlowResponse(runDetails));
        }
        const populatedRun = yield flow_run_service_1.flowRunService.updateStatus({
            flowRunId: runId,
            status: getTerminalStatus(runDetails.status),
            tasks: runDetails.tasks,
            duration: runDetails.duration,
            executionState: getExecutionState(runDetails),
            projectId: request.principal.projectId,
            tags: (_a = runDetails.tags) !== null && _a !== void 0 ? _a : [],
        });
        if (runDetails.status === shared_1.FlowRunStatus.PAUSED) {
            yield flow_run_service_1.flowRunService.pause({
                flowRunId: runId,
                pauseMetadata: Object.assign({ progressUpdateType, handlerId: workerHandlerId !== null && workerHandlerId !== void 0 ? workerHandlerId : undefined }, (runDetails.pauseMetadata)),
            });
        }
        app.io.to(populatedRun.projectId).emit(shared_1.WebsocketClientEvent.TEST_FLOW_RUN_PROGRESS, populatedRun);
        if (runDetails.status === shared_1.FlowRunStatus.QUOTA_EXCEEDED) {
            server_shared_1.logger.info({
                projectId: populatedRun.projectId,
                runId: populatedRun.id,
            }, 'Disabling flow due to quota exceeded');
            yield flow_service_1.flowService.updateStatus({
                id: populatedRun.flowId,
                projectId: populatedRun.projectId,
                newStatus: shared_1.FlowStatus.DISABLED,
            });
        }
        return {};
    }));
    app.get('/check-task-limit', CheckTaskLimitParams, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const exceededLimit = yield tasks_limit_1.tasksLimit.exceededLimit({
            projectId: request.principal.projectId,
        });
        if (exceededLimit) {
            throw new shared_1.ActivepiecesError({
                code: shared_1.ErrorCode.QUOTA_EXCEEDED,
                params: {
                    metric: 'tasks',
                },
            });
        }
        return {};
    }));
    app.get('/flows', GetLockedVersionRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const populatedFlow = yield getFlow(request.principal.projectId, request.query);
        return Object.assign(Object.assign({}, populatedFlow), { version: yield flow_version_service_1.flowVersionService.lockPieceVersions({
                flowVersion: populatedFlow.version,
                projectId: request.principal.projectId,
            }) });
    }));
    app.post('/remove-stable-job', RemoveFlowRequest, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { flowVersionId, flowId } = request.body;
        const flow = (0, shared_1.isNil)(flowId) ? null : yield flow_service_1.flowService.getOnePopulated({
            projectId: request.principal.projectId,
            versionId: flowVersionId,
            id: flowId,
        });
        if ((0, shared_1.isNil)(flow)) {
            yield queue_1.flowQueue.removeRepeatingJob(null, {
                id: flowVersionId,
            });
            return;
        }
        yield trigger_1.triggerHooks.disable({
            projectId: flow.projectId,
            flowVersion: flow.version,
            simulate: false,
            ignoreError: true,
        });
        return {};
    }));
    app.get('/files/:fileId', GetFileRequestParams, (request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { fileId } = request.params;
        const file = yield file_service_1.fileService.getOneOrThrow({
            fileId,
        });
        return reply
            .type('application/zip')
            .status(http_status_codes_1.StatusCodes.OK)
            .send(file.data);
    }));
});
exports.flowEngineWorker = flowEngineWorker;
function getFlow(projectId, request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { type } = request;
        switch (type) {
            case shared_1.GetFlowVersionForWorkerRequestType.LATEST: {
                return flow_service_1.flowService.getOnePopulatedOrThrow({
                    id: request.flowId,
                    projectId,
                });
            }
            case shared_1.GetFlowVersionForWorkerRequestType.EXACT: {
                // TODO this can be optimized
                const flowVersion = yield flow_version_service_1.flowVersionService.getOneOrThrow(request.versionId);
                return flow_service_1.flowService.getOnePopulatedOrThrow({
                    id: flowVersion.flowId,
                    projectId,
                    versionId: request.versionId,
                });
            }
            case shared_1.GetFlowVersionForWorkerRequestType.LOCKED: {
                const rawFlow = yield flow_service_1.flowService.getOneOrThrow({
                    id: request.flowId,
                    projectId,
                });
                if ((0, shared_1.isNil)(rawFlow.publishedVersionId)) {
                    throw new shared_1.ActivepiecesError({
                        code: shared_1.ErrorCode.ENTITY_NOT_FOUND,
                        params: {
                            entityId: rawFlow.id,
                            message: 'Flow has no published version',
                        },
                    });
                }
                return flow_service_1.flowService.getOnePopulatedOrThrow({
                    id: rawFlow.id,
                    projectId,
                    versionId: rawFlow.publishedVersionId,
                });
            }
        }
    });
}
function getExecutionState(flowRunResponse) {
    if ([shared_1.FlowRunStatus.TIMEOUT, shared_1.FlowRunStatus.QUOTA_EXCEEDED, shared_1.FlowRunStatus.INTERNAL_ERROR].includes(flowRunResponse.status)) {
        return null;
    }
    return {
        steps: flowRunResponse.steps,
    };
}
const getTerminalStatus = (status) => {
    return status == shared_1.FlowRunStatus.STOPPED
        ? shared_1.FlowRunStatus.SUCCEEDED
        : status;
};
function getFlowResponse(result) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e;
        switch (result.status) {
            case shared_1.FlowRunStatus.PAUSED:
                if (result.pauseMetadata && result.pauseMetadata.type === shared_1.PauseType.WEBHOOK) {
                    return {
                        status: http_status_codes_1.StatusCodes.OK,
                        body: result.pauseMetadata.response,
                        headers: {},
                    };
                }
                return {
                    status: http_status_codes_1.StatusCodes.NO_CONTENT,
                    body: {},
                    headers: {},
                };
            case shared_1.FlowRunStatus.STOPPED:
                return {
                    status: (_b = (_a = result.stopResponse) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : http_status_codes_1.StatusCodes.OK,
                    body: (_c = result.stopResponse) === null || _c === void 0 ? void 0 : _c.body,
                    headers: (_e = (_d = result.stopResponse) === null || _d === void 0 ? void 0 : _d.headers) !== null && _e !== void 0 ? _e : {},
                };
            case shared_1.FlowRunStatus.INTERNAL_ERROR:
                return {
                    status: http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR,
                    body: {
                        message: 'An internal error has occurred',
                    },
                    headers: {},
                };
            case shared_1.FlowRunStatus.FAILED:
                return {
                    status: http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR,
                    body: {
                        message: 'The flow has failed and there is no response returned',
                    },
                    headers: {},
                };
            case shared_1.FlowRunStatus.TIMEOUT:
            case shared_1.FlowRunStatus.RUNNING:
                return {
                    status: http_status_codes_1.StatusCodes.GATEWAY_TIMEOUT,
                    body: {
                        message: 'The request took too long to reply',
                    },
                    headers: {},
                };
            case shared_1.FlowRunStatus.SUCCEEDED:
            case shared_1.FlowRunStatus.QUOTA_EXCEEDED:
                return {
                    status: http_status_codes_1.StatusCodes.NO_CONTENT,
                    body: {},
                    headers: {},
                };
        }
    });
}
const CheckTaskLimitParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.ENGINE],
    },
    schema: {},
};
const GetFileRequestParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.ENGINE],
    },
    schema: {
        params: type_provider_typebox_1.Type.Object({
            fileId: type_provider_typebox_1.Type.String(),
        }),
    },
};
const UpdateStepProgress = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.ENGINE],
    },
    schema: {
        body: shared_1.UpdateRunProgressRequest,
    },
};
const GetLockedVersionRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.ENGINE],
    },
    schema: {
        querystring: shared_1.GetFlowVersionForWorkerRequest,
        response: {
            [http_status_codes_1.StatusCodes.OK]: shared_1.PopulatedFlow,
        },
    },
};
const RemoveFlowRequest = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.ENGINE],
    },
    schema: {
        body: shared_1.RemoveStableJobEngineRequest,
    },
};


/***/ }),
/* 799 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.workerMachineController = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const type_provider_typebox_1 = __webpack_require__(472);
const access_token_manager_1 = __webpack_require__(509);
const ee_authorization_1 = __webpack_require__(656);
const platform_service_1 = __webpack_require__(459);
const machine_service_1 = __webpack_require__(800);
const workerMachineController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', ListWorkersParams, (req, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield ee_authorization_1.platformMustBeOwnedByCurrentUser.call(app, req, reply);
        // TODO replace with specific platform id in future
        if ([shared_1.ApEdition.CLOUD].includes(server_shared_1.system.getEdition())) {
            return [];
        }
        return machine_service_1.machineService.list();
    }));
    app.post('/', GenerateWorkerTokenParams, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const platform = yield platform_service_1.platformService.getOneOrThrow(request.body.platformId);
        return access_token_manager_1.accessTokenManager.generateWorkerToken({
            platformId: platform.id,
            type: shared_1.WorkerMachineType.DEDICATED,
        });
    }));
    app.post('/heartbeat', HeartbeatParams, (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const { cpuUsagePercentage, ramUsagePercentage, totalAvailableRamInBytes, ip } = request.body;
        const workerPrincipal = request.principal;
        yield machine_service_1.machineService.upsert({
            cpuUsagePercentage,
            ramUsagePercentage,
            totalAvailableRamInBytes,
            ip,
            workerPrincipal,
        });
    }));
});
exports.workerMachineController = workerMachineController;
const GenerateWorkerTokenParams = {
    config: {
        // TODO this should be replaced with the user
        allowedPrincipals: [shared_1.PrincipalType.SUPER_USER],
    },
    schema: {
        body: type_provider_typebox_1.Type.Object({
            platformId: type_provider_typebox_1.Type.String(),
        }),
    },
};
const HeartbeatParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.WORKER],
    },
    schema: {
        body: shared_1.WorkerMachineHealthcheckRequest,
    },
};
const ListWorkersParams = {
    config: {
        allowedPrincipals: [shared_1.PrincipalType.USER],
    },
};


/***/ }),
/* 800 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.machineService = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const dayjs_1 = tslib_1.__importDefault(__webpack_require__(194));
const repo_factory_1 = __webpack_require__(224);
const machine_entity_1 = __webpack_require__(264);
const workerRepo = (0, repo_factory_1.repoFactory)(machine_entity_1.WorkerMachineEntity);
const OFFLINE_THRESHOLD = dayjs_1.default.duration(60, 's').asMilliseconds();
exports.machineService = {
    upsert(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            yield workerRepo().upsert(Object.assign(Object.assign({ information: {
                    cpuUsagePercentage: request.cpuUsagePercentage,
                    ramUsagePercentage: request.ramUsagePercentage,
                    totalAvailableRamInBytes: request.totalAvailableRamInBytes,
                    ip: request.ip,
                }, updated: (0, dayjs_1.default)().toISOString(), id: request.workerPrincipal.id }, (0, shared_1.spreadIfDefined)('platformId', (_a = request.workerPrincipal.platform) === null || _a === void 0 ? void 0 : _a.id)), { type: request.workerPrincipal.worker.type }), ['id']);
        });
    },
    list() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const workers = yield workerRepo().createQueryBuilder('machine').where('machine.updated > :updated', { updated: new Date((0, dayjs_1.default)().subtract(OFFLINE_THRESHOLD, 'ms').toISOString()) }).getMany();
            return workers.map(worker => {
                const isOnline = (0, dayjs_1.default)(worker.updated).isAfter((0, dayjs_1.default)().subtract(OFFLINE_THRESHOLD, 'ms').toISOString());
                return Object.assign(Object.assign({}, worker), { status: isOnline ? shared_1.WorkerMachineStatus.ONLINE : shared_1.WorkerMachineStatus.OFFLINE });
            });
        });
    },
};


/***/ }),
/* 801 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setupBullMQBoard = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const api_1 = __webpack_require__(802);
const bullMQAdapter_1 = __webpack_require__(803);
const fastify_1 = __webpack_require__(804);
const basic_auth_1 = tslib_1.__importDefault(__webpack_require__(805));
const redis_queue_1 = __webpack_require__(625);
const QUEUE_BASE_PATH = '/ui';
function setupBullMQBoard(app) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        const edition = server_shared_1.system.getEdition();
        const isQueueEnabled = (edition !== shared_1.ApEdition.CLOUD) && ((_a = server_shared_1.system.getBoolean(server_shared_1.AppSystemProp.QUEUE_UI_ENABLED)) !== null && _a !== void 0 ? _a : false);
        if (!isQueueEnabled) {
            server_shared_1.logger.info('[setupBullMQBoard] Queue UI is disabled');
            return;
        }
        const queueUsername = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_UI_USERNAME);
        const queuePassword = server_shared_1.system.getOrThrow(server_shared_1.AppSystemProp.QUEUE_UI_PASSWORD);
        server_shared_1.logger.info('[setupBullMQBoard] Setting up bull board, visit /ui to see the queues');
        yield app.register(basic_auth_1.default, {
            validate: (username, password, _req, _reply, done) => {
                if (username === queueUsername && password === queuePassword) {
                    done();
                }
                else {
                    done(new Error('Unauthorized'));
                }
            },
            authenticate: true,
        });
        const serverAdapter = new fastify_1.FastifyAdapter();
        (0, api_1.createBullBoard)({
            queues: Object.values(redis_queue_1.bullMqGroups).map((group) => Object.values(group)).flat().map((queue) => new bullMQAdapter_1.BullMQAdapter(queue)),
            serverAdapter,
        });
        serverAdapter.setBasePath(`/api${QUEUE_BASE_PATH}`);
        app.addHook('onRequest', (req, reply, next) => {
            if (!req.routerPath.startsWith(QUEUE_BASE_PATH)) {
                next();
            }
            else {
                app.basicAuth(req, reply, function (error) {
                    const castedError = error;
                    if (!(0, shared_1.isNil)(castedError)) {
                        void reply
                            .code(castedError.statusCode || 500)
                            .send({ error: castedError.name });
                    }
                    else {
                        next();
                    }
                });
            }
        });
        yield app.register(serverAdapter.registerPlugin(), {
            prefix: QUEUE_BASE_PATH,
            basePath: QUEUE_BASE_PATH,
        });
    });
}
exports.setupBullMQBoard = setupBullMQBoard;


/***/ }),
/* 802 */
/***/ ((module) => {

module.exports = require("@bull-board/api");

/***/ }),
/* 803 */
/***/ ((module) => {

module.exports = require("@bull-board/api/bullMQAdapter");

/***/ }),
/* 804 */
/***/ ((module) => {

module.exports = require("@bull-board/fastify");

/***/ }),
/* 805 */
/***/ ((module) => {

module.exports = require("@fastify/basic-auth");

/***/ }),
/* 806 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.seedDevData = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const authentication_service_1 = __webpack_require__(635);
const authentication_service_hooks_1 = __webpack_require__(636);
const flag_entity_1 = __webpack_require__(248);
const database_connection_1 = __webpack_require__(225);
const DEV_DATA_SEEDED_FLAG = 'DEV_DATA_SEEDED';
const currentEnvIsNotDev = () => {
    const env = server_shared_1.system.get(server_shared_1.SharedSystemProp.ENVIRONMENT);
    return env !== shared_1.ApEnvironment.DEVELOPMENT;
};
const devDataAlreadySeeded = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const flagRepo = (0, database_connection_1.databaseConnection)().getRepository(flag_entity_1.FlagEntity);
    const devSeedsFlag = yield flagRepo.findOneBy({ id: DEV_DATA_SEEDED_FLAG });
    return (devSeedsFlag === null || devSeedsFlag === void 0 ? void 0 : devSeedsFlag.value) === true;
});
const setDevDataSeededFlag = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const flagRepo = (0, database_connection_1.databaseConnection)().getRepository(flag_entity_1.FlagEntity);
    yield flagRepo.save({
        id: DEV_DATA_SEEDED_FLAG,
        value: true,
    });
});
const seedDevUser = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const DEV_EMAIL = 'dev@ap.com';
    const DEV_PASSWORD = '12345678';
    yield authentication_service_1.authenticationService.signUp({
        email: DEV_EMAIL,
        password: DEV_PASSWORD,
        firstName: 'Dev',
        lastName: 'User',
        trackEvents: false,
        newsLetter: false,
        verified: true,
        platformId: null,
        provider: authentication_service_hooks_1.Provider.EMAIL,
    });
    server_shared_1.logger.info({ name: 'seedDevUser' }, `email=${DEV_EMAIL} pass=${DEV_PASSWORD}`);
});
const seedDevData = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (currentEnvIsNotDev()) {
        server_shared_1.logger.info({ name: 'seedDevData' }, 'skip: not in development environment');
        return;
    }
    if (yield devDataAlreadySeeded()) {
        server_shared_1.logger.info({ name: 'seedDevData' }, 'skip: already seeded');
        return;
    }
    yield seedDevUser();
    yield setDevDataSeededFlag();
});
exports.seedDevData = seedDevData;


/***/ }),
/* 807 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setupServer = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const cors_1 = tslib_1.__importDefault(__webpack_require__(808));
const formbody_1 = tslib_1.__importDefault(__webpack_require__(809));
const multipart_1 = tslib_1.__importDefault(__webpack_require__(810));
const fastify_1 = tslib_1.__importDefault(__webpack_require__(811));
const fastify_favicon_1 = tslib_1.__importDefault(__webpack_require__(812));
const fastify_raw_body_1 = __webpack_require__(813);
const qs_1 = tslib_1.__importDefault(__webpack_require__(814));
const app_1 = __webpack_require__(133);
const health_module_1 = __webpack_require__(815);
const error_handler_1 = __webpack_require__(816);
const worker_1 = __webpack_require__(817);
const setupServer = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const app = yield setupBaseApp();
    if (server_shared_1.system.isApp()) {
        yield (0, app_1.setupApp)(app);
    }
    if (server_shared_1.system.isWorker()) {
        yield (0, worker_1.setupWorker)(app);
    }
    return app;
});
exports.setupServer = setupServer;
function setupBaseApp() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const app = (0, fastify_1.default)({
            logger: server_shared_1.logger,
            // Default 4MB, also set in nginx.conf
            pluginTimeout: 30000,
            bodyLimit: 4 * 1024 * 1024,
            genReqId: () => {
                return `req_${(0, shared_1.apId)()}`;
            },
            ajv: {
                customOptions: {
                    removeAdditional: 'all',
                    useDefaults: true,
                    coerceTypes: 'array',
                    formats: {},
                },
            },
        });
        yield app.register(fastify_favicon_1.default);
        yield app.register(multipart_1.default, {
            attachFieldsToBody: 'keyValues',
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            onFile(part) {
                return tslib_1.__awaiter(this, void 0, void 0, function* () {
                    const buffer = yield part.toBuffer();
                    part.value = buffer;
                });
            },
        });
        (0, server_shared_1.initializeSentry)();
        yield app.register(fastify_raw_body_1.fastifyRawBody, {
            field: 'rawBody',
            global: false,
            encoding: 'utf8',
            runFirst: true,
            routes: [],
        });
        yield app.register(formbody_1.default, { parser: (str) => qs_1.default.parse(str) });
        app.setErrorHandler(error_handler_1.errorHandler);
        yield app.register(cors_1.default, {
            origin: '*',
            exposedHeaders: ['*'],
            methods: ['*'],
        });
        // SurveyMonkey
        app.addContentTypeParser('application/vnd.surveymonkey.response.v1+json', { parseAs: 'string' }, app.getDefaultJsonParser('ignore', 'ignore'));
        yield app.register(health_module_1.healthModule);
        return app;
    });
}


/***/ }),
/* 808 */
/***/ ((module) => {

module.exports = require("@fastify/cors");

/***/ }),
/* 809 */
/***/ ((module) => {

module.exports = require("@fastify/formbody");

/***/ }),
/* 810 */
/***/ ((module) => {

module.exports = require("@fastify/multipart");

/***/ }),
/* 811 */
/***/ ((module) => {

module.exports = require("fastify");

/***/ }),
/* 812 */
/***/ ((module) => {

module.exports = require("fastify-favicon");

/***/ }),
/* 813 */
/***/ ((module) => {

module.exports = require("fastify-raw-body");

/***/ }),
/* 814 */
/***/ ((module) => {

module.exports = require("qs");

/***/ }),
/* 815 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.healthModule = void 0;
const tslib_1 = __webpack_require__(1);
const shared_1 = __webpack_require__(8);
const healthModule = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield app.register(healthController, { prefix: '/v1/health' });
});
exports.healthModule = healthModule;
const healthController = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    app.get('/', {
        config: {
            allowedPrincipals: shared_1.ALL_PRINCIPAL_TYPES,
        },
    }, () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        return { status: 'OK' };
    }));
});


/***/ }),
/* 816 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.errorHandler = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const http_status_codes_1 = __webpack_require__(481);
const errorHandler = (error, _request, reply) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (error instanceof shared_1.ActivepiecesError) {
        const statusCodeMap = {
            [shared_1.ErrorCode.INVALID_API_KEY]: http_status_codes_1.StatusCodes.UNAUTHORIZED,
            [shared_1.ErrorCode.INVALID_BEARER_TOKEN]: http_status_codes_1.StatusCodes.UNAUTHORIZED,
            [shared_1.ErrorCode.QUOTA_EXCEEDED]: http_status_codes_1.StatusCodes.PAYMENT_REQUIRED,
            [shared_1.ErrorCode.FEATURE_DISABLED]: http_status_codes_1.StatusCodes.PAYMENT_REQUIRED,
            [shared_1.ErrorCode.PERMISSION_DENIED]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.ENTITY_NOT_FOUND]: http_status_codes_1.StatusCodes.NOT_FOUND,
            [shared_1.ErrorCode.EXISTING_USER]: http_status_codes_1.StatusCodes.CONFLICT,
            [shared_1.ErrorCode.EXISTING_ALERT_CHANNEL]: http_status_codes_1.StatusCodes.CONFLICT,
            [shared_1.ErrorCode.FLOW_IN_USE]: http_status_codes_1.StatusCodes.CONFLICT,
            [shared_1.ErrorCode.AUTHORIZATION]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.SIGN_UP_DISABLED]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.INVALID_CREDENTIALS]: http_status_codes_1.StatusCodes.UNAUTHORIZED,
            [shared_1.ErrorCode.EMAIL_IS_NOT_VERIFIED]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.USER_IS_INACTIVE]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.DOMAIN_NOT_ALLOWED]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.EMAIL_AUTH_DISABLED]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.INVALID_OTP]: http_status_codes_1.StatusCodes.GONE,
            [shared_1.ErrorCode.VALIDATION]: http_status_codes_1.StatusCodes.CONFLICT,
            [shared_1.ErrorCode.INVITATION_ONLY_SIGN_UP]: http_status_codes_1.StatusCodes.FORBIDDEN,
            [shared_1.ErrorCode.AUTHENTICATION]: http_status_codes_1.StatusCodes.UNAUTHORIZED,
            [shared_1.ErrorCode.ACTIVATION_KEY_NOT_FOUND]: http_status_codes_1.StatusCodes.NOT_FOUND,
            [shared_1.ErrorCode.ACTIVATION_KEY_ALREADY_ACTIVATED]: http_status_codes_1.StatusCodes.CONFLICT,
            [shared_1.ErrorCode.EMAIL_ALREADY_HAS_ACTIVATION_KEY]: http_status_codes_1.StatusCodes.CONFLICT,
        };
        const statusCode = (_a = statusCodeMap[error.error.code]) !== null && _a !== void 0 ? _a : http_status_codes_1.StatusCodes.BAD_REQUEST;
        yield reply.status(statusCode).send({
            code: error.error.code,
            params: error.error.params,
        });
    }
    else {
        server_shared_1.logger.error('[errorHandler]: ' + JSON.stringify(error));
        if (!error.statusCode ||
            error.statusCode === http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR.valueOf()) {
            server_shared_1.exceptionHandler.handle(error);
        }
        yield reply
            .status((_b = error.statusCode) !== null && _b !== void 0 ? _b : http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR)
            .send(error);
    }
});
exports.errorHandler = errorHandler;


/***/ }),
/* 817 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.workerPostBoot = exports.setupWorker = void 0;
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const shared_1 = __webpack_require__(8);
const server_worker_1 = __webpack_require__(474);
const access_token_manager_1 = __webpack_require__(509);
const setupWorker = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const workerToken = yield generateWorkerToken();
    yield server_worker_1.flowWorker.init(workerToken);
    app.addHook('onClose', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield server_worker_1.flowWorker.close();
    }));
});
exports.setupWorker = setupWorker;
function workerPostBoot() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        server_shared_1.logger.info('Worker started');
        yield server_worker_1.flowWorker.start();
    });
}
exports.workerPostBoot = workerPostBoot;
function generateWorkerToken() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const workerToken = server_shared_1.system.get(server_shared_1.WorkerSystemProps.WORKER_TOKEN);
        if (!(0, shared_1.isNil)(workerToken)) {
            return workerToken;
        }
        return access_token_manager_1.accessTokenManager.generateWorkerToken({
            type: shared_1.WorkerMachineType.SHARED,
            platformId: null,
        });
    });
}


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;

Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
const server_shared_1 = __webpack_require__(2);
const app_1 = __webpack_require__(133);
const database_connection_1 = __webpack_require__(225);
const dev_seeds_1 = __webpack_require__(806);
const lock_1 = __webpack_require__(512);
const server_1 = __webpack_require__(807);
const worker_1 = __webpack_require__(817);
const start = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        yield app.listen({
            host: '0.0.0.0',
            port: 3000,
        });
        if (server_shared_1.system.isWorker()) {
            yield (0, worker_1.workerPostBoot)();
        }
        if (server_shared_1.system.isApp()) {
            yield (0, app_1.appPostBoot)();
        }
    }
    catch (err) {
        server_shared_1.logger.error(err);
        process.exit(1);
    }
});
// This might be needed as it can be called twice
let shuttingDown = false;
const stop = (app) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (shuttingDown)
        return;
    shuttingDown = true;
    try {
        yield app.close();
        process.exit(0);
    }
    catch (err) {
        server_shared_1.logger.error('Error stopping server');
        server_shared_1.logger.error(err);
        process.exit(1);
    }
});
function setupTimeZone() {
    // It's important to set the time zone to UTC when working with dates in PostgreSQL.
    // If the time zone is not set to UTC, there can be problems when storing dates in UTC but not considering the UTC offset when converting them back to local time. This can lead to incorrect fields being displayed for the created
    // https://stackoverflow.com/questions/68240368/typeorm-find-methods-returns-wrong-timestamp-time
    process.env.TZ = 'UTC';
}
const main = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    setupTimeZone();
    if (server_shared_1.system.isApp()) {
        yield (0, database_connection_1.databaseConnection)().initialize();
        yield (0, database_connection_1.databaseConnection)().runMigrations();
        yield (0, dev_seeds_1.seedDevData)();
        (0, lock_1.initializeLock)();
    }
    const app = yield (0, server_1.setupServer)();
    process.on('SIGINT', () => {
        stop(app).catch((e) => server_shared_1.logger.error(e, '[Main#stop]'));
    });
    process.on('SIGTERM', () => {
        stop(app).catch((e) => server_shared_1.logger.error(e, '[Main#stop]'));
    });
    yield start(app);
});
main().catch((e) => {
    server_shared_1.logger.error(e, '[Main#main]');
    process.exit(1);
});

})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;