"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.everyDayTrigger = void 0;
const tslib_1 = require("tslib");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const pieces_framework_2 = require("@activepieces/pieces-framework");
const common_1 = require("../common");
exports.everyDayTrigger = (0, pieces_framework_2.createTrigger)({
    name: 'every_day',
    displayName: 'Every Day',
    description: 'Triggers the current flow every day',
    type: pieces_framework_1.TriggerStrategy.POLLING,
    sampleData: {},
    props: {
        hour_of_the_day: pieces_framework_2.Property.StaticDropdown({
            displayName: 'Hour of the day',
            options: {
                options: common_1.DAY_HOURS.map((h, idx) => {
                    return {
                        label: h,
                        value: idx,
                    };
                }),
            },
            required: true,
            defaultValue: 0,
        }),
        timezone: pieces_framework_2.Property.StaticDropdown({
            displayName: 'Timezone',
            options: {
                options: common_1.timezoneOptions,
            },
            required: true,
            defaultValue: 'UTC',
        }),
        run_on_weekends: pieces_framework_2.Property.Checkbox({
            displayName: 'Run on weekends (Sat,Sun)',
            required: true,
            defaultValue: false,
        }),
    },
    onEnable: (ctx) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const hourOfTheDay = (0, common_1.validateHours)(ctx.propsValue.hour_of_the_day);
        const cronExpression = ctx.propsValue.run_on_weekends
            ? `0 ${hourOfTheDay} * * *`
            : `0 ${hourOfTheDay} * * 1-5`;
        ctx.setSchedule({
            cronExpression: cronExpression,
            timezone: ctx.propsValue.timezone,
        });
    }),
    run(ctx) {
        const hourOfTheDay = (0, common_1.validateHours)(ctx.propsValue.hour_of_the_day);
        return Promise.resolve([
            {
                hour_of_the_day: hourOfTheDay,
                timezone: ctx.propsValue.timezone,
                cron_expression: ctx.propsValue.run_on_weekends
                    ? `0 ${hourOfTheDay} * * *`
                    : `0 ${hourOfTheDay} * * 1-5`,
            },
        ]);
    },
    onDisable: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        console.log('onDisable');
    }),
});
//# sourceMappingURL=every-day.trigger.js.map