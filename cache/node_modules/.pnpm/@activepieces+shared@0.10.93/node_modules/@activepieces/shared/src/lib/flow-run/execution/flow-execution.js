"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowRunResponse = exports.StopResponse = exports.PauseMetadata = exports.WebhookPauseMetadata = exports.DelayPauseMetadata = exports.PauseType = exports.FlowRunStatus = void 0;
const typebox_1 = require("@sinclair/typebox");
const execution_output_1 = require("./execution-output");
var FlowRunStatus;
(function (FlowRunStatus) {
    FlowRunStatus["FAILED"] = "FAILED";
    FlowRunStatus["QUOTA_EXCEEDED"] = "QUOTA_EXCEEDED";
    FlowRunStatus["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    FlowRunStatus["PAUSED"] = "PAUSED";
    FlowRunStatus["RUNNING"] = "RUNNING";
    FlowRunStatus["STOPPED"] = "STOPPED";
    FlowRunStatus["SUCCEEDED"] = "SUCCEEDED";
    FlowRunStatus["TIMEOUT"] = "TIMEOUT";
})(FlowRunStatus || (exports.FlowRunStatus = FlowRunStatus = {}));
var PauseType;
(function (PauseType) {
    PauseType["DELAY"] = "DELAY";
    PauseType["WEBHOOK"] = "WEBHOOK";
})(PauseType || (exports.PauseType = PauseType = {}));
exports.DelayPauseMetadata = typebox_1.Type.Object({
    type: typebox_1.Type.Literal(PauseType.DELAY),
    resumeDateTime: typebox_1.Type.String(),
});
exports.WebhookPauseMetadata = typebox_1.Type.Object({
    type: typebox_1.Type.Literal(PauseType.WEBHOOK),
    requestId: typebox_1.Type.String(),
    response: typebox_1.Type.Unknown(),
});
exports.PauseMetadata = typebox_1.Type.Union([exports.DelayPauseMetadata, exports.WebhookPauseMetadata]);
exports.StopResponse = typebox_1.Type.Object({
    status: typebox_1.Type.Optional(typebox_1.Type.Number()),
    body: typebox_1.Type.Optional(typebox_1.Type.Unknown()),
    headers: typebox_1.Type.Optional(typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String())),
});
const BaseExecutiionResponse = Object.assign(Object.assign({}, execution_output_1.ExecutionState), { duration: typebox_1.Type.Number(), tasks: typebox_1.Type.Number(), tags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())), error: typebox_1.Type.Optional(typebox_1.Type.Object({
        stepName: typebox_1.Type.String(),
        message: typebox_1.Type.String(),
    })), stopResponse: typebox_1.Type.Optional(exports.StopResponse) });
exports.FlowRunResponse = typebox_1.Type.Union([
    typebox_1.Type.Object(Object.assign(Object.assign({ status: typebox_1.Type.Literal(FlowRunStatus.PAUSED) }, BaseExecutiionResponse), { pauseMetadata: typebox_1.Type.Optional(exports.PauseMetadata) })),
    typebox_1.Type.Object(Object.assign({ status: typebox_1.Type.Union([typebox_1.Type.Literal(FlowRunStatus.FAILED),
            typebox_1.Type.Literal(FlowRunStatus.SUCCEEDED),
            typebox_1.Type.Literal(FlowRunStatus.RUNNING),
            typebox_1.Type.Literal(FlowRunStatus.QUOTA_EXCEEDED),
            typebox_1.Type.Literal(FlowRunStatus.TIMEOUT),
            typebox_1.Type.Literal(FlowRunStatus.INTERNAL_ERROR),
            typebox_1.Type.Literal(FlowRunStatus.STOPPED),
        ]) }, BaseExecutiionResponse)),
]);
//# sourceMappingURL=flow-execution.js.map