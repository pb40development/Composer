"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFileAction = exports.filesOutput = void 0;
const tslib_1 = require("tslib");
const pieces_framework_1 = require("@activepieces/pieces-framework");
exports.filesOutput = {
    Text: 'text',
    Base64: 'base64',
};
exports.readFileAction = (0, pieces_framework_1.createAction)({
    name: 'read_file',
    displayName: 'Read File',
    description: 'Read a file from the file system',
    errorHandlingOptions: {
        continueOnFailure: {
            hide: true,
        },
        retryOnFailure: {
            hide: true,
        },
    },
    props: {
        file: pieces_framework_1.Property.File({
            displayName: 'File',
            required: true,
        }),
        readOptions: pieces_framework_1.Property.StaticDropdown({
            displayName: 'Output format',
            description: 'The output format',
            required: true,
            options: {
                options: [
                    { label: 'Text', value: exports.filesOutput.Text },
                    { label: 'Base64', value: exports.filesOutput.Base64 },
                ],
            },
        }),
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const file = context.propsValue.file;
            const readOptions = context.propsValue.readOptions;
            switch (readOptions) {
                case exports.filesOutput.Base64:
                    return {
                        Base64: file.data.toString('base64'),
                    };
                case exports.filesOutput.Text:
                    return {
                        Text: file.data.toString('utf-8'),
                    };
                default:
                    throw new Error(`Invalid output format: ${readOptions}`);
            }
        });
    },
});
//# sourceMappingURL=read-file.js.map